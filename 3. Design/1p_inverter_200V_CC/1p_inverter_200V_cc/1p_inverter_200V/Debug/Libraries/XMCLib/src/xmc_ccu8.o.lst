   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_ccu8.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_CCU8_StartPrescaler,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_CCU8_StartPrescaler:
  25              	.LFB130:
  26              	 .file 1 "C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc/xmc_ccu8.h"
   1:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
   2:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @file xmc_ccu8.h
   3:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @date 2016-05-20
   4:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
   5:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @cond
   6:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  **************************************************************************************************
   7:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMClib v2.1.12 - XMC Peripheral Driver Library 
   8:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
   9:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Copyright (c) 2015-2017, Infineon Technologies AG
  10:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * All rights reserved.                        
  11:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                                             
  12:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * following conditions are met:   
  14:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                                                                              
  15:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * disclaimer.                        
  17:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 
  18:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 
  21:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                                                                              
  24:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                                                                              
  32:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  **************************************************************************************************
  35:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  36:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Change History
  37:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * --------------
  38:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  39:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2015-02-20:
  40:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - Initial <br>
  41:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - Documentation updates <br>
  42:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  43:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2015-06-20:
  44:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  45:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - Added XMC_CCU8_SLICE_LoadSelector() API, to select which compare register value has to be 
  46:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *       during external load event.
  47:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  48:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2015-07-01:
  49:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - In XMC_CCU8_SLICE_CHECK_INTERRUPT macro, fixed the missing item for compare match down for
  50:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  51:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2015-07-24:
  52:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent() is updated to support XMC14 device. <br>
  53:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  54:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2015-08-17:
  55:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_PRESCALER_t enum is added to set the prescaler divider. <br>
  56:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_t is added for all the devices except XMC45 devices, t
  57:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *       shadow transfer has to happen. <br>
  58:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - XMC_CCU8_SOURCE_OUT0_t, XMC_CCU8_SOURCE_OUT1_t, XMC_CCU8_SOURCE_OUT2_t, XMC_CCU8_SOURCE_OU
  59:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *       to maps one of the ST to OUT0, OUT1, OUT3, OUT4 signals.
  60:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - In XMC_CCU8_SLICE_COMPARE_CONFIG_t structure, selector_out0, selector_out1, selector_out2,
  61:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *       added to support XMC14 devices.
  62:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - XMC_CCU8_EnableShadowTransfer() API is made as inline, to improve the speed. <br>
  63:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_EnableCascadedShadowTransfer(), XMC_CCU8_SLICE_DisableCascadedShadowTransfe
  64:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *       XMC_CCU8_SLICE_SetShadowTransferMode() API are supported for all the devices except XMC45.
  65:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  66:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2015-09-29:
  67:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - In XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_t, two more enum items are added to support exte
  68:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *       settings.
  69:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  70:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2015-10-07:
  71:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_SetTimerCompareMatchChannel1(), XMC_CCU8_SLICE_SetTimerCompareMatchChannel2
  72:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *       added to update the respective compare registers directly.
  73:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_GetEvent() is made as inline.
  74:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_MULTI_IRQ_ID_t is added to support the XMC_CCU8_SLICE_EnableMultipleEvents(
  75:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *       XMC_CCU8_SLICE_DisableMultipleEvents() APIs.
  76:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - DOC updates for the newly added APIs.
  77:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  78:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2016-03-09:
  79:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - Optimization of write only registers
  80:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  81:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2016-05-20:
  82:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - Added XMC_CCU8_SLICE_StopClearTimer()
  83:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *     - Changed XMC_CCU8_SLICE_StopTimer() and XMC_CCU8_SLICE_ClearTimer() 
  84:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
  85:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @endcond
  86:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
  87:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
  88:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** #ifndef XMC_CCU8_H
  89:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** #define XMC_CCU8_H
  90:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
  91:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**************************************************************************************************
  92:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * HEADER FILES
  93:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  **************************************************************************************************
  94:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** #include "xmc_common.h"
  95:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
  96:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(CCU80)
  97:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
  98:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** #if UC_FAMILY == XMC1
  99:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  #include "xmc1_ccu8_map.h"
 100:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
 101:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 102:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** #if UC_FAMILY == XMC4
 103:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  #include "xmc4_ccu8_map.h"
 104:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
 105:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 106:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 107:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @addtogroup XMClib XMC Peripheral Library
 108:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @{
 109:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 110:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 111:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 112:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @addtogroup CCU8
 113:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
 114:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @brief Capture Compare Unit 8 (CCU8) low level driver for XMC family of microcontrollers<br>
 115:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
 116:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The CCU8 peripheral functions play a major role in applications that need complex Pulse Width Mo
 117:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * generation, with complementary high side and low side switches, multi phase control. These funct
 118:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * with a very flexible and programmable signal conditioning scheme, make the CCU8 the must have pe
 119:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * of the art motor control, multi phase and multi level power electronics systems.\n
 120:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Each CCU8 module is comprised of four identical 16 bit Capture/Compare Timer slices, CC8y (where
 121:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * timer slice can work in compare mode or in capture mode.
 122:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
 123:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * APIs provided in this file cover the following functional blocks of CCU8:
 124:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -- Timer configuration, Capture configuration, Function/Event configuration, Interrupt configura
 125:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par Note:
 126:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 1. SLICE (APIs prefixed with e.g. XMC_CCU8_SLICE_)
 127:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 2. Module (APIs are not having any prefix e.g. XMC_CCU8_)
 128:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
 129:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par Timer(Compare mode) configuration:
 130:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This section of the LLD provides the configuration structure XMC_CCU8_SLICE_COMPARE_CONFIG_t, 
 131:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_SLICE_DEAD_TIME_CONFIG_t and the initialization functions XMC_CCU8_SLICE_CompareInit(),
 132:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
 133:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * It can be used to:
 134:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# Start and Stop the timer. (XMC_CCU8_SLICE_StartTimer(), XMC_CCU8_SLICE_StopTimer())
 135:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# Update the period, compare, Dither, Prescaler  and Passive values. (XMC_CCU8_SLICE_SetTimerPe
 136:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    XMC_CCU8_SLICE_SetTimerCompareMatch(), XMC_CCU8_SLICE_SetPrescaler(), XMC_CCU8_SLICE_SetDithe
 137:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    XMC_CCU8_SLICE_SetPassiveLevel())
 138:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# Configure the dead time.(XMC_CCU8_SLICE_SetDeadTimeValue(), XMC_CCU8_SLICE_SetDeadTimePrescal
 139:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# Enable the slices to support multichannel mode. (XMC_CCU8_SLICE_EnableMultiChannelMode())
 140:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 
 141:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par Capture configuration:
 142:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This section of the LLD provides the configuration structure XMC_CCU8_SLICE_CAPTURE_CONFIG_t and
 143:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * function XMC_CCU8_SLICE_CaptureInit().
 144:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
 145:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * It can be used to:
 146:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# Configure the capture functionality. (XMC_CCU8_SLICE_Capture0Config(), XMC_CCU8_SLICE_Capture
 147:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# Read the captured values along with the status, which indicate the value is latest or not.
 148:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    (XMC_CCU8_SLICE_GetCaptureRegisterValue())
 149:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 
 150:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par Function/Event configuration:
 151:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This section of the LLD provides the configuration structure XMC_CCU8_SLICE_EVENT_CONFIG_t.
 152:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 
 153:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * It can be used to:
 154:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# Enable and Disable the events. (XMC_CCU8_SLICE_EnableEvent(), XMC_CCU8_SLICE_DisableEvent())
 155:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# Configure to start and stop the timer on external events.(XMC_CCU8_SLICE_StartConfig(), XMC_C
 156:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# Modulation, external load and Gating of the timer output.(XMC_CCU8_SLICE_ModulationConfig(), 
 157:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    XMC_CCU8_SLICE_LoadConfig(), XMC_CCU8_SLICE_GateConfig())
 158:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# Control the count direction of the timer based on the external event. (XMC_CCU8_SLICE_Directi
 159:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# Count the external events.(XMC_CCU8_SLICE_CountConfig())
 160:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * -# External Trap. Which can be used as protective feature.(XMC_CCU8_SLICE_EnableTrap(), XMC_CCU8
 161:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    XMC_CCU8_SLICE_TrapConfig())
 162:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
 163:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par Interrupt configuration:
 164:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This section of the LLD provides the function to configure the interrupt node to each event (XMC
 165:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
 166:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @{
 167:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 168:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 169:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**************************************************************************************************
 170:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * MACROS
 171:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  **************************************************************************************************
 172:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** #define XMC_CCU8_SLICE_CHECK_INTERRUPT(interrupt) \
 173:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****     ((interrupt == XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH)           || \
 174:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH)              || \
 175:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1)  || \
 176:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1)|| \
 177:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2)  || \
 178:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2)|| \
 179:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_EVENT0)                 || \
 180:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_EVENT1)                 || \
 181:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_EVENT2)                 || \
 182:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_TRAP))
 183:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****      
 184:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /* Macro to check if the slice ptr passed is valid */
 185:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** #define XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(cmp_channel) \
 186:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****     ((cmp_channel == XMC_CCU8_SLICE_COMPARE_CHANNEL_1) || \
 187:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****      (cmp_channel == XMC_CCU8_SLICE_COMPARE_CHANNEL_2))
 188:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 189:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**************************************************************************************************
 190:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * ENUMS
 191:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  **************************************************************************************************
 192:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 193:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 194:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Typedef for CCU8 Global data structure
 195:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 196:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef CCU8_GLOBAL_TypeDef XMC_CCU8_MODULE_t;
 197:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 198:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 199:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Typedef for CCU8 Slice data structure
 200:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 201:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef CCU8_CC8_TypeDef XMC_CCU8_SLICE_t;
 202:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 203:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 204:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Return Value of an API
 205:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 206:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_STATUS
 207:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 208:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_STATUS_OK      = 0U, /**< API fulfils request */
 209:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_STATUS_ERROR       , /**< API cannot fulfil request */
 210:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_STATUS_RUNNING     , /**< The timer slice is currently running */
 211:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_STATUS_IDLE          /**< The timer slice is currently idle */
 212:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_STATUS_t;
 213:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 214:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 215:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * CCU8 module clock
 216:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 217:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_CLOCK
 218:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 219:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_CLOCK_SCU        = 0U, /**< Select the fCCU as the clock */
 220:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_CLOCK_EXTERNAL_A     , /**< External clock-A */
 221:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_CLOCK_EXTERNAL_B     , /**< External clock-B */
 222:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_CLOCK_EXTERNAL_C       /**< External clock-C */
 223:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_CLOCK_t;
 224:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 225:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 226:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * CCU8 set the shadow transfer type for multichannel mode
 227:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 228:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER
 229:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 230:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE0       = (uint32_t)0x4000000, /**< Shadow transfe
 231:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                      only for slice
 232:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE0  = (uint32_t)0x4000400, /**< Shadow transfe
 233:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                      and hardware f
 234:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE1       = (uint32_t)0x8000000, /**< Shadow transfe
 235:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                      only for slice
 236:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE1  = (uint32_t)0x8000800, /**< Shadow transfe
 237:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                      and hardware f
 238:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE2       = (uint32_t)0x10000000, /**< Shadow transf
 239:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                       only for slic
 240:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE2  = (uint32_t)0x10001000, /**< Shadow transf
 241:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                       and hardware 
 242:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE3       = (uint32_t)0x20000000, /**< Shadow transf
 243:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                       only for slic
 244:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE3  = (uint32_t)0x20002000  /**< Shadow transf
 245:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                       and hardware 
 246:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_t;
 247:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 248:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 249:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Operational modes of CCU8 slice
 250:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 251:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_MODE
 252:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 253:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODE_COMPARE  = 0U, /**< slice(CC8y) operates in Compare Mode */
 254:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODE_CAPTURE        /**< slice(CC8y) operates in Capture Mode */
 255:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_MODE_t;
 256:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 257:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 258:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Slice Output selection
 259:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 260:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_OUTPUT
 261:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 262:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_OUTPUT_0  = 1U, /**< Slice Output-0 */
 263:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_OUTPUT_1  = 2U, /**< Slice Output-1 */
 264:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_OUTPUT_2  = 4U, /**< Slice Output-2 */
 265:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_OUTPUT_3  = 8U  /**< Slice Output-3 */
 266:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_OUTPUT_t;
 267:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 268:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 269:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Timer counting modes for the slice
 270:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 271:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_TIMER_COUNT_MODE
 272:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 273:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_COUNT_MODE_EA  = 0U, /**< Edge Aligned Mode */
 274:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_COUNT_MODE_CA        /**< Centre Aligned Mode */
 275:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_TIMER_COUNT_MODE_t;
 276:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 277:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 278:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Timer repetition mode for the slice
 279:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 280:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_TIMER_REPEAT_MODE
 281:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 282:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_REPEAT_MODE_REPEAT = 0U, /**< Repetitive mode: continuous mode of operation 
 283:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_REPEAT_MODE_SINGLE       /**< Single shot mode: Once a Period match/One matc
 284:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                      occurs timer goes to idle state */
 285:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_TIMER_REPEAT_MODE_t;
 286:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 287:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 288:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Timer counting direction for the CCU8 slice
 289:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 290:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_TIMER_COUNT_DIR
 291:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 292:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_COUNT_DIR_UP   = 0U, /**< Counting up */
 293:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_COUNT_DIR_DOWN       /**< Counting down */
 294:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_TIMER_COUNT_DIR_t;
 295:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 296:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 297:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Capture mode register sets
 298:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 299:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_CAP_REG_SET
 300:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 301:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_CAP_REG_SET_LOW  = 0U, /**< Capture register-0, Capture register-1 used */
 302:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_CAP_REG_SET_HIGH       /**< Capture register-0, Capture register-1 used */
 303:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_CAP_REG_SET_t;
 304:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 305:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 306:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Prescaler mode
 307:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 308:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_PRESCALER_MODE
 309:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 310:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_MODE_NORMAL = 0U, /**< Fixed division of module clock */
 311:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_MODE_FLOAT        /**< Floating divider */
 312:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_PRESCALER_MODE_t;
 313:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 314:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 315:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Timer output passive level
 316:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 317:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL
 318:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 319:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_LOW  = 0U, /**< Passive level = Low */
 320:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_HIGH       /**< Passive level = High */
 321:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_t;
 322:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 323:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 324:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Compare Channel selection
 325:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 326:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_COMPARE_CHANNEL
 327:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 328:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_COMPARE_CHANNEL_1  = 0U, /**< Compare Channel-1 */
 329:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_COMPARE_CHANNEL_2        /**< Compare Channel-2 */
 330:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_COMPARE_CHANNEL_t;
 331:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 332:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 333:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Timer clock Divider
 334:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 335:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_PRESCALER
 336:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 337:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_1  = 0U, /**< Slice Clock = fccu8 */
 338:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_2      , /**< Slice Clock = fccu8/2 */
 339:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_4      , /**< Slice Clock = fccu8/4 */
 340:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_8      , /**< Slice Clock = fccu8/8 */
 341:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_16     , /**< Slice Clock = fccu8/16 */
 342:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_32     , /**< Slice Clock = fccu8/32 */
 343:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_64     , /**< Slice Clock = fccu8/64 */
 344:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_128    , /**< Slice Clock = fccu8/128 */
 345:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_256    , /**< Slice Clock = fccu8/256 */
 346:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_512    , /**< Slice Clock = fccu8/512 */
 347:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_1024   , /**< Slice Clock = fccu8/1024 */
 348:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_2048   , /**< Slice Clock = fccu8/2048 */
 349:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_4096   , /**< Slice Clock = fccu8/4096 */
 350:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_8192   , /**< Slice Clock = fccu8/8192 */
 351:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_16384  , /**< Slice Clock = fccu8/16384 */
 352:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_32768    /**< Slice Clock = fccu8/32768 */
 353:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_PRESCALER_t;
 354:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 355:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 356:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Dead Time Generator Clock Divider
 357:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 358:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_DTC_DIV
 359:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 360:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_DTC_DIV_1  = 0U, /**< DTC clock = Slice Clock */
 361:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_DTC_DIV_2      , /**< DTC clock = Slice Clock/2 */
 362:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_DTC_DIV_4      , /**< DTC clock = Slice Clock/4 */
 363:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_DTC_DIV_8        /**< DTC clock = Slice Clock/8 */
 364:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_DTC_DIV_t;
 365:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 366:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 367:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 368:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  The compare channel output which is routed to the slice output signal(STy).
 369:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 370:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_STATUS
 371:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 372:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_STATUS_CHANNEL_1        = 0U, /**< Channel-1 status connected to Slice Status */
 373:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_STATUS_CHANNEL_2            , /**< Channel-2 status connected to Slice Status */
 374:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_STATUS_CHANNEL_1_AND_2      , /**< \b Wired \b AND of Channel-1 and Channel-2 stat
 375:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                     Slice status */
 376:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** #if ((UC_SERIES == XMC13) || (UC_SERIES == XMC14)) || defined(DOXYGEN)
 377:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_STATUS_CHANNEL_1_OR_2         /**< \b Wired \b OR of Channel-1 and Channel-2 statu
 378:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                     status. @note Only available for XMC1300 and XM
 379:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
 380:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_STATUS_t;
 381:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 382:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 383:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Compare channel for which modulation has to be applied
 384:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 385:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_MODULATION_CHANNEL
 386:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 387:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODULATION_CHANNEL_NONE  = 0U, /**< No modulation */
 388:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODULATION_CHANNEL_1         , /**< Modulation for Compare Channel-1 */
 389:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODULATION_CHANNEL_2         , /**< Modulation for Compare Channel-2 */
 390:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODULATION_CHANNEL_1_AND_2     /**< Modulation for Compare Channel-1 and Compare C
 391:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_MODULATION_CHANNEL_t;
 392:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 393:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 394:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  External Function list
 395:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 396:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_FUNCTION
 397:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 398:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_START           = 0U, /**< Start function */
 399:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_STOP                , /**< Stop function */
 400:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_CAPTURE_EVENT0      , /**< Capture Event-0 function, CCycapt0 signal is u
 401:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                      generation */
 402:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_CAPTURE_EVENT1      , /**< Capture Event-1 function, CCycapt1 signal is u
 403:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                      generation */
 404:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_GATING              , /**< Gating function */
 405:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_DIRECTION           , /**< Direction function */
 406:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_LOAD                , /**< Load function */
 407:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_COUNT               , /**< Counting function */
 408:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_OVERRIDE            , /**< Override function */
 409:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_MODULATION          , /**< Modulation function */
 410:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_TRAP                  /**< Trap function */
 411:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_FUNCTION_t;
 412:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 413:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 414:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  External Event list
 415:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 416:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_EVENT
 417:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 418:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_NONE  = 0U, /**< None */
 419:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_0         , /**< Event-0 */
 420:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_1         , /**< Event-1 */
 421:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_2           /**< Event-2 */
 422:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_EVENT_t;
 423:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 424:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 425:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  External Event trigger criteria  - Edge sensitivity
 426:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 427:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY
 428:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 429:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_NONE          = 0U, /**< None */
 430:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_RISING_EDGE       , /**< Rising Edge of the input signal ge
 431:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                  event trigger */
 432:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_FALLING_EDGE      , /**< Falling Edge of the input signal g
 433:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                  trigger */
 434:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_DUAL_EDGE           /**< Both Rising and Falling edges caus
 435:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_t;
 436:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 437:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 438:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  External Event trigger criteria  - Level sensitivity
 439:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 440:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY
 441:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 442:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH = 0U, /**< Level sensitive functions react to 
 443:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW  = 1U, /**< Level sensitive functions react to 
 444:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****     /* Below enum items can be utilised specific to the functionality */
 445:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_COUNT_UP_ON_LOW = 0U, /**< Timer counts up, during Low sta
 446:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_COUNT_UP_ON_HIGH = 1U /**< Timer counts up, during High st
 447:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_t;
 448:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 449:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 450:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Low pass filter Configuration. The External Event input should be stable for a selected number 
 451:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 452:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_EVENT_FILTER
 453:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 454:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_FILTER_DISABLED  = 0U, /**< No Low Pass Filtering is applied */
 455:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_FILTER_3_CYCLES      , /**< Input should be stable for 3 clock cycles */
 456:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_FILTER_5_CYCLES      , /**< Input should be stable for 5 clock cycles */
 457:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_FILTER_7_CYCLES        /**< Input should be stable for 7 clock cycles */
 458:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_EVENT_FILTER_t;
 459:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 460:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 461:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  External Event Input list. This list depicts the possible input connections to the CCU8 slice.
 462:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Interconnects are specific to each device.
 463:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 464:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef uint8_t XMC_CCU8_SLICE_INPUT_t;
 465:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 466:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 467:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 468:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Actions that can be performed upon detection of an external Timer STOP event
 469:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 470:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_END_MODE
 471:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 472:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_END_MODE_TIMER_STOP       = 0U, /**< Stops the timer, without clearing TIMER regis
 473:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_END_MODE_TIMER_CLEAR          , /**< Without stopping timer, clears the TIMER regi
 474:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_END_MODE_TIMER_STOP_CLEAR       /**< Stops the timer and clears the TIMER register
 475:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_END_MODE_t;
 476:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 477:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 478:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Actions that can be performed upon detection of an external Timer START event
 479:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 480:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_START_MODE
 481:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 482:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_START_MODE_TIMER_START       = 0U, /**< Start the timer from the current count of 
 483:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR       /**< Clears the TIMER register and start the ti
 484:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_START_MODE_t;
 485:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 486:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 487:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Modulation of timer output signals
 488:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 489:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_MODULATION_MODE
 490:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 491:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_ST_OUT  = 0U, /**< Clear ST and OUT signals */
 492:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_OUT           /**< Clear only the OUT signal */
 493:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_MODULATION_MODE_t;
 494:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 495:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 496:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Trap exit mode
 497:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 498:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_TRAP_EXIT_MODE
 499:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 500:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TRAP_EXIT_MODE_AUTOMATIC = 0U, /**< Clear trap state as soon as the trap signal is
 501:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW              /**< Clear only when acknowledged by software */
 502:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_TRAP_EXIT_MODE_t;
 503:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 504:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 505:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Timer clear on capture
 506:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 507:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_TIMER_CLEAR_MODE
 508:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 509:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_CLEAR_MODE_NEVER    = 0U, /**< Never clear the timer on any capture event */
 510:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_CLEAR_MODE_CAP_HIGH     , /**< Clear only when timer value has been captured
 511:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_CLEAR_MODE_CAP_LOW      , /**< Clear only when timer value has been captured
 512:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_CLEAR_MODE_ALWAYS         /**< Always clear the timer upon detection of any 
 513:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_TIMER_CLEAR_MODE_t;
 514:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 515:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 516:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Multi Channel Shadow transfer request configuration options
 517:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 518:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_MCMS_ACTION
 519:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 520:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MCMS_ACTION_TRANSFER_PR_CR          = 0U, /**< Transfer Compare and Period Shadow 
 521:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                 the actual registers upon MCS xfer 
 522:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP     = 1U, /**< Transfer Compare, Period and Presca
 523:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                 register values to the actual regis
 524:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                 request */
 525:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP_DIT = 3U  /**< Transfer Compare, Period ,Prescaler
 526:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                 Compare register values to the actu
 527:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                 MCS xfer request */
 528:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_MCMS_ACTION_t;
 529:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 530:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 531:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Available Interrupt Event Ids
 532:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 533:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_IRQ_ID
 534:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 535:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH            = 0U , /**< Period match counting up */
 536:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH               = 1U , /**< One match counting down */
 537:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1   = 2U , /**< Compare match counting up for channel 1
 538:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1 = 3U , /**< Compare match counting down for channel
 539:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2   = 4U , /**< Compare match counting up for channel 2
 540:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2 = 5U , /**< Compare match counting down for channel
 541:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_EVENT0                  = 8U , /**< Event-0 occurrence */
 542:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_EVENT1                  = 9U , /**< Event-1 occurrence */
 543:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_EVENT2                  = 10U, /**< Event-2 occurrence */
 544:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_TRAP                    = 11U  /**< Trap occurrence */
 545:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_IRQ_ID_t;
 546:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 547:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 548:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Available Interrupt Event Ids, which is added to support multi event APIs
 549:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 550:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_MULTI_IRQ_ID
 551:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 552:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_PERIOD_MATCH            = 0x1U,   /**< Period match counting up */
 553:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_ONE_MATCH               = 0x2U,   /**< One match counting down */
 554:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_UP_CH_1   = 0x4U,   /**< Compare match counting up for 
 555:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_DOWN_CH_1 = 0x8U,   /**< Compare match counting down fo
 556:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_UP_CH_2   = 0x10U,  /**< Compare match counting up for 
 557:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_DOWN_CH_2 = 0x20U,  /**< Compare match counting down fo
 558:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_EVENT0                  = 0x100U, /**< Event-0 occurrence */
 559:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_EVENT1                  = 0x200U, /**< Event-1 occurrence */
 560:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_EVENT2                  = 0x400U, /**< Event-2 occurrence */
 561:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_MULTI_IRQ_ID_t;
 562:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 563:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 564:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Service Request Lines for CCU8. Event are mapped to these SR lines and these are used to generat
 565:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 566:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_SR_ID
 567:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 568:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_SR_ID_0    = 0U, /**< Service Request Line-0 selected  */
 569:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_SR_ID_1        , /**< Service Request Line-1 selected  */
 570:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_SR_ID_2        , /**< Service Request Line-2 selected  */
 571:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_SR_ID_3          /**< Service Request Line-3 selected  */
 572:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_SR_ID_t;
 573:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 574:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 575:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 576:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Slice shadow transfer options.
 577:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 578:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SHADOW_TRANSFER
 579:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 580:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_SLICE_0            = CCU8_GCSS_S0SE_Msk,  /**< Transfer Period, Compare 
 581:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           shadow register values to
 582:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           SLICE-0 */
 583:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_DITHER_SLICE_0     = CCU8_GCSS_S0DSE_Msk, /**< Transfer Dither compare s
 584:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           to actual register for SL
 585:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_PRESCALER_SLICE_0  = CCU8_GCSS_S0PSE_Msk, /**< Transfer Prescaler shadow
 586:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           actual register for SLICE
 587:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_SLICE_1            = CCU8_GCSS_S1SE_Msk,  /**< Transfer Period, Compare 
 588:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           shadow register values to
 589:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           SLICE-1 */
 590:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_DITHER_SLICE_1     = CCU8_GCSS_S1DSE_Msk, /**< Transfer Dither compare s
 591:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           to actual registers for S
 592:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_PRESCALER_SLICE_1  = CCU8_GCSS_S1PSE_Msk, /**< Transfer Prescaler shadow
 593:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           actual register for SLICE
 594:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_SLICE_2            = CCU8_GCSS_S2SE_Msk,  /**< Transfer Period, Compare 
 595:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           shadow register values to
 596:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           SLICE-2 */
 597:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_DITHER_SLICE_2     = CCU8_GCSS_S2DSE_Msk, /**< Transfer Dither compare s
 598:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           to actual register for SL
 599:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_PRESCALER_SLICE_2  = CCU8_GCSS_S2PSE_Msk, /**< Transfer Prescaler shadow
 600:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           actual register for SLICE
 601:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_SLICE_3            = CCU8_GCSS_S3SE_Msk,  /**< Transfer Period, Compare 
 602:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           shadow register values to
 603:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           SLICE-3 */
 604:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_DITHER_SLICE_3     = CCU8_GCSS_S3DSE_Msk, /**< Transfer Dither compare s
 605:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           to actual register for SL
 606:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_PRESCALER_SLICE_3  = CCU8_GCSS_S3PSE_Msk  /**< Transfer Prescaler shadow
 607:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                           actual register for SLICE
 608:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SHADOW_TRANSFER_t;
 609:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 610:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** #if (UC_SERIES != XMC45) || defined(DOXYGEN)
 611:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 612:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Slice shadow transfer mode options.
 613:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @note Not available for XMC4500 series
 614:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 615:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE
 616:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 617:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_IN_PERIOD_MATCH_AND_ONE_MATCH = 0U, /**< Shadow transfer is d
 618:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                One match. */
 619:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_ONLY_IN_PERIOD_MATCH = 1U,  /**< Shadow transfer is done only
 620:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_ONLY_IN_ONE_MATCH = 2U  /**< Shadow transfer is done only in 
 621:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_t;
 622:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
 623:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 624:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(CCU8V3) || defined(DOXYGEN) /* Defined for XMC1400 devices only */
 625:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 626:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Output sources for OUTy0 signal
 627:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @note Only available for XMC1400 series
 628:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 629:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  typedef enum XMC_CCU8_SOURCE_OUT0
 630:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 631:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT0_ST1      = (uint32_t)0x0, /**< CCU8yST1 signal path is connected the CCU8x.O
 632:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT0_INV_ST1  = (uint32_t)0x1, /**< Inverted CCU8yST1 signal path is connected th
 633:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT0_ST2      = (uint32_t)0x2, /**< CCU8yST2 signal path is connected the CCU8x.O
 634:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT0_INV_ST2  = (uint32_t)0x3  /**< Inverted CCU8yST2 signal path is connected th
 635:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SOURCE_OUT0_t;
 636:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 637:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 638:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Output sources for OUTy1 signal
 639:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  @note Only available for XMC1400 series
 640:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 641:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  typedef enum XMC_CCU8_SOURCE_OUT1
 642:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 643:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT1_ST1      = (uint32_t)0x1, /**< CCU8yST1 signal path is connected the CCU8x.O
 644:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT1_INV_ST1  = (uint32_t)0x0, /**< Inverted CCU8yST1 signal path is connected th
 645:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT1_ST2      = (uint32_t)0x3, /**< CCU8yST2 signal path is connected the CCU8x.O
 646:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT1_INV_ST2  = (uint32_t)0x2  /**< Inverted CCU8yST2 signal path is connected th
 647:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SOURCE_OUT1_t;
 648:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 649:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 650:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Output sources for OUTy2 signal
 651:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @note Only available for XMC1400 series
 652:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 653:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  typedef enum XMC_CCU8_SOURCE_OUT2
 654:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 655:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT2_ST2      = (uint32_t)0x0, /**< CCU8yST2 signal path is connected the CCU8x.O
 656:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT2_INV_ST2  = (uint32_t)0x1, /**< Inverted CCU8yST2 signal path is connected th
 657:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT2_ST1      = (uint32_t)0x2, /**< CCU8yST1 signal path is connected the CCU8x.O
 658:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT2_INV_ST1  = (uint32_t)0x3  /**< Inverted CCU8yST1 signal path is connected th
 659:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SOURCE_OUT2_t;
 660:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 661:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 662:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Output sources for OUTy3 signal
 663:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  @note Only available for XMC1400 series
 664:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 665:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  typedef enum XMC_CCU8_SOURCE_OUT3
 666:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 667:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT3_ST2      = (uint32_t)0x1, /**< CCU8yST2 signal path is connected the CCU8x.O
 668:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT3_INV_ST2  = (uint32_t)0x0, /**< Inverted CCU8yST2 signal path is connected th
 669:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT3_ST1      = (uint32_t)0x3, /**< CCU8yST1 signal path is connected the CCU8x.O
 670:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT3_INV_ST1  = (uint32_t)0x2  /**< Inverted CCU8yST1 signal path is connected th
 671:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SOURCE_OUT3_t;
 672:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
 673:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 674:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 675:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 676:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Output selector for CCU8x.OUT0-3
 677:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 678:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** #if !defined(CCU8V3) /* Defined for all devices except XMC1400 */
 679:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_OUT_PATH
 680:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 681:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT0_ST1      = (uint32_t)0x20000, /**< CCU8yST1 signal path is connected the C
 682:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT0_INV_ST1  = (uint32_t)0x20002, /**< Inverted CCU8yST1 signal path is connec
 683:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT1_ST1      = (uint32_t)0x40000, /**< CCU8yST1 signal path is connected the C
 684:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT1_INV_ST1  = (uint32_t)0x40004, /**< Inverted CCU8yST1 signal path is connec
 685:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT2_ST2      = (uint32_t)0x80000, /**< CCU8yST2 signal path is connected the C
 686:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT2_INV_ST2  = (uint32_t)0x80008, /**< Inverted CCU8yST2 signal path is connec
 687:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT3_ST2      = (uint32_t)0x100000,/**< CCU8yST2 signal path is connected the C
 688:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT3_INV_ST1  = (uint32_t)0x100010 /**< Inverted CCU8yST2 signal path is connec
 689:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_OUT_PATH_t;
 690:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** #else
 691:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_OUT_PATH
 692:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 693:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT0_ST1      = (uint32_t)0x000C0, /**< CCU8yST1 signal path is connected the C
 694:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT0_INV_ST1  = (uint32_t)0x000D0, /**< Inverted CCU8yST1 signal path is connec
 695:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT0_ST2      = (uint32_t)0x000E0, /**< CCU8yST2 signal path is connected the C
 696:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT0_INV_ST2  = (uint32_t)0x000F0, /**< Inverted CCU8yST2 signal path is connec
 697:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT1_ST1      = (uint32_t)0x00D00, /**< CCU8yST1 signal path is connected the C
 698:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT1_INV_ST1  = (uint32_t)0x00C00, /**< Inverted CCU8yST1 signal path is connec
 699:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT1_ST2      = (uint32_t)0x00F00, /**< CCU8yST2 signal path is connected the C
 700:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT1_INV_ST2  = (uint32_t)0x00E00, /**< Inverted CCU8yST2 signal path is connec
 701:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT2_ST2      = (uint32_t)0x0C000, /**< CCU8yST2 signal path is connected the C
 702:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT2_INV_ST2  = (uint32_t)0x0D000, /**< Inverted CCU8yST2 signal path is connec
 703:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT2_ST1      = (uint32_t)0x0E000, /**< CCU8yST1 signal path is connected the C
 704:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT2_INV_ST1  = (uint32_t)0x0F000, /**< Inverted CCU8yST1 signal path is connec
 705:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT3_ST2      = (uint32_t)0xD0000, /**< CCU8yST2 signal path is connected the C
 706:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT3_INV_ST2  = (uint32_t)0xC0000, /**< Inverted CCU8yST2 signal path is connec
 707:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT3_ST1      = (uint32_t)0xF0000, /**< CCU8yST1 signal path is connected the C
 708:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT3_INV_ST1  = (uint32_t)0xE0000  /**< Inverted CCU8yST1 signal path is connec
 709:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_OUT_PATH_t;
 710:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 711:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 712:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Immediate write into configuration register
 713:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  @note Only available for XMC1400 series
 714:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 715:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_WRITE_INTO
 716:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 717:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_WRITE_INTO_PERIOD_CONFIGURATION = CCU8_CC8_STC_IRPC_Msk,                  /**< Imm
 718:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                 Wri
 719:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                 Con
 720:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_WRITE_INTO_COMPARE1_CONFIGURATION = CCU8_CC8_STC_IRCC1_Msk,               /**< Imm
 721:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                 Wri
 722:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                 Con
 723:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_WRITE_INTO_COMPARE2_CONFIGURATION = CCU8_CC8_STC_IRCC2_Msk,               /**< Imm
 724:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                 Wri
 725:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                 Con
 726:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_WRITE_INTO_PASSIVE_LEVEL_CONFIGURATION = CCU8_CC8_STC_IRLC_Msk,           /**< Imm
 727:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                 Wri
 728:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                                                            Config
 729:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_WRITE_INTO_DITHER_VALUE_CONFIGURATION = CCU8_CC8_STC_IRDC_Msk,            /**< Imm
 730:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                 Wri
 731:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                                                            Config
 732:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_WRITE_INTO_FLOATING_PRESCALER_VALUE_CONFIGURATION = CCU8_CC8_STC_IRFC_Msk /**< Imm
 733:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                 Wri
 734:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                 Val
 735:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_WRITE_INTO_t;
 736:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 737:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 738:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 739:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Automatic Shadow Transfer request when writing into shadow register
 740:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  @note Only available for XMC1400 series
 741:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 742:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO
 743:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 744:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_PERIOD_SHADOW = CCU8_CC8_STC_ASPC_Msk,        
 745:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                                                                  
 746:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                    
 747:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                    
 748:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_COMPARE1_SHADOW = CCU8_CC8_STC_ASCC1_Msk,     
 749:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                                                                  
 750:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                                                                  
 751:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                                                                  
 752:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_COMPARE2_SHADOW = CCU8_CC8_STC_ASCC2_Msk,     
 753:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                                                                  
 754:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                                                                  
 755:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                                                                  
 756:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_PASSIVE_LEVEL = CCU8_CC8_STC_ASLC_Msk,        
 757:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                                                                  
 758:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                    
 759:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_DITHER_SHADOW = CCU8_CC8_STC_ASDC_Msk,        
 760:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                    
 761:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                    
 762:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_FLOATING_PRESCALER_SHADOW = CCU8_CC8_STC_ASFC_
 763:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                                                                  
 764:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                    
 765:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                                    
 766:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 767:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_t;
 768:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
 769:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 770:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  CCU8 slice mask which can be used for the APIs as input where multi slice support is available
 771:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 772:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_MASK
 773:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 774:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MASK_SLICE_0  = 1U , /**< SLICE-0 */
 775:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MASK_SLICE_1  = 2U , /**< SLICE-1 */
 776:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MASK_SLICE_2  = 4U , /**< SLICE-2 */
 777:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MASK_SLICE_3  = 8U   /**< SLICE-3 */
 778:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_MASK_t;
 779:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 780:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**************************************************************************************************
 781:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * DATA STRUCTURES
 782:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  **************************************************************************************************
 783:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 784:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 785:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Configuration data structure of an External Event(Event-0/1/2).
 786:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Needed to configure the various aspects of an External Event.
 787:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  This structure will not connect the external event with an external function.
 788:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 789:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef struct XMC_CCU8_SLICE_EVENT_CONFIG
 790:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 791:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_INPUT_t                   mapped_input; /**< Required input signal for the Event. 
 792:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_t  edge;         /**< Select the event edge of the input si
 793:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                               This is needed for an edge sensitive 
 794:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_t level;        /**< Select the event level of the input s
 795:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                               This is needed for an level sensitive
 796:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_FILTER_t            duration;     /**< Low Pass filter duration in terms of 
 797:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_EVENT_CONFIG_t;
 798:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 799:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /*Anonymous structure/union guard start*/
 800:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(__CC_ARM)
 801:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   #pragma push
 802:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   #pragma anon_unions
 803:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** #elif defined(__TASKING__)
 804:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   #pragma warning 586
 805:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
 806:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 807:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 808:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Dead Time configuration
 809:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 810:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef struct XMC_CCU8_SLICE_DEAD_TIME_CONFIG
 811:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 812:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   union
 813:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   {
 814:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****     struct
 815:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****     {
 816:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t enable_dead_time_channel1 : 1; /**< Enable dead time for Compare Channel-1 */
 817:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t enable_dead_time_channel2 : 1; /**< Enable dead time for Compare Channel-2 */
 818:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t channel1_st_path : 1;          /**< Should dead time be applied to ST output of Comp
 819:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t channel1_inv_st_path : 1;      /**< Should dead time be applied to inverse ST output
 820:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                    Compare Channel-1? */
 821:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t channel2_st_path : 1;          /**< Should dead time be applied to ST output of Comp
 822:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t channel2_inv_st_path : 1;      /**< Should dead time be applied to inverse ST output
 823:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                    Compare Channel-2? */
 824:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t div : 2;                       /**< Dead time prescaler divider value.
 825:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                    Accepts enum ::XMC_CCU8_SLICE_DTC_DIV_t*/
 826:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 24;
 827:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****     };
 828:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****     uint32_t dtc;
 829:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   };
 830:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   union
 831:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   {
 832:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****     struct
 833:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****     {
 834:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t channel1_st_rising_edge_counter : 8; /**< Contains the delay value that is applied t
 835:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                       for compare channel-1. Range: [0x0 to 0xFF]
 836:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t channel1_st_falling_edge_counter : 8; /**< Contains the delay value that is applied 
 837:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                        for compare channel-1. Range: [0x0 to 0xFF
 838:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 16;
 839:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****     };
 840:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****     uint32_t dc1r;
 841:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   };
 842:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   union
 843:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   {
 844:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****     struct
 845:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****     {
 846:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t channel2_st_rising_edge_counter : 8; /**< Contains the delay value that is applied t
 847:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                     for compare channel-2. Range: [0x0 to 0xFF]*/
 848:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t channel2_st_falling_edge_counter : 8; /**< Contains the delay value that is applied 
 849:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                                     for compare channel-2. Range: [0x0 to 0xFF]*/
 850:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 16;
 851:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****     };
 852:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****     uint32_t dc2r;
 853:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   };
 854:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_DEAD_TIME_CONFIG_t;
 855:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 856:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 857:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Configuration data structure for CCU8 slice. Specifically configures the CCU8 slice to compare 
 858:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  This excludes event and function configuration.
 859:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 860:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef struct XMC_CCU8_SLICE_COMPARE_CONFIG
 861:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 862:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   union
 863:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   {
 864:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****     struct
 865:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****     {
 866:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t timer_mode : 1;         /**< Edge aligned or Centre Aligned.
 867:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SLICE_TIMER_COUNT_MODE_t */
 868:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t monoshot : 1;           /**< Single shot or Continuous mode .
 869:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SLICE_TIMER_REPEAT_MODE_t */
 870:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t shadow_xfer_clear : 1; /**< Should PR and CR shadow xfer happen when timer is cleare
 871:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 10;
 872:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t dither_timer_period: 1; /**< Can the period of the timer dither? */
 873:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t dither_duty_cycle : 1;  /**< Can the compare match of the timer dither? */
 874:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 1;
 875:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t prescaler_mode: 1;      /**< Normal or floating prescaler mode.
 876:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SLICE_PRESCALER_MODE_t */
 877:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 8;
 878:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t mcm_ch1_enable : 1;     /**< Multi-Channel mode for compare channel 1 enable? */
 879:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t mcm_ch2_enable : 1;     /**< Multi-Channel mode for compare channel 2 enable? */
 880:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 2;
 881:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t slice_status : 2;       /**< Which of the two channels drives the slice status outpu
 882:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                          Accepts enum :: XMC_CCU8_SLICE_STATUS_t*/
 883:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 1;
 884:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****     };
 885:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****     uint32_t tc;
 886:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   };
 887:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   union
 888:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   {
 889:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****     struct
 890:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****     {
 891:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t passive_level_out0 : 1; /**< ST and OUT passive levels Configuration for OUT0. 
 892:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                          Accepts enum :: XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_t */
 893:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t passive_level_out1 : 1; /**< ST and OUT passive levels Configuration for OUT1. 
 894:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                          Accepts enum :: XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_t */
 895:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t passive_level_out2 : 1; /**< ST and OUT passive levels Configuration for OUT2. 
 896:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                          Accepts enum :: XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_t */
 897:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t passive_level_out3 : 1; /**< ST and OUT passive levels Configuration for OUT3. 
 898:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 	                                          Accepts enum :: XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_t */
 899:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 28;
 900:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****     };
 901:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****     uint32_t psl;
 902:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   };
 903:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   union
 904:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   {
 905:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****     struct
 906:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****     {
 907:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t asymmetric_pwm : 1;     /**< Should the PWM be a function of the 2 compare channels
 908:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             rather than period value? */
 909:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   #if !defined(CCU8V3)    /* Defined for all devices except XMC1400 */                             
 910:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t invert_out0 : 1;        /**< Should inverted ST of Channel-1 be connected to OUT0? *
 911:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t invert_out1 : 1;        /**< Should inverted ST of Channel-1 be connected to OUT1? *
 912:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t invert_out2 : 1;        /**< Should inverted ST of Channel-2 be connected to OUT2? *
 913:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t invert_out3 : 1;        /**< Should inverted ST of Channel-2 be connected to OUT3? *
 914:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 27;
 915:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   #else
 916:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 3;
 917:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t selector_out0 : 2;      /**< Connect ST or inverted ST of Channel-1 or Channel-2 be 
 918:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SOURCE_OUT0_t 
 919:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             refer OCS1 bit-field of CHC register. 
 920:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 											@note Only available for XMC1400 series */
 921:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 2;
 922:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t selector_out1 : 2;      /**< Connect ST or inverted ST of Channel-1 or Channel-2 be 
 923:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SOURCE_OUT1_t 
 924:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             refer OCS2 bit-field of CHC register. 
 925:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 											@note Only available for XMC1400 series */
 926:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 2;
 927:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t selector_out2 : 2;      /**< Connect ST or inverted ST of Channel-1 or Channel-2 be 
 928:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SOURCE_OUT2_t 
 929:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             refer OCS3 bit-field of CHC register.
 930:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 											@note Only available for XMC1400 series */
 931:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 2;
 932:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t selector_out3 : 2;      /**< Connect ST or inverted ST of Channel-1 or Channel-2 be 
 933:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SOURCE_OUT3_t 
 934:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             refer OCS4 bit-field of CHC register.
 935:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 											@note Only available for XMC1400 series */
 936:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 14;
 937:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   #endif
 938:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****     };
 939:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****     uint32_t chc;
 940:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   };
 941:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   uint32_t prescaler_initval : 4;      /**< Initial prescaler divider value 
 942:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SLICE_PRESCALER_t */
 943:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   uint32_t float_limit : 4;            /**< The max value which the prescaler divider can increment
 944:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             Range : [0 to 15] */
 945:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   uint32_t dither_limit : 4;           /**< The value that determines the spreading of dithering 
 946:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                             Range : [0 to 15] */
 947:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   uint32_t timer_concatenation : 1;    /**< Enables the concatenation of the timer if true*/
 948:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_COMPARE_CONFIG_t;
 949:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 950:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
 951:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Configuration data structure for CCU8 slice. Specifically configures the CCU8 slice to capture 
 952:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  This excludes event and function configuration.
 953:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
 954:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** typedef struct XMC_CCU8_SLICE_CAPTURE_CONFIG
 955:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 956:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   union
 957:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   {
 958:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****     struct
 959:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****     {
 960:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 4;
 961:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t fifo_enable : 1;      /**< Should the capture registers be setup as a FIFO?(Extended
 962:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t timer_clear_mode : 2; /**< How should the timer register be cleared upon detection o
 963:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                           Accepts enum ::XMC_CCU8_SLICE_TIMER_CLEAR_MODE_t */
 964:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 4;
 965:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t same_event : 1;       /**< Should the capture event for C1V/C0V and C3V/C2V be same 
 966:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t ignore_full_flag : 1; /**< Should updates to capture registers follow full flag rule
 967:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 3;
 968:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t prescaler_mode: 1;    /**< Normal or floating prescaler Accepts enum :: XMC_CCU8_SLI
 969:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****       uint32_t : 15;
 970:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****     };
 971:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****     uint32_t tc;
 972:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   };
 973:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   uint32_t prescaler_initval : 4;    /**< Prescaler divider value */
 974:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   uint32_t float_limit : 4;          /**< The max value which the prescaler divider can increment t
 975:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   uint32_t timer_concatenation : 1;    /**< Enables the concatenation of the timer */
 976:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_CAPTURE_CONFIG_t;
 977:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /*Anonymous structure/union guard end*/
 978:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(__CC_ARM)
 979:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   #pragma pop
 980:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** #elif defined(__TASKING__)
 981:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   #pragma warning restore
 982:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
 983:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**************************************************************************************************
 984:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * API Prototypes
 985:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  **************************************************************************************************
 986:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** #ifdef __cplusplus
 987:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** extern "C" {
 988:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
 989:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
 990:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_IsValidModule(const XMC_CCU8_MODULE_t *const module)
 991:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 992:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   bool tmp = false;
 993:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   
 994:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   tmp = (module == CCU80);
 995:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   
 996:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(CCU81)
 997:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   tmp = tmp || (module == CCU81);
 998:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
 999:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   
1000:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   return tmp;  
1001:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** } 
1002:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1003:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_IsValidSlice(const XMC_CCU8_SLICE_t *const slice)
1004:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1005:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   bool tmp = false;
1006:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   
1007:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   tmp = (slice == CCU80_CC80);
1008:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(CCU80_CC81)  
1009:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   tmp = tmp || (slice == CCU80_CC81);
1010:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
1011:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(CCU80_CC82)  
1012:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   tmp = tmp || (slice == CCU80_CC82);
1013:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
1014:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(CCU80_CC83)  
1015:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   tmp = tmp || (slice == CCU80_CC83);
1016:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
1017:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(CCU81)  
1018:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   tmp = tmp || (slice == CCU81_CC80);
1019:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(CCU81_CC81)  
1020:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   tmp = tmp || (slice == CCU81_CC81);
1021:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
1022:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(CCU81_CC82)  
1023:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   tmp = tmp || (slice == CCU81_CC82);
1024:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
1025:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(CCU81_CC83)  
1026:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   tmp = tmp || (slice == CCU81_CC83);
1027:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
1028:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif 
1029:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  
1030:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   return tmp;  
1031:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** } 
1032:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1033:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1034:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1035:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param mcs_action multi-channel shadow transfer request configuration
1036:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1037:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1038:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1039:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1040:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Initialization of global register GCTRL.\n\n
1041:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  As part of module initialization, behaviour of the module upon detection
1042:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Multi-Channel Mode trigger is configured. Will also invoke the XMC_CCU8_EnableModule().
1043:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  The API call would bring up the required CCU8 module and also initialize the module for
1044:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  the required multi-channel shadow transfer.
1045:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1046:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1047:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_SLICE_CompareInit()<BR> XMC_CCU8_SLICE_CaptureInit().
1048:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1049:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_Init(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SLICE_MCMS_ACTION_t mcs_action);
1050:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1051:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1052:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1053:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1054:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1055:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1056:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1057:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Enables the CCU8 module and brings it to active state.\n\n
1058:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Also disables the gating of the clock signal (if applicable depending on the device being select
1059:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Invoke this API before any operations are done on the CCU8 module. Invoked from  XMC_CCU8_Init()
1060:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1061:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1062:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_SetModuleClock()<BR>  XMC_CCU8_DisableModule()<BR>  XMC_CCU8_StartPrescaler().
1063:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1064:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_EnableModule(XMC_CCU8_MODULE_t *const module);
1065:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1066:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1067:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1068:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1069:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1070:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1071:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1072:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Brings the CCU8 module to reset state and enables gating of the clock signal(if applicable depen
1073:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * on the device being selected).\n\n
1074:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Invoke this API when a CCU8 module needs to be disabled completely.
1075:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Any operation on the CCU8 module will have no effect after this API is called.
1076:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1077:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1078:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_EnableModule()<BR> XMC_CCU8_DisableModule().
1079:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1080:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_DisableModule(XMC_CCU8_MODULE_t *const module);
1081:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1082:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1083:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1084:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param clock Choice of input clock to the module
1085:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1086:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1087:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1088:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1089:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Selects the Module Clock by configuring GCTRL.PCIS bits.\n\n
1090:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  There are 3 potential clock sources. This API helps to select the required clock source.
1091:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Call to this API is valid after the XMC_CCU8_Init().
1092:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1093:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1094:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * None.<BR>
1095:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1096:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SetModuleClock(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_CLOCK_t clock);
1097:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1098:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1099:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1100:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1101:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1102:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1103:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1104:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1105:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Starts the prescaler and restores clocks to the timer slices, by setting GIDLC.SPRB bit.<br>\n
1106:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Once the input to the prescaler has been chosen and the prescaler divider of all slices program
1107:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  the prescaler itself may be started. Invoke this  API after XMC_CCU8_Init()
1108:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  (Mandatory to fully initialize the module).
1109:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1110:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1111:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPres
1112:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_StopPrescaler().
1113:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1114:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
1115:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
  27              	 .loc 1 1115 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
1116:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
1117:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   module->GIDLC |= (uint32_t) CCU8_GIDLC_SPRB_Msk;
  43              	 .loc 1 1117 0
  44 0008 7B68     	 ldr r3,[r7,#4]
  45 000a DB68     	 ldr r3,[r3,#12]
  46 000c 43F48072 	 orr r2,r3,#256
  47 0010 7B68     	 ldr r3,[r7,#4]
  48 0012 DA60     	 str r2,[r3,#12]
1118:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** }
  49              	 .loc 1 1118 0
  50 0014 0C37     	 adds r7,r7,#12
  51              	.LCFI3:
  52              	 .cfi_def_cfa_offset 4
  53 0016 BD46     	 mov sp,r7
  54              	.LCFI4:
  55              	 .cfi_def_cfa_register 13
  56              	 
  57 0018 5DF8047B 	 ldr r7,[sp],#4
  58              	.LCFI5:
  59              	 .cfi_restore 7
  60              	 .cfi_def_cfa_offset 0
  61 001c 7047     	 bx lr
  62              	 .cfi_endproc
  63              	.LFE130:
  65 001e 00BF     	 .section .text.XMC_CCU8_SLICE_StopTimer,"ax",%progbits
  66              	 .align 2
  67              	 .thumb
  68              	 .thumb_func
  70              	XMC_CCU8_SLICE_StopTimer:
  71              	.LFB144:
1119:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1120:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1121:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1122:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1123:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1124:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1125:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1126:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Stops the prescaler and blocks clocks to the timer slices, by setting GIDLS.CPRB bit.\n\n
1127:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Clears the run bit of the prescaler. Ensures that the module clock is not supplied to
1128:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * the slices of the module.
1129:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1130:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1131:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR>  XMC_CCU8
1132:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1133:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_StopPrescaler(XMC_CCU8_MODULE_t *const module)
1134:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1135:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_StopPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
1136:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   module->GIDLS |= (uint32_t) CCU8_GIDLS_CPRB_Msk;
1137:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1138:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1139:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1140:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1141:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1142:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1143:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1144:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1145:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Returns the state of the prescaler, by reading GSTAT.PRB bit.\n\n
1146:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * If clock is being supplied to the slices of the  module then returns as true. 
1147:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1148:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1149:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_StartPrescaler()<BR>  XMC_CCU8_StopPrescaler()<BR> XMC_CCU8_EnableClock()<BR>  XMC_CCU8
1150:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1151:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_IsPrescalerRunning(XMC_CCU8_MODULE_t *const module)
1152:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1153:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_IsPrescalerRunning:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
1154:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   return((bool)((module->GSTAT & (uint32_t) CCU8_GSTAT_PRB_Msk) == CCU8_GSTAT_PRB_Msk));
1155:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1156:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1157:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1158:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1159:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param clock_mask Slices whose clocks are to be enabled simultaneously.
1160:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   Bit location 0/1/2/3 represents slice-0/1/2/3 respectively. 
1161:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   Range: [0x1 to 0xF]
1162:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1163:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1164:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1165:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1166:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Enables clocks of multiple slices at a time, by configuring GIDLC.CS0I, GIDLC.CS1I, GIDLC.CS2I, 
1167:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * GIDLC.CS3I bits.\n\n
1168:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Takes an input clock_mask, which determines the slices that would receive the clock. Bring them 
1169:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * of the idle state simultaneously.
1170:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1171:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1172:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock().
1173:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1174:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_EnableMultipleClocks(XMC_CCU8_MODULE_t *const module, const uint8_t c
1175:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1176:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_EnableMultipleClocks:Invalid Module Pointer", XMC_CCU8_IsValidModule(module)
1177:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_EnableMultipleClocks:Invalid clock mask", (clock_mask < 16U));
1178:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1179:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   module->GIDLC |= (uint32_t) clock_mask;
1180:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1181:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1182:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1183:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1184:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param compare_init Pointer to slice configuration structure
1185:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1186:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1187:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1188:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1189:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Initialization of a CC8 slice to compare mode, by configuring CC8yTC, CC8yCMC, CC8yPSC, CC8yDITH
1190:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * CC8yFPCS, CC8yCHC registers.\n\n
1191:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * CC8 slice is configured with Timer configurations in this routine. Timer is stopped before initi
1192:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * by calling XMC_CCU8_SLICE_StopTimer(). After initialization user has to explicitly enable
1193:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * the shadow transfer for the required values by calling XMC_CCU8_EnableShadowTransfer() with appr
1194:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1195:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1196:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * None.
1197:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1198:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_CompareInit(XMC_CCU8_SLICE_t *const slice,
1199:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                 const XMC_CCU8_SLICE_COMPARE_CONFIG_t *const compare_init);
1200:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1201:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1202:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1203:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param capture_init Pointer to slice configuration structure
1204:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1205:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1206:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1207:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1208:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Initialization of a CC8 slice to capture mode, by configuring CC8yTC, CC8yCMC, CC8yPSC,CC8yFPCS 
1209:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * CC8 slice is configured with Capture configurations in  this routine. Timer is stopped before in
1210:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * by calling XMC_CCU8_SLICE_StopTimer(). After initialization user has to explicitly enable the sh
1211:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * for the required  values by calling XMC_CCU8_EnableShadowTransfer() with appropriate mask. 
1212:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1213:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1214:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_SLICE_Capture0Config()<BR>  XMC_CCU8_SLICE_Capture1Config().
1215:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1216:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_CaptureInit(XMC_CCU8_SLICE_t *const slice,
1217:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                 const XMC_CCU8_SLICE_CAPTURE_CONFIG_t *const capture_init);
1218:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1219:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1220:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1221:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice_number Slice for which the clock should be Enabled.
1222:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   Range: [0x0 to 0x3]
1223:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1224:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1225:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1226:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1227:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Enables the slice timer clock, by configuring GIDLC.CS0I, GIDLC.CS1I, GIDLC.CS2I, 
1228:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  GIDLC.CS3I bits according to the selected \a slice_number.\n\n
1229:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  It is possible to enable/disable clock at slice level. This uses the \b slice_number to indicat
1230:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  slice whose clock needs to be enabled. Directly accessed register is GIDLC.
1231:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1232:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1233:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_DisableClock()<BR>  XMC_CCU8_EnableMultipleClocks()<BR>  XMC_CCU8_StartPrescaler()<BR> 
1234:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1235:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_EnableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_numb
1236:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1237:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
1238:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Slice Number", (slice_number < 4U));
1239:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1240:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   module->GIDLC |= ((uint32_t) 1 << slice_number);
1241:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1242:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1243:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1244:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1245:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice_number Slice for which the clock should be disabled.
1246:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   Range: [0x0 to 0x3]
1247:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1248:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1249:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1250:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1251:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Disables the slice timer clock, by configuring GIDLS.SS0I, GIDLS.SSS1I, GIDLS.SSS2I, 
1252:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * GIDLS.SSS3I bits according to the selected \a slice_number .\n\n
1253:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * It is possible to disable clock at slice level using the module pointer.
1254:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \b slice_number is used to disable the clock to a given slice of the module.
1255:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1256:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1257:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_EnableClock()<BR>  XMC_CCU8_EnableMultipleClocks()<BR>  XMC_CCU8_StartPrescaler()<BR>  
1258:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1259:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_DisableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_num
1260:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1261:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_DisableClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
1262:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_DisableClock:Invalid Slice Number", (slice_number < 4U));
1263:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1264:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   module->GIDLS |= ((uint32_t) 1 << slice_number);
1265:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1266:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1267:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1268:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1269:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param out_path_msk configuration for output path selection.
1270:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *        combination of XMC_CCU8_OUT_PATH_t enum items can be used to create a mask.
1271:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 
1272:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1273:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1274:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1275:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1276:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configure the out the path of the two compare channels with specified ST signal, by configuring 
1277:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  ^ CC8yCHC register.\n\n
1278:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 
1279:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * For the two compare channels it is possible to select either direct ST signal or inverted ST sig
1280:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \b out_path_msk is used to set the required out put path.
1281:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1282:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1283:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * None
1284:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** */
1285:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_SetOutPath(XMC_CCU8_SLICE_t *const slice, const uint32_t out_path_msk);
1286:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1287:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1288:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1289:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event Map an External event to the External Start Function
1290:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param start_mode Behaviour of slice when the start function is activated
1291:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1292:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1293:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1294:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1295:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Configures the Start Function of the slice, by configuring CC8yCMC.ENDS and CC8yTC.ENDM bits.\n
1296:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Start function is mapped with one of the 3 events. An external signal can control when a CC8 ti
1297:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Additionally, the behaviour of the slice upon activation of the start function is configured as
1298:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1299:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1300:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_SLICE_StopConfig()<BR>  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1301:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1302:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_StartConfig(XMC_CCU8_SLICE_t *const slice,
1303:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                 const XMC_CCU8_SLICE_EVENT_t event,
1304:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                 const XMC_CCU8_SLICE_START_MODE_t start_mode);
1305:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1306:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1307:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1308:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event Map an External event to the External Stop Function
1309:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param end_mode Behaviour of slice when the stop function is activated
1310:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1311:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1312:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1313:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1314:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures the Stop function for the slice, by configuring CC8yCMC.STRTS and CC8yTC.STRM bits.\n
1315:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Stop function is mapped with one of the 3 events. An external signal can control when a CCU8 tim
1316:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Additionally, the behaviour of the slice upon activation of the stop function is configured as w
1317:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1318:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1319:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_SLICE_StartConfig()<BR>  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput()
1320:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1321:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_StopConfig(XMC_CCU8_SLICE_t *const slice,
1322:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                const XMC_CCU8_SLICE_EVENT_t event,
1323:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                const XMC_CCU8_SLICE_END_MODE_t end_mode);
1324:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1325:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1326:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1327:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event Map an External event to the External load Function
1328:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1329:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1330:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1331:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1332:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Configures the Load Function for the slice, by configuring CC8yCMC.LDS bit.\n\n
1333:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Load function is mapped with one of the 3 events. Up on occurrence of the event,\n
1334:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  if CC8yTCST.CDIR set to 0,CC8yTIMER register is reloaded with the value from compare channel 1 
1335:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                            compare channel 2\n
1336:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  if CC8yTCST.CDIR set to 1,CC8yTIMER register is reloaded with the value from period register\n
1337:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  
1338:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1339:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1340:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1341:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1342:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_LoadConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event);
1343:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1344:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1345:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1346:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param ch_num Select which compare channel value has to be loaded to the Timer register during e
1347:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1348:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1349:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1350:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1351:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Up on occurrence of the external load event, if CC8yTCST.CDIR set to 0, CC8yTIMER register can 
1352:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  with the value from compare channel 1 or compare channel 2\n
1353:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  If CC8yTC.TLS is 0, compare channel 1 value is loaded to the CC8yTIMER register\n
1354:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  If CC8yTC.TLS is 1, compare channel 2 value is loaded to the CC8yTIMER register\n
1355:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1356:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1357:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1358:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1359:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_LoadSelector(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_COMPARE_CHANNE
1360:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1361:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1362:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1363:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event Map an External event to the External Modulation Function
1364:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param mod_mode Desired Modulation mode
1365:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param channel Specify the channel(s) on which the modulation should be applied.
1366:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param synch_with_pwm Option to synchronize modulation with PWM start
1367:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                       Pass \b true if the modulation needs to be synchronized with PWM signal.
1368:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1369:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1370:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1371:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1372:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures the Output Modulation Function of the slice, by configuring CC8yCMC.MOS, CC8yTC.EMT a
1373:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * CC8yTC.EMS bits.\n\n
1374:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Modulation function is mapped with one of the 3 events. The output signal of the CCU can
1375:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * be modulated according to a external input.  Additionally, the behaviour of the slice upon activ
1376:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * of the modulation function is configured as well.
1377:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1378:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1379:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1380:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1381:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_ModulationConfig(XMC_CCU8_SLICE_t *const slice,
1382:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                      const XMC_CCU8_SLICE_EVENT_t event,
1383:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                      const XMC_CCU8_SLICE_MODULATION_MODE_t mod_mode,
1384:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                      const XMC_CCU8_SLICE_MODULATION_CHANNEL_t channel, 
1385:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                      const bool synch_with_pwm
1386:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                      );
1387:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1388:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1389:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1390:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event Map an External event to the External Count Function
1391:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1392:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1393:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1394:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1395:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures the Count Function of the slice, by configuring CC8yCMC.CNTS bit.\n\n
1396:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Count function is mapped with one of the 3 events. CCU8 slice can take an external
1397:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * signal to act as the counting event. The CCU8 slice would count the
1398:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * edges present on the \b event selected. 
1399:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1400:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1401:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1402:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1403:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_CountConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event);
1404:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1405:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1406:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1407:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event  Map an External event to the External Gating Function
1408:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1409:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1410:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1411:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1412:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures the Gating Function of the slice, by configuring CC8yCMC.GATES bit.\n\n
1413:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Gating function is mapped with one of the 3 events.  A CCU8 slice can use an input signal that w
1414:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * operate as counter gating. If the configured Active level is detected the counter will gate all 
1415:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1416:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1417:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1418:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1419:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_GateConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event);
1420:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1421:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1422:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1423:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event Map an External event to the Capture-0 Function
1424:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1425:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1426:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1427:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1428:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures the Capture-0 Function of the slice, by configuring CC8yCMC.CAP0S bit.\n\n
1429:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Capture function is mapped with one of the 3 events.  A CCU8 slice can be configured into captur
1430:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * with the selected \b event. In this mode the CCU8 will capture the timer value into CC8yC0V and 
1431:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1432:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1433:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1434:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1435:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_Capture0Config(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t even
1436:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1437:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1438:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1439:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event Map an External event to the Capture-1 Function
1440:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1441:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1442:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1443:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1444:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures the Capture-1 Function of the slice, by configuring CC8yCMC.CAP1S bit.\n\n
1445:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Capture function is mapped with one of the 3 events. A CCU8 slice can be configured into capture
1446:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * mode with the selected \b event. In this mode the CCU8 will capture the timer value into CC8yC2V
1447:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1448:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1449:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1450:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1451:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_Capture1Config(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t even
1452:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1453:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1454:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1455:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1456:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    bool would return true if the extended capture read back mode is enabled<BR>
1457:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1458:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1459:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Checks if Extended capture mode read is enabled for particular slice or not, by reading CC8yTC.E
1460:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * In this mode the there is only one associated read address for all the capture registers.
1461:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Individual capture registers can still be accessed in this mode.
1462:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1463:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1464:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_GetCapturedValueFromFifo().
1465:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1466:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_SLICE_IsExtendedCapReadEnabled(const XMC_CCU8_SLICE_t *const slice)
1467:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1468:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_IsPrescalerRunning:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1469:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   return((bool)((slice->TC & (uint32_t) CCU8_CC8_TC_ECM_Msk) == (uint32_t)CCU8_CC8_TC_ECM_Msk));
1470:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1471:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1472:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** #if defined(CCU8V1) /* Defined for XMC4800, XMC4700, XMC4500, XMC4400, XMC4200, XMC4100 devices onl
1473:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1474:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1475:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice_number to check whether read value belongs to required slice or not
1476:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1477:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *   int32_t   Returns -1 if the FIFO value being retrieved is not from the \b slice_number.
1478:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *             Returns the value captured in the \b slice_number, if captured value is from the cor
1479:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                     Range: [0x0 to 0xFFFF]
1480:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1481:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1482:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Read captured value from FIFO(ECRD register).\n\n
1483:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This is applicable only in the Capture mode of operation. The signal whose timing characteristic
1484:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * must be mapped to an event which in turn must be mapped to the capture function. Based on the ca
1485:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * instant timer values are captured into capture registers. Timing characteristics of the input si
1486:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * derived/inferred from the captured values.
1487:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1488:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1489:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_IsExtendedCapReadEnabled().
1490:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1491:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** int32_t XMC_CCU8_GetCapturedValueFromFifo(const XMC_CCU8_MODULE_t *const module, const uint8_t slic
1492:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** #else
1493:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1494:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1495:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param set The capture register set from which the captured value is to be retrieved
1496:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1497:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    uint32_t Returns the value captured in the \b slice_number
1498:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *             Range: [0x0 to 0xFFFF]
1499:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1500:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1501:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Read captured value from FIFO(CC8yECRD0 and CC8yECRD1).\n\n
1502:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This is applicable only in the Capture mode of operation. The signal whose timing characteristic
1503:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * must be mapped to an event which in turn must be mapped to the capture function. Based on the ca
1504:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * instant timer values are captured into capture registers. Timing characteristics of the input si
1505:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * derived/inferred from the captured values.
1506:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1507:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1508:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_IsExtendedCapReadEnabled().
1509:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @note Defined for XMC4800, XMC4700, XMC4500, XMC4400, XMC4200, XMC4100 devices only. For other d
1510:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1511:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** uint32_t XMC_CCU8_SLICE_GetCapturedValueFromFifo(const XMC_CCU8_SLICE_t *const slice,
1512:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 		                                             const XMC_CCU8_SLICE_CAP_REG_SET_t set);
1513:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** #endif
1514:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1515:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1516:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1517:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event Map an External event to the External Count Direction Function
1518:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1519:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1520:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1521:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1522:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures the Count Direction of the slice, by configuring CC8yCMC.UDS bit.\n\n
1523:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Count direction function is mapped with one of the 3 events. A slice can be configured to change
1524:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * CC8yTIMER count direction depending on an external signal.
1525:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1526:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1527:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1528:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1529:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_DirectionConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t eve
1530:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1531:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1532:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1533:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1534:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1535:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1536:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1537:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures the status bit override Function of the slice, by configuring CC8yCMC.OFS bit.\n\n
1538:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Status bit override function is mapped with one of the 3 events. A slice can be configured to ch
1539:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * output of the timer's CC8yST1 signal depending on an external signal.
1540:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1541:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1542:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent().
1543:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1544:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_StatusBitOverrideConfig(XMC_CCU8_SLICE_t *const slice);
1545:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1546:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1547:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1548:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param exit_mode How should a previously logged trap state be exited?
1549:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param synch_with_pwm Should exit of trap state be synchronized with PWM cycle start?
1550:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1551:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1552:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1553:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1554:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1555:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures the Trap Function of the slice, by configuring CC8yCMC.TS, CC8yTC.TRPSE, and CC8yTC.T
1556:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Trap function is mapped with Event-2. Criteria for exiting the trap state is configured.
1557:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This trap function allows PWM outputs to react on the state of an input pin.
1558:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Thus PWM output can be forced to inactive state upon detection of a trap.
1559:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * It is also possible to synchronize the trap function with the PWM signal using the \b synch_with
1560:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1561:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1562:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1563:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1564:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_TrapConfig(XMC_CCU8_SLICE_t *const slice,
1565:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                const XMC_CCU8_SLICE_TRAP_EXIT_MODE_t exit_mode,
1566:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                bool synch_with_pwm);
1567:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1568:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1569:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1570:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param ev1_config Pointer to event 1 configuration data
1571:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param ev2_config Pointer to event 2 configuration data
1572:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1573:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1574:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1575:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1576:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1577:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Map Status bit override function with an Event1 & Event 2 of the slice and configure CC8yINS reg
1578:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Details such as the input mapped to the event, event detection criteria and Low Pass filter opti
1579:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * by this routine for the events 1 & 2.  Event-1 input would be the trigger to override the value.
1580:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Event-2 input would be the override value.
1581:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1582:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1583:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StatusBitOverrideConfig().
1584:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1585:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU8_SLICE_t *const slice,
1586:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                     const XMC_CCU8_SLICE_EVENT_CONFIG_t *const ev1_
1587:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                     const XMC_CCU8_SLICE_EVENT_CONFIG_t *const ev2_
1588:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1589:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1590:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1591:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event The External Event which needs to be configured.
1592:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param config Pointer to event configuration data.
1593:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1594:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1595:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1596:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1597:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures an External Event of the slice, by updating CC8yINS register .\n\n
1598:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Details such as the input mapped to the event, event detection criteria and low pass filter
1599:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * options are programmed by this routine. The Event \b config  will configure the input selection,
1600:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * the edge selection, the level selection and the Low pass filter for the  event.
1601:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1602:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1603:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StartConfig()<BR>  XMC_CCU8_SLICE_StopConfig()<BR>  XMC_CCU8_SLICE_LoadConfig()<
1604:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ModulationConfig()<BR>  XMC_CCU8_SLICE_CountConfig()<BR>  XMC_CCU8_SLICE_GateCon
1605:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_Capture0Config()<BR> XMC_CCU8_SLICE_Capture1Config()<BR>  XMC_CCU8_SLICE_Directi
1606:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StatusBitOverrideConfig()<BR>  XMC_CCU8_SLICE_TrapConfig().
1607:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1608:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_ConfigureEvent(XMC_CCU8_SLICE_t *const slice,
1609:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                    const XMC_CCU8_SLICE_EVENT_t event,
1610:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                    const XMC_CCU8_SLICE_EVENT_CONFIG_t *config);
1611:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1612:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1613:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1614:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param event The External Event which needs to be configured.
1615:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param input One of the 16 inputs meant to be mapped to the desired event
1616:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1617:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1618:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1619:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1620:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1621:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Selects an input for an external event, by configuring CC8yINS register.\n\n
1622:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * It is possible to select one of the possible 16 input signals for a given Event.
1623:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This configures the CC8yINS.EVxIS for the selected event.
1624:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1625:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1626:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StartConfig()<BR>  XMC_CCU8_SLICE_StopConfig()<BR>  XMC_CCU8_SLICE_LoadConfig()<
1627:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ModulationConfig()<BR> XMC_CCU8_SLICE_CountConfig()<BR>  XMC_CCU8_SLICE_GateConf
1628:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_Capture0Config()<BR>  XMC_CCU8_SLICE_Capture1Config()<BR> XMC_CCU8_SLICE_Directi
1629:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StatusBitOverrideConfig()<BR>  XMC_CCU8_SLICE_TrapConfig().
1630:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1631:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_SetInput(XMC_CCU8_SLICE_t *const slice,
1632:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                              const XMC_CCU8_SLICE_EVENT_t event,
1633:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                              const XMC_CCU8_SLICE_INPUT_t input);
1634:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1635:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1636:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1637:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param out_mask  Output signals for which the Trap function needs to be activated.
1638:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   Use ::XMC_CCU8_SLICE_OUTPUT_t enum items to create a mask of choice,
1639:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   using a bit wise OR operation
1640:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   Range: [0x1 to 0xF]
1641:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1642:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1643:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1644:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1645:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Enables the trap feature, by setting CC8yTC.TRAPE0, CC8yTC.TRAPE1, CC8yTC.TRAPE2 and CC8yTC.TRAP
1646:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \a out_mask.\n\n
1647:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * A particularly useful feature where the PWM output can be forced inactive upon detection of a tr
1648:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * can be the output of a sensing element which has just detected an abnormal electrical condition.
1649:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1650:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1651:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_TrapConfig()<BR>  XMC_CCU8_SLICE_DisableTrap()<BR>  XMC_CCU8_SLICE_ConfigureEven
1652:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetInput().
1653:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1654:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_EnableTrap(XMC_CCU8_SLICE_t *const slice, const uint32_t out_ma
1655:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1656:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_EnableTrap:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1657:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->TC |= (uint32_t)out_mask << CCU8_CC8_TC_TRAPE0_Pos;
1658:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1659:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1660:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1661:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1662:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param out_mask  Output signals for which the Trap function needs to be deactivated.
1663:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   Use ::XMC_CCU8_SLICE_OUTPUT_t enum items to create a mask of choice,
1664:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   using a bit wise OR operation.
1665:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                   Range: [0x1 to 0xF]
1666:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1667:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1668:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1669:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1670:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Disables the trap feature, by clearing CC8yTC.TRAPE0, CC8yTC.TRAPE1, CC8yTC.TRAPE2 and CC8yTC.TR
1671:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \a out_mask.\n\n.\n\n
1672:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This API will revert the changes done by XMC_CCU8_SLICE_EnableTrap().
1673:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This Ensures that the TRAP function has no effect on the output of the CCU8 slice.
1674:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1675:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1676:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_EnableTrap().
1677:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1678:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_DisableTrap(XMC_CCU8_SLICE_t *const slice, const uint32_t out_m
1679:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1680:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_DisableTrap:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1681:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   
1682:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->TC &= ~((uint32_t)out_mask << CCU8_CC8_TC_TRAPE0_Pos);
1683:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1684:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1685:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1686:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1687:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1688:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    bool returns \b true if the Timer is running else it returns \b false.
1689:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1690:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1691:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Returns the state of the timer (Either Running or stopped(idle)), by reading CC8yTCST.TRB bit.
1692:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1693:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1694:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StartTimer()<BR>  XMC_CCU8_SLICE_StopTimer().
1695:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1696:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_SLICE_IsTimerRunning(const XMC_CCU8_SLICE_t *const slice)
1697:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1698:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1699:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   return(bool)(((slice->TCST) & CCU8_CC8_TCST_TRB_Msk) == (uint32_t)CCU8_CC8_TCST_TRB_Msk);
1700:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1701:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1702:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1703:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Pointer to an instance of CC8 slice
1704:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1705:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    bool returns \b true if the dead time counter of Compare channel-1 is running else it returns
1706:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1707:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1708:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Returns the state of the  Dead time counter 1 (Either Running or stopped(idle)), by reading CC8y
1709:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This returns the state of the dead time counter which is linked to Compare channel-1.
1710:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1711:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1712:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_IsDeadTimeCntr2Running().
1713:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1714:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_SLICE_IsDeadTimeCntr1Running(const XMC_CCU8_SLICE_t *const slice)
1715:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1716:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_IsDeadTimeCntr1Running:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(s
1717:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   return(bool)(((slice->TCST) & CCU8_CC8_TCST_DTR1_Msk) == (uint32_t)CCU8_CC8_TCST_DTR1_Msk);
1718:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1719:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1720:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1721:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Pointer to an instance of CC8 slice
1722:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1723:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    bool returns \b true if the dead time counter of Compare channel-2 is running else it returns
1724:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1725:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1726:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Returns the state of the  Dead time counter 2 (Either Running or stopped(idle)), by reading CC8y
1727:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This returns the state of the dead time counter which is linked to Compare channel-2.
1728:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1729:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1730:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_IsDeadTimeCntr1Running().
1731:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1732:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_SLICE_IsDeadTimeCntr2Running(const XMC_CCU8_SLICE_t *const slice)
1733:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1734:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_IsDeadTimeCntr2Running:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(s
1735:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   return(bool)(((slice->TCST) & CCU8_CC8_TCST_DTR2_Msk) == (uint32_t)CCU8_CC8_TCST_DTR2_Msk);
1736:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1737:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1738:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1739:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1740:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1741:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *   ::XMC_CCU8_SLICE_TIMER_COUNT_DIR_t returns the direction in which the timer is counting.
1742:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1743:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1744:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Returns the timer counting direction, by reading CC8yTCST.CDIR bit.\n\n
1745:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This API will return the direction in which the timer is currently
1746:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * incrementing(XMC_CCU8_SLICE_TIMER_COUNT_DIR_UP) or decrementing (XMC_CCU8_SLICE_TIMER_COUNT_DIR_
1747:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1748:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1749:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  None.
1750:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1751:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE XMC_CCU8_SLICE_TIMER_COUNT_DIR_t XMC_CCU8_SLICE_GetCountingDir(const XMC_CCU8_SLICE
1752:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1753:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetCountingDir:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1754:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   return((XMC_CCU8_SLICE_TIMER_COUNT_DIR_t)(((slice->TCST) & CCU8_CC8_TCST_CDIR_Msk) >> CCU8_CC8_TC
1755:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1756:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1757:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1758:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1759:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1760:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1761:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1762:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Starts the timer counting operation, by setting CC8yTCSET.TRBS bit.\n\n
1763:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * It is necessary to have configured the CC8 slice before starting its timer.
1764:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Before the Timer is started ensure that the clock is provided to the slice.
1765:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1766:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1767:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StopTimer().
1768:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1769:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_StartTimer(XMC_CCU8_SLICE_t *const slice)
1770:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1771:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1772:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->TCSET = CCU8_CC8_TCSET_TRBS_Msk;
1773:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1774:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1775:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1776:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1777:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1778:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1779:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1780:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1781:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Stops the Timer.\n\n
1782:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Timer counting operation can be stopped by invoking this API, by setting CC8yTCCLR.TRBC bit.
1783:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1784:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1785:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StartTimer().
1786:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1787:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
1788:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
  72              	 .loc 1 1788 0
  73              	 .cfi_startproc
  74              	 
  75              	 
  76              	 
  77 0000 80B4     	 push {r7}
  78              	.LCFI6:
  79              	 .cfi_def_cfa_offset 4
  80              	 .cfi_offset 7,-4
  81 0002 83B0     	 sub sp,sp,#12
  82              	.LCFI7:
  83              	 .cfi_def_cfa_offset 16
  84 0004 00AF     	 add r7,sp,#0
  85              	.LCFI8:
  86              	 .cfi_def_cfa_register 7
  87 0006 7860     	 str r0,[r7,#4]
1789:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1790:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
  88              	 .loc 1 1790 0
  89 0008 7B68     	 ldr r3,[r7,#4]
  90 000a 0122     	 movs r2,#1
  91 000c 1A61     	 str r2,[r3,#16]
1791:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** }
  92              	 .loc 1 1791 0
  93 000e 0C37     	 adds r7,r7,#12
  94              	.LCFI9:
  95              	 .cfi_def_cfa_offset 4
  96 0010 BD46     	 mov sp,r7
  97              	.LCFI10:
  98              	 .cfi_def_cfa_register 13
  99              	 
 100 0012 5DF8047B 	 ldr r7,[sp],#4
 101              	.LCFI11:
 102              	 .cfi_restore 7
 103              	 .cfi_def_cfa_offset 0
 104 0016 7047     	 bx lr
 105              	 .cfi_endproc
 106              	.LFE144:
 108              	 .section .text.XMC_CCU8_SLICE_SetDitherCompareValue,"ax",%progbits
 109              	 .align 2
 110              	 .thumb
 111              	 .thumb_func
 113              	XMC_CCU8_SLICE_SetDitherCompareValue:
 114              	.LFB159:
1792:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1793:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1794:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1795:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1796:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1797:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1798:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1799:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Resets the timer count to zero, by setting CC8yTCCLR.TCC bit.\n\n
1800:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * A timer which has been stopped can still retain the last counted value.
1801:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * After invoking this API the timer value will be cleared.
1802:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1803:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1804:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StartTimer().
1805:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1806:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_ClearTimer(XMC_CCU8_SLICE_t *const slice)
1807:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1808:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1809:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TCC_Msk;
1810:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1811:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1812:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1813:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1814:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1815:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1816:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1817:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1818:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Stops and resets the timer count to zero, by setting CC8yTCCLR.TCC and CC8yTCCLR.TRBC bit.\n\n
1819:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1820:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1821:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StartTimer().
1822:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1823:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_StopClearTimer(XMC_CCU8_SLICE_t *const slice)
1824:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1825:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_StopClearTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1826:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->TCCLR = CCU8_CC8_TCCLR_TRBC_Msk | CCU8_CC8_TCCLR_TCC_Msk;
1827:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1828:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1829:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1830:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1831:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1832:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    ::XMC_CCU8_SLICE_MODE_t returns XMC_CCU8_SLICE_MODE_COMPARE if the slice is operating in comp
1833:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                          returns XMC_CCU8_SLICE_MODE_CAPTURE if the slice is operating in captur
1834:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1835:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1836:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Retrieves the current mode of operation in the slice (either Capture mode or Compare mode), by r
1837:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * CC8yTC.CMOD bit.\n\n
1838:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Ensure that before invoking this API the CCU8 slice should be configured otherwise the output of
1839:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * invalid.
1840:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1841:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1842:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  None.
1843:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1844:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE XMC_CCU8_SLICE_MODE_t XMC_CCU8_SLICE_GetSliceMode(const XMC_CCU8_SLICE_t *const sli
1845:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1846:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetSliceMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1847:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   return((XMC_CCU8_SLICE_MODE_t)(((slice->TC) & CCU8_CC8_TC_CMOD_Msk) >> CCU8_CC8_TC_CMOD_Pos));
1848:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1849:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1850:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1851:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1852:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param mode Desired repetition mode (Either single shot or Continuous)
1853:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1854:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1855:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1856:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1857:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures the Timer to either Single shot mode or continuous mode, by configuring CC8yTC.TSSM b
1858:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The timer will count up to the terminal count as specified in the period register and stops imme
1859:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * mode has been set to single shot. In the continuous mode of operation, the timer starts counting
1860:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * reaching the terminal count.
1861:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1862:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1863:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_GetTimerRepeatMode().
1864:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1865:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_SetTimerRepeatMode(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_TIMER_RE
1866:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1867:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1868:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1869:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <br>
1870:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  ::XMC_CCU8_SLICE_TIMER_REPEAT_MODE_t returns XMC_CCU8_SLICE_TIMER_REPEAT_MODE_REPEAT if continu
1871:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                                     returns XMC_CCU8_SLICE_TIMER_REPEAT_MODE_SINGLE if single sh
1872:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1873:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1874:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Retrieves the Timer repeat mode, either Single shot mode or continuous mode, by reading CC8yTC.T
1875:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The timer will count upto the terminal count as specified in the period register and stops immed
1876:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * mode has been set to single shot mode. In the continuous mode of operation, the timer starts cou
1877:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * all over again after reaching the terminal count.
1878:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1879:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1880:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetTimerRepeatMode().
1881:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1882:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE XMC_CCU8_SLICE_TIMER_REPEAT_MODE_t XMC_CCU8_SLICE_GetTimerRepeatMode(
1883:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                                                                     const XMC_CCU8_
1884:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1885:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetTimerRepeatMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice
1886:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   return((XMC_CCU8_SLICE_TIMER_REPEAT_MODE_t)(((slice->TC) & CCU8_CC8_TC_TSSM_Msk) >> CCU8_CC8_TC_T
1887:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1888:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1889:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1890:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param mode Desired counting mode (Either Edge Aligned or Center Aligned)
1891:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1892:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1893:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1894:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1895:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Configures the timer counting mode either Edge Aligned or Center Aligned, by configuring CC8yTC.
1896:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * In the edge aligned mode, the timer counts from 0 to the terminal count. Once the timer count ha
1897:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * compare value, the timer status output asserts itself. It will now deassert only after the timer
1898:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * terminal count.\n In the center aligned mode, the timer first counts from 0 to the terminal coun
1899:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * During this upward and downward counting, the timer status output stays asserted as long as the 
1900:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * greater than the compare value.
1901:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1902:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1903:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_GetTimerCountingMode().
1904:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1905:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_SetTimerCountingMode(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_TIMER_
1906:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1907:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1908:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1909:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <br>
1910:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  ::XMC_CCU8_SLICE_TIMER_COUNT_MODE_t returns XMC_CCU8_SLICE_TIMER_COUNT_MODE_EA if edge aligned 
1911:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                                     returns XMC_CCU8_SLICE_TIMER_COUNT_MODE_CA if center aligned
1912:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1913:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1914:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Retrieves timer counting mode either Edge aligned or Center Aligned, by reading CC8yTC.TCM bit.\
1915:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1916:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1917:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetTimerCountingMode().
1918:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1919:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE XMC_CCU8_SLICE_TIMER_COUNT_MODE_t XMC_CCU8_SLICE_GetTimerCountingMode(
1920:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 		                                                                            const XMC_CCU8_SLICE_
1921:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1922:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetTimerCountingMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(sli
1923:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   return((XMC_CCU8_SLICE_TIMER_COUNT_MODE_t)(((slice->TC) & CCU8_CC8_TC_TCM_Msk) >> CCU8_CC8_TC_TCM
1924:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1925:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1926:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1927:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param period_val Timer period value
1928:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *        Range: [0x0 to 0xFFFF]
1929:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1930:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1931:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1932:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1933:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Programs the timer period, by writing CC8yPRS register.\n\n
1934:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The frequency of counting/ PWM frequency is determined by this value. The period value is writte
1935:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * register. Explicitly enable the shadow transfer for the the period value by calling
1936:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_EnableShadowTransfer() with appropriate mask. If shadow transfer is enabled and the tim
1937:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * a period match transfers the value from the shadow register to the actual period register.
1938:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1939:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1940:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_GetTimerPeriodMatch().
1941:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1942:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_SetTimerPeriodMatch(XMC_CCU8_SLICE_t *const slice, const uint16_t period_val);
1943:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1944:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1945:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1946:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1947:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *   uint16_t returns the current timer period value
1948:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *            Range: [0x0 to 0xFFFF]
1949:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1950:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1951:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Retrieves the timer period value currently effective, by reading CC8yPR register.\n\n
1952:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * If the timer is active then the value being returned is currently being used for the PWM period.
1953:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1954:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Note:</b><br>
1955:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The XMC_CCU8_SLICE_SetTimerPeriodMatch() would set the new period value to a shadow register.
1956:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This would only transfer the new values into the actual period register if the shadow transfer r
1957:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * is enabled and if a period match occurs. Hence a consecutive call to XMC_CCU8_SLICE_GetTimerPeri
1958:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * would not reflect the new values until the shadow transfer completes.
1959:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1960:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1961:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetTimerPeriodMatch().
1962:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1963:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE uint16_t XMC_CCU8_SLICE_GetTimerPeriodMatch(const XMC_CCU8_SLICE_t *const slice)
1964:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
1965:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slic
1966:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   return((uint16_t) slice->PR);
1967:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** }
1968:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1969:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1970:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param channel Select the compare channel to which the \b compare_val has to programmed.
1971:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param compare_val Timer compare value
1972:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1973:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1974:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1975:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1976:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Programs the timer compare value, by writing CC8yCR1S and CC8yCR2S registers.\n\n
1977:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  The PWM duty cycle is determined by this value.\n\n
1978:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The compare value is written to a shadow register. Explicitly enable the shadow transfer for
1979:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * the the period/compare value by calling XMC_CCU8_EnableShadowTransfer() with
1980:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * appropriate mask.If shadow transfer is enabled and the timer is running,
1981:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * a period match transfers the value from the shadow register to the actual compare register.
1982:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1983:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1984:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_EnableShadowTransfer().
1985:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
1986:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_SetTimerCompareMatch(XMC_CCU8_SLICE_t *const slice,
1987:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                          const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
1988:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                          const uint16_t compare_val);
1989:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
1990:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
1991:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1992:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param compare_val Timer compare value
1993:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
1994:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
1995:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
1996:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1997:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Programs the timer compare1 value, by writing CC8yCR1S register.\n\n
1998:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The PWM duty cycle is determined by this value.\n\n
1999:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The compare value is written to a shadow register. Explicitly enable the shadow transfer for
2000:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * the the period/compare value by calling XMC_CCU8_EnableShadowTransfer() with appropriate mask.
2001:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * If shadow transfer is enabled and the timer is running, a period match transfers the value from
2002:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * the shadow register to the actual compare register.
2003:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2004:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2005:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_EnableShadowTransfer().
2006:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2007:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_SetTimerCompareMatchChannel1(XMC_CCU8_SLICE_t *const slice, con
2008:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2009:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatchChannel1:Invalid Slice Pointer", XMC_CCU8_IsValidS
2010:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->CR1S = (uint32_t) compare_val;
2011:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2012:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2013:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2014:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2015:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param compare_val Timer compare value
2016:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2017:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2018:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2019:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2020:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Programs the timer compare2 value, by writing CC8yCR2S register.\n\n
2021:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The PWM duty cycle is determined by this value.\n\n
2022:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The compare value is written to a shadow register. Explicitly enable the shadow transfer for
2023:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * the the period/compare value by calling XMC_CCU8_EnableShadowTransfer() with appropriate mask.
2024:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * If shadow transfer is enabled and the timer is running, a period match transfers the value from
2025:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * the shadow register to the actual compare register.
2026:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2027:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2028:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_EnableShadowTransfer().
2029:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2030:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_SetTimerCompareMatchChannel2(XMC_CCU8_SLICE_t *const slice, con
2031:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2032:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatchChannel2:Invalid Slice Pointer", XMC_CCU8_IsValidS
2033:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->CR2S = (uint32_t) compare_val;
2034:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2035:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2036:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2037:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2038:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param channel Select the compare channel to retrieve from.
2039:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2040:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *   uint16_t returns the current timer compare value
2041:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *            Range: [0x0 to 0xFFFF]
2042:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2043:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2044:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Retrieves the timer compare value currently effective, by reading CC8yCR1S and CC8yCR2S register
2045:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * If the timer is active then the value being returned is currently being for the PWM duty cycle( 
2046:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2047:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Note:</b><br>
2048:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The XMC_CCU8_SLICE_SetTimerCompareMatch() would set the new compare value to a shadow register.
2049:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This would only transfer the new values into the actual compare register if the shadow transfer 
2050:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * is enabled and if a period match occurs. Hence a consecutive call to XMC_CCU8_SLICE_GetTimerComp
2051:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * would not reflect the new values until the shadow transfer completes.
2052:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2053:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2054:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetTimerCompareMatch().
2055:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2056:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** uint16_t XMC_CCU8_SLICE_GetTimerCompareMatch(const XMC_CCU8_SLICE_t *const slice,
2057:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                              const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel);
2058:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2059:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2060:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
2061:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param shadow_transfer_msk Shadow transfer request mask for various transfers.
2062:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                            Use ::XMC_CCU8_SHADOW_TRANSFER_t enum items to create a mask of choic
2063:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                            using a bit wise OR operation.
2064:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2065:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2066:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2067:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2068:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Requests of shadow transfer for Period, Compare, Passive level, dither and prescaler, by configu
2069:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * the GCSS register.\n\n
2070:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The transfer from the shadow registers to the actual registers is done in the immediate next occ
2071:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * shadow transfer trigger after the API is called.
2072:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2073:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Any call to XMC_CCU8_SLICE_SetTimerPeriodMatch()<BR>  XMC_CCU8_SLICE_SetTimerCompareMatch()<BR> 
2074:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_XMC_CCU8_SLICE_SetPrescaler()<BR> XMC_CCU8_SLICE_CompareInit()<BR> XMC_CCU8_SLICE_CaptureIni
2075:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * must be succeeded by this API.
2076:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2077:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2078:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  None.
2079:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2080:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_EnableShadowTransfer(XMC_CCU8_MODULE_t *const module, const uint32_t 
2081:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2082:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_EnableShadowTransfer:Invalid module Pointer", XMC_CCU8_IsValidModule(module)
2083:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   module->GCSS = (uint32_t)shadow_transfer_msk;  
2084:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2085:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2086:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2087:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2088:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2089:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *   uint16_t returns the current timer value
2090:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *            Range: [0x0 to 0xFFFF]
2091:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2092:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2093:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Retrieves the latest timer value, from CC8yTIMER register.\n\n
2094:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2095:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2096:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetTimerValue().
2097:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2098:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE uint16_t XMC_CCU8_SLICE_GetTimerValue(const XMC_CCU8_SLICE_t *const slice)
2099:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2100:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetTimerValue:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2101:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   return((uint16_t) slice->TIMER);
2102:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2103:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2104:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2105:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param timer_val The new timer value that has to be loaded into the TIMER register.
2106:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                  Range: [0x0 to 0xFFFF]
2107:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2108:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2109:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2110:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2111:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Loads a new timer value, by setting CC8yTIMER register.\n\n
2112:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * 
2113:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Note:</b><br>
2114:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  Request to load is ignored if the timer is running.
2115:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2116:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2117:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_GetTimerValue().
2118:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2119:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_SetTimerValue(XMC_CCU8_SLICE_t *const slice, const uint16_t tim
2120:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2121:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerValue:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2122:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->TIMER = (uint32_t) timer_val;
2123:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2124:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2125:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2126:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param period_dither Boolean instruction on dithering of period match
2127:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param duty_dither Boolean instruction on dithering of compare match
2128:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param spread Dither compare value
2129:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2130:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2131:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2132:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2133:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Enables dithering of PWM frequency and duty cycle, by configuring CC8yTC.DITHE and CC8yDITS bits
2134:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Some control loops are slow in updating PWM frequency and duty cycle. In such a case, a Bresenha
2135:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * can help reduce long term errors. Dithering can be applied to period and duty individually,
2136:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * this can be selected using the parameter \b period_dither and \b duty_dither.
2137:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The \b spread would provide the dither compare value. If the dither counter value is less than t
2138:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * the period/compare values would be dithered according to the dither mode selected. This API woul
2139:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * XMC_CCU8_SLICE_SetDitherCompareValue().
2140:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2141:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Note:</b><br>
2142:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * After this API call, XMC_CCU8_EnableShadowTransfer() has to be called with appropriate mask
2143:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * to transfer the dither value.
2144:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2145:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2146:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_DisableDithering().
2147:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2148:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_EnableDithering(XMC_CCU8_SLICE_t *const slice,
2149:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                     const bool period_dither,
2150:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                     const bool duty_dither,
2151:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****                                     const uint8_t spread);
2152:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2153:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2154:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2155:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2156:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2157:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2158:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2159:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Disables dithering of PWM frequency and duty cycle, by clearing CC8yTC.DITHE bits.\n\n
2160:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This disables the Dither mode that was set in XMC_CCU8_SLICE_EnableDithering().
2161:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This API will not clear the dither compare value.
2162:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2163:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2164:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_EnableDithering().
2165:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2166:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_DisableDithering(XMC_CCU8_SLICE_t *const slice)
2167:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2168:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_DisableDithering:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice))
2169:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->TC &= ~((uint32_t) CCU8_CC8_TC_DITHE_Msk);
2170:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2171:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2172:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2173:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2174:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2175:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2176:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2177:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2178:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Enables the floating prescaler, by setting CC8yTC.FPE bit.\n\n
2179:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The prescaler divider starts with an initial value and increments upon every period match. It ke
2180:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * until a ceiling (prescaler compare value) is hit and thereafter rolls back to the original presc
2181:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * It is necessary to have programmed an initial divider value and a compare value before the featu
2182:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2183:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2184:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetFloatingPrescalerCompareValue()<BR>  XMC_CCU8_SLICE_DisableFloatingPrescaler(
2185:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_XMC_CCU8_SLICE_SetPrescaler().
2186:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2187:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_EnableFloatingPrescaler(XMC_CCU8_SLICE_t *const slice)
2188:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2189:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_EnableFloatingPrescaler:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(
2190:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->TC |= (uint32_t) CCU8_CC8_TC_FPE_Msk;
2191:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2192:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2193:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2194:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2195:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2196:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2197:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2198:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2199:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Disables the floating prescaler, by clearing CC8yTC.FPE bit.\n\n
2200:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This would return the prescaler to the normal mode.
2201:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * The prescaler that would be applied is the value present in CC8yPSC.
2202:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2203:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   * \par<b>Related APIs:</b><br>
2204:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_EnableFloatingPrescaler().
2205:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2206:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_DisableFloatingPrescaler(XMC_CCU8_SLICE_t *const slice)
2207:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
2208:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_DisableFloatingPrescaler:Invalid Slice Pointer", XMC_CCU8_IsValidSlice
2209:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->TC &= ~((uint32_t) CCU8_CC8_TC_FPE_Msk);
2210:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** }
2211:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2212:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** /**
2213:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2214:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @param comp_val Dither compare value
2215:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *                 Range: [0x0 to 0xF]
2216:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * @return <BR>
2217:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *    None<BR>
2218:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2219:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2220:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * Sets the dither spread/compare value, by setting CC8yDITS.DCVS bits.\n\n
2221:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * This value is the cornerstone of PWM dithering feature. Dithering is applied/done when the value
2222:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * dithering counter is less than this compare/spread value. For all dithering counter values great
2223:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * the spread value, there is no dithering. After setting the value XMC_CCU8_EnableShadowTransfer()
2224:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  * called with appropriate mask.
2225:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *
2226:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   * \par<b>Related APIs:</b><br>
2227:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_EnableDithering().
2228:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****  */
2229:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_SetDitherCompareValue(XMC_CCU8_SLICE_t *const slice, const uint
2230:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** {
 115              	 .loc 1 2230 0
 116              	 .cfi_startproc
 117              	 
 118              	 
 119              	 
 120 0000 80B4     	 push {r7}
 121              	.LCFI12:
 122              	 .cfi_def_cfa_offset 4
 123              	 .cfi_offset 7,-4
 124 0002 83B0     	 sub sp,sp,#12
 125              	.LCFI13:
 126              	 .cfi_def_cfa_offset 16
 127 0004 00AF     	 add r7,sp,#0
 128              	.LCFI14:
 129              	 .cfi_def_cfa_register 7
 130 0006 7860     	 str r0,[r7,#4]
 131 0008 0B46     	 mov r3,r1
 132 000a FB70     	 strb r3,[r7,#3]
2231:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetDitherCompareValue:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(sl
2232:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetDitherCompareValue:Invalid Dither compare value", (comp_val <= 15U)
2233:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** 
2234:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h ****   slice->DITS = comp_val;
 133              	 .loc 1 2234 0
 134 000c FA78     	 ldrb r2,[r7,#3]
 135 000e 7B68     	 ldr r3,[r7,#4]
 136 0010 1A62     	 str r2,[r3,#32]
2235:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_ccu8.h **** }
 137              	 .loc 1 2235 0
 138 0012 0C37     	 adds r7,r7,#12
 139              	.LCFI15:
 140              	 .cfi_def_cfa_offset 4
 141 0014 BD46     	 mov sp,r7
 142              	.LCFI16:
 143              	 .cfi_def_cfa_register 13
 144              	 
 145 0016 5DF8047B 	 ldr r7,[sp],#4
 146              	.LCFI17:
 147              	 .cfi_restore 7
 148              	 .cfi_def_cfa_offset 0
 149 001a 7047     	 bx lr
 150              	 .cfi_endproc
 151              	.LFE159:
 153              	 .section .text.XMC_CCU8_lAssertReset,"ax",%progbits
 154              	 .align 2
 155              	 .thumb
 156              	 .thumb_func
 158              	XMC_CCU8_lAssertReset:
 159              	.LFB206:
 160              	 .file 2 "../Libraries/XMCLib/src/xmc_ccu8.c"
   1:../Libraries/XMCLib/src/xmc_ccu8.c **** /**
   2:../Libraries/XMCLib/src/xmc_ccu8.c ****  * @file xmc_ccu8.c
   3:../Libraries/XMCLib/src/xmc_ccu8.c ****  * @date 2017-02-25
   4:../Libraries/XMCLib/src/xmc_ccu8.c ****  *
   5:../Libraries/XMCLib/src/xmc_ccu8.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc_ccu8.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc_ccu8.c ****  * XMClib v2.1.12 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc_ccu8.c ****  *
   9:../Libraries/XMCLib/src/xmc_ccu8.c ****  * Copyright (c) 2015-2017, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc_ccu8.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc_ccu8.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc_ccu8.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc_ccu8.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc_ccu8.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc_ccu8.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc_ccu8.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc_ccu8.c ****  * 
  18:../Libraries/XMCLib/src/xmc_ccu8.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc_ccu8.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc_ccu8.c ****  * 
  21:../Libraries/XMCLib/src/xmc_ccu8.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc_ccu8.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc_ccu8.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc_ccu8.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc_ccu8.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc_ccu8.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc_ccu8.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc_ccu8.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc_ccu8.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc_ccu8.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc_ccu8.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc_ccu8.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc_ccu8.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc_ccu8.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc_ccu8.c ****  *
  36:../Libraries/XMCLib/src/xmc_ccu8.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc_ccu8.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc_ccu8.c ****  *
  39:../Libraries/XMCLib/src/xmc_ccu8.c ****  * 2015-02-20:
  40:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - Initial <br>
  41:../Libraries/XMCLib/src/xmc_ccu8.c ****  *
  42:../Libraries/XMCLib/src/xmc_ccu8.c ****  * 2015-06-20:
  43:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - Removed definition of GetDriverVersion API <br>
  44:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - Added XMC_CCU8_SLICE_LoadSelector() API, to select which compare register value has to be 
  45:../Libraries/XMCLib/src/xmc_ccu8.c ****  *       during external load event. 
  46:../Libraries/XMCLib/src/xmc_ccu8.c ****  *
  47:../Libraries/XMCLib/src/xmc_ccu8.c ****  * 2015-07-24:
  48:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent() is updated to support XMC14 device. <br>
  49:../Libraries/XMCLib/src/xmc_ccu8.c ****  *
  50:../Libraries/XMCLib/src/xmc_ccu8.c ****  * 2015-08-17:
  51:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - XMC_CCU8_SLICE_CHC_CONFIG_MASK is not applicable to XMC14 devices. <br>
  52:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - Start of prescaler XMC_CCU8_StartPrescaler() is invoked in XMC_CCU8_Init() API. <br>
  53:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - In XMC_CCU8_SLICE_CompareInit(), CHC register is updated according to the device. <br>
  54:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - Bug fix XMC_CCU8_SLICE_ConfigureEvent() during the level setting for XMC14 devices. <br>
  55:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - XMC_CCU8_EnableShadowTransfer() definition is removed, since the API is made as inline. <b
  56:../Libraries/XMCLib/src/xmc_ccu8.c ****  * 
  57:../Libraries/XMCLib/src/xmc_ccu8.c ****  * 2015-10-07:
  58:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - XMC_CCU8_SLICE_GetEvent() is made as inline.
  59:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - DOC updates for the newly added APIs.
  60:../Libraries/XMCLib/src/xmc_ccu8.c ****  *
  61:../Libraries/XMCLib/src/xmc_ccu8.c ****  * 2017-02-25:
  62:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - XMC_CCU8_lAssertReset(), XMC_CCU8_lDeassertReset(), XMC_CCU8_lGateClock() and XMC_CCU8_lUn
  63:../Libraries/XMCLib/src/xmc_ccu8.c ****  *
  64:../Libraries/XMCLib/src/xmc_ccu8.c ****  * @endcond
  65:../Libraries/XMCLib/src/xmc_ccu8.c ****  */
  66:../Libraries/XMCLib/src/xmc_ccu8.c **** /**************************************************************************************************
  67:../Libraries/XMCLib/src/xmc_ccu8.c ****  * HEADER FILES
  68:../Libraries/XMCLib/src/xmc_ccu8.c ****  **************************************************************************************************
  69:../Libraries/XMCLib/src/xmc_ccu8.c **** #include "xmc_ccu8.h"
  70:../Libraries/XMCLib/src/xmc_ccu8.c **** 
  71:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CCU80)
  72:../Libraries/XMCLib/src/xmc_ccu8.c **** #include "xmc_scu.h"
  73:../Libraries/XMCLib/src/xmc_ccu8.c **** 
  74:../Libraries/XMCLib/src/xmc_ccu8.c **** /**************************************************************************************************
  75:../Libraries/XMCLib/src/xmc_ccu8.c ****  * MACROS
  76:../Libraries/XMCLib/src/xmc_ccu8.c ****  **************************************************************************************************
  77:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_NUM_SLICES_PER_MODULE          (4U)
  78:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_DITHER_PERIOD_MASK       (1U)
  79:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_DITHER_DUTYCYCLE_MASK    (2U)
  80:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK   (3U)
  81:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK  (1U)
  82:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK (3U)
  83:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CCU8V3) /* Defined for XMC1400 devices */
  84:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK  CCU8_CC8_INS1_EV0IS_Msk
  85:../Libraries/XMCLib/src/xmc_ccu8.c **** #else
  86:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK  CCU8_CC8_INS_EV0IS_Msk
  87:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
  88:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_GIDLC_CLOCK_MASK               (15U)
  89:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_GCSS_SLICE0_MASK               (1U)
  90:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_GCSS_SLICE1_MASK               (16U)
  91:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_GCSS_SLICE2_MASK               (256U)
  92:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_GCSS_SLICE3_MASK               (4096U)
  93:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_DEAD_TIME_CONFIG_MASK    (63U)
  94:../Libraries/XMCLib/src/xmc_ccu8.c **** #if !defined(CCU8V3) /* Defined for all devices except XMC1400 */
  95:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHC_CONFIG_MASK          (20U)
  96:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
  97:../Libraries/XMCLib/src/xmc_ccu8.c **** 
  98:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_DTC_DIV(div) \
  99:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((div == XMC_CCU8_SLICE_DTC_DIV_1) || \
 100:../Libraries/XMCLib/src/xmc_ccu8.c ****      (div == XMC_CCU8_SLICE_DTC_DIV_2) || \
 101:../Libraries/XMCLib/src/xmc_ccu8.c ****      (div == XMC_CCU8_SLICE_DTC_DIV_4) || \
 102:../Libraries/XMCLib/src/xmc_ccu8.c ****      (div == XMC_CCU8_SLICE_DTC_DIV_8))
 103:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 104:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_CLOCK(clock) \
 105:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((clock == XMC_CCU8_CLOCK_SCU)        || \
 106:../Libraries/XMCLib/src/xmc_ccu8.c ****      (clock == XMC_CCU8_CLOCK_EXTERNAL_A) || \
 107:../Libraries/XMCLib/src/xmc_ccu8.c ****      (clock == XMC_CCU8_CLOCK_EXTERNAL_B) || \
 108:../Libraries/XMCLib/src/xmc_ccu8.c ****      (clock == XMC_CCU8_CLOCK_EXTERNAL_C))
 109:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 110:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_OUTPUT(out) \
 111:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((out == XMC_CCU8_SLICE_OUTPUT_0) || \
 112:../Libraries/XMCLib/src/xmc_ccu8.c ****      (out == XMC_CCU8_SLICE_OUTPUT_1) || \
 113:../Libraries/XMCLib/src/xmc_ccu8.c ****      (out == XMC_CCU8_SLICE_OUTPUT_2) || \
 114:../Libraries/XMCLib/src/xmc_ccu8.c ****      (out == XMC_CCU8_SLICE_OUTPUT_3))
 115:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 116:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_END_MODE(end_mode) \
 117:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((end_mode == XMC_CCU8_SLICE_END_MODE_TIMER_STOP) || \
 118:../Libraries/XMCLib/src/xmc_ccu8.c ****      (end_mode == XMC_CCU8_SLICE_END_MODE_TIMER_CLEAR) || \
 119:../Libraries/XMCLib/src/xmc_ccu8.c ****      (end_mode == XMC_CCU8_SLICE_END_MODE_TIMER_STOP_CLEAR))
 120:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 121:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_EVENT_ID(event_id) \
 122:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((event_id == XMC_CCU8_SLICE_EVENT_NONE)|| \
 123:../Libraries/XMCLib/src/xmc_ccu8.c ****      (event_id == XMC_CCU8_SLICE_EVENT_0)   || \
 124:../Libraries/XMCLib/src/xmc_ccu8.c ****      (event_id == XMC_CCU8_SLICE_EVENT_1)   || \
 125:../Libraries/XMCLib/src/xmc_ccu8.c ****      (event_id == XMC_CCU8_SLICE_EVENT_2))
 126:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 127:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_EDGE_SENSITIVITY(edge) \
 128:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((edge == XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_NONE)        || \
 129:../Libraries/XMCLib/src/xmc_ccu8.c ****      (edge == XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_RISING_EDGE) || \
 130:../Libraries/XMCLib/src/xmc_ccu8.c ****      (edge == XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_FALLING_EDGE)|| \
 131:../Libraries/XMCLib/src/xmc_ccu8.c ****      (edge == XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_DUAL_EDGE))
 132:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 133:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_EVENT_FILTER(cycles) \
 134:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((cycles == XMC_CCU8_SLICE_EVENT_FILTER_DISABLED) || \
 135:../Libraries/XMCLib/src/xmc_ccu8.c ****      (cycles == XMC_CCU8_SLICE_EVENT_FILTER_3_CYCLES) || \
 136:../Libraries/XMCLib/src/xmc_ccu8.c ****      (cycles == XMC_CCU8_SLICE_EVENT_FILTER_5_CYCLES) || \
 137:../Libraries/XMCLib/src/xmc_ccu8.c ****      (cycles == XMC_CCU8_SLICE_EVENT_FILTER_7_CYCLES))
 138:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 139:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_CAP_TIMER_CLEAR_MODE(mode) \
 140:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((mode == XMC_CCU8_SLICE_TIMER_CLEAR_MODE_NEVER)   || \
 141:../Libraries/XMCLib/src/xmc_ccu8.c ****      (mode == XMC_CCU8_SLICE_TIMER_CLEAR_MODE_CAP_HIGH)|| \
 142:../Libraries/XMCLib/src/xmc_ccu8.c ****      (mode == XMC_CCU8_SLICE_TIMER_CLEAR_MODE_CAP_LOW) || \
 143:../Libraries/XMCLib/src/xmc_ccu8.c ****      (mode == XMC_CCU8_SLICE_TIMER_CLEAR_MODE_ALWAYS))
 144:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 145:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_MCS_ACTION(mcs_action) \
 146:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((mcs_action == XMC_CCU8_SLICE_MCMS_ACTION_TRANSFER_PR_CR)      || \
 147:../Libraries/XMCLib/src/xmc_ccu8.c ****      (mcs_action == XMC_CCU8_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP) || \
 148:../Libraries/XMCLib/src/xmc_ccu8.c ****      (mcs_action == XMC_CCU8_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP_DIT))
 149:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 150:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_SR_ID(id) \
 151:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((id == XMC_CCU8_SLICE_SR_ID_0) || \
 152:../Libraries/XMCLib/src/xmc_ccu8.c ****      (id == XMC_CCU8_SLICE_SR_ID_1) || \
 153:../Libraries/XMCLib/src/xmc_ccu8.c ****      (id == XMC_CCU8_SLICE_SR_ID_2) || \
 154:../Libraries/XMCLib/src/xmc_ccu8.c ****      (id == XMC_CCU8_SLICE_SR_ID_3))
 155:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 156:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_MODULATION_CHANNEL(channel) \
 157:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((channel == XMC_CCU8_SLICE_MODULATION_CHANNEL_NONE) || \
 158:../Libraries/XMCLib/src/xmc_ccu8.c ****      (channel == XMC_CCU8_SLICE_MODULATION_CHANNEL_1)    || \
 159:../Libraries/XMCLib/src/xmc_ccu8.c ****      (channel == XMC_CCU8_SLICE_MODULATION_CHANNEL_2)    || \
 160:../Libraries/XMCLib/src/xmc_ccu8.c ****      (channel == XMC_CCU8_SLICE_MODULATION_CHANNEL_1_AND_2))
 161:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 162:../Libraries/XMCLib/src/xmc_ccu8.c **** #if((UC_SERIES == XMC13) || (UC_SERIES == XMC14))
 163:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_SLICE_STATUS(channel) \
 164:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((channel == XMC_CCU8_SLICE_STATUS_CHANNEL_1)       || \
 165:../Libraries/XMCLib/src/xmc_ccu8.c ****      (channel == XMC_CCU8_SLICE_STATUS_CHANNEL_2)       || \
 166:../Libraries/XMCLib/src/xmc_ccu8.c ****      (channel == XMC_CCU8_SLICE_STATUS_CHANNEL_1_AND_2) || \
 167:../Libraries/XMCLib/src/xmc_ccu8.c ****      (channel == XMC_CCU8_SLICE_STATUS_CHANNEL_1_OR_2))
 168:../Libraries/XMCLib/src/xmc_ccu8.c **** #else
 169:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_SLICE_STATUS(channel) \
 170:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((channel == XMC_CCU8_SLICE_STATUS_CHANNEL_1)       || \
 171:../Libraries/XMCLib/src/xmc_ccu8.c ****      (channel == XMC_CCU8_SLICE_STATUS_CHANNEL_2)       || \
 172:../Libraries/XMCLib/src/xmc_ccu8.c ****      (channel == XMC_CCU8_SLICE_STATUS_CHANNEL_1_AND_2))
 173:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 174:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 175:../Libraries/XMCLib/src/xmc_ccu8.c **** /**************************************************************************************************
 176:../Libraries/XMCLib/src/xmc_ccu8.c ****  * LOCAL ROUTINES
 177:../Libraries/XMCLib/src/xmc_ccu8.c ****  **************************************************************************************************
 178:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 179:../Libraries/XMCLib/src/xmc_ccu8.c **** __STATIC_INLINE void XMC_CCU8_lAssertReset(const XMC_CCU8_MODULE_t *const module)
 180:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 161              	 .loc 2 180 0
 162              	 .cfi_startproc
 163              	 
 164              	 
 165 0000 80B5     	 push {r7,lr}
 166              	.LCFI18:
 167              	 .cfi_def_cfa_offset 8
 168              	 .cfi_offset 7,-8
 169              	 .cfi_offset 14,-4
 170 0002 82B0     	 sub sp,sp,#8
 171              	.LCFI19:
 172              	 .cfi_def_cfa_offset 16
 173 0004 00AF     	 add r7,sp,#0
 174              	.LCFI20:
 175              	 .cfi_def_cfa_register 7
 176 0006 7860     	 str r0,[r7,#4]
 181:../Libraries/XMCLib/src/xmc_ccu8.c ****   if (module == CCU80)
 177              	 .loc 2 181 0
 178 0008 7B68     	 ldr r3,[r7,#4]
 179 000a 094A     	 ldr r2,.L7
 180 000c 9342     	 cmp r3,r2
 181 000e 03D1     	 bne .L5
 182:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 183:../Libraries/XMCLib/src/xmc_ccu8.c ****     XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU80);
 182              	 .loc 2 183 0
 183 0010 8020     	 movs r0,#128
 184 0012 FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
 185 0016 07E0     	 b .L4
 186              	.L5:
 184:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 185:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CCU81)
 186:../Libraries/XMCLib/src/xmc_ccu8.c ****   else if (module == CCU81)
 187              	 .loc 2 186 0
 188 0018 7B68     	 ldr r3,[r7,#4]
 189 001a 064A     	 ldr r2,.L7+4
 190 001c 9342     	 cmp r3,r2
 191 001e 03D1     	 bne .L4
 187:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 188:../Libraries/XMCLib/src/xmc_ccu8.c ****     XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU81);
 192              	 .loc 2 188 0
 193 0020 4FF48070 	 mov r0,#256
 194 0024 FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
 195              	.L4:
 189:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 190:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 191:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
 192:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 193:../Libraries/XMCLib/src/xmc_ccu8.c ****     XMC_ASSERT("XMC_CCU8_lAssertReset:Invalid Module Pointer", 0);
 194:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 195:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 196              	 .loc 2 195 0
 197 0028 0837     	 adds r7,r7,#8
 198              	.LCFI21:
 199              	 .cfi_def_cfa_offset 8
 200 002a BD46     	 mov sp,r7
 201              	.LCFI22:
 202              	 .cfi_def_cfa_register 13
 203              	 
 204 002c 80BD     	 pop {r7,pc}
 205              	.L8:
 206 002e 00BF     	 .align 2
 207              	.L7:
 208 0030 00000240 	 .word 1073872896
 209 0034 00400240 	 .word 1073889280
 210              	 .cfi_endproc
 211              	.LFE206:
 213              	 .section .text.XMC_CCU8_lDeassertReset,"ax",%progbits
 214              	 .align 2
 215              	 .thumb
 216              	 .thumb_func
 218              	XMC_CCU8_lDeassertReset:
 219              	.LFB207:
 196:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 197:../Libraries/XMCLib/src/xmc_ccu8.c **** __STATIC_INLINE void XMC_CCU8_lDeassertReset(const XMC_CCU8_MODULE_t *const module)
 198:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 220              	 .loc 2 198 0
 221              	 .cfi_startproc
 222              	 
 223              	 
 224 0000 80B5     	 push {r7,lr}
 225              	.LCFI23:
 226              	 .cfi_def_cfa_offset 8
 227              	 .cfi_offset 7,-8
 228              	 .cfi_offset 14,-4
 229 0002 82B0     	 sub sp,sp,#8
 230              	.LCFI24:
 231              	 .cfi_def_cfa_offset 16
 232 0004 00AF     	 add r7,sp,#0
 233              	.LCFI25:
 234              	 .cfi_def_cfa_register 7
 235 0006 7860     	 str r0,[r7,#4]
 199:../Libraries/XMCLib/src/xmc_ccu8.c ****   if (module == CCU80)
 236              	 .loc 2 199 0
 237 0008 7B68     	 ldr r3,[r7,#4]
 238 000a 094A     	 ldr r2,.L12
 239 000c 9342     	 cmp r3,r2
 240 000e 03D1     	 bne .L10
 200:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 201:../Libraries/XMCLib/src/xmc_ccu8.c ****     XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU80);
 241              	 .loc 2 201 0
 242 0010 8020     	 movs r0,#128
 243 0012 FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 244 0016 07E0     	 b .L9
 245              	.L10:
 202:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 203:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CCU81)
 204:../Libraries/XMCLib/src/xmc_ccu8.c ****   else if (module == CCU81)
 246              	 .loc 2 204 0
 247 0018 7B68     	 ldr r3,[r7,#4]
 248 001a 064A     	 ldr r2,.L12+4
 249 001c 9342     	 cmp r3,r2
 250 001e 03D1     	 bne .L9
 205:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 206:../Libraries/XMCLib/src/xmc_ccu8.c ****     XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU81);
 251              	 .loc 2 206 0
 252 0020 4FF48070 	 mov r0,#256
 253 0024 FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 254              	.L9:
 207:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 208:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 209:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
 210:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 211:../Libraries/XMCLib/src/xmc_ccu8.c ****     XMC_ASSERT("XMC_CCU8_lDeassertReset:Invalid Module Pointer", 0);
 212:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 213:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 255              	 .loc 2 213 0
 256 0028 0837     	 adds r7,r7,#8
 257              	.LCFI26:
 258              	 .cfi_def_cfa_offset 8
 259 002a BD46     	 mov sp,r7
 260              	.LCFI27:
 261              	 .cfi_def_cfa_register 13
 262              	 
 263 002c 80BD     	 pop {r7,pc}
 264              	.L13:
 265 002e 00BF     	 .align 2
 266              	.L12:
 267 0030 00000240 	 .word 1073872896
 268 0034 00400240 	 .word 1073889280
 269              	 .cfi_endproc
 270              	.LFE207:
 272              	 .section .text.XMC_CCU8_EnableModule,"ax",%progbits
 273              	 .align 2
 274              	 .global XMC_CCU8_EnableModule
 275              	 .thumb
 276              	 .thumb_func
 278              	XMC_CCU8_EnableModule:
 279              	.LFB208:
 214:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 215:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 216:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CLOCK_GATING_SUPPORTED)
 217:../Libraries/XMCLib/src/xmc_ccu8.c **** __STATIC_INLINE void XMC_CCU8_lGateClock(XMC_CCU8_MODULE_t *const module)
 218:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 219:../Libraries/XMCLib/src/xmc_ccu8.c ****   if (module == CCU80)
 220:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 221:../Libraries/XMCLib/src/xmc_ccu8.c ****     XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU80);
 222:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 223:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CCU81)
 224:../Libraries/XMCLib/src/xmc_ccu8.c ****   else if (module == CCU81)
 225:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 226:../Libraries/XMCLib/src/xmc_ccu8.c ****     XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU81);
 227:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 228:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 229:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
 230:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 231:../Libraries/XMCLib/src/xmc_ccu8.c ****     XMC_ASSERT("XMC_CCU8_lGateClock:Invalid Module Pointer", 0);
 232:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 233:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 234:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 235:../Libraries/XMCLib/src/xmc_ccu8.c **** __STATIC_INLINE void XMC_CCU8_lUngateClock(XMC_CCU8_MODULE_t *const module)
 236:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 237:../Libraries/XMCLib/src/xmc_ccu8.c ****   if (module == CCU80)
 238:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 239:../Libraries/XMCLib/src/xmc_ccu8.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU80);
 240:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 241:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CCU81)
 242:../Libraries/XMCLib/src/xmc_ccu8.c ****   else if (module == CCU81)
 243:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 244:../Libraries/XMCLib/src/xmc_ccu8.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU81);
 245:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 246:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 247:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
 248:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 249:../Libraries/XMCLib/src/xmc_ccu8.c ****     XMC_ASSERT("XMC_CCU8_lUngateClock:Invalid Module Pointer", 0);
 250:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 251:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 252:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 253:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 254:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined (XMC_ASSERT_ENABLE)
 255:../Libraries/XMCLib/src/xmc_ccu8.c **** __STATIC_INLINE bool XMC_CCU8_SLICE_IsInputvalid(XMC_CCU8_SLICE_INPUT_t input)
 256:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 257:../Libraries/XMCLib/src/xmc_ccu8.c **** #if (UC_SERIES == XMC14)
 258:../Libraries/XMCLib/src/xmc_ccu8.c ****   return (input < 48U);
 259:../Libraries/XMCLib/src/xmc_ccu8.c **** #else
 260:../Libraries/XMCLib/src/xmc_ccu8.c ****   return (input < 16U);
 261:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 262:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 263:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 264:../Libraries/XMCLib/src/xmc_ccu8.c **** /**************************************************************************************************
 265:../Libraries/XMCLib/src/xmc_ccu8.c ****  * API IMPLEMENTATION
 266:../Libraries/XMCLib/src/xmc_ccu8.c ****  **************************************************************************************************
 267:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 268:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to set the CCU8 module as active and enable the clock  */
 269:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_EnableModule(XMC_CCU8_MODULE_t *const module)
 270:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 280              	 .loc 2 270 0
 281              	 .cfi_startproc
 282              	 
 283              	 
 284 0000 80B5     	 push {r7,lr}
 285              	.LCFI28:
 286              	 .cfi_def_cfa_offset 8
 287              	 .cfi_offset 7,-8
 288              	 .cfi_offset 14,-4
 289 0002 82B0     	 sub sp,sp,#8
 290              	.LCFI29:
 291              	 .cfi_def_cfa_offset 16
 292 0004 00AF     	 add r7,sp,#0
 293              	.LCFI30:
 294              	 .cfi_def_cfa_register 7
 295 0006 7860     	 str r0,[r7,#4]
 271:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_EnableModule:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
 272:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 273:../Libraries/XMCLib/src/xmc_ccu8.c **** #if (UC_FAMILY == XMC4)
 274:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Enable CCU8 module clock */
 275:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 296              	 .loc 2 275 0
 297 0008 1020     	 movs r0,#16
 298 000a FFF7FEFF 	 bl XMC_SCU_CLOCK_EnableClock
 276:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 277:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 278:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CLOCK_GATING_SUPPORTED)
 279:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_CCU8_lUngateClock(module);
 280:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 281:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 282:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 283:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_CCU8_lDeassertReset(module);
 299              	 .loc 2 283 0
 300 000e 7868     	 ldr r0,[r7,#4]
 301 0010 FFF7FEFF 	 bl XMC_CCU8_lDeassertReset
 284:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 285:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 302              	 .loc 2 285 0
 303 0014 0837     	 adds r7,r7,#8
 304              	.LCFI31:
 305              	 .cfi_def_cfa_offset 8
 306 0016 BD46     	 mov sp,r7
 307              	.LCFI32:
 308              	 .cfi_def_cfa_register 13
 309              	 
 310 0018 80BD     	 pop {r7,pc}
 311              	 .cfi_endproc
 312              	.LFE208:
 314 001a 00BF     	 .section .text.XMC_CCU8_DisableModule,"ax",%progbits
 315              	 .align 2
 316              	 .global XMC_CCU8_DisableModule
 317              	 .thumb
 318              	 .thumb_func
 320              	XMC_CCU8_DisableModule:
 321              	.LFB209:
 286:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 287:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to set the CCU8 module as idle and disable the clock  */
 288:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_DisableModule(XMC_CCU8_MODULE_t *const module)
 289:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 322              	 .loc 2 289 0
 323              	 .cfi_startproc
 324              	 
 325              	 
 326 0000 80B5     	 push {r7,lr}
 327              	.LCFI33:
 328              	 .cfi_def_cfa_offset 8
 329              	 .cfi_offset 7,-8
 330              	 .cfi_offset 14,-4
 331 0002 82B0     	 sub sp,sp,#8
 332              	.LCFI34:
 333              	 .cfi_def_cfa_offset 16
 334 0004 00AF     	 add r7,sp,#0
 335              	.LCFI35:
 336              	 .cfi_def_cfa_register 7
 337 0006 7860     	 str r0,[r7,#4]
 290:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_DisableModule:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
 291:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 292:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 293:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_CCU8_lAssertReset(module);
 338              	 .loc 2 293 0
 339 0008 7868     	 ldr r0,[r7,#4]
 340 000a FFF7FEFF 	 bl XMC_CCU8_lAssertReset
 294:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 295:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 296:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CLOCK_GATING_SUPPORTED)
 297:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_CCU8_lGateClock(module);
 298:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 299:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 341              	 .loc 2 299 0
 342 000e 0837     	 adds r7,r7,#8
 343              	.LCFI36:
 344              	 .cfi_def_cfa_offset 8
 345 0010 BD46     	 mov sp,r7
 346              	.LCFI37:
 347              	 .cfi_def_cfa_register 13
 348              	 
 349 0012 80BD     	 pop {r7,pc}
 350              	 .cfi_endproc
 351              	.LFE209:
 353              	 .section .text.XMC_CCU8_Init,"ax",%progbits
 354              	 .align 2
 355              	 .global XMC_CCU8_Init
 356              	 .thumb
 357              	 .thumb_func
 359              	XMC_CCU8_Init:
 360              	.LFB210:
 300:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 301:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to initialize CCU8 global resources  */
 302:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_Init(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SLICE_MCMS_ACTION_t mcs_action)
 303:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 361              	 .loc 2 303 0
 362              	 .cfi_startproc
 363              	 
 364              	 
 365 0000 80B5     	 push {r7,lr}
 366              	.LCFI38:
 367              	 .cfi_def_cfa_offset 8
 368              	 .cfi_offset 7,-8
 369              	 .cfi_offset 14,-4
 370 0002 84B0     	 sub sp,sp,#16
 371              	.LCFI39:
 372              	 .cfi_def_cfa_offset 24
 373 0004 00AF     	 add r7,sp,#0
 374              	.LCFI40:
 375              	 .cfi_def_cfa_register 7
 376 0006 7860     	 str r0,[r7,#4]
 377 0008 0B46     	 mov r3,r1
 378 000a FB70     	 strb r3,[r7,#3]
 304:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t gctrl;
 305:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 306:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_Init:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
 307:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_Init:Invalid mcs action", XMC_CCU8_SLICE_CHECK_MCS_ACTION(mcs_action));
 308:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 309:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Enable CCU8 module */
 310:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_CCU8_EnableModule(module);
 379              	 .loc 2 310 0
 380 000c 7868     	 ldr r0,[r7,#4]
 381 000e FFF7FEFF 	 bl XMC_CCU8_EnableModule
 311:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Start the prescaler */
 312:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_CCU8_StartPrescaler(module);
 382              	 .loc 2 312 0
 383 0012 7868     	 ldr r0,[r7,#4]
 384 0014 FFF7FEFF 	 bl XMC_CCU8_StartPrescaler
 313:../Libraries/XMCLib/src/xmc_ccu8.c ****   
 314:../Libraries/XMCLib/src/xmc_ccu8.c ****   gctrl = module->GCTRL;
 385              	 .loc 2 314 0
 386 0018 7B68     	 ldr r3,[r7,#4]
 387 001a 1B68     	 ldr r3,[r3]
 388 001c FB60     	 str r3,[r7,#12]
 315:../Libraries/XMCLib/src/xmc_ccu8.c ****   gctrl &= ~((uint32_t) CCU8_GCTRL_MSDE_Msk);
 389              	 .loc 2 315 0
 390 001e FB68     	 ldr r3,[r7,#12]
 391 0020 23F44043 	 bic r3,r3,#49152
 392 0024 FB60     	 str r3,[r7,#12]
 316:../Libraries/XMCLib/src/xmc_ccu8.c ****   gctrl |= (uint32_t)mcs_action << CCU8_GCTRL_MSDE_Pos;
 393              	 .loc 2 316 0
 394 0026 FB78     	 ldrb r3,[r7,#3]
 395 0028 9B03     	 lsls r3,r3,#14
 396 002a FA68     	 ldr r2,[r7,#12]
 397 002c 1343     	 orrs r3,r3,r2
 398 002e FB60     	 str r3,[r7,#12]
 317:../Libraries/XMCLib/src/xmc_ccu8.c ****   
 318:../Libraries/XMCLib/src/xmc_ccu8.c ****   module->GCTRL = gctrl;
 399              	 .loc 2 318 0
 400 0030 7B68     	 ldr r3,[r7,#4]
 401 0032 FA68     	 ldr r2,[r7,#12]
 402 0034 1A60     	 str r2,[r3]
 319:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 403              	 .loc 2 319 0
 404 0036 1037     	 adds r7,r7,#16
 405              	.LCFI41:
 406              	 .cfi_def_cfa_offset 8
 407 0038 BD46     	 mov sp,r7
 408              	.LCFI42:
 409              	 .cfi_def_cfa_register 13
 410              	 
 411 003a 80BD     	 pop {r7,pc}
 412              	 .cfi_endproc
 413              	.LFE210:
 415              	 .section .text.XMC_CCU8_SetModuleClock,"ax",%progbits
 416              	 .align 2
 417              	 .global XMC_CCU8_SetModuleClock
 418              	 .thumb
 419              	 .thumb_func
 421              	XMC_CCU8_SetModuleClock:
 422              	.LFB211:
 320:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 321:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to select CCU8 module clock */
 322:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SetModuleClock(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_CLOCK_t clock)
 323:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 423              	 .loc 2 323 0
 424              	 .cfi_startproc
 425              	 
 426              	 
 427              	 
 428 0000 80B4     	 push {r7}
 429              	.LCFI43:
 430              	 .cfi_def_cfa_offset 4
 431              	 .cfi_offset 7,-4
 432 0002 85B0     	 sub sp,sp,#20
 433              	.LCFI44:
 434              	 .cfi_def_cfa_offset 24
 435 0004 00AF     	 add r7,sp,#0
 436              	.LCFI45:
 437              	 .cfi_def_cfa_register 7
 438 0006 7860     	 str r0,[r7,#4]
 439 0008 0B46     	 mov r3,r1
 440 000a FB70     	 strb r3,[r7,#3]
 324:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t gctrl;
 325:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 326:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SetModuleClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
 327:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SetModuleClock:Invalid Module Clock", XMC_CCU8_SLICE_CHECK_CLOCK(clock));
 328:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 329:../Libraries/XMCLib/src/xmc_ccu8.c ****   gctrl = module->GCTRL;
 441              	 .loc 2 329 0
 442 000c 7B68     	 ldr r3,[r7,#4]
 443 000e 1B68     	 ldr r3,[r3]
 444 0010 FB60     	 str r3,[r7,#12]
 330:../Libraries/XMCLib/src/xmc_ccu8.c ****   gctrl &= ~((uint32_t) CCU8_GCTRL_PCIS_Msk);
 445              	 .loc 2 330 0
 446 0012 FB68     	 ldr r3,[r7,#12]
 447 0014 23F03003 	 bic r3,r3,#48
 448 0018 FB60     	 str r3,[r7,#12]
 331:../Libraries/XMCLib/src/xmc_ccu8.c ****   gctrl |= ((uint32_t) clock) << CCU8_GCTRL_PCIS_Pos;
 449              	 .loc 2 331 0
 450 001a FB78     	 ldrb r3,[r7,#3]
 451 001c 1B01     	 lsls r3,r3,#4
 452 001e FA68     	 ldr r2,[r7,#12]
 453 0020 1343     	 orrs r3,r3,r2
 454 0022 FB60     	 str r3,[r7,#12]
 332:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 333:../Libraries/XMCLib/src/xmc_ccu8.c ****   module->GCTRL = gctrl;
 455              	 .loc 2 333 0
 456 0024 7B68     	 ldr r3,[r7,#4]
 457 0026 FA68     	 ldr r2,[r7,#12]
 458 0028 1A60     	 str r2,[r3]
 334:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 459              	 .loc 2 334 0
 460 002a 1437     	 adds r7,r7,#20
 461              	.LCFI46:
 462              	 .cfi_def_cfa_offset 4
 463 002c BD46     	 mov sp,r7
 464              	.LCFI47:
 465              	 .cfi_def_cfa_register 13
 466              	 
 467 002e 5DF8047B 	 ldr r7,[sp],#4
 468              	.LCFI48:
 469              	 .cfi_restore 7
 470              	 .cfi_def_cfa_offset 0
 471 0032 7047     	 bx lr
 472              	 .cfi_endproc
 473              	.LFE211:
 475              	 .section .text.XMC_CCU8_SLICE_CompareInit,"ax",%progbits
 476              	 .align 2
 477              	 .global XMC_CCU8_SLICE_CompareInit
 478              	 .thumb
 479              	 .thumb_func
 481              	XMC_CCU8_SLICE_CompareInit:
 482              	.LFB212:
 335:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 336:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure CC8 Slice in Compare mode */
 337:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_CompareInit(XMC_CCU8_SLICE_t *const slice,
 338:../Libraries/XMCLib/src/xmc_ccu8.c ****                                 const XMC_CCU8_SLICE_COMPARE_CONFIG_t *const compare_init)
 339:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 483              	 .loc 2 339 0
 484              	 .cfi_startproc
 485              	 
 486              	 
 487 0000 80B5     	 push {r7,lr}
 488              	.LCFI49:
 489              	 .cfi_def_cfa_offset 8
 490              	 .cfi_offset 7,-8
 491              	 .cfi_offset 14,-4
 492 0002 82B0     	 sub sp,sp,#8
 493              	.LCFI50:
 494              	 .cfi_def_cfa_offset 16
 495 0004 00AF     	 add r7,sp,#0
 496              	.LCFI51:
 497              	 .cfi_def_cfa_register 7
 498 0006 7860     	 str r0,[r7,#4]
 499 0008 3960     	 str r1,[r7]
 340:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 341:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Timer Init Pointer is NULL",
 342:../Libraries/XMCLib/src/xmc_ccu8.c ****              (XMC_CCU8_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);
 343:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Stops the timer */
 344:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_CCU8_SLICE_StopTimer(slice);
 500              	 .loc 2 344 0
 501 000a 7868     	 ldr r0,[r7,#4]
 502 000c FFF7FEFF 	 bl XMC_CCU8_SLICE_StopTimer
 345:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Program the timer mode */
 346:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC = compare_init->tc;
 503              	 .loc 2 346 0
 504 0010 3B68     	 ldr r3,[r7]
 505 0012 1A68     	 ldr r2,[r3]
 506 0014 7B68     	 ldr r3,[r7,#4]
 507 0016 5A61     	 str r2,[r3,#20]
 347:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Enable the timer concatenation */
 348:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
 508              	 .loc 2 348 0
 509 0018 3B68     	 ldr r3,[r7]
 510 001a 5B7B     	 ldrb r3,[r3,#13]
 511 001c C3F30013 	 ubfx r3,r3,#4,#1
 512 0020 DBB2     	 uxtb r3,r3
 513 0022 1A05     	 lsls r2,r3,#20
 514 0024 7B68     	 ldr r3,[r7,#4]
 515 0026 5A60     	 str r2,[r3,#4]
 349:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Program initial prescaler divider value */
 350:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->PSC = (uint32_t) compare_init->prescaler_initval;
 516              	 .loc 2 350 0
 517 0028 3B68     	 ldr r3,[r7]
 518 002a 1B7B     	 ldrb r3,[r3,#12]
 519 002c C3F30303 	 ubfx r3,r3,#0,#4
 520 0030 DBB2     	 uxtb r3,r3
 521 0032 1A46     	 mov r2,r3
 522 0034 7B68     	 ldr r3,[r7,#4]
 523 0036 5A62     	 str r2,[r3,#36]
 351:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Program floating prescaler compare value */
 352:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->FPCS = (uint32_t) compare_init->float_limit;
 524              	 .loc 2 352 0
 525 0038 3B68     	 ldr r3,[r7]
 526 003a 1B7B     	 ldrb r3,[r3,#12]
 527 003c C3F30313 	 ubfx r3,r3,#4,#4
 528 0040 DBB2     	 uxtb r3,r3
 529 0042 1A46     	 mov r2,r3
 530 0044 7B68     	 ldr r3,[r7,#4]
 531 0046 DA62     	 str r2,[r3,#44]
 353:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Program the dither compare value */
 354:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->DITS = (uint32_t) compare_init->dither_limit;
 532              	 .loc 2 354 0
 533 0048 3B68     	 ldr r3,[r7]
 534 004a 5B7B     	 ldrb r3,[r3,#13]
 535 004c C3F30303 	 ubfx r3,r3,#0,#4
 536 0050 DBB2     	 uxtb r3,r3
 537 0052 1A46     	 mov r2,r3
 538 0054 7B68     	 ldr r3,[r7,#4]
 539 0056 1A62     	 str r2,[r3,#32]
 355:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Program timer output passive level */
 356:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->PSL = (uint32_t) compare_init->psl;
 540              	 .loc 2 356 0
 541 0058 3B68     	 ldr r3,[r7]
 542 005a 5A68     	 ldr r2,[r3,#4]
 543 005c 7B68     	 ldr r3,[r7,#4]
 544 005e 9A61     	 str r2,[r3,#24]
 357:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Asymmetric PWM and Slice output routing configuration */
 358:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CCU8V3) /* Defined for XMC1400 devices only */
 359:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CHC = (uint32_t) compare_init->chc;
 360:../Libraries/XMCLib/src/xmc_ccu8.c **** #else
 361:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CHC = (uint32_t)((uint32_t)compare_init->chc ^ XMC_CCU8_SLICE_CHC_CONFIG_MASK);
 545              	 .loc 2 361 0
 546 0060 3B68     	 ldr r3,[r7]
 547 0062 9B68     	 ldr r3,[r3,#8]
 548 0064 83F01402 	 eor r2,r3,#20
 549 0068 7B68     	 ldr r3,[r7,#4]
 550 006a 9A64     	 str r2,[r3,#72]
 362:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 363:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 551              	 .loc 2 363 0
 552 006c 0837     	 adds r7,r7,#8
 553              	.LCFI52:
 554              	 .cfi_def_cfa_offset 8
 555 006e BD46     	 mov sp,r7
 556              	.LCFI53:
 557              	 .cfi_def_cfa_register 13
 558              	 
 559 0070 80BD     	 pop {r7,pc}
 560              	 .cfi_endproc
 561              	.LFE212:
 563 0072 00BF     	 .section .text.XMC_CCU8_SLICE_CaptureInit,"ax",%progbits
 564              	 .align 2
 565              	 .global XMC_CCU8_SLICE_CaptureInit
 566              	 .thumb
 567              	 .thumb_func
 569              	XMC_CCU8_SLICE_CaptureInit:
 570              	.LFB213:
 364:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 365:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure CC8 Slice in Capture mode */
 366:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_CaptureInit(XMC_CCU8_SLICE_t *const slice, 
 367:../Libraries/XMCLib/src/xmc_ccu8.c ****                                 const XMC_CCU8_SLICE_CAPTURE_CONFIG_t *const capture_init)
 368:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 571              	 .loc 2 368 0
 572              	 .cfi_startproc
 573              	 
 574              	 
 575 0000 80B5     	 push {r7,lr}
 576              	.LCFI54:
 577              	 .cfi_def_cfa_offset 8
 578              	 .cfi_offset 7,-8
 579              	 .cfi_offset 14,-4
 580 0002 82B0     	 sub sp,sp,#8
 581              	.LCFI55:
 582              	 .cfi_def_cfa_offset 16
 583 0004 00AF     	 add r7,sp,#0
 584              	.LCFI56:
 585              	 .cfi_def_cfa_register 7
 586 0006 7860     	 str r0,[r7,#4]
 587 0008 3960     	 str r1,[r7]
 369:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_CaptureInit:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 370:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_CaptureInit:Capture Init Pointer is NULL", 
 371:../Libraries/XMCLib/src/xmc_ccu8.c ****              (XMC_CCU8_SLICE_CAPTURE_CONFIG_t *) NULL != capture_init);
 372:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Stops the timer */
 373:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_CCU8_SLICE_StopTimer(slice);
 588              	 .loc 2 373 0
 589 000a 7868     	 ldr r0,[r7,#4]
 590 000c FFF7FEFF 	 bl XMC_CCU8_SLICE_StopTimer
 374:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Capture mode configuration */
 375:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC = capture_init->tc;
 591              	 .loc 2 375 0
 592 0010 3B68     	 ldr r3,[r7]
 593 0012 1A68     	 ldr r2,[r3]
 594 0014 7B68     	 ldr r3,[r7,#4]
 595 0016 5A61     	 str r2,[r3,#20]
 376:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Enable the timer concatenation */
 377:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = (uint32_t)capture_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
 596              	 .loc 2 377 0
 597 0018 3B68     	 ldr r3,[r7]
 598 001a 5B79     	 ldrb r3,[r3,#5]
 599 001c C3F30003 	 ubfx r3,r3,#0,#1
 600 0020 DBB2     	 uxtb r3,r3
 601 0022 1A05     	 lsls r2,r3,#20
 602 0024 7B68     	 ldr r3,[r7,#4]
 603 0026 5A60     	 str r2,[r3,#4]
 378:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Program floating prescaler compare value */
 379:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->FPCS = (uint32_t) capture_init->float_limit;
 604              	 .loc 2 379 0
 605 0028 3B68     	 ldr r3,[r7]
 606 002a 1B79     	 ldrb r3,[r3,#4]
 607 002c C3F30313 	 ubfx r3,r3,#4,#4
 608 0030 DBB2     	 uxtb r3,r3
 609 0032 1A46     	 mov r2,r3
 610 0034 7B68     	 ldr r3,[r7,#4]
 611 0036 DA62     	 str r2,[r3,#44]
 380:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Program initial prescaler divider value */
 381:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->PSC = (uint32_t) capture_init->prescaler_initval;
 612              	 .loc 2 381 0
 613 0038 3B68     	 ldr r3,[r7]
 614 003a 1B79     	 ldrb r3,[r3,#4]
 615 003c C3F30303 	 ubfx r3,r3,#0,#4
 616 0040 DBB2     	 uxtb r3,r3
 617 0042 1A46     	 mov r2,r3
 618 0044 7B68     	 ldr r3,[r7,#4]
 619 0046 5A62     	 str r2,[r3,#36]
 382:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 620              	 .loc 2 382 0
 621 0048 0837     	 adds r7,r7,#8
 622              	.LCFI57:
 623              	 .cfi_def_cfa_offset 8
 624 004a BD46     	 mov sp,r7
 625              	.LCFI58:
 626              	 .cfi_def_cfa_register 13
 627              	 
 628 004c 80BD     	 pop {r7,pc}
 629              	 .cfi_endproc
 630              	.LFE213:
 632 004e 00BF     	 .section .text.XMC_CCU8_SLICE_SetOutPath,"ax",%progbits
 633              	 .align 2
 634              	 .global XMC_CCU8_SLICE_SetOutPath
 635              	 .thumb
 636              	 .thumb_func
 638              	XMC_CCU8_SLICE_SetOutPath:
 639              	.LFB214:
 383:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 384:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure the each output of the slice with either STx or inverted STx. */
 385:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_SetOutPath(XMC_CCU8_SLICE_t *const slice, const uint32_t out_path_msk)
 386:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 640              	 .loc 2 386 0
 641              	 .cfi_startproc
 642              	 
 643              	 
 644              	 
 645 0000 80B4     	 push {r7}
 646              	.LCFI59:
 647              	 .cfi_def_cfa_offset 4
 648              	 .cfi_offset 7,-4
 649 0002 85B0     	 sub sp,sp,#20
 650              	.LCFI60:
 651              	 .cfi_def_cfa_offset 24
 652 0004 00AF     	 add r7,sp,#0
 653              	.LCFI61:
 654              	 .cfi_def_cfa_register 7
 655 0006 7860     	 str r0,[r7,#4]
 656 0008 3960     	 str r1,[r7]
 387:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t chc;
 388:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetOutPath:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 389:../Libraries/XMCLib/src/xmc_ccu8.c ****   chc = slice->CHC;
 657              	 .loc 2 389 0
 658 000a 7B68     	 ldr r3,[r7,#4]
 659 000c 9B6C     	 ldr r3,[r3,#72]
 660 000e FB60     	 str r3,[r7,#12]
 390:../Libraries/XMCLib/src/xmc_ccu8.c **** #if !defined(CCU8V3) /* Defined for all devices except XMC1400 */
 391:../Libraries/XMCLib/src/xmc_ccu8.c ****   chc &= ~((uint32_t)out_path_msk >> 16U);
 661              	 .loc 2 391 0
 662 0010 3B68     	 ldr r3,[r7]
 663 0012 1B0C     	 lsrs r3,r3,#16
 664 0014 DB43     	 mvns r3,r3
 665 0016 FA68     	 ldr r2,[r7,#12]
 666 0018 1340     	 ands r3,r3,r2
 667 001a FB60     	 str r3,[r7,#12]
 392:../Libraries/XMCLib/src/xmc_ccu8.c ****   chc |= ((uint32_t)out_path_msk & 0xFFFFU);
 668              	 .loc 2 392 0
 669 001c 3B68     	 ldr r3,[r7]
 670 001e 9BB2     	 uxth r3,r3
 671 0020 FA68     	 ldr r2,[r7,#12]
 672 0022 1343     	 orrs r3,r3,r2
 673 0024 FB60     	 str r3,[r7,#12]
 393:../Libraries/XMCLib/src/xmc_ccu8.c **** #else
 394:../Libraries/XMCLib/src/xmc_ccu8.c ****   chc &= ~((uint32_t)((uint32_t)(out_path_msk & 0xCCCC0U) >> 2U));
 395:../Libraries/XMCLib/src/xmc_ccu8.c ****   chc |= ((uint32_t)out_path_msk & 0x33330U);
 396:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 397:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CHC = chc;
 674              	 .loc 2 397 0
 675 0026 7B68     	 ldr r3,[r7,#4]
 676 0028 FA68     	 ldr r2,[r7,#12]
 677 002a 9A64     	 str r2,[r3,#72]
 398:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 678              	 .loc 2 398 0
 679 002c 1437     	 adds r7,r7,#20
 680              	.LCFI62:
 681              	 .cfi_def_cfa_offset 4
 682 002e BD46     	 mov sp,r7
 683              	.LCFI63:
 684              	 .cfi_def_cfa_register 13
 685              	 
 686 0030 5DF8047B 	 ldr r7,[sp],#4
 687              	.LCFI64:
 688              	 .cfi_restore 7
 689              	 .cfi_def_cfa_offset 0
 690 0034 7047     	 bx lr
 691              	 .cfi_endproc
 692              	.LFE214:
 694 0036 00BF     	 .section .text.XMC_CCU8_SetMultiChannelShadowTransferMode,"ax",%progbits
 695              	 .align 2
 696              	 .global XMC_CCU8_SetMultiChannelShadowTransferMode
 697              	 .thumb
 698              	 .thumb_func
 700              	XMC_CCU8_SetMultiChannelShadowTransferMode:
 701              	.LFB215:
 399:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 400:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure the multichannel shadow transfer request via SW and via the CCU8x.MCSS input. *
 401:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SetMultiChannelShadowTransferMode(XMC_CCU8_MODULE_t *const module, const uint32_t sli
 402:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 702              	 .loc 2 402 0
 703              	 .cfi_startproc
 704              	 
 705              	 
 706              	 
 707 0000 80B4     	 push {r7}
 708              	.LCFI65:
 709              	 .cfi_def_cfa_offset 4
 710              	 .cfi_offset 7,-4
 711 0002 85B0     	 sub sp,sp,#20
 712              	.LCFI66:
 713              	 .cfi_def_cfa_offset 24
 714 0004 00AF     	 add r7,sp,#0
 715              	.LCFI67:
 716              	 .cfi_def_cfa_register 7
 717 0006 7860     	 str r0,[r7,#4]
 718 0008 3960     	 str r1,[r7]
 403:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t gctrl;
 404:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 405:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SetMultiChannelShadowTransferMode:Invalid module Pointer", XMC_CCU8_IsValidM
 406:../Libraries/XMCLib/src/xmc_ccu8.c ****   
 407:../Libraries/XMCLib/src/xmc_ccu8.c ****   gctrl = module->GCTRL;
 719              	 .loc 2 407 0
 720 000a 7B68     	 ldr r3,[r7,#4]
 721 000c 1B68     	 ldr r3,[r3]
 722 000e FB60     	 str r3,[r7,#12]
 408:../Libraries/XMCLib/src/xmc_ccu8.c ****   gctrl &= ~((uint32_t)slice_mode_msk >> 16U);
 723              	 .loc 2 408 0
 724 0010 3B68     	 ldr r3,[r7]
 725 0012 1B0C     	 lsrs r3,r3,#16
 726 0014 DB43     	 mvns r3,r3
 727 0016 FA68     	 ldr r2,[r7,#12]
 728 0018 1340     	 ands r3,r3,r2
 729 001a FB60     	 str r3,[r7,#12]
 409:../Libraries/XMCLib/src/xmc_ccu8.c ****   gctrl |= ((uint32_t)slice_mode_msk & 0xFFFFU);
 730              	 .loc 2 409 0
 731 001c 3B68     	 ldr r3,[r7]
 732 001e 9BB2     	 uxth r3,r3
 733 0020 FA68     	 ldr r2,[r7,#12]
 734 0022 1343     	 orrs r3,r3,r2
 735 0024 FB60     	 str r3,[r7,#12]
 410:../Libraries/XMCLib/src/xmc_ccu8.c ****   module->GCTRL = gctrl;
 736              	 .loc 2 410 0
 737 0026 7B68     	 ldr r3,[r7,#4]
 738 0028 FA68     	 ldr r2,[r7,#12]
 739 002a 1A60     	 str r2,[r3]
 411:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 740              	 .loc 2 411 0
 741 002c 1437     	 adds r7,r7,#20
 742              	.LCFI68:
 743              	 .cfi_def_cfa_offset 4
 744 002e BD46     	 mov sp,r7
 745              	.LCFI69:
 746              	 .cfi_def_cfa_register 13
 747              	 
 748 0030 5DF8047B 	 ldr r7,[sp],#4
 749              	.LCFI70:
 750              	 .cfi_restore 7
 751              	 .cfi_def_cfa_offset 0
 752 0034 7047     	 bx lr
 753              	 .cfi_endproc
 754              	.LFE215:
 756 0036 00BF     	 .section .text.XMC_CCU8_SLICE_StartConfig,"ax",%progbits
 757              	 .align 2
 758              	 .global XMC_CCU8_SLICE_StartConfig
 759              	 .thumb
 760              	 .thumb_func
 762              	XMC_CCU8_SLICE_StartConfig:
 763              	.LFB216:
 412:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 413:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 414:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure the Start trigger function of a slice*/
 415:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_StartConfig(XMC_CCU8_SLICE_t *const slice,
 416:../Libraries/XMCLib/src/xmc_ccu8.c ****                                 const XMC_CCU8_SLICE_EVENT_t event,
 417:../Libraries/XMCLib/src/xmc_ccu8.c ****                                 const XMC_CCU8_SLICE_START_MODE_t start_mode)
 418:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 764              	 .loc 2 418 0
 765              	 .cfi_startproc
 766              	 
 767              	 
 768              	 
 769 0000 80B4     	 push {r7}
 770              	.LCFI71:
 771              	 .cfi_def_cfa_offset 4
 772              	 .cfi_offset 7,-4
 773 0002 85B0     	 sub sp,sp,#20
 774              	.LCFI72:
 775              	 .cfi_def_cfa_offset 24
 776 0004 00AF     	 add r7,sp,#0
 777              	.LCFI73:
 778              	 .cfi_def_cfa_register 7
 779 0006 7860     	 str r0,[r7,#4]
 780 0008 0B46     	 mov r3,r1
 781 000a FB70     	 strb r3,[r7,#3]
 782 000c 1346     	 mov r3,r2
 783 000e BB70     	 strb r3,[r7,#2]
 419:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cmc;
 420:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t tc;
 421:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 422:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 423:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
 424:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Start Mode", 
 425:../Libraries/XMCLib/src/xmc_ccu8.c ****              ((start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START) ||\
 426:../Libraries/XMCLib/src/xmc_ccu8.c ****               (start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR)));
 427:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc = slice->CMC;
 784              	 .loc 2 427 0
 785 0010 7B68     	 ldr r3,[r7,#4]
 786 0012 5B68     	 ldr r3,[r3,#4]
 787 0014 BB60     	 str r3,[r7,#8]
 428:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 429:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc &= ~((uint32_t) CCU8_CC8_CMC_STRTS_Msk);
 788              	 .loc 2 429 0
 789 0016 BB68     	 ldr r3,[r7,#8]
 790 0018 23F00303 	 bic r3,r3,#3
 791 001c BB60     	 str r3,[r7,#8]
 430:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc |= ((uint32_t) event) << CCU8_CC8_CMC_STRTS_Pos;
 792              	 .loc 2 430 0
 793 001e FB78     	 ldrb r3,[r7,#3]
 794 0020 BA68     	 ldr r2,[r7,#8]
 795 0022 1343     	 orrs r3,r3,r2
 796 0024 BB60     	 str r3,[r7,#8]
 431:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 432:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = cmc;
 797              	 .loc 2 432 0
 798 0026 7B68     	 ldr r3,[r7,#4]
 799 0028 BA68     	 ldr r2,[r7,#8]
 800 002a 5A60     	 str r2,[r3,#4]
 433:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 434:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc  = slice->TC;
 801              	 .loc 2 434 0
 802 002c 7B68     	 ldr r3,[r7,#4]
 803 002e 5B69     	 ldr r3,[r3,#20]
 804 0030 FB60     	 str r3,[r7,#12]
 435:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 436:../Libraries/XMCLib/src/xmc_ccu8.c ****   if(start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR)
 805              	 .loc 2 436 0
 806 0032 BB78     	 ldrb r3,[r7,#2]
 807 0034 012B     	 cmp r3,#1
 808 0036 04D1     	 bne .L23
 437:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 438:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc |= (uint32_t) CCU8_CC8_TC_STRM_Msk;
 809              	 .loc 2 438 0
 810 0038 FB68     	 ldr r3,[r7,#12]
 811 003a 43F48063 	 orr r3,r3,#1024
 812 003e FB60     	 str r3,[r7,#12]
 813 0040 03E0     	 b .L24
 814              	.L23:
 439:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 440:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
 441:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 442:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc &= ~((uint32_t) CCU8_CC8_TC_STRM_Msk);
 815              	 .loc 2 442 0
 816 0042 FB68     	 ldr r3,[r7,#12]
 817 0044 23F48063 	 bic r3,r3,#1024
 818 0048 FB60     	 str r3,[r7,#12]
 819              	.L24:
 443:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 444:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 445:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC = tc;
 820              	 .loc 2 445 0
 821 004a 7B68     	 ldr r3,[r7,#4]
 822 004c FA68     	 ldr r2,[r7,#12]
 823 004e 5A61     	 str r2,[r3,#20]
 446:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 824              	 .loc 2 446 0
 825 0050 1437     	 adds r7,r7,#20
 826              	.LCFI74:
 827              	 .cfi_def_cfa_offset 4
 828 0052 BD46     	 mov sp,r7
 829              	.LCFI75:
 830              	 .cfi_def_cfa_register 13
 831              	 
 832 0054 5DF8047B 	 ldr r7,[sp],#4
 833              	.LCFI76:
 834              	 .cfi_restore 7
 835              	 .cfi_def_cfa_offset 0
 836 0058 7047     	 bx lr
 837              	 .cfi_endproc
 838              	.LFE216:
 840 005a 00BF     	 .section .text.XMC_CCU8_SLICE_StopConfig,"ax",%progbits
 841              	 .align 2
 842              	 .global XMC_CCU8_SLICE_StopConfig
 843              	 .thumb
 844              	 .thumb_func
 846              	XMC_CCU8_SLICE_StopConfig:
 847              	.LFB217:
 447:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 448:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure the Stop trigger function of a slice */
 449:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_StopConfig(XMC_CCU8_SLICE_t *const slice,
 450:../Libraries/XMCLib/src/xmc_ccu8.c ****                                const XMC_CCU8_SLICE_EVENT_t event,
 451:../Libraries/XMCLib/src/xmc_ccu8.c ****                                const XMC_CCU8_SLICE_END_MODE_t end_mode)
 452:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 848              	 .loc 2 452 0
 849              	 .cfi_startproc
 850              	 
 851              	 
 852              	 
 853 0000 80B4     	 push {r7}
 854              	.LCFI77:
 855              	 .cfi_def_cfa_offset 4
 856              	 .cfi_offset 7,-4
 857 0002 85B0     	 sub sp,sp,#20
 858              	.LCFI78:
 859              	 .cfi_def_cfa_offset 24
 860 0004 00AF     	 add r7,sp,#0
 861              	.LCFI79:
 862              	 .cfi_def_cfa_register 7
 863 0006 7860     	 str r0,[r7,#4]
 864 0008 0B46     	 mov r3,r1
 865 000a FB70     	 strb r3,[r7,#3]
 866 000c 1346     	 mov r3,r2
 867 000e BB70     	 strb r3,[r7,#2]
 453:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cmc;
 454:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t tc;
 455:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 456:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_StopConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 457:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_StopConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
 458:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_StopConfig:Invalid End Mode", XMC_CCU8_SLICE_CHECK_END_MODE(end_mode))
 459:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 460:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc = slice->CMC;
 868              	 .loc 2 460 0
 869 0010 7B68     	 ldr r3,[r7,#4]
 870 0012 5B68     	 ldr r3,[r3,#4]
 871 0014 FB60     	 str r3,[r7,#12]
 461:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First, Bind the event with the stop function */
 462:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc &= ~((uint32_t) CCU8_CC8_CMC_ENDS_Msk);
 872              	 .loc 2 462 0
 873 0016 FB68     	 ldr r3,[r7,#12]
 874 0018 23F00C03 	 bic r3,r3,#12
 875 001c FB60     	 str r3,[r7,#12]
 463:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc |= ((uint32_t) event) << CCU8_CC8_CMC_ENDS_Pos;
 876              	 .loc 2 463 0
 877 001e FB78     	 ldrb r3,[r7,#3]
 878 0020 9B00     	 lsls r3,r3,#2
 879 0022 FA68     	 ldr r2,[r7,#12]
 880 0024 1343     	 orrs r3,r3,r2
 881 0026 FB60     	 str r3,[r7,#12]
 464:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 465:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = cmc;
 882              	 .loc 2 465 0
 883 0028 7B68     	 ldr r3,[r7,#4]
 884 002a FA68     	 ldr r2,[r7,#12]
 885 002c 5A60     	 str r2,[r3,#4]
 466:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 467:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the stop mode */
 468:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc = slice->TC;
 886              	 .loc 2 468 0
 887 002e 7B68     	 ldr r3,[r7,#4]
 888 0030 5B69     	 ldr r3,[r3,#20]
 889 0032 BB60     	 str r3,[r7,#8]
 469:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc &= ~((uint32_t) CCU8_CC8_TC_ENDM_Msk);
 890              	 .loc 2 469 0
 891 0034 BB68     	 ldr r3,[r7,#8]
 892 0036 23F44073 	 bic r3,r3,#768
 893 003a BB60     	 str r3,[r7,#8]
 470:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc |= ((uint32_t) end_mode) << CCU8_CC8_TC_ENDM_Pos;
 894              	 .loc 2 470 0
 895 003c BB78     	 ldrb r3,[r7,#2]
 896 003e 1B02     	 lsls r3,r3,#8
 897 0040 BA68     	 ldr r2,[r7,#8]
 898 0042 1343     	 orrs r3,r3,r2
 899 0044 BB60     	 str r3,[r7,#8]
 471:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 472:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC = tc;
 900              	 .loc 2 472 0
 901 0046 7B68     	 ldr r3,[r7,#4]
 902 0048 BA68     	 ldr r2,[r7,#8]
 903 004a 5A61     	 str r2,[r3,#20]
 473:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 904              	 .loc 2 473 0
 905 004c 1437     	 adds r7,r7,#20
 906              	.LCFI80:
 907              	 .cfi_def_cfa_offset 4
 908 004e BD46     	 mov sp,r7
 909              	.LCFI81:
 910              	 .cfi_def_cfa_register 13
 911              	 
 912 0050 5DF8047B 	 ldr r7,[sp],#4
 913              	.LCFI82:
 914              	 .cfi_restore 7
 915              	 .cfi_def_cfa_offset 0
 916 0054 7047     	 bx lr
 917              	 .cfi_endproc
 918              	.LFE217:
 920 0056 00BF     	 .section .text.XMC_CCU8_SLICE_LoadConfig,"ax",%progbits
 921              	 .align 2
 922              	 .global XMC_CCU8_SLICE_LoadConfig
 923              	 .thumb
 924              	 .thumb_func
 926              	XMC_CCU8_SLICE_LoadConfig:
 927              	.LFB218:
 474:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 475:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure the Load trigger function of a slice*/
 476:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_LoadConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
 477:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 928              	 .loc 2 477 0
 929              	 .cfi_startproc
 930              	 
 931              	 
 932              	 
 933 0000 80B4     	 push {r7}
 934              	.LCFI83:
 935              	 .cfi_def_cfa_offset 4
 936              	 .cfi_offset 7,-4
 937 0002 85B0     	 sub sp,sp,#20
 938              	.LCFI84:
 939              	 .cfi_def_cfa_offset 24
 940 0004 00AF     	 add r7,sp,#0
 941              	.LCFI85:
 942              	 .cfi_def_cfa_register 7
 943 0006 7860     	 str r0,[r7,#4]
 944 0008 0B46     	 mov r3,r1
 945 000a FB70     	 strb r3,[r7,#3]
 478:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cmc;
 479:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 480:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_LoadConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 481:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_LoadConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
 482:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 483:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc = slice->CMC;
 946              	 .loc 2 483 0
 947 000c 7B68     	 ldr r3,[r7,#4]
 948 000e 5B68     	 ldr r3,[r3,#4]
 949 0010 FB60     	 str r3,[r7,#12]
 484:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 485:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First, Bind the event with the load function */
 486:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc &= ~((uint32_t) CCU8_CC8_CMC_LDS_Msk);
 950              	 .loc 2 486 0
 951 0012 FB68     	 ldr r3,[r7,#12]
 952 0014 23F44053 	 bic r3,r3,#12288
 953 0018 FB60     	 str r3,[r7,#12]
 487:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc |= ((uint32_t) event) << CCU8_CC8_CMC_LDS_Pos;
 954              	 .loc 2 487 0
 955 001a FB78     	 ldrb r3,[r7,#3]
 956 001c 1B03     	 lsls r3,r3,#12
 957 001e FA68     	 ldr r2,[r7,#12]
 958 0020 1343     	 orrs r3,r3,r2
 959 0022 FB60     	 str r3,[r7,#12]
 488:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 489:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = cmc;
 960              	 .loc 2 489 0
 961 0024 7B68     	 ldr r3,[r7,#4]
 962 0026 FA68     	 ldr r2,[r7,#12]
 963 0028 5A60     	 str r2,[r3,#4]
 490:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 964              	 .loc 2 490 0
 965 002a 1437     	 adds r7,r7,#20
 966              	.LCFI86:
 967              	 .cfi_def_cfa_offset 4
 968 002c BD46     	 mov sp,r7
 969              	.LCFI87:
 970              	 .cfi_def_cfa_register 13
 971              	 
 972 002e 5DF8047B 	 ldr r7,[sp],#4
 973              	.LCFI88:
 974              	 .cfi_restore 7
 975              	 .cfi_def_cfa_offset 0
 976 0032 7047     	 bx lr
 977              	 .cfi_endproc
 978              	.LFE218:
 980              	 .section .text.XMC_CCU8_SLICE_LoadSelector,"ax",%progbits
 981              	 .align 2
 982              	 .global XMC_CCU8_SLICE_LoadSelector
 983              	 .thumb
 984              	 .thumb_func
 986              	XMC_CCU8_SLICE_LoadSelector:
 987              	.LFB219:
 491:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 492:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure, which compare register value has to be loaded during external load event */
 493:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_LoadSelector(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_COMPARE_CHANNE
 494:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 988              	 .loc 2 494 0
 989              	 .cfi_startproc
 990              	 
 991              	 
 992              	 
 993 0000 80B4     	 push {r7}
 994              	.LCFI89:
 995              	 .cfi_def_cfa_offset 4
 996              	 .cfi_offset 7,-4
 997 0002 85B0     	 sub sp,sp,#20
 998              	.LCFI90:
 999              	 .cfi_def_cfa_offset 24
 1000 0004 00AF     	 add r7,sp,#0
 1001              	.LCFI91:
 1002              	 .cfi_def_cfa_register 7
 1003 0006 7860     	 str r0,[r7,#4]
 1004 0008 0B46     	 mov r3,r1
 1005 000a FB70     	 strb r3,[r7,#3]
 495:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t tc;
 496:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 497:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_LoadSelector:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 498:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_LoadSelector:Invalid Channel number", XMC_CCU8_SLICE_CHECK_COMP_CHANNE
 499:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 500:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc = slice->TC;
 1006              	 .loc 2 500 0
 1007 000c 7B68     	 ldr r3,[r7,#4]
 1008 000e 5B69     	 ldr r3,[r3,#20]
 1009 0010 FB60     	 str r3,[r7,#12]
 501:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 502:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First, Bind the event with the load function */
 503:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc &= ~((uint32_t) CCU8_CC8_TC_TLS_Msk);
 1010              	 .loc 2 503 0
 1011 0012 FB68     	 ldr r3,[r7,#12]
 1012 0014 23F08003 	 bic r3,r3,#128
 1013 0018 FB60     	 str r3,[r7,#12]
 504:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc |= (uint32_t)ch_num << CCU8_CC8_TC_TLS_Pos;
 1014              	 .loc 2 504 0
 1015 001a FB78     	 ldrb r3,[r7,#3]
 1016 001c DB01     	 lsls r3,r3,#7
 1017 001e FA68     	 ldr r2,[r7,#12]
 1018 0020 1343     	 orrs r3,r3,r2
 1019 0022 FB60     	 str r3,[r7,#12]
 505:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 506:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC = tc;
 1020              	 .loc 2 506 0
 1021 0024 7B68     	 ldr r3,[r7,#4]
 1022 0026 FA68     	 ldr r2,[r7,#12]
 1023 0028 5A61     	 str r2,[r3,#20]
 507:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 1024              	 .loc 2 507 0
 1025 002a 1437     	 adds r7,r7,#20
 1026              	.LCFI92:
 1027              	 .cfi_def_cfa_offset 4
 1028 002c BD46     	 mov sp,r7
 1029              	.LCFI93:
 1030              	 .cfi_def_cfa_register 13
 1031              	 
 1032 002e 5DF8047B 	 ldr r7,[sp],#4
 1033              	.LCFI94:
 1034              	 .cfi_restore 7
 1035              	 .cfi_def_cfa_offset 0
 1036 0032 7047     	 bx lr
 1037              	 .cfi_endproc
 1038              	.LFE219:
 1040              	 .section .text.XMC_CCU8_SLICE_ModulationConfig,"ax",%progbits
 1041              	 .align 2
 1042              	 .global XMC_CCU8_SLICE_ModulationConfig
 1043              	 .thumb
 1044              	 .thumb_func
 1046              	XMC_CCU8_SLICE_ModulationConfig:
 1047              	.LFB220:
 508:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 509:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure the slice modulation function */
 510:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_ModulationConfig(XMC_CCU8_SLICE_t *const slice,
 511:../Libraries/XMCLib/src/xmc_ccu8.c ****                                      const XMC_CCU8_SLICE_EVENT_t event,
 512:../Libraries/XMCLib/src/xmc_ccu8.c ****                                      const XMC_CCU8_SLICE_MODULATION_MODE_t mod_mode,
 513:../Libraries/XMCLib/src/xmc_ccu8.c ****                                      const XMC_CCU8_SLICE_MODULATION_CHANNEL_t channel,
 514:../Libraries/XMCLib/src/xmc_ccu8.c ****                                      const bool synch_with_pwm)
 515:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1048              	 .loc 2 515 0
 1049              	 .cfi_startproc
 1050              	 
 1051              	 
 1052              	 
 1053 0000 80B4     	 push {r7}
 1054              	.LCFI95:
 1055              	 .cfi_def_cfa_offset 4
 1056              	 .cfi_offset 7,-4
 1057 0002 85B0     	 sub sp,sp,#20
 1058              	.LCFI96:
 1059              	 .cfi_def_cfa_offset 24
 1060 0004 00AF     	 add r7,sp,#0
 1061              	.LCFI97:
 1062              	 .cfi_def_cfa_register 7
 1063 0006 7860     	 str r0,[r7,#4]
 1064 0008 0846     	 mov r0,r1
 1065 000a 1146     	 mov r1,r2
 1066 000c 1A46     	 mov r2,r3
 1067 000e 0346     	 mov r3,r0
 1068 0010 FB70     	 strb r3,[r7,#3]
 1069 0012 0B46     	 mov r3,r1
 1070 0014 BB70     	 strb r3,[r7,#2]
 1071 0016 1346     	 mov r3,r2
 1072 0018 7B70     	 strb r3,[r7,#1]
 516:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cmc;
 517:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t tc;
 518:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 519:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ModulationConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice))
 520:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ModulationConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(even
 521:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ModulationConfig:Invalid channel for modulation", 
 522:../Libraries/XMCLib/src/xmc_ccu8.c ****              XMC_CCU8_SLICE_CHECK_MODULATION_CHANNEL(channel));
 523:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ModulationConfig:Invalid Modulation Mode", 
 524:../Libraries/XMCLib/src/xmc_ccu8.c ****              ((mod_mode == XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_ST_OUT) ||\
 525:../Libraries/XMCLib/src/xmc_ccu8.c ****               (mod_mode == XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_OUT)));
 526:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 527:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc = slice->CMC;
 1073              	 .loc 2 527 0
 1074 001a 7B68     	 ldr r3,[r7,#4]
 1075 001c 5B68     	 ldr r3,[r3,#4]
 1076 001e BB60     	 str r3,[r7,#8]
 528:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 529:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First, Bind the event with the modulation function */
 530:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc &= ~((uint32_t) CCU8_CC8_CMC_MOS_Msk);
 1077              	 .loc 2 530 0
 1078 0020 BB68     	 ldr r3,[r7,#8]
 1079 0022 23F44023 	 bic r3,r3,#786432
 1080 0026 BB60     	 str r3,[r7,#8]
 531:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc |= ((uint32_t) event) << CCU8_CC8_CMC_MOS_Pos;
 1081              	 .loc 2 531 0
 1082 0028 FB78     	 ldrb r3,[r7,#3]
 1083 002a 9B04     	 lsls r3,r3,#18
 1084 002c BA68     	 ldr r2,[r7,#8]
 1085 002e 1343     	 orrs r3,r3,r2
 1086 0030 BB60     	 str r3,[r7,#8]
 532:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 533:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = cmc;
 1087              	 .loc 2 533 0
 1088 0032 7B68     	 ldr r3,[r7,#4]
 1089 0034 BA68     	 ldr r2,[r7,#8]
 1090 0036 5A60     	 str r2,[r3,#4]
 534:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 535:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc  = slice->TC;
 1091              	 .loc 2 535 0
 1092 0038 7B68     	 ldr r3,[r7,#4]
 1093 003a 5B69     	 ldr r3,[r3,#20]
 1094 003c FB60     	 str r3,[r7,#12]
 536:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 537:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Next, Modulation mode */
 538:../Libraries/XMCLib/src/xmc_ccu8.c ****   if(mod_mode == XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_OUT)
 1095              	 .loc 2 538 0
 1096 003e BB78     	 ldrb r3,[r7,#2]
 1097 0040 012B     	 cmp r3,#1
 1098 0042 04D1     	 bne .L29
 539:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 540:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc |= (uint32_t) CCU8_CC8_TC_EMT_Msk;
 1099              	 .loc 2 540 0
 1100 0044 FB68     	 ldr r3,[r7,#12]
 1101 0046 43F08073 	 orr r3,r3,#16777216
 1102 004a FB60     	 str r3,[r7,#12]
 1103 004c 03E0     	 b .L30
 1104              	.L29:
 541:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 542:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
 543:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 544:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc &= ~((uint32_t) CCU8_CC8_TC_EMT_Msk);
 1105              	 .loc 2 544 0
 1106 004e FB68     	 ldr r3,[r7,#12]
 1107 0050 23F08073 	 bic r3,r3,#16777216
 1108 0054 FB60     	 str r3,[r7,#12]
 1109              	.L30:
 545:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 546:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 547:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Synchronization of modulation effect with PWM cycle */
 548:../Libraries/XMCLib/src/xmc_ccu8.c ****   if(synch_with_pwm == true)
 1110              	 .loc 2 548 0
 1111 0056 3B7E     	 ldrb r3,[r7,#24]
 1112 0058 002B     	 cmp r3,#0
 1113 005a 04D0     	 beq .L31
 549:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 550:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc |= (uint32_t) CCU8_CC8_TC_EMS_Msk;
 1114              	 .loc 2 550 0
 1115 005c FB68     	 ldr r3,[r7,#12]
 1116 005e 43F40003 	 orr r3,r3,#8388608
 1117 0062 FB60     	 str r3,[r7,#12]
 1118 0064 03E0     	 b .L32
 1119              	.L31:
 551:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 552:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
 553:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 554:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc &= ~((uint32_t) CCU8_CC8_TC_EMS_Msk);
 1120              	 .loc 2 554 0
 1121 0066 FB68     	 ldr r3,[r7,#12]
 1122 0068 23F40003 	 bic r3,r3,#8388608
 1123 006c FB60     	 str r3,[r7,#12]
 1124              	.L32:
 555:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 556:../Libraries/XMCLib/src/xmc_ccu8.c ****   
 557:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure on which channel external modulation to be applied */
 558:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc &= ~((uint32_t) CCU8_CC8_TC_EME_Msk);
 1125              	 .loc 2 558 0
 1126 006e FB68     	 ldr r3,[r7,#12]
 1127 0070 23F0C053 	 bic r3,r3,#402653184
 1128 0074 FB60     	 str r3,[r7,#12]
 559:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc |= (uint32_t)channel << CCU8_CC8_TC_EME_Pos;
 1129              	 .loc 2 559 0
 1130 0076 7B78     	 ldrb r3,[r7,#1]
 1131 0078 DB06     	 lsls r3,r3,#27
 1132 007a FA68     	 ldr r2,[r7,#12]
 1133 007c 1343     	 orrs r3,r3,r2
 1134 007e FB60     	 str r3,[r7,#12]
 560:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 561:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC = tc;
 1135              	 .loc 2 561 0
 1136 0080 7B68     	 ldr r3,[r7,#4]
 1137 0082 FA68     	 ldr r2,[r7,#12]
 1138 0084 5A61     	 str r2,[r3,#20]
 562:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 1139              	 .loc 2 562 0
 1140 0086 1437     	 adds r7,r7,#20
 1141              	.LCFI98:
 1142              	 .cfi_def_cfa_offset 4
 1143 0088 BD46     	 mov sp,r7
 1144              	.LCFI99:
 1145              	 .cfi_def_cfa_register 13
 1146              	 
 1147 008a 5DF8047B 	 ldr r7,[sp],#4
 1148              	.LCFI100:
 1149              	 .cfi_restore 7
 1150              	 .cfi_def_cfa_offset 0
 1151 008e 7047     	 bx lr
 1152              	 .cfi_endproc
 1153              	.LFE220:
 1155              	 .section .text.XMC_CCU8_SLICE_CountConfig,"ax",%progbits
 1156              	 .align 2
 1157              	 .global XMC_CCU8_SLICE_CountConfig
 1158              	 .thumb
 1159              	 .thumb_func
 1161              	XMC_CCU8_SLICE_CountConfig:
 1162              	.LFB221:
 563:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 564:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure the slice count function */
 565:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_CountConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
 566:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1163              	 .loc 2 566 0
 1164              	 .cfi_startproc
 1165              	 
 1166              	 
 1167              	 
 1168 0000 80B4     	 push {r7}
 1169              	.LCFI101:
 1170              	 .cfi_def_cfa_offset 4
 1171              	 .cfi_offset 7,-4
 1172 0002 85B0     	 sub sp,sp,#20
 1173              	.LCFI102:
 1174              	 .cfi_def_cfa_offset 24
 1175 0004 00AF     	 add r7,sp,#0
 1176              	.LCFI103:
 1177              	 .cfi_def_cfa_register 7
 1178 0006 7860     	 str r0,[r7,#4]
 1179 0008 0B46     	 mov r3,r1
 1180 000a FB70     	 strb r3,[r7,#3]
 567:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cmc;
 568:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 569:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_CountConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 570:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_CountConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
 571:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 572:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc = slice->CMC;
 1181              	 .loc 2 572 0
 1182 000c 7B68     	 ldr r3,[r7,#4]
 1183 000e 5B68     	 ldr r3,[r3,#4]
 1184 0010 FB60     	 str r3,[r7,#12]
 573:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 574:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First, Bind the event with the count function */
 575:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc &= ~((uint32_t) CCU8_CC8_CMC_CNTS_Msk);
 1185              	 .loc 2 575 0
 1186 0012 FB68     	 ldr r3,[r7,#12]
 1187 0014 23F44043 	 bic r3,r3,#49152
 1188 0018 FB60     	 str r3,[r7,#12]
 576:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc |= ((uint32_t) event) << CCU8_CC8_CMC_CNTS_Pos;
 1189              	 .loc 2 576 0
 1190 001a FB78     	 ldrb r3,[r7,#3]
 1191 001c 9B03     	 lsls r3,r3,#14
 1192 001e FA68     	 ldr r2,[r7,#12]
 1193 0020 1343     	 orrs r3,r3,r2
 1194 0022 FB60     	 str r3,[r7,#12]
 577:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 578:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = cmc;
 1195              	 .loc 2 578 0
 1196 0024 7B68     	 ldr r3,[r7,#4]
 1197 0026 FA68     	 ldr r2,[r7,#12]
 1198 0028 5A60     	 str r2,[r3,#4]
 579:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 1199              	 .loc 2 579 0
 1200 002a 1437     	 adds r7,r7,#20
 1201              	.LCFI104:
 1202              	 .cfi_def_cfa_offset 4
 1203 002c BD46     	 mov sp,r7
 1204              	.LCFI105:
 1205              	 .cfi_def_cfa_register 13
 1206              	 
 1207 002e 5DF8047B 	 ldr r7,[sp],#4
 1208              	.LCFI106:
 1209              	 .cfi_restore 7
 1210              	 .cfi_def_cfa_offset 0
 1211 0032 7047     	 bx lr
 1212              	 .cfi_endproc
 1213              	.LFE221:
 1215              	 .section .text.XMC_CCU8_SLICE_GateConfig,"ax",%progbits
 1216              	 .align 2
 1217              	 .global XMC_CCU8_SLICE_GateConfig
 1218              	 .thumb
 1219              	 .thumb_func
 1221              	XMC_CCU8_SLICE_GateConfig:
 1222              	.LFB222:
 580:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 581:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure slice gate function */
 582:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_GateConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
 583:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1223              	 .loc 2 583 0
 1224              	 .cfi_startproc
 1225              	 
 1226              	 
 1227              	 
 1228 0000 80B4     	 push {r7}
 1229              	.LCFI107:
 1230              	 .cfi_def_cfa_offset 4
 1231              	 .cfi_offset 7,-4
 1232 0002 85B0     	 sub sp,sp,#20
 1233              	.LCFI108:
 1234              	 .cfi_def_cfa_offset 24
 1235 0004 00AF     	 add r7,sp,#0
 1236              	.LCFI109:
 1237              	 .cfi_def_cfa_register 7
 1238 0006 7860     	 str r0,[r7,#4]
 1239 0008 0B46     	 mov r3,r1
 1240 000a FB70     	 strb r3,[r7,#3]
 584:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cmc;
 585:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 586:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_GateConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 587:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_GateConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
 588:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 589:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc = slice->CMC;
 1241              	 .loc 2 589 0
 1242 000c 7B68     	 ldr r3,[r7,#4]
 1243 000e 5B68     	 ldr r3,[r3,#4]
 1244 0010 FB60     	 str r3,[r7,#12]
 590:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 591:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First, Bind the event with the gate function */
 592:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc &= ~((uint32_t) CCU8_CC8_CMC_GATES_Msk);
 1245              	 .loc 2 592 0
 1246 0012 FB68     	 ldr r3,[r7,#12]
 1247 0014 23F44073 	 bic r3,r3,#768
 1248 0018 FB60     	 str r3,[r7,#12]
 593:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc |= ((uint32_t) event) << CCU8_CC8_CMC_GATES_Pos;
 1249              	 .loc 2 593 0
 1250 001a FB78     	 ldrb r3,[r7,#3]
 1251 001c 1B02     	 lsls r3,r3,#8
 1252 001e FA68     	 ldr r2,[r7,#12]
 1253 0020 1343     	 orrs r3,r3,r2
 1254 0022 FB60     	 str r3,[r7,#12]
 594:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 595:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = cmc;
 1255              	 .loc 2 595 0
 1256 0024 7B68     	 ldr r3,[r7,#4]
 1257 0026 FA68     	 ldr r2,[r7,#12]
 1258 0028 5A60     	 str r2,[r3,#4]
 596:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 1259              	 .loc 2 596 0
 1260 002a 1437     	 adds r7,r7,#20
 1261              	.LCFI110:
 1262              	 .cfi_def_cfa_offset 4
 1263 002c BD46     	 mov sp,r7
 1264              	.LCFI111:
 1265              	 .cfi_def_cfa_register 13
 1266              	 
 1267 002e 5DF8047B 	 ldr r7,[sp],#4
 1268              	.LCFI112:
 1269              	 .cfi_restore 7
 1270              	 .cfi_def_cfa_offset 0
 1271 0032 7047     	 bx lr
 1272              	 .cfi_endproc
 1273              	.LFE222:
 1275              	 .section .text.XMC_CCU8_SLICE_Capture0Config,"ax",%progbits
 1276              	 .align 2
 1277              	 .global XMC_CCU8_SLICE_Capture0Config
 1278              	 .thumb
 1279              	 .thumb_func
 1281              	XMC_CCU8_SLICE_Capture0Config:
 1282              	.LFB223:
 597:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 598:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure Capture-0 function */
 599:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_Capture0Config(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t even
 600:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1283              	 .loc 2 600 0
 1284              	 .cfi_startproc
 1285              	 
 1286              	 
 1287              	 
 1288 0000 80B4     	 push {r7}
 1289              	.LCFI113:
 1290              	 .cfi_def_cfa_offset 4
 1291              	 .cfi_offset 7,-4
 1292 0002 85B0     	 sub sp,sp,#20
 1293              	.LCFI114:
 1294              	 .cfi_def_cfa_offset 24
 1295 0004 00AF     	 add r7,sp,#0
 1296              	.LCFI115:
 1297              	 .cfi_def_cfa_register 7
 1298 0006 7860     	 str r0,[r7,#4]
 1299 0008 0B46     	 mov r3,r1
 1300 000a FB70     	 strb r3,[r7,#3]
 601:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cmc;
 602:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 603:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_Capture0Config:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 604:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_Capture0Config:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event)
 605:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 606:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc = slice->CMC;
 1301              	 .loc 2 606 0
 1302 000c 7B68     	 ldr r3,[r7,#4]
 1303 000e 5B68     	 ldr r3,[r3,#4]
 1304 0010 FB60     	 str r3,[r7,#12]
 607:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 608:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First, Bind the event with the gate function */
 609:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc &= ~((uint32_t) CCU8_CC8_CMC_CAP0S_Msk);
 1305              	 .loc 2 609 0
 1306 0012 FB68     	 ldr r3,[r7,#12]
 1307 0014 23F03003 	 bic r3,r3,#48
 1308 0018 FB60     	 str r3,[r7,#12]
 610:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc |= ((uint32_t) event) << CCU8_CC8_CMC_CAP0S_Pos;
 1309              	 .loc 2 610 0
 1310 001a FB78     	 ldrb r3,[r7,#3]
 1311 001c 1B01     	 lsls r3,r3,#4
 1312 001e FA68     	 ldr r2,[r7,#12]
 1313 0020 1343     	 orrs r3,r3,r2
 1314 0022 FB60     	 str r3,[r7,#12]
 611:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 612:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = cmc;
 1315              	 .loc 2 612 0
 1316 0024 7B68     	 ldr r3,[r7,#4]
 1317 0026 FA68     	 ldr r2,[r7,#12]
 1318 0028 5A60     	 str r2,[r3,#4]
 613:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 1319              	 .loc 2 613 0
 1320 002a 1437     	 adds r7,r7,#20
 1321              	.LCFI116:
 1322              	 .cfi_def_cfa_offset 4
 1323 002c BD46     	 mov sp,r7
 1324              	.LCFI117:
 1325              	 .cfi_def_cfa_register 13
 1326              	 
 1327 002e 5DF8047B 	 ldr r7,[sp],#4
 1328              	.LCFI118:
 1329              	 .cfi_restore 7
 1330              	 .cfi_def_cfa_offset 0
 1331 0032 7047     	 bx lr
 1332              	 .cfi_endproc
 1333              	.LFE223:
 1335              	 .section .text.XMC_CCU8_SLICE_Capture1Config,"ax",%progbits
 1336              	 .align 2
 1337              	 .global XMC_CCU8_SLICE_Capture1Config
 1338              	 .thumb
 1339              	 .thumb_func
 1341              	XMC_CCU8_SLICE_Capture1Config:
 1342              	.LFB224:
 614:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 615:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure Capture-1 function */
 616:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_Capture1Config(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t even
 617:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1343              	 .loc 2 617 0
 1344              	 .cfi_startproc
 1345              	 
 1346              	 
 1347              	 
 1348 0000 80B4     	 push {r7}
 1349              	.LCFI119:
 1350              	 .cfi_def_cfa_offset 4
 1351              	 .cfi_offset 7,-4
 1352 0002 85B0     	 sub sp,sp,#20
 1353              	.LCFI120:
 1354              	 .cfi_def_cfa_offset 24
 1355 0004 00AF     	 add r7,sp,#0
 1356              	.LCFI121:
 1357              	 .cfi_def_cfa_register 7
 1358 0006 7860     	 str r0,[r7,#4]
 1359 0008 0B46     	 mov r3,r1
 1360 000a FB70     	 strb r3,[r7,#3]
 618:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cmc;
 619:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 620:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_Capture1Config:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 621:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_Capture1Config:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event)
 622:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 623:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 624:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc = slice->CMC;
 1361              	 .loc 2 624 0
 1362 000c 7B68     	 ldr r3,[r7,#4]
 1363 000e 5B68     	 ldr r3,[r3,#4]
 1364 0010 FB60     	 str r3,[r7,#12]
 625:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 626:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First, Bind the event with the gate function */
 627:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc &= ~((uint32_t) CCU8_CC8_CMC_CAP1S_Msk);
 1365              	 .loc 2 627 0
 1366 0012 FB68     	 ldr r3,[r7,#12]
 1367 0014 23F0C003 	 bic r3,r3,#192
 1368 0018 FB60     	 str r3,[r7,#12]
 628:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc |= ((uint32_t) event) << CCU8_CC8_CMC_CAP1S_Pos;
 1369              	 .loc 2 628 0
 1370 001a FB78     	 ldrb r3,[r7,#3]
 1371 001c 9B01     	 lsls r3,r3,#6
 1372 001e FA68     	 ldr r2,[r7,#12]
 1373 0020 1343     	 orrs r3,r3,r2
 1374 0022 FB60     	 str r3,[r7,#12]
 629:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 630:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = cmc;
 1375              	 .loc 2 630 0
 1376 0024 7B68     	 ldr r3,[r7,#4]
 1377 0026 FA68     	 ldr r2,[r7,#12]
 1378 0028 5A60     	 str r2,[r3,#4]
 631:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 1379              	 .loc 2 631 0
 1380 002a 1437     	 adds r7,r7,#20
 1381              	.LCFI122:
 1382              	 .cfi_def_cfa_offset 4
 1383 002c BD46     	 mov sp,r7
 1384              	.LCFI123:
 1385              	 .cfi_def_cfa_register 13
 1386              	 
 1387 002e 5DF8047B 	 ldr r7,[sp],#4
 1388              	.LCFI124:
 1389              	 .cfi_restore 7
 1390              	 .cfi_def_cfa_offset 0
 1391 0032 7047     	 bx lr
 1392              	 .cfi_endproc
 1393              	.LFE224:
 1395              	 .section .text.XMC_CCU8_SLICE_DirectionConfig,"ax",%progbits
 1396              	 .align 2
 1397              	 .global XMC_CCU8_SLICE_DirectionConfig
 1398              	 .thumb
 1399              	 .thumb_func
 1401              	XMC_CCU8_SLICE_DirectionConfig:
 1402              	.LFB225:
 632:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 633:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure direction function */
 634:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_DirectionConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t eve
 635:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1403              	 .loc 2 635 0
 1404              	 .cfi_startproc
 1405              	 
 1406              	 
 1407              	 
 1408 0000 80B4     	 push {r7}
 1409              	.LCFI125:
 1410              	 .cfi_def_cfa_offset 4
 1411              	 .cfi_offset 7,-4
 1412 0002 85B0     	 sub sp,sp,#20
 1413              	.LCFI126:
 1414              	 .cfi_def_cfa_offset 24
 1415 0004 00AF     	 add r7,sp,#0
 1416              	.LCFI127:
 1417              	 .cfi_def_cfa_register 7
 1418 0006 7860     	 str r0,[r7,#4]
 1419 0008 0B46     	 mov r3,r1
 1420 000a FB70     	 strb r3,[r7,#3]
 636:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cmc;
 637:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 638:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_DirectionConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 639:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_DirectionConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event
 640:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 641:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc = slice->CMC;
 1421              	 .loc 2 641 0
 1422 000c 7B68     	 ldr r3,[r7,#4]
 1423 000e 5B68     	 ldr r3,[r3,#4]
 1424 0010 FB60     	 str r3,[r7,#12]
 642:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 643:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First, Bind the event with the direction function */
 644:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc &= ~((uint32_t) CCU8_CC8_CMC_UDS_Msk);
 1425              	 .loc 2 644 0
 1426 0012 FB68     	 ldr r3,[r7,#12]
 1427 0014 23F44063 	 bic r3,r3,#3072
 1428 0018 FB60     	 str r3,[r7,#12]
 645:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc |= ((uint32_t) event) << CCU8_CC8_CMC_UDS_Pos;
 1429              	 .loc 2 645 0
 1430 001a FB78     	 ldrb r3,[r7,#3]
 1431 001c 9B02     	 lsls r3,r3,#10
 1432 001e FA68     	 ldr r2,[r7,#12]
 1433 0020 1343     	 orrs r3,r3,r2
 1434 0022 FB60     	 str r3,[r7,#12]
 646:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 647:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = cmc;
 1435              	 .loc 2 647 0
 1436 0024 7B68     	 ldr r3,[r7,#4]
 1437 0026 FA68     	 ldr r2,[r7,#12]
 1438 0028 5A60     	 str r2,[r3,#4]
 648:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 1439              	 .loc 2 648 0
 1440 002a 1437     	 adds r7,r7,#20
 1441              	.LCFI128:
 1442              	 .cfi_def_cfa_offset 4
 1443 002c BD46     	 mov sp,r7
 1444              	.LCFI129:
 1445              	 .cfi_def_cfa_register 13
 1446              	 
 1447 002e 5DF8047B 	 ldr r7,[sp],#4
 1448              	.LCFI130:
 1449              	 .cfi_restore 7
 1450              	 .cfi_def_cfa_offset 0
 1451 0032 7047     	 bx lr
 1452              	 .cfi_endproc
 1453              	.LFE225:
 1455              	 .section .text.XMC_CCU8_SLICE_StatusBitOverrideConfig,"ax",%progbits
 1456              	 .align 2
 1457              	 .global XMC_CCU8_SLICE_StatusBitOverrideConfig
 1458              	 .thumb
 1459              	 .thumb_func
 1461              	XMC_CCU8_SLICE_StatusBitOverrideConfig:
 1462              	.LFB226:
 649:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 650:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure slice status bit override function */
 651:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_StatusBitOverrideConfig(XMC_CCU8_SLICE_t *const slice)
 652:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1463              	 .loc 2 652 0
 1464              	 .cfi_startproc
 1465              	 
 1466              	 
 1467              	 
 1468 0000 80B4     	 push {r7}
 1469              	.LCFI131:
 1470              	 .cfi_def_cfa_offset 4
 1471              	 .cfi_offset 7,-4
 1472 0002 85B0     	 sub sp,sp,#20
 1473              	.LCFI132:
 1474              	 .cfi_def_cfa_offset 24
 1475 0004 00AF     	 add r7,sp,#0
 1476              	.LCFI133:
 1477              	 .cfi_def_cfa_register 7
 1478 0006 7860     	 str r0,[r7,#4]
 653:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cmc;
 654:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 655:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_StatusBitOverrideConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(
 656:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 657:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc = slice->CMC;
 1479              	 .loc 2 657 0
 1480 0008 7B68     	 ldr r3,[r7,#4]
 1481 000a 5B68     	 ldr r3,[r3,#4]
 1482 000c FB60     	 str r3,[r7,#12]
 658:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 659:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Map status bit trigger override to Event 1 &
 660:../Libraries/XMCLib/src/xmc_ccu8.c ****          status bit value override to Event 2 */
 661:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc &= ~((uint32_t) CCU8_CC8_CMC_OFS_Msk);
 1483              	 .loc 2 661 0
 1484 000e FB68     	 ldr r3,[r7,#12]
 1485 0010 23F48033 	 bic r3,r3,#65536
 1486 0014 FB60     	 str r3,[r7,#12]
 662:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc |= ((uint32_t) 1) << CCU8_CC8_CMC_OFS_Pos;
 1487              	 .loc 2 662 0
 1488 0016 FB68     	 ldr r3,[r7,#12]
 1489 0018 43F48033 	 orr r3,r3,#65536
 1490 001c FB60     	 str r3,[r7,#12]
 663:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 664:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = cmc;
 1491              	 .loc 2 664 0
 1492 001e 7B68     	 ldr r3,[r7,#4]
 1493 0020 FA68     	 ldr r2,[r7,#12]
 1494 0022 5A60     	 str r2,[r3,#4]
 665:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 1495              	 .loc 2 665 0
 1496 0024 1437     	 adds r7,r7,#20
 1497              	.LCFI134:
 1498              	 .cfi_def_cfa_offset 4
 1499 0026 BD46     	 mov sp,r7
 1500              	.LCFI135:
 1501              	 .cfi_def_cfa_register 13
 1502              	 
 1503 0028 5DF8047B 	 ldr r7,[sp],#4
 1504              	.LCFI136:
 1505              	 .cfi_restore 7
 1506              	 .cfi_def_cfa_offset 0
 1507 002c 7047     	 bx lr
 1508              	 .cfi_endproc
 1509              	.LFE226:
 1511 002e 00BF     	 .section .text.XMC_CCU8_SLICE_TrapConfig,"ax",%progbits
 1512              	 .align 2
 1513              	 .global XMC_CCU8_SLICE_TrapConfig
 1514              	 .thumb
 1515              	 .thumb_func
 1517              	XMC_CCU8_SLICE_TrapConfig:
 1518              	.LFB227:
 666:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 667:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure trap function*/
 668:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_TrapConfig(XMC_CCU8_SLICE_t *const slice,
 669:../Libraries/XMCLib/src/xmc_ccu8.c ****                                const XMC_CCU8_SLICE_TRAP_EXIT_MODE_t exit_mode,
 670:../Libraries/XMCLib/src/xmc_ccu8.c ****                                const bool synch_with_pwm)
 671:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1519              	 .loc 2 671 0
 1520              	 .cfi_startproc
 1521              	 
 1522              	 
 1523              	 
 1524 0000 80B4     	 push {r7}
 1525              	.LCFI137:
 1526              	 .cfi_def_cfa_offset 4
 1527              	 .cfi_offset 7,-4
 1528 0002 85B0     	 sub sp,sp,#20
 1529              	.LCFI138:
 1530              	 .cfi_def_cfa_offset 24
 1531 0004 00AF     	 add r7,sp,#0
 1532              	.LCFI139:
 1533              	 .cfi_def_cfa_register 7
 1534 0006 7860     	 str r0,[r7,#4]
 1535 0008 0B46     	 mov r3,r1
 1536 000a FB70     	 strb r3,[r7,#3]
 1537 000c 1346     	 mov r3,r2
 1538 000e BB70     	 strb r3,[r7,#2]
 672:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cmc;
 673:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t tc;
 674:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 675:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_TrapConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 676:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_TrapConfig:Invalid Exit Mode", ((exit_mode == XMC_CCU8_SLICE_TRAP_EXIT
 677:../Libraries/XMCLib/src/xmc_ccu8.c ****                                                              (exit_mode == XMC_CCU8_SLICE_TRAP_EXIT
 678:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 679:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc = slice->CMC;
 1539              	 .loc 2 679 0
 1540 0010 7B68     	 ldr r3,[r7,#4]
 1541 0012 5B68     	 ldr r3,[r3,#4]
 1542 0014 BB60     	 str r3,[r7,#8]
 680:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 681:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Map trap function to Event 2 */
 682:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc &= ~((uint32_t) CCU8_CC8_CMC_TS_Msk);
 1543              	 .loc 2 682 0
 1544 0016 BB68     	 ldr r3,[r7,#8]
 1545 0018 23F40033 	 bic r3,r3,#131072
 1546 001c BB60     	 str r3,[r7,#8]
 683:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc |= ((uint32_t) 1) << CCU8_CC8_CMC_TS_Pos;
 1547              	 .loc 2 683 0
 1548 001e BB68     	 ldr r3,[r7,#8]
 1549 0020 43F40033 	 orr r3,r3,#131072
 1550 0024 BB60     	 str r3,[r7,#8]
 684:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 685:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = cmc;
 1551              	 .loc 2 685 0
 1552 0026 7B68     	 ldr r3,[r7,#4]
 1553 0028 BA68     	 ldr r2,[r7,#8]
 1554 002a 5A60     	 str r2,[r3,#4]
 686:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 687:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc = slice->TC;
 1555              	 .loc 2 687 0
 1556 002c 7B68     	 ldr r3,[r7,#4]
 1557 002e 5B69     	 ldr r3,[r3,#20]
 1558 0030 FB60     	 str r3,[r7,#12]
 688:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 689:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure synchronization option */
 690:../Libraries/XMCLib/src/xmc_ccu8.c ****   if(synch_with_pwm == true)
 1559              	 .loc 2 690 0
 1560 0032 BB78     	 ldrb r3,[r7,#2]
 1561 0034 002B     	 cmp r3,#0
 1562 0036 04D0     	 beq .L40
 691:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 692:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc |= (uint32_t) CCU8_CC8_TC_TRPSE_Msk;
 1563              	 .loc 2 692 0
 1564 0038 FB68     	 ldr r3,[r7,#12]
 1565 003a 43F40013 	 orr r3,r3,#2097152
 1566 003e FB60     	 str r3,[r7,#12]
 1567 0040 03E0     	 b .L41
 1568              	.L40:
 693:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 694:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
 695:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 696:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc &= ~((uint32_t) CCU8_CC8_TC_TRPSE_Msk);
 1569              	 .loc 2 696 0
 1570 0042 FB68     	 ldr r3,[r7,#12]
 1571 0044 23F40013 	 bic r3,r3,#2097152
 1572 0048 FB60     	 str r3,[r7,#12]
 1573              	.L41:
 697:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 698:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 699:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure exit mode */
 700:../Libraries/XMCLib/src/xmc_ccu8.c ****   if(exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW)
 1574              	 .loc 2 700 0
 1575 004a FB78     	 ldrb r3,[r7,#3]
 1576 004c 012B     	 cmp r3,#1
 1577 004e 04D1     	 bne .L42
 701:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 702:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc |= (uint32_t) CCU8_CC8_TC_TRPSW_Msk;
 1578              	 .loc 2 702 0
 1579 0050 FB68     	 ldr r3,[r7,#12]
 1580 0052 43F48003 	 orr r3,r3,#4194304
 1581 0056 FB60     	 str r3,[r7,#12]
 1582 0058 03E0     	 b .L43
 1583              	.L42:
 703:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 704:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
 705:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 706:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc &= ~((uint32_t) CCU8_CC8_TC_TRPSW_Msk);
 1584              	 .loc 2 706 0
 1585 005a FB68     	 ldr r3,[r7,#12]
 1586 005c 23F48003 	 bic r3,r3,#4194304
 1587 0060 FB60     	 str r3,[r7,#12]
 1588              	.L43:
 707:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 708:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 709:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC = tc;
 1589              	 .loc 2 709 0
 1590 0062 7B68     	 ldr r3,[r7,#4]
 1591 0064 FA68     	 ldr r2,[r7,#12]
 1592 0066 5A61     	 str r2,[r3,#20]
 710:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 1593              	 .loc 2 710 0
 1594 0068 1437     	 adds r7,r7,#20
 1595              	.LCFI140:
 1596              	 .cfi_def_cfa_offset 4
 1597 006a BD46     	 mov sp,r7
 1598              	.LCFI141:
 1599              	 .cfi_def_cfa_register 13
 1600              	 
 1601 006c 5DF8047B 	 ldr r7,[sp],#4
 1602              	.LCFI142:
 1603              	 .cfi_restore 7
 1604              	 .cfi_def_cfa_offset 0
 1605 0070 7047     	 bx lr
 1606              	 .cfi_endproc
 1607              	.LFE227:
 1609 0072 00BF     	 .section .text.XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent,"ax",%progbits
 1610              	 .align 2
 1611              	 .global XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent
 1612              	 .thumb
 1613              	 .thumb_func
 1615              	XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:
 1616              	.LFB228:
 711:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 712:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure a slice Status Bit Override event */
 713:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU8_SLICE_t *const slice,
 714:../Libraries/XMCLib/src/xmc_ccu8.c ****                                                     const XMC_CCU8_SLICE_EVENT_CONFIG_t *const ev1_
 715:../Libraries/XMCLib/src/xmc_ccu8.c ****                                                     const XMC_CCU8_SLICE_EVENT_CONFIG_t *const ev2_
 716:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1617              	 .loc 2 716 0
 1618              	 .cfi_startproc
 1619              	 
 1620              	 
 1621              	 
 1622 0000 80B4     	 push {r7}
 1623              	.LCFI143:
 1624              	 .cfi_def_cfa_offset 4
 1625              	 .cfi_offset 7,-4
 1626 0002 87B0     	 sub sp,sp,#28
 1627              	.LCFI144:
 1628              	 .cfi_def_cfa_offset 32
 1629 0004 00AF     	 add r7,sp,#0
 1630              	.LCFI145:
 1631              	 .cfi_def_cfa_register 7
 1632 0006 F860     	 str r0,[r7,#12]
 1633 0008 B960     	 str r1,[r7,#8]
 1634 000a 7A60     	 str r2,[r7,#4]
 717:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t ins;
 718:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 719:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:Invalid Slice Pointer", XMC_CCU8_IsVal
 720:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:Invalid Input",
 721:../Libraries/XMCLib/src/xmc_ccu8.c ****          XMC_CCU8_SLICE_IsInputvalid(ev1_config->mapped_input));
 722:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:Invalid Edge Sensitivity", 
 723:../Libraries/XMCLib/src/xmc_ccu8.c ****              XMC_CCU8_SLICE_CHECK_EDGE_SENSITIVITY(ev1_config->edge));
 724:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:Invalid Level Sensitivity", 
 725:../Libraries/XMCLib/src/xmc_ccu8.c ****              ((ev1_config->level == XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) ||\
 726:../Libraries/XMCLib/src/xmc_ccu8.c ****               (ev1_config->level == XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
 727:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:Invalid Debounce Period",
 728:../Libraries/XMCLib/src/xmc_ccu8.c ****               XMC_CCU8_SLICE_CHECK_EVENT_FILTER(ev1_config->duration));
 729:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:Invalid Input",
 730:../Libraries/XMCLib/src/xmc_ccu8.c ****           XMC_CCU8_SLICE_IsInputvalid(ev2_config->mapped_input));
 731:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:Invalid Edge Sensitivity",
 732:../Libraries/XMCLib/src/xmc_ccu8.c ****               XMC_CCU8_SLICE_CHECK_EDGE_SENSITIVITY(ev2_config->edge));
 733:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:Invalid Level Sensitivity",
 734:../Libraries/XMCLib/src/xmc_ccu8.c ****              ((ev2_config->level == XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) ||\
 735:../Libraries/XMCLib/src/xmc_ccu8.c ****               (ev2_config->level == XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
 736:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:Invalid Debounce Period",
 737:../Libraries/XMCLib/src/xmc_ccu8.c ****              XMC_CCU8_SLICE_CHECK_EVENT_FILTER(ev2_config->duration));
 738:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 739:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CCU8V3) /* Defined for XMC1400 devices only */
 740:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins = slice->INS2;
 741:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 742:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the edge sensitivity for event 1 */
 743:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU8_CC8_INS2_EV1EM_Pos);
 744:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev1_config->edge) << CCU8_CC8_INS2_EV1EM_Pos;
 745:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 746:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the edge sensitivity for event 2 */
 747:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU8_CC8_INS2_EV2EM_Pos);
 748:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev2_config->edge) << CCU8_CC8_INS2_EV2EM_Pos;
 749:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 750:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the level sensitivity for event 1 */
 751:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU8_CC8_INS2_EV1LM_Pos);
 752:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev1_config->level) << CCU8_CC8_INS2_EV1LM_Pos;
 753:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 754:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the level sensitivity for event 2 */
 755:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU8_CC8_INS2_EV2LM_Pos);
 756:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev2_config->level) << CCU8_CC8_INS2_EV2LM_Pos;
 757:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 758:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the debounce filter for event 1 */
 759:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU8_CC8_INS2_LPF1M_Pos);
 760:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev1_config->duration) << CCU8_CC8_INS2_LPF1M_Pos;
 761:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 762:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the debounce filter for event 2 */
 763:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU8_CC8_INS2_LPF2M_Pos);
 764:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev2_config->duration) << CCU8_CC8_INS2_LPF2M_Pos;
 765:../Libraries/XMCLib/src/xmc_ccu8.c ****   
 766:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->INS2 = ins; 
 767:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 768:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins = slice->INS1;
 769:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Next, the input for Event1 */
 770:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS1_EV1IS_Pos);
 771:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev1_config->mapped_input) << CCU8_CC8_INS1_EV1IS_Pos;
 772:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 773:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Finally, the input for Event2 */
 774:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS1_EV2IS_Pos);
 775:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev2_config->mapped_input) << CCU8_CC8_INS1_EV2IS_Pos;
 776:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 777:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->INS1 = ins;  
 778:../Libraries/XMCLib/src/xmc_ccu8.c **** #else
 779:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins = slice->INS;
 1635              	 .loc 2 779 0
 1636 000c FB68     	 ldr r3,[r7,#12]
 1637 000e 1B68     	 ldr r3,[r3]
 1638 0010 7B61     	 str r3,[r7,#20]
 780:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 781:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the edge sensitivity for event 1 */
 782:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU8_CC8_INS_EV1EM_Pos);
 1639              	 .loc 2 782 0
 1640 0012 7B69     	 ldr r3,[r7,#20]
 1641 0014 23F44023 	 bic r3,r3,#786432
 1642 0018 7B61     	 str r3,[r7,#20]
 783:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev1_config->edge) << CCU8_CC8_INS_EV1EM_Pos;
 1643              	 .loc 2 783 0
 1644 001a BB68     	 ldr r3,[r7,#8]
 1645 001c 5B78     	 ldrb r3,[r3,#1]
 1646 001e 9B04     	 lsls r3,r3,#18
 1647 0020 7A69     	 ldr r2,[r7,#20]
 1648 0022 1343     	 orrs r3,r3,r2
 1649 0024 7B61     	 str r3,[r7,#20]
 784:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 785:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the edge sensitivity for event 2 */
 786:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU8_CC8_INS_EV2EM_Pos);
 1650              	 .loc 2 786 0
 1651 0026 7B69     	 ldr r3,[r7,#20]
 1652 0028 23F44013 	 bic r3,r3,#3145728
 1653 002c 7B61     	 str r3,[r7,#20]
 787:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev2_config->edge) << CCU8_CC8_INS_EV2EM_Pos;
 1654              	 .loc 2 787 0
 1655 002e 7B68     	 ldr r3,[r7,#4]
 1656 0030 5B78     	 ldrb r3,[r3,#1]
 1657 0032 1B05     	 lsls r3,r3,#20
 1658 0034 7A69     	 ldr r2,[r7,#20]
 1659 0036 1343     	 orrs r3,r3,r2
 1660 0038 7B61     	 str r3,[r7,#20]
 788:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 789:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the level sensitivity for event 1 */
 790:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU8_CC8_INS_EV1LM_Pos);
 1661              	 .loc 2 790 0
 1662 003a 7B69     	 ldr r3,[r7,#20]
 1663 003c 23F40003 	 bic r3,r3,#8388608
 1664 0040 7B61     	 str r3,[r7,#20]
 791:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev1_config->level) << CCU8_CC8_INS_EV1LM_Pos;
 1665              	 .loc 2 791 0
 1666 0042 BB68     	 ldr r3,[r7,#8]
 1667 0044 9B78     	 ldrb r3,[r3,#2]
 1668 0046 DB05     	 lsls r3,r3,#23
 1669 0048 7A69     	 ldr r2,[r7,#20]
 1670 004a 1343     	 orrs r3,r3,r2
 1671 004c 7B61     	 str r3,[r7,#20]
 792:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 793:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the level sensitivity for event 2 */
 794:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU8_CC8_INS_EV2LM_Pos);
 1672              	 .loc 2 794 0
 1673 004e 7B69     	 ldr r3,[r7,#20]
 1674 0050 23F08073 	 bic r3,r3,#16777216
 1675 0054 7B61     	 str r3,[r7,#20]
 795:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev2_config->level) << CCU8_CC8_INS_EV2LM_Pos;
 1676              	 .loc 2 795 0
 1677 0056 7B68     	 ldr r3,[r7,#4]
 1678 0058 9B78     	 ldrb r3,[r3,#2]
 1679 005a 1B06     	 lsls r3,r3,#24
 1680 005c 7A69     	 ldr r2,[r7,#20]
 1681 005e 1343     	 orrs r3,r3,r2
 1682 0060 7B61     	 str r3,[r7,#20]
 796:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 797:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the debounce filter for event 1 */
 798:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU8_CC8_INS_LPF1M_Pos);
 1683              	 .loc 2 798 0
 1684 0062 7B69     	 ldr r3,[r7,#20]
 1685 0064 23F0C053 	 bic r3,r3,#402653184
 1686 0068 7B61     	 str r3,[r7,#20]
 799:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev1_config->duration) << CCU8_CC8_INS_LPF1M_Pos;
 1687              	 .loc 2 799 0
 1688 006a BB68     	 ldr r3,[r7,#8]
 1689 006c DB78     	 ldrb r3,[r3,#3]
 1690 006e DB06     	 lsls r3,r3,#27
 1691 0070 7A69     	 ldr r2,[r7,#20]
 1692 0072 1343     	 orrs r3,r3,r2
 1693 0074 7B61     	 str r3,[r7,#20]
 800:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 801:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the debounce filter for event 2 */
 802:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU8_CC8_INS_LPF2M_Pos);
 1694              	 .loc 2 802 0
 1695 0076 7B69     	 ldr r3,[r7,#20]
 1696 0078 23F0C043 	 bic r3,r3,#1610612736
 1697 007c 7B61     	 str r3,[r7,#20]
 803:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev2_config->duration) << CCU8_CC8_INS_LPF2M_Pos;
 1698              	 .loc 2 803 0
 1699 007e 7B68     	 ldr r3,[r7,#4]
 1700 0080 DB78     	 ldrb r3,[r3,#3]
 1701 0082 5B07     	 lsls r3,r3,#29
 1702 0084 7A69     	 ldr r2,[r7,#20]
 1703 0086 1343     	 orrs r3,r3,r2
 1704 0088 7B61     	 str r3,[r7,#20]
 804:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 805:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Next, the input for Event1 */
 806:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS_EV1IS_Pos);
 1705              	 .loc 2 806 0
 1706 008a 7B69     	 ldr r3,[r7,#20]
 1707 008c 23F0F003 	 bic r3,r3,#240
 1708 0090 7B61     	 str r3,[r7,#20]
 807:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev1_config->mapped_input) << CCU8_CC8_INS_EV1IS_Pos;
 1709              	 .loc 2 807 0
 1710 0092 BB68     	 ldr r3,[r7,#8]
 1711 0094 1B78     	 ldrb r3,[r3]
 1712 0096 1B01     	 lsls r3,r3,#4
 1713 0098 7A69     	 ldr r2,[r7,#20]
 1714 009a 1343     	 orrs r3,r3,r2
 1715 009c 7B61     	 str r3,[r7,#20]
 808:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 809:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Finally, the input for Event2 */
 810:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS_EV2IS_Pos);
 1716              	 .loc 2 810 0
 1717 009e 7B69     	 ldr r3,[r7,#20]
 1718 00a0 23F47063 	 bic r3,r3,#3840
 1719 00a4 7B61     	 str r3,[r7,#20]
 811:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev2_config->mapped_input) << CCU8_CC8_INS_EV2IS_Pos;
 1720              	 .loc 2 811 0
 1721 00a6 7B68     	 ldr r3,[r7,#4]
 1722 00a8 1B78     	 ldrb r3,[r3]
 1723 00aa 1B02     	 lsls r3,r3,#8
 1724 00ac 7A69     	 ldr r2,[r7,#20]
 1725 00ae 1343     	 orrs r3,r3,r2
 1726 00b0 7B61     	 str r3,[r7,#20]
 812:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 813:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->INS = ins;
 1727              	 .loc 2 813 0
 1728 00b2 FB68     	 ldr r3,[r7,#12]
 1729 00b4 7A69     	 ldr r2,[r7,#20]
 1730 00b6 1A60     	 str r2,[r3]
 814:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 815:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 1731              	 .loc 2 815 0
 1732 00b8 1C37     	 adds r7,r7,#28
 1733              	.LCFI146:
 1734              	 .cfi_def_cfa_offset 4
 1735 00ba BD46     	 mov sp,r7
 1736              	.LCFI147:
 1737              	 .cfi_def_cfa_register 13
 1738              	 
 1739 00bc 5DF8047B 	 ldr r7,[sp],#4
 1740              	.LCFI148:
 1741              	 .cfi_restore 7
 1742              	 .cfi_def_cfa_offset 0
 1743 00c0 7047     	 bx lr
 1744              	 .cfi_endproc
 1745              	.LFE228:
 1747 00c2 00BF     	 .section .text.XMC_CCU8_SLICE_ConfigureEvent,"ax",%progbits
 1748              	 .align 2
 1749              	 .global XMC_CCU8_SLICE_ConfigureEvent
 1750              	 .thumb
 1751              	 .thumb_func
 1753              	XMC_CCU8_SLICE_ConfigureEvent:
 1754              	.LFB229:
 816:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 817:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure a slice trigger event */
 818:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_ConfigureEvent(XMC_CCU8_SLICE_t *const slice,
 819:../Libraries/XMCLib/src/xmc_ccu8.c ****                                    const XMC_CCU8_SLICE_EVENT_t event,
 820:../Libraries/XMCLib/src/xmc_ccu8.c ****                                    const XMC_CCU8_SLICE_EVENT_CONFIG_t *const config)
 821:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1755              	 .loc 2 821 0
 1756              	 .cfi_startproc
 1757              	 
 1758              	 
 1759              	 
 1760 0000 80B4     	 push {r7}
 1761              	.LCFI149:
 1762              	 .cfi_def_cfa_offset 4
 1763              	 .cfi_offset 7,-4
 1764 0002 89B0     	 sub sp,sp,#36
 1765              	.LCFI150:
 1766              	 .cfi_def_cfa_offset 40
 1767 0004 00AF     	 add r7,sp,#0
 1768              	.LCFI151:
 1769              	 .cfi_def_cfa_register 7
 1770 0006 F860     	 str r0,[r7,#12]
 1771 0008 0B46     	 mov r3,r1
 1772 000a 7A60     	 str r2,[r7,#4]
 1773 000c FB72     	 strb r3,[r7,#11]
 822:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t ins;
 823:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint8_t  pos;
 824:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint8_t  offset;
 825:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 826:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 827:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureEvent:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event)
 828:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureEvent:Invalid Input",  XMC_CCU8_SLICE_IsInputvalid(config->ma
 829:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureEvent:Invalid Edge Sensitivity",
 830:../Libraries/XMCLib/src/xmc_ccu8.c ****              XMC_CCU8_SLICE_CHECK_EDGE_SENSITIVITY(config->edge));
 831:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureEvent:Invalid Level Sensitivity", 
 832:../Libraries/XMCLib/src/xmc_ccu8.c ****              ((config->level == XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) ||\
 833:../Libraries/XMCLib/src/xmc_ccu8.c ****               (config->level == XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
 834:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureEvent:Invalid Debounce Period",
 835:../Libraries/XMCLib/src/xmc_ccu8.c ****              XMC_CCU8_SLICE_CHECK_EVENT_FILTER(config->duration));
 836:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 837:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Calculate offset with reference to event */
 838:../Libraries/XMCLib/src/xmc_ccu8.c ****   offset = ((uint8_t) event) - 1U;
 1774              	 .loc 2 838 0
 1775 000e FB7A     	 ldrb r3,[r7,#11]
 1776 0010 013B     	 subs r3,r3,#1
 1777 0012 FB77     	 strb r3,[r7,#31]
 839:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 840:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CCU8V3) /* Defined for XMC1400 devices only */
 841:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins = slice->INS2;
 842:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 843:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First, configure the edge sensitivity */
 844:../Libraries/XMCLib/src/xmc_ccu8.c ****   pos = ((uint8_t) CCU8_CC8_INS2_EV0EM_Pos) + (uint8_t)(offset << 2U);
 845:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 846:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) config->edge) << pos;
 847:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 848:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Next, the level */
 849:../Libraries/XMCLib/src/xmc_ccu8.c ****   pos = ((uint8_t) CCU8_CC8_INS2_EV0LM_Pos) + (uint8_t)(offset << 2U);
 850:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 851:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) (config->level)) << pos;
 852:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 853:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Next, the debounce filter */
 854:../Libraries/XMCLib/src/xmc_ccu8.c ****   pos = ((uint8_t) CCU8_CC8_INS2_LPF0M_Pos) + (uint8_t)(offset << 2U);
 855:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 856:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) config->duration) << pos;
 857:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 858:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->INS2 = ins;
 859:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 860:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins = slice->INS1;
 861:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 862:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Finally the input */
 863:../Libraries/XMCLib/src/xmc_ccu8.c ****   pos = ((uint8_t) CCU8_CC8_INS1_EV0IS_Pos) + (uint8_t)(offset << 3U);
 864:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 865:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) config->mapped_input) << pos;
 866:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 867:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->INS1 = ins;
 868:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 869:../Libraries/XMCLib/src/xmc_ccu8.c **** #else
 870:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins = slice->INS;
 1778              	 .loc 2 870 0
 1779 0014 FB68     	 ldr r3,[r7,#12]
 1780 0016 1B68     	 ldr r3,[r3]
 1781 0018 BB61     	 str r3,[r7,#24]
 871:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 872:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First, configure the edge sensitivity */
 873:../Libraries/XMCLib/src/xmc_ccu8.c ****   pos = ((uint8_t) CCU8_CC8_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
 1782              	 .loc 2 873 0
 1783 001a FB7F     	 ldrb r3,[r7,#31]
 1784 001c 5B00     	 lsls r3,r3,#1
 1785 001e DBB2     	 uxtb r3,r3
 1786 0020 1033     	 adds r3,r3,#16
 1787 0022 FB75     	 strb r3,[r7,#23]
 874:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 1788              	 .loc 2 874 0
 1789 0024 FB7D     	 ldrb r3,[r7,#23]
 1790 0026 0322     	 movs r2,#3
 1791 0028 02FA03F3 	 lsl r3,r2,r3
 1792 002c DB43     	 mvns r3,r3
 1793 002e BA69     	 ldr r2,[r7,#24]
 1794 0030 1340     	 ands r3,r3,r2
 1795 0032 BB61     	 str r3,[r7,#24]
 875:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) config->edge) << pos;
 1796              	 .loc 2 875 0
 1797 0034 7B68     	 ldr r3,[r7,#4]
 1798 0036 5B78     	 ldrb r3,[r3,#1]
 1799 0038 1A46     	 mov r2,r3
 1800 003a FB7D     	 ldrb r3,[r7,#23]
 1801 003c 02FA03F3 	 lsl r3,r2,r3
 1802 0040 BA69     	 ldr r2,[r7,#24]
 1803 0042 1343     	 orrs r3,r3,r2
 1804 0044 BB61     	 str r3,[r7,#24]
 876:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 877:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Next, the level */
 878:../Libraries/XMCLib/src/xmc_ccu8.c ****   pos = ((uint8_t) CCU8_CC8_INS_EV0LM_Pos) + offset;
 1805              	 .loc 2 878 0
 1806 0046 FB7F     	 ldrb r3,[r7,#31]
 1807 0048 1633     	 adds r3,r3,#22
 1808 004a FB75     	 strb r3,[r7,#23]
 879:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 1809              	 .loc 2 879 0
 1810 004c FB7D     	 ldrb r3,[r7,#23]
 1811 004e 0122     	 movs r2,#1
 1812 0050 02FA03F3 	 lsl r3,r2,r3
 1813 0054 DB43     	 mvns r3,r3
 1814 0056 BA69     	 ldr r2,[r7,#24]
 1815 0058 1340     	 ands r3,r3,r2
 1816 005a BB61     	 str r3,[r7,#24]
 880:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) (config->level)) << pos;
 1817              	 .loc 2 880 0
 1818 005c 7B68     	 ldr r3,[r7,#4]
 1819 005e 9B78     	 ldrb r3,[r3,#2]
 1820 0060 1A46     	 mov r2,r3
 1821 0062 FB7D     	 ldrb r3,[r7,#23]
 1822 0064 02FA03F3 	 lsl r3,r2,r3
 1823 0068 BA69     	 ldr r2,[r7,#24]
 1824 006a 1343     	 orrs r3,r3,r2
 1825 006c BB61     	 str r3,[r7,#24]
 881:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 882:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Next, the debounce filter */
 883:../Libraries/XMCLib/src/xmc_ccu8.c ****   pos = ((uint8_t) CCU8_CC8_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
 1826              	 .loc 2 883 0
 1827 006e FB7F     	 ldrb r3,[r7,#31]
 1828 0070 5B00     	 lsls r3,r3,#1
 1829 0072 DBB2     	 uxtb r3,r3
 1830 0074 1933     	 adds r3,r3,#25
 1831 0076 FB75     	 strb r3,[r7,#23]
 884:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 1832              	 .loc 2 884 0
 1833 0078 FB7D     	 ldrb r3,[r7,#23]
 1834 007a 0322     	 movs r2,#3
 1835 007c 02FA03F3 	 lsl r3,r2,r3
 1836 0080 DB43     	 mvns r3,r3
 1837 0082 BA69     	 ldr r2,[r7,#24]
 1838 0084 1340     	 ands r3,r3,r2
 1839 0086 BB61     	 str r3,[r7,#24]
 885:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) config->duration) << pos;
 1840              	 .loc 2 885 0
 1841 0088 7B68     	 ldr r3,[r7,#4]
 1842 008a DB78     	 ldrb r3,[r3,#3]
 1843 008c 1A46     	 mov r2,r3
 1844 008e FB7D     	 ldrb r3,[r7,#23]
 1845 0090 02FA03F3 	 lsl r3,r2,r3
 1846 0094 BA69     	 ldr r2,[r7,#24]
 1847 0096 1343     	 orrs r3,r3,r2
 1848 0098 BB61     	 str r3,[r7,#24]
 886:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 887:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Finally the input */
 888:../Libraries/XMCLib/src/xmc_ccu8.c ****   pos = ((uint8_t) CCU8_CC8_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
 1849              	 .loc 2 888 0
 1850 009a FB7F     	 ldrb r3,[r7,#31]
 1851 009c 9B00     	 lsls r3,r3,#2
 1852 009e FB75     	 strb r3,[r7,#23]
 889:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 1853              	 .loc 2 889 0
 1854 00a0 FB7D     	 ldrb r3,[r7,#23]
 1855 00a2 0F22     	 movs r2,#15
 1856 00a4 02FA03F3 	 lsl r3,r2,r3
 1857 00a8 DB43     	 mvns r3,r3
 1858 00aa BA69     	 ldr r2,[r7,#24]
 1859 00ac 1340     	 ands r3,r3,r2
 1860 00ae BB61     	 str r3,[r7,#24]
 890:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) config->mapped_input) << pos;
 1861              	 .loc 2 890 0
 1862 00b0 7B68     	 ldr r3,[r7,#4]
 1863 00b2 1B78     	 ldrb r3,[r3]
 1864 00b4 1A46     	 mov r2,r3
 1865 00b6 FB7D     	 ldrb r3,[r7,#23]
 1866 00b8 02FA03F3 	 lsl r3,r2,r3
 1867 00bc BA69     	 ldr r2,[r7,#24]
 1868 00be 1343     	 orrs r3,r3,r2
 1869 00c0 BB61     	 str r3,[r7,#24]
 891:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 892:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->INS = ins;
 1870              	 .loc 2 892 0
 1871 00c2 FB68     	 ldr r3,[r7,#12]
 1872 00c4 BA69     	 ldr r2,[r7,#24]
 1873 00c6 1A60     	 str r2,[r3]
 893:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 894:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 1874              	 .loc 2 894 0
 1875 00c8 2437     	 adds r7,r7,#36
 1876              	.LCFI152:
 1877              	 .cfi_def_cfa_offset 4
 1878 00ca BD46     	 mov sp,r7
 1879              	.LCFI153:
 1880              	 .cfi_def_cfa_register 13
 1881              	 
 1882 00cc 5DF8047B 	 ldr r7,[sp],#4
 1883              	.LCFI154:
 1884              	 .cfi_restore 7
 1885              	 .cfi_def_cfa_offset 0
 1886 00d0 7047     	 bx lr
 1887              	 .cfi_endproc
 1888              	.LFE229:
 1890 00d2 00BF     	 .section .text.XMC_CCU8_SLICE_SetInput,"ax",%progbits
 1891              	 .align 2
 1892              	 .global XMC_CCU8_SLICE_SetInput
 1893              	 .thumb
 1894              	 .thumb_func
 1896              	XMC_CCU8_SLICE_SetInput:
 1897              	.LFB230:
 895:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 896:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to bind an input to a slice trigger event */
 897:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_SetInput(XMC_CCU8_SLICE_t *const slice,
 898:../Libraries/XMCLib/src/xmc_ccu8.c ****                          const XMC_CCU8_SLICE_EVENT_t event,
 899:../Libraries/XMCLib/src/xmc_ccu8.c ****                              const XMC_CCU8_SLICE_INPUT_t input)
 900:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1898              	 .loc 2 900 0
 1899              	 .cfi_startproc
 1900              	 
 1901              	 
 1902              	 
 1903 0000 80B4     	 push {r7}
 1904              	.LCFI155:
 1905              	 .cfi_def_cfa_offset 4
 1906              	 .cfi_offset 7,-4
 1907 0002 85B0     	 sub sp,sp,#20
 1908              	.LCFI156:
 1909              	 .cfi_def_cfa_offset 24
 1910 0004 00AF     	 add r7,sp,#0
 1911              	.LCFI157:
 1912              	 .cfi_def_cfa_register 7
 1913 0006 7860     	 str r0,[r7,#4]
 1914 0008 0B46     	 mov r3,r1
 1915 000a FB70     	 strb r3,[r7,#3]
 1916 000c 1346     	 mov r3,r2
 1917 000e BB70     	 strb r3,[r7,#2]
 901:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t ins;
 902:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint8_t  pos;
 903:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint8_t  offset;
 904:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 905:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetInput:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 906:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetInput:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
 907:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetInput:Invalid Input", XMC_CCU8_SLICE_IsInputvalid(input));
 908:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 909:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Calculate offset with reference to event */
 910:../Libraries/XMCLib/src/xmc_ccu8.c ****   offset = ((uint8_t) event) - 1U;
 1918              	 .loc 2 910 0
 1919 0010 FB78     	 ldrb r3,[r7,#3]
 1920 0012 013B     	 subs r3,r3,#1
 1921 0014 FB73     	 strb r3,[r7,#15]
 911:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 912:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CCU8V3) /* Defined for XMC1400 devices only */
 913:../Libraries/XMCLib/src/xmc_ccu8.c ****   pos = ((uint8_t) CCU8_CC8_INS1_EV0IS_Pos) + (uint8_t) (offset << 3U);
 914:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins = slice->INS1;
 915:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 916:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) input) << pos;
 917:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 918:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->INS1 = ins;
 919:../Libraries/XMCLib/src/xmc_ccu8.c **** #else
 920:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 921:../Libraries/XMCLib/src/xmc_ccu8.c ****   pos = ((uint8_t) CCU8_CC8_INS_EV0IS_Pos) + (uint8_t) (offset << 2U);
 1922              	 .loc 2 921 0
 1923 0016 FB7B     	 ldrb r3,[r7,#15]
 1924 0018 9B00     	 lsls r3,r3,#2
 1925 001a BB73     	 strb r3,[r7,#14]
 922:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins = slice->INS;
 1926              	 .loc 2 922 0
 1927 001c 7B68     	 ldr r3,[r7,#4]
 1928 001e 1B68     	 ldr r3,[r3]
 1929 0020 BB60     	 str r3,[r7,#8]
 923:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 1930              	 .loc 2 923 0
 1931 0022 BB7B     	 ldrb r3,[r7,#14]
 1932 0024 0F22     	 movs r2,#15
 1933 0026 02FA03F3 	 lsl r3,r2,r3
 1934 002a DB43     	 mvns r3,r3
 1935 002c BA68     	 ldr r2,[r7,#8]
 1936 002e 1340     	 ands r3,r3,r2
 1937 0030 BB60     	 str r3,[r7,#8]
 924:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) input) << pos;
 1938              	 .loc 2 924 0
 1939 0032 BA78     	 ldrb r2,[r7,#2]
 1940 0034 BB7B     	 ldrb r3,[r7,#14]
 1941 0036 02FA03F3 	 lsl r3,r2,r3
 1942 003a BA68     	 ldr r2,[r7,#8]
 1943 003c 1343     	 orrs r3,r3,r2
 1944 003e BB60     	 str r3,[r7,#8]
 925:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 926:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->INS = ins;
 1945              	 .loc 2 926 0
 1946 0040 7B68     	 ldr r3,[r7,#4]
 1947 0042 BA68     	 ldr r2,[r7,#8]
 1948 0044 1A60     	 str r2,[r3]
 927:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 928:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 1949              	 .loc 2 928 0
 1950 0046 1437     	 adds r7,r7,#20
 1951              	.LCFI158:
 1952              	 .cfi_def_cfa_offset 4
 1953 0048 BD46     	 mov sp,r7
 1954              	.LCFI159:
 1955              	 .cfi_def_cfa_register 13
 1956              	 
 1957 004a 5DF8047B 	 ldr r7,[sp],#4
 1958              	.LCFI160:
 1959              	 .cfi_restore 7
 1960              	 .cfi_def_cfa_offset 0
 1961 004e 7047     	 bx lr
 1962              	 .cfi_endproc
 1963              	.LFE230:
 1965              	 .section .text.XMC_CCU8_SLICE_SetTimerRepeatMode,"ax",%progbits
 1966              	 .align 2
 1967              	 .global XMC_CCU8_SLICE_SetTimerRepeatMode
 1968              	 .thumb
 1969              	 .thumb_func
 1971              	XMC_CCU8_SLICE_SetTimerRepeatMode:
 1972              	.LFB231:
 929:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 930:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to program timer repeat mode - Single shot vs repeat  */
 931:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_SetTimerRepeatMode(XMC_CCU8_SLICE_t *const slice,
 932:../Libraries/XMCLib/src/xmc_ccu8.c ****                                    const XMC_CCU8_SLICE_TIMER_REPEAT_MODE_t mode)
 933:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1973              	 .loc 2 933 0
 1974              	 .cfi_startproc
 1975              	 
 1976              	 
 1977              	 
 1978 0000 80B4     	 push {r7}
 1979              	.LCFI161:
 1980              	 .cfi_def_cfa_offset 4
 1981              	 .cfi_offset 7,-4
 1982 0002 85B0     	 sub sp,sp,#20
 1983              	.LCFI162:
 1984              	 .cfi_def_cfa_offset 24
 1985 0004 00AF     	 add r7,sp,#0
 1986              	.LCFI163:
 1987              	 .cfi_def_cfa_register 7
 1988 0006 7860     	 str r0,[r7,#4]
 1989 0008 0B46     	 mov r3,r1
 1990 000a FB70     	 strb r3,[r7,#3]
 934:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t tc;
 935:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 936:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerRepeatMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice
 937:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerRepeatMode:Invalid Timer Repeat Mode", 
 938:../Libraries/XMCLib/src/xmc_ccu8.c ****              ((mode == XMC_CCU8_SLICE_TIMER_REPEAT_MODE_REPEAT) ||\
 939:../Libraries/XMCLib/src/xmc_ccu8.c ****               (mode == (mode == XMC_CCU8_SLICE_TIMER_REPEAT_MODE_REPEAT))));
 940:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 941:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc = slice->TC;
 1991              	 .loc 2 941 0
 1992 000c 7B68     	 ldr r3,[r7,#4]
 1993 000e 5B69     	 ldr r3,[r3,#20]
 1994 0010 FB60     	 str r3,[r7,#12]
 942:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 943:../Libraries/XMCLib/src/xmc_ccu8.c ****   if(XMC_CCU8_SLICE_TIMER_REPEAT_MODE_REPEAT == mode)
 1995              	 .loc 2 943 0
 1996 0012 FB78     	 ldrb r3,[r7,#3]
 1997 0014 002B     	 cmp r3,#0
 1998 0016 04D1     	 bne .L48
 944:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 945:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc &= ~((uint32_t) CCU8_CC8_TC_TSSM_Msk);
 1999              	 .loc 2 945 0
 2000 0018 FB68     	 ldr r3,[r7,#12]
 2001 001a 23F00203 	 bic r3,r3,#2
 2002 001e FB60     	 str r3,[r7,#12]
 2003 0020 03E0     	 b .L49
 2004              	.L48:
 946:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 947:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
 948:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 949:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc |= (uint32_t) CCU8_CC8_TC_TSSM_Msk;
 2005              	 .loc 2 949 0
 2006 0022 FB68     	 ldr r3,[r7,#12]
 2007 0024 43F00203 	 orr r3,r3,#2
 2008 0028 FB60     	 str r3,[r7,#12]
 2009              	.L49:
 950:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 951:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 952:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC = tc;
 2010              	 .loc 2 952 0
 2011 002a 7B68     	 ldr r3,[r7,#4]
 2012 002c FA68     	 ldr r2,[r7,#12]
 2013 002e 5A61     	 str r2,[r3,#20]
 953:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 2014              	 .loc 2 953 0
 2015 0030 1437     	 adds r7,r7,#20
 2016              	.LCFI164:
 2017              	 .cfi_def_cfa_offset 4
 2018 0032 BD46     	 mov sp,r7
 2019              	.LCFI165:
 2020              	 .cfi_def_cfa_register 13
 2021              	 
 2022 0034 5DF8047B 	 ldr r7,[sp],#4
 2023              	.LCFI166:
 2024              	 .cfi_restore 7
 2025              	 .cfi_def_cfa_offset 0
 2026 0038 7047     	 bx lr
 2027              	 .cfi_endproc
 2028              	.LFE231:
 2030 003a 00BF     	 .section .text.XMC_CCU8_SLICE_SetTimerCountingMode,"ax",%progbits
 2031              	 .align 2
 2032              	 .global XMC_CCU8_SLICE_SetTimerCountingMode
 2033              	 .thumb
 2034              	 .thumb_func
 2036              	XMC_CCU8_SLICE_SetTimerCountingMode:
 2037              	.LFB232:
 954:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 955:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Programs timer counting mode  */
 956:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_SetTimerCountingMode(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_TIMER_
 957:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 2038              	 .loc 2 957 0
 2039              	 .cfi_startproc
 2040              	 
 2041              	 
 2042              	 
 2043 0000 80B4     	 push {r7}
 2044              	.LCFI167:
 2045              	 .cfi_def_cfa_offset 4
 2046              	 .cfi_offset 7,-4
 2047 0002 85B0     	 sub sp,sp,#20
 2048              	.LCFI168:
 2049              	 .cfi_def_cfa_offset 24
 2050 0004 00AF     	 add r7,sp,#0
 2051              	.LCFI169:
 2052              	 .cfi_def_cfa_register 7
 2053 0006 7860     	 str r0,[r7,#4]
 2054 0008 0B46     	 mov r3,r1
 2055 000a FB70     	 strb r3,[r7,#3]
 958:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t tc;
 959:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 960:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCountingMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(sli
 961:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCountingMode:Invalid Timer Count Mode",
 962:../Libraries/XMCLib/src/xmc_ccu8.c ****              ((mode == XMC_CCU8_SLICE_TIMER_COUNT_MODE_EA) ||\
 963:../Libraries/XMCLib/src/xmc_ccu8.c ****               (mode == XMC_CCU8_SLICE_TIMER_COUNT_MODE_CA)));
 964:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 965:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc = slice->TC;
 2056              	 .loc 2 965 0
 2057 000c 7B68     	 ldr r3,[r7,#4]
 2058 000e 5B69     	 ldr r3,[r3,#20]
 2059 0010 FB60     	 str r3,[r7,#12]
 966:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 967:../Libraries/XMCLib/src/xmc_ccu8.c ****   if(XMC_CCU8_SLICE_TIMER_COUNT_MODE_EA == mode)
 2060              	 .loc 2 967 0
 2061 0012 FB78     	 ldrb r3,[r7,#3]
 2062 0014 002B     	 cmp r3,#0
 2063 0016 04D1     	 bne .L51
 968:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 969:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc &= ~((uint32_t) CCU8_CC8_TC_TCM_Msk);
 2064              	 .loc 2 969 0
 2065 0018 FB68     	 ldr r3,[r7,#12]
 2066 001a 23F00103 	 bic r3,r3,#1
 2067 001e FB60     	 str r3,[r7,#12]
 2068 0020 03E0     	 b .L52
 2069              	.L51:
 970:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 971:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
 972:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 973:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc |= (uint32_t) CCU8_CC8_TC_TCM_Msk;
 2070              	 .loc 2 973 0
 2071 0022 FB68     	 ldr r3,[r7,#12]
 2072 0024 43F00103 	 orr r3,r3,#1
 2073 0028 FB60     	 str r3,[r7,#12]
 2074              	.L52:
 974:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 975:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 976:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC = tc;
 2075              	 .loc 2 976 0
 2076 002a 7B68     	 ldr r3,[r7,#4]
 2077 002c FA68     	 ldr r2,[r7,#12]
 2078 002e 5A61     	 str r2,[r3,#20]
 977:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 2079              	 .loc 2 977 0
 2080 0030 1437     	 adds r7,r7,#20
 2081              	.LCFI170:
 2082              	 .cfi_def_cfa_offset 4
 2083 0032 BD46     	 mov sp,r7
 2084              	.LCFI171:
 2085              	 .cfi_def_cfa_register 13
 2086              	 
 2087 0034 5DF8047B 	 ldr r7,[sp],#4
 2088              	.LCFI172:
 2089              	 .cfi_restore 7
 2090              	 .cfi_def_cfa_offset 0
 2091 0038 7047     	 bx lr
 2092              	 .cfi_endproc
 2093              	.LFE232:
 2095 003a 00BF     	 .section .text.XMC_CCU8_SLICE_SetTimerPeriodMatch,"ax",%progbits
 2096              	 .align 2
 2097              	 .global XMC_CCU8_SLICE_SetTimerPeriodMatch
 2098              	 .thumb
 2099              	 .thumb_func
 2101              	XMC_CCU8_SLICE_SetTimerPeriodMatch:
 2102              	.LFB233:
 978:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 979:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Programs period match value of the timer  */
 980:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_SetTimerPeriodMatch(XMC_CCU8_SLICE_t *const slice, const uint16_t period_val)
 981:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 2103              	 .loc 2 981 0
 2104              	 .cfi_startproc
 2105              	 
 2106              	 
 2107              	 
 2108 0000 80B4     	 push {r7}
 2109              	.LCFI173:
 2110              	 .cfi_def_cfa_offset 4
 2111              	 .cfi_offset 7,-4
 2112 0002 83B0     	 sub sp,sp,#12
 2113              	.LCFI174:
 2114              	 .cfi_def_cfa_offset 16
 2115 0004 00AF     	 add r7,sp,#0
 2116              	.LCFI175:
 2117              	 .cfi_def_cfa_register 7
 2118 0006 7860     	 str r0,[r7,#4]
 2119 0008 0B46     	 mov r3,r1
 2120 000a 7B80     	 strh r3,[r7,#2]
 982:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slic
 983:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->PRS = (uint32_t) period_val;
 2121              	 .loc 2 983 0
 2122 000c 7A88     	 ldrh r2,[r7,#2]
 2123 000e 7B68     	 ldr r3,[r7,#4]
 2124 0010 5A63     	 str r2,[r3,#52]
 984:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 2125              	 .loc 2 984 0
 2126 0012 0C37     	 adds r7,r7,#12
 2127              	.LCFI176:
 2128              	 .cfi_def_cfa_offset 4
 2129 0014 BD46     	 mov sp,r7
 2130              	.LCFI177:
 2131              	 .cfi_def_cfa_register 13
 2132              	 
 2133 0016 5DF8047B 	 ldr r7,[sp],#4
 2134              	.LCFI178:
 2135              	 .cfi_restore 7
 2136              	 .cfi_def_cfa_offset 0
 2137 001a 7047     	 bx lr
 2138              	 .cfi_endproc
 2139              	.LFE233:
 2141              	 .section .text.XMC_CCU8_SLICE_GetCaptureRegisterValue,"ax",%progbits
 2142              	 .align 2
 2143              	 .global XMC_CCU8_SLICE_GetCaptureRegisterValue
 2144              	 .thumb
 2145              	 .thumb_func
 2147              	XMC_CCU8_SLICE_GetCaptureRegisterValue:
 2148              	.LFB234:
 985:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 986:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Retrieves desired capture register value */
 987:../Libraries/XMCLib/src/xmc_ccu8.c **** uint32_t XMC_CCU8_SLICE_GetCaptureRegisterValue(const XMC_CCU8_SLICE_t *const slice, const uint8_t 
 988:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 2149              	 .loc 2 988 0
 2150              	 .cfi_startproc
 2151              	 
 2152              	 
 2153              	 
 2154 0000 80B4     	 push {r7}
 2155              	.LCFI179:
 2156              	 .cfi_def_cfa_offset 4
 2157              	 .cfi_offset 7,-4
 2158 0002 83B0     	 sub sp,sp,#12
 2159              	.LCFI180:
 2160              	 .cfi_def_cfa_offset 16
 2161 0004 00AF     	 add r7,sp,#0
 2162              	.LCFI181:
 2163              	 .cfi_def_cfa_register 7
 2164 0006 7860     	 str r0,[r7,#4]
 2165 0008 0B46     	 mov r3,r1
 2166 000a FB70     	 strb r3,[r7,#3]
 989:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_GetCaptureRegisterValue:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(
 990:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_GetCaptureRegisterValue:Invalid register number", (reg_num < 4U));
 991:../Libraries/XMCLib/src/xmc_ccu8.c ****   return(slice->CV[reg_num]);
 2167              	 .loc 2 991 0
 2168 000c FB78     	 ldrb r3,[r7,#3]
 2169 000e 7A68     	 ldr r2,[r7,#4]
 2170 0010 1C33     	 adds r3,r3,#28
 2171 0012 9B00     	 lsls r3,r3,#2
 2172 0014 1344     	 add r3,r3,r2
 2173 0016 5B68     	 ldr r3,[r3,#4]
 992:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 2174              	 .loc 2 992 0
 2175 0018 1846     	 mov r0,r3
 2176 001a 0C37     	 adds r7,r7,#12
 2177              	.LCFI182:
 2178              	 .cfi_def_cfa_offset 4
 2179 001c BD46     	 mov sp,r7
 2180              	.LCFI183:
 2181              	 .cfi_def_cfa_register 13
 2182              	 
 2183 001e 5DF8047B 	 ldr r7,[sp],#4
 2184              	.LCFI184:
 2185              	 .cfi_restore 7
 2186              	 .cfi_def_cfa_offset 0
 2187 0022 7047     	 bx lr
 2188              	 .cfi_endproc
 2189              	.LFE234:
 2191              	 .section .text.XMC_CCU8_SLICE_GetLastCapturedTimerValue,"ax",%progbits
 2192              	 .align 2
 2193              	 .global XMC_CCU8_SLICE_GetLastCapturedTimerValue
 2194              	 .thumb
 2195              	 .thumb_func
 2197              	XMC_CCU8_SLICE_GetLastCapturedTimerValue:
 2198              	.LFB235:
 993:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 994:../Libraries/XMCLib/src/xmc_ccu8.c **** /* @brief Retrieves the latest captured timer value */
 995:../Libraries/XMCLib/src/xmc_ccu8.c **** XMC_CCU8_STATUS_t XMC_CCU8_SLICE_GetLastCapturedTimerValue(const XMC_CCU8_SLICE_t *const slice,
 996:../Libraries/XMCLib/src/xmc_ccu8.c ****                                                            const XMC_CCU8_SLICE_CAP_REG_SET_t set,
 997:../Libraries/XMCLib/src/xmc_ccu8.c ****                                                            uint32_t *val_ptr)
 998:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 2199              	 .loc 2 998 0
 2200              	 .cfi_startproc
 2201              	 
 2202              	 
 2203              	 
 2204 0000 80B4     	 push {r7}
 2205              	.LCFI185:
 2206              	 .cfi_def_cfa_offset 4
 2207              	 .cfi_offset 7,-4
 2208 0002 87B0     	 sub sp,sp,#28
 2209              	.LCFI186:
 2210              	 .cfi_def_cfa_offset 32
 2211 0004 00AF     	 add r7,sp,#0
 2212              	.LCFI187:
 2213              	 .cfi_def_cfa_register 7
 2214 0006 F860     	 str r0,[r7,#12]
 2215 0008 0B46     	 mov r3,r1
 2216 000a 7A60     	 str r2,[r7,#4]
 2217 000c FB72     	 strb r3,[r7,#11]
 999:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1000:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_CCU8_STATUS_t retval;
1001:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint8_t i;
1002:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint8_t start;
1003:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint8_t end;
1004:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1005:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_GetLastCapturedTimerValue:Invalid Slice Pointer", XMC_CCU8_IsValidSlic
1006:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_GetLastCapturedTimerValue:Invalid Register Set",
1007:../Libraries/XMCLib/src/xmc_ccu8.c ****              ((set == XMC_CCU8_SLICE_CAP_REG_SET_LOW) ||\
1008:../Libraries/XMCLib/src/xmc_ccu8.c ****               (set == XMC_CCU8_SLICE_CAP_REG_SET_HIGH)));
1009:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1010:../Libraries/XMCLib/src/xmc_ccu8.c ****   retval = XMC_CCU8_STATUS_ERROR;
 2218              	 .loc 2 1010 0
 2219 000e 0123     	 movs r3,#1
 2220 0010 FB75     	 strb r3,[r7,#23]
1011:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1012:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First check if extended capture mode is enabled */
1013:../Libraries/XMCLib/src/xmc_ccu8.c ****   if((slice->TC) & CCU8_CC8_TC_ECM_Msk)
 2221              	 .loc 2 1013 0
 2222 0012 FB68     	 ldr r3,[r7,#12]
 2223 0014 5B69     	 ldr r3,[r3,#20]
 2224 0016 03F01003 	 and r3,r3,#16
 2225 001a 002B     	 cmp r3,#0
 2226 001c 04D0     	 beq .L57
1014:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1015:../Libraries/XMCLib/src/xmc_ccu8.c ****     /* Extended capture mode has been enabled. So start with the lowest capture register and work y
1016:../Libraries/XMCLib/src/xmc_ccu8.c ****     start = 0U;
 2227              	 .loc 2 1016 0
 2228 001e 0023     	 movs r3,#0
 2229 0020 7B75     	 strb r3,[r7,#21]
1017:../Libraries/XMCLib/src/xmc_ccu8.c ****     end = XMC_CCU8_NUM_SLICES_PER_MODULE;
 2230              	 .loc 2 1017 0
 2231 0022 0423     	 movs r3,#4
 2232 0024 3B75     	 strb r3,[r7,#20]
 2233 0026 0BE0     	 b .L58
 2234              	.L57:
1018:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1019:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
1020:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1021:../Libraries/XMCLib/src/xmc_ccu8.c ****     /* Extended capture mode is not enabled */
1022:../Libraries/XMCLib/src/xmc_ccu8.c ****     if(set == XMC_CCU8_SLICE_CAP_REG_SET_HIGH)
 2235              	 .loc 2 1022 0
 2236 0028 FB7A     	 ldrb r3,[r7,#11]
 2237 002a 012B     	 cmp r3,#1
 2238 002c 04D1     	 bne .L59
1023:../Libraries/XMCLib/src/xmc_ccu8.c ****     {
1024:../Libraries/XMCLib/src/xmc_ccu8.c ****       start = ((uint8_t) XMC_CCU8_NUM_SLICES_PER_MODULE) >> 1U;
 2239              	 .loc 2 1024 0
 2240 002e 0223     	 movs r3,#2
 2241 0030 7B75     	 strb r3,[r7,#21]
1025:../Libraries/XMCLib/src/xmc_ccu8.c ****       end   = (uint8_t) XMC_CCU8_NUM_SLICES_PER_MODULE;
 2242              	 .loc 2 1025 0
 2243 0032 0423     	 movs r3,#4
 2244 0034 3B75     	 strb r3,[r7,#20]
 2245 0036 03E0     	 b .L58
 2246              	.L59:
1026:../Libraries/XMCLib/src/xmc_ccu8.c ****     }
1027:../Libraries/XMCLib/src/xmc_ccu8.c ****     else
1028:../Libraries/XMCLib/src/xmc_ccu8.c ****     {
1029:../Libraries/XMCLib/src/xmc_ccu8.c ****       start = 0U;
 2247              	 .loc 2 1029 0
 2248 0038 0023     	 movs r3,#0
 2249 003a 7B75     	 strb r3,[r7,#21]
1030:../Libraries/XMCLib/src/xmc_ccu8.c ****       end = ((uint8_t) XMC_CCU8_NUM_SLICES_PER_MODULE) >> 1U;
 2250              	 .loc 2 1030 0
 2251 003c 0223     	 movs r3,#2
 2252 003e 3B75     	 strb r3,[r7,#20]
 2253              	.L58:
1031:../Libraries/XMCLib/src/xmc_ccu8.c ****     }
1032:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1033:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1034:../Libraries/XMCLib/src/xmc_ccu8.c ****   for(i=start; i<end; i++)
 2254              	 .loc 2 1034 0
 2255 0040 7B7D     	 ldrb r3,[r7,#21]
 2256 0042 BB75     	 strb r3,[r7,#22]
 2257 0044 17E0     	 b .L60
 2258              	.L63:
1035:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1036:../Libraries/XMCLib/src/xmc_ccu8.c ****     if( (slice->CV[i]) & CCU8_CC8_CV_FFL_Msk )
 2259              	 .loc 2 1036 0
 2260 0046 BB7D     	 ldrb r3,[r7,#22]
 2261 0048 FA68     	 ldr r2,[r7,#12]
 2262 004a 1C33     	 adds r3,r3,#28
 2263 004c 9B00     	 lsls r3,r3,#2
 2264 004e 1344     	 add r3,r3,r2
 2265 0050 5B68     	 ldr r3,[r3,#4]
 2266 0052 03F48013 	 and r3,r3,#1048576
 2267 0056 002B     	 cmp r3,#0
 2268 0058 0AD0     	 beq .L61
1037:../Libraries/XMCLib/src/xmc_ccu8.c ****     {
1038:../Libraries/XMCLib/src/xmc_ccu8.c ****       *val_ptr = slice->CV[i];
 2269              	 .loc 2 1038 0
 2270 005a BB7D     	 ldrb r3,[r7,#22]
 2271 005c FA68     	 ldr r2,[r7,#12]
 2272 005e 1C33     	 adds r3,r3,#28
 2273 0060 9B00     	 lsls r3,r3,#2
 2274 0062 1344     	 add r3,r3,r2
 2275 0064 5A68     	 ldr r2,[r3,#4]
 2276 0066 7B68     	 ldr r3,[r7,#4]
 2277 0068 1A60     	 str r2,[r3]
1039:../Libraries/XMCLib/src/xmc_ccu8.c ****       retval = XMC_CCU8_STATUS_OK;
 2278              	 .loc 2 1039 0
 2279 006a 0023     	 movs r3,#0
 2280 006c FB75     	 strb r3,[r7,#23]
1040:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;
 2281              	 .loc 2 1040 0
 2282 006e 06E0     	 b .L62
 2283              	.L61:
1034:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 2284              	 .loc 2 1034 0 discriminator 2
 2285 0070 BB7D     	 ldrb r3,[r7,#22]
 2286 0072 0133     	 adds r3,r3,#1
 2287 0074 BB75     	 strb r3,[r7,#22]
 2288              	.L60:
1034:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 2289              	 .loc 2 1034 0 is_stmt 0 discriminator 1
 2290 0076 BA7D     	 ldrb r2,[r7,#22]
 2291 0078 3B7D     	 ldrb r3,[r7,#20]
 2292 007a 9A42     	 cmp r2,r3
 2293 007c E3D3     	 bcc .L63
 2294              	.L62:
1041:../Libraries/XMCLib/src/xmc_ccu8.c ****     }
1042:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1043:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1044:../Libraries/XMCLib/src/xmc_ccu8.c ****   return retval;
 2295              	 .loc 2 1044 0 is_stmt 1
 2296 007e FB7D     	 ldrb r3,[r7,#23]
1045:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 2297              	 .loc 2 1045 0
 2298 0080 1846     	 mov r0,r3
 2299 0082 1C37     	 adds r7,r7,#28
 2300              	.LCFI188:
 2301              	 .cfi_def_cfa_offset 4
 2302 0084 BD46     	 mov sp,r7
 2303              	.LCFI189:
 2304              	 .cfi_def_cfa_register 13
 2305              	 
 2306 0086 5DF8047B 	 ldr r7,[sp],#4
 2307              	.LCFI190:
 2308              	 .cfi_restore 7
 2309              	 .cfi_def_cfa_offset 0
 2310 008a 7047     	 bx lr
 2311              	 .cfi_endproc
 2312              	.LFE235:
 2314              	 .section .text.XMC_CCU8_GetCapturedValueFromFifo,"ax",%progbits
 2315              	 .align 2
 2316              	 .global XMC_CCU8_GetCapturedValueFromFifo
 2317              	 .thumb
 2318              	 .thumb_func
 2320              	XMC_CCU8_GetCapturedValueFromFifo:
 2321              	.LFB236:
1046:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Retrieves timer capture value from a FIFO made of capture registers */
1047:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CCU8V1) /* Defined for XMC4800, XMC4700, XMC4500, XMC4400, XMC4200, XMC4100 devices onl
1048:../Libraries/XMCLib/src/xmc_ccu8.c **** int32_t XMC_CCU8_GetCapturedValueFromFifo(const XMC_CCU8_MODULE_t *const module, const uint8_t slic
1049:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 2322              	 .loc 2 1049 0
 2323              	 .cfi_startproc
 2324              	 
 2325              	 
 2326              	 
 2327 0000 80B4     	 push {r7}
 2328              	.LCFI191:
 2329              	 .cfi_def_cfa_offset 4
 2330              	 .cfi_offset 7,-4
 2331 0002 85B0     	 sub sp,sp,#20
 2332              	.LCFI192:
 2333              	 .cfi_def_cfa_offset 24
 2334 0004 00AF     	 add r7,sp,#0
 2335              	.LCFI193:
 2336              	 .cfi_def_cfa_register 7
 2337 0006 7860     	 str r0,[r7,#4]
 2338 0008 0B46     	 mov r3,r1
 2339 000a FB70     	 strb r3,[r7,#3]
1050:../Libraries/XMCLib/src/xmc_ccu8.c ****   int32_t  cap;
1051:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t extracted_slice;
1052:../Libraries/XMCLib/src/xmc_ccu8.c ****   
1053:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_GetCapturedValueFromFifo:Invalid Slice Pointer", XMC_CCU8_IsValidModule(modu
1054:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1055:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First read the global fifo register */
1056:../Libraries/XMCLib/src/xmc_ccu8.c ****   cap = (int32_t) module->ECRD;
 2340              	 .loc 2 1056 0
 2341 000c 7B68     	 ldr r3,[r7,#4]
 2342 000e 1B6D     	 ldr r3,[r3,#80]
 2343 0010 FB60     	 str r3,[r7,#12]
1057:../Libraries/XMCLib/src/xmc_ccu8.c ****     
1058:../Libraries/XMCLib/src/xmc_ccu8.c ****   extracted_slice = (((uint32_t) cap) & ((uint32_t) CCU8_ECRD_SPTR_Msk)) >> CCU8_ECRD_SPTR_Pos;
 2344              	 .loc 2 1058 0
 2345 0012 FB68     	 ldr r3,[r7,#12]
 2346 0014 03F44013 	 and r3,r3,#3145728
 2347 0018 1B0D     	 lsrs r3,r3,#20
 2348 001a BB60     	 str r3,[r7,#8]
1059:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1060:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Return captured result only if it were applicable to this slice */
1061:../Libraries/XMCLib/src/xmc_ccu8.c ****   if(extracted_slice != ((uint32_t)slice_number))
 2349              	 .loc 2 1061 0
 2350 001c FA78     	 ldrb r2,[r7,#3]
 2351 001e BB68     	 ldr r3,[r7,#8]
 2352 0020 9A42     	 cmp r2,r3
 2353 0022 02D0     	 beq .L66
1062:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1063:../Libraries/XMCLib/src/xmc_ccu8.c ****     cap = -1;
 2354              	 .loc 2 1063 0
 2355 0024 4FF0FF33 	 mov r3,#-1
 2356 0028 FB60     	 str r3,[r7,#12]
 2357              	.L66:
1064:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1065:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1066:../Libraries/XMCLib/src/xmc_ccu8.c ****   return (cap);
 2358              	 .loc 2 1066 0
 2359 002a FB68     	 ldr r3,[r7,#12]
1067:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 2360              	 .loc 2 1067 0
 2361 002c 1846     	 mov r0,r3
 2362 002e 1437     	 adds r7,r7,#20
 2363              	.LCFI194:
 2364              	 .cfi_def_cfa_offset 4
 2365 0030 BD46     	 mov sp,r7
 2366              	.LCFI195:
 2367              	 .cfi_def_cfa_register 13
 2368              	 
 2369 0032 5DF8047B 	 ldr r7,[sp],#4
 2370              	.LCFI196:
 2371              	 .cfi_restore 7
 2372              	 .cfi_def_cfa_offset 0
 2373 0036 7047     	 bx lr
 2374              	 .cfi_endproc
 2375              	.LFE236:
 2377              	 .section .text.XMC_CCU8_SLICE_EnableDithering,"ax",%progbits
 2378              	 .align 2
 2379              	 .global XMC_CCU8_SLICE_EnableDithering
 2380              	 .thumb
 2381              	 .thumb_func
 2383              	XMC_CCU8_SLICE_EnableDithering:
 2384              	.LFB237:
1068:../Libraries/XMCLib/src/xmc_ccu8.c **** #else
1069:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Retrieves timer capture value from a FIFO made of capture registers */
1070:../Libraries/XMCLib/src/xmc_ccu8.c **** uint32_t XMC_CCU8_SLICE_GetCapturedValueFromFifo(const XMC_CCU8_SLICE_t *const slice, const XMC_CCU
1071:../Libraries/XMCLib/src/xmc_ccu8.c **** {
1072:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cap;
1073:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1074:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_GetCapturedValueFromFifo:Invalid Slice Pointer", XMC_CCU8_IsValidSlice
1075:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_GetCapturedValueFromFifo:Invalid Register Set", 
1076:../Libraries/XMCLib/src/xmc_ccu8.c ****              ((set == XMC_CCU8_SLICE_CAP_REG_SET_LOW) ||\
1077:../Libraries/XMCLib/src/xmc_ccu8.c ****               (set == XMC_CCU8_SLICE_CAP_REG_SET_HIGH)));
1078:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1079:../Libraries/XMCLib/src/xmc_ccu8.c ****   if(XMC_CCU8_SLICE_CAP_REG_SET_LOW == set)
1080:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1081:../Libraries/XMCLib/src/xmc_ccu8.c ****     cap = slice->ECRD0;
1082:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1083:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
1084:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1085:../Libraries/XMCLib/src/xmc_ccu8.c ****     cap = slice->ECRD1;
1086:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1087:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1088:../Libraries/XMCLib/src/xmc_ccu8.c ****   return cap;
1089:../Libraries/XMCLib/src/xmc_ccu8.c **** }
1090:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
1091:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1092:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Enables PWM dithering feature */
1093:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_EnableDithering(XMC_CCU8_SLICE_t *const slice,
1094:../Libraries/XMCLib/src/xmc_ccu8.c ****                                     const bool period_dither,
1095:../Libraries/XMCLib/src/xmc_ccu8.c ****                                     const bool duty_dither,
1096:../Libraries/XMCLib/src/xmc_ccu8.c ****                                     const uint8_t spread)
1097:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 2385              	 .loc 2 1097 0
 2386              	 .cfi_startproc
 2387              	 
 2388              	 
 2389 0000 80B5     	 push {r7,lr}
 2390              	.LCFI197:
 2391              	 .cfi_def_cfa_offset 8
 2392              	 .cfi_offset 7,-8
 2393              	 .cfi_offset 14,-4
 2394 0002 84B0     	 sub sp,sp,#16
 2395              	.LCFI198:
 2396              	 .cfi_def_cfa_offset 24
 2397 0004 00AF     	 add r7,sp,#0
 2398              	.LCFI199:
 2399              	 .cfi_def_cfa_register 7
 2400 0006 7860     	 str r0,[r7,#4]
 2401 0008 0846     	 mov r0,r1
 2402 000a 1146     	 mov r1,r2
 2403 000c 1A46     	 mov r2,r3
 2404 000e 0346     	 mov r3,r0
 2405 0010 FB70     	 strb r3,[r7,#3]
 2406 0012 0B46     	 mov r3,r1
 2407 0014 BB70     	 strb r3,[r7,#2]
 2408 0016 1346     	 mov r3,r2
 2409 0018 7B70     	 strb r3,[r7,#1]
1098:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t tc;
1099:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1100:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_EnableDithering:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1101:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1102:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc = slice->TC;
 2410              	 .loc 2 1102 0
 2411 001a 7B68     	 ldr r3,[r7,#4]
 2412 001c 5B69     	 ldr r3,[r3,#20]
 2413 001e FB60     	 str r3,[r7,#12]
1103:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc &= ~((uint32_t) CCU8_CC8_TC_DITHE_Msk);
 2414              	 .loc 2 1103 0
 2415 0020 FB68     	 ldr r3,[r7,#12]
 2416 0022 23F4C043 	 bic r3,r3,#24576
 2417 0026 FB60     	 str r3,[r7,#12]
1104:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1105:../Libraries/XMCLib/src/xmc_ccu8.c ****   if(true == period_dither)
 2418              	 .loc 2 1105 0
 2419 0028 FB78     	 ldrb r3,[r7,#3]
 2420 002a 002B     	 cmp r3,#0
 2421 002c 03D0     	 beq .L69
1106:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1107:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc |= (((uint32_t) XMC_CCU8_SLICE_DITHER_PERIOD_MASK) << CCU8_CC8_TC_DITHE_Pos);
 2422              	 .loc 2 1107 0
 2423 002e FB68     	 ldr r3,[r7,#12]
 2424 0030 43F40053 	 orr r3,r3,#8192
 2425 0034 FB60     	 str r3,[r7,#12]
 2426              	.L69:
1108:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1109:../Libraries/XMCLib/src/xmc_ccu8.c ****   if(true == duty_dither)
 2427              	 .loc 2 1109 0
 2428 0036 BB78     	 ldrb r3,[r7,#2]
 2429 0038 002B     	 cmp r3,#0
 2430 003a 03D0     	 beq .L70
1110:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1111:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc |= (((uint32_t) XMC_CCU8_SLICE_DITHER_DUTYCYCLE_MASK) << CCU8_CC8_TC_DITHE_Pos);
 2431              	 .loc 2 1111 0
 2432 003c FB68     	 ldr r3,[r7,#12]
 2433 003e 43F48043 	 orr r3,r3,#16384
 2434 0042 FB60     	 str r3,[r7,#12]
 2435              	.L70:
1112:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1113:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1114:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC = tc;
 2436              	 .loc 2 1114 0
 2437 0044 7B68     	 ldr r3,[r7,#4]
 2438 0046 FA68     	 ldr r2,[r7,#12]
 2439 0048 5A61     	 str r2,[r3,#20]
1115:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1116:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_CCU8_SLICE_SetDitherCompareValue((XMC_CCU8_SLICE_t *)slice, (uint8_t)spread);
 2440              	 .loc 2 1116 0
 2441 004a 7B78     	 ldrb r3,[r7,#1]
 2442 004c 7868     	 ldr r0,[r7,#4]
 2443 004e 1946     	 mov r1,r3
 2444 0050 FFF7FEFF 	 bl XMC_CCU8_SLICE_SetDitherCompareValue
1117:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 2445              	 .loc 2 1117 0
 2446 0054 1037     	 adds r7,r7,#16
 2447              	.LCFI200:
 2448              	 .cfi_def_cfa_offset 8
 2449 0056 BD46     	 mov sp,r7
 2450              	.LCFI201:
 2451              	 .cfi_def_cfa_register 13
 2452              	 
 2453 0058 80BD     	 pop {r7,pc}
 2454              	 .cfi_endproc
 2455              	.LFE237:
 2457 005a 00BF     	 .section .text.XMC_CCU8_SLICE_SetPrescaler,"ax",%progbits
 2458              	 .align 2
 2459              	 .global XMC_CCU8_SLICE_SetPrescaler
 2460              	 .thumb
 2461              	 .thumb_func
 2463              	XMC_CCU8_SLICE_SetPrescaler:
 2464              	.LFB238:
1118:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1119:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Programs Pre-scaler divider  */
1120:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_SetPrescaler(XMC_CCU8_SLICE_t *const slice, const uint8_t div_val)
1121:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 2465              	 .loc 2 1121 0
 2466              	 .cfi_startproc
 2467              	 
 2468              	 
 2469              	 
 2470 0000 80B4     	 push {r7}
 2471              	.LCFI202:
 2472              	 .cfi_def_cfa_offset 4
 2473              	 .cfi_offset 7,-4
 2474 0002 85B0     	 sub sp,sp,#20
 2475              	.LCFI203:
 2476              	 .cfi_def_cfa_offset 24
 2477 0004 00AF     	 add r7,sp,#0
 2478              	.LCFI204:
 2479              	 .cfi_def_cfa_register 7
 2480 0006 7860     	 str r0,[r7,#4]
 2481 0008 0B46     	 mov r3,r1
 2482 000a FB70     	 strb r3,[r7,#3]
1122:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t fpc;
1123:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1124:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetPrescaler:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1125:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1126:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* If the prescaler is not running, update directly the divider*/
1127:../Libraries/XMCLib/src/xmc_ccu8.c ****   fpc = slice->FPC;
 2483              	 .loc 2 1127 0
 2484 000c 7B68     	 ldr r3,[r7,#4]
 2485 000e 9B6A     	 ldr r3,[r3,#40]
 2486 0010 FB60     	 str r3,[r7,#12]
1128:../Libraries/XMCLib/src/xmc_ccu8.c ****   fpc &= ~((uint32_t) CCU8_CC8_FPC_PVAL_Msk);
 2487              	 .loc 2 1128 0
 2488 0012 FB68     	 ldr r3,[r7,#12]
 2489 0014 23F47063 	 bic r3,r3,#3840
 2490 0018 FB60     	 str r3,[r7,#12]
1129:../Libraries/XMCLib/src/xmc_ccu8.c ****   fpc |= ((uint32_t) div_val) << CCU8_CC8_FPC_PVAL_Pos;
 2491              	 .loc 2 1129 0
 2492 001a FB78     	 ldrb r3,[r7,#3]
 2493 001c 1B02     	 lsls r3,r3,#8
 2494 001e FA68     	 ldr r2,[r7,#12]
 2495 0020 1343     	 orrs r3,r3,r2
 2496 0022 FB60     	 str r3,[r7,#12]
1130:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->FPC = fpc;
 2497              	 .loc 2 1130 0
 2498 0024 7B68     	 ldr r3,[r7,#4]
 2499 0026 FA68     	 ldr r2,[r7,#12]
 2500 0028 9A62     	 str r2,[r3,#40]
1131:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1132:../Libraries/XMCLib/src/xmc_ccu8.c ****   /*
1133:../Libraries/XMCLib/src/xmc_ccu8.c ****    * In any case, update the initial value of the divider which is to be loaded once the prescaler 
1134:../Libraries/XMCLib/src/xmc_ccu8.c ****    * compare value.
1135:../Libraries/XMCLib/src/xmc_ccu8.c ****    */
1136:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->PSC = (uint32_t) div_val;
 2501              	 .loc 2 1136 0
 2502 002a FA78     	 ldrb r2,[r7,#3]
 2503 002c 7B68     	 ldr r3,[r7,#4]
 2504 002e 5A62     	 str r2,[r3,#36]
1137:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 2505              	 .loc 2 1137 0
 2506 0030 1437     	 adds r7,r7,#20
 2507              	.LCFI205:
 2508              	 .cfi_def_cfa_offset 4
 2509 0032 BD46     	 mov sp,r7
 2510              	.LCFI206:
 2511              	 .cfi_def_cfa_register 13
 2512              	 
 2513 0034 5DF8047B 	 ldr r7,[sp],#4
 2514              	.LCFI207:
 2515              	 .cfi_restore 7
 2516              	 .cfi_def_cfa_offset 0
 2517 0038 7047     	 bx lr
 2518              	 .cfi_endproc
 2519              	.LFE238:
 2521 003a 00BF     	 .section .text.XMC_CCU8_SLICE_SetTimerCompareMatch,"ax",%progbits
 2522              	 .align 2
 2523              	 .global XMC_CCU8_SLICE_SetTimerCompareMatch
 2524              	 .thumb
 2525              	 .thumb_func
 2527              	XMC_CCU8_SLICE_SetTimerCompareMatch:
 2528              	.LFB239:
1138:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1139:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Programs timer compare match value for channel 1 or 2 */
1140:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_SetTimerCompareMatch(XMC_CCU8_SLICE_t *const slice,
1141:../Libraries/XMCLib/src/xmc_ccu8.c ****                                          const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
1142:../Libraries/XMCLib/src/xmc_ccu8.c ****                                          const uint16_t compare_val)
1143:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 2529              	 .loc 2 1143 0
 2530              	 .cfi_startproc
 2531              	 
 2532              	 
 2533              	 
 2534 0000 80B4     	 push {r7}
 2535              	.LCFI208:
 2536              	 .cfi_def_cfa_offset 4
 2537              	 .cfi_offset 7,-4
 2538 0002 83B0     	 sub sp,sp,#12
 2539              	.LCFI209:
 2540              	 .cfi_def_cfa_offset 16
 2541 0004 00AF     	 add r7,sp,#0
 2542              	.LCFI210:
 2543              	 .cfi_def_cfa_register 7
 2544 0006 7860     	 str r0,[r7,#4]
 2545 0008 0B46     	 mov r3,r1
 2546 000a FB70     	 strb r3,[r7,#3]
 2547 000c 1346     	 mov r3,r2
 2548 000e 3B80     	 strh r3,[r7]
1144:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(sli
1145:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANN
1146:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1147:../Libraries/XMCLib/src/xmc_ccu8.c ****   if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 2549              	 .loc 2 1147 0
 2550 0010 FB78     	 ldrb r3,[r7,#3]
 2551 0012 002B     	 cmp r3,#0
 2552 0014 03D1     	 bne .L73
1148:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1149:../Libraries/XMCLib/src/xmc_ccu8.c ****     slice->CR1S = (uint32_t) compare_val;
 2553              	 .loc 2 1149 0
 2554 0016 3A88     	 ldrh r2,[r7]
 2555 0018 7B68     	 ldr r3,[r7,#4]
 2556 001a DA63     	 str r2,[r3,#60]
 2557 001c 02E0     	 b .L72
 2558              	.L73:
1150:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1151:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
1152:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1153:../Libraries/XMCLib/src/xmc_ccu8.c ****     slice->CR2S = (uint32_t) compare_val;
 2559              	 .loc 2 1153 0
 2560 001e 3A88     	 ldrh r2,[r7]
 2561 0020 7B68     	 ldr r3,[r7,#4]
 2562 0022 5A64     	 str r2,[r3,#68]
 2563              	.L72:
1154:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1155:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 2564              	 .loc 2 1155 0
 2565 0024 0C37     	 adds r7,r7,#12
 2566              	.LCFI211:
 2567              	 .cfi_def_cfa_offset 4
 2568 0026 BD46     	 mov sp,r7
 2569              	.LCFI212:
 2570              	 .cfi_def_cfa_register 13
 2571              	 
 2572 0028 5DF8047B 	 ldr r7,[sp],#4
 2573              	.LCFI213:
 2574              	 .cfi_restore 7
 2575              	 .cfi_def_cfa_offset 0
 2576 002c 7047     	 bx lr
 2577              	 .cfi_endproc
 2578              	.LFE239:
 2580 002e 00BF     	 .section .text.XMC_CCU8_SLICE_GetTimerCompareMatch,"ax",%progbits
 2581              	 .align 2
 2582              	 .global XMC_CCU8_SLICE_GetTimerCompareMatch
 2583              	 .thumb
 2584              	 .thumb_func
 2586              	XMC_CCU8_SLICE_GetTimerCompareMatch:
 2587              	.LFB240:
1156:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1157:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Returns the timer compare match value for channel 1 or 2 */
1158:../Libraries/XMCLib/src/xmc_ccu8.c **** uint16_t XMC_CCU8_SLICE_GetTimerCompareMatch(const XMC_CCU8_SLICE_t *const slice,
1159:../Libraries/XMCLib/src/xmc_ccu8.c ****                                              const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel)
1160:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 2588              	 .loc 2 1160 0
 2589              	 .cfi_startproc
 2590              	 
 2591              	 
 2592              	 
 2593 0000 80B4     	 push {r7}
 2594              	.LCFI214:
 2595              	 .cfi_def_cfa_offset 4
 2596              	 .cfi_offset 7,-4
 2597 0002 85B0     	 sub sp,sp,#20
 2598              	.LCFI215:
 2599              	 .cfi_def_cfa_offset 24
 2600 0004 00AF     	 add r7,sp,#0
 2601              	.LCFI216:
 2602              	 .cfi_def_cfa_register 7
 2603 0006 7860     	 str r0,[r7,#4]
 2604 0008 0B46     	 mov r3,r1
 2605 000a FB70     	 strb r3,[r7,#3]
1161:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint16_t compare_value;
1162:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1163:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_GetCompareMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1164:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_GetCompareMatch:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(ch
1165:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1166:../Libraries/XMCLib/src/xmc_ccu8.c ****   if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 2606              	 .loc 2 1166 0
 2607 000c FB78     	 ldrb r3,[r7,#3]
 2608 000e 002B     	 cmp r3,#0
 2609 0010 03D1     	 bne .L76
1167:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1168:../Libraries/XMCLib/src/xmc_ccu8.c ****     compare_value = (uint16_t) slice->CR1;
 2610              	 .loc 2 1168 0
 2611 0012 7B68     	 ldr r3,[r7,#4]
 2612 0014 9B6B     	 ldr r3,[r3,#56]
 2613 0016 FB81     	 strh r3,[r7,#14]
 2614 0018 02E0     	 b .L77
 2615              	.L76:
1169:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1170:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
1171:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1172:../Libraries/XMCLib/src/xmc_ccu8.c ****     compare_value = (uint16_t) slice->CR2;
 2616              	 .loc 2 1172 0
 2617 001a 7B68     	 ldr r3,[r7,#4]
 2618 001c 1B6C     	 ldr r3,[r3,#64]
 2619 001e FB81     	 strh r3,[r7,#14]
 2620              	.L77:
1173:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1174:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1175:../Libraries/XMCLib/src/xmc_ccu8.c ****   return(compare_value);
 2621              	 .loc 2 1175 0
 2622 0020 FB89     	 ldrh r3,[r7,#14]
1176:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 2623              	 .loc 2 1176 0
 2624 0022 1846     	 mov r0,r3
 2625 0024 1437     	 adds r7,r7,#20
 2626              	.LCFI217:
 2627              	 .cfi_def_cfa_offset 4
 2628 0026 BD46     	 mov sp,r7
 2629              	.LCFI218:
 2630              	 .cfi_def_cfa_register 13
 2631              	 
 2632 0028 5DF8047B 	 ldr r7,[sp],#4
 2633              	.LCFI219:
 2634              	 .cfi_restore 7
 2635              	 .cfi_def_cfa_offset 0
 2636 002c 7047     	 bx lr
 2637              	 .cfi_endproc
 2638              	.LFE240:
 2640 002e 00BF     	 .section .text.XMC_CCU8_SLICE_SetInterruptNode,"ax",%progbits
 2641              	 .align 2
 2642              	 .global XMC_CCU8_SLICE_SetInterruptNode
 2643              	 .thumb
 2644              	 .thumb_func
 2646              	XMC_CCU8_SLICE_SetInterruptNode:
 2647              	.LFB241:
1177:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1178:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Binds a capcom event to an NVIC node  */
1179:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_SetInterruptNode(XMC_CCU8_SLICE_t *const slice,
1180:../Libraries/XMCLib/src/xmc_ccu8.c ****                                      const XMC_CCU8_SLICE_IRQ_ID_t event,
1181:../Libraries/XMCLib/src/xmc_ccu8.c ****                                      const XMC_CCU8_SLICE_SR_ID_t sr)
1182:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 2648              	 .loc 2 1182 0
 2649              	 .cfi_startproc
 2650              	 
 2651              	 
 2652              	 
 2653 0000 80B4     	 push {r7}
 2654              	.LCFI220:
 2655              	 .cfi_def_cfa_offset 4
 2656              	 .cfi_offset 7,-4
 2657 0002 87B0     	 sub sp,sp,#28
 2658              	.LCFI221:
 2659              	 .cfi_def_cfa_offset 32
 2660 0004 00AF     	 add r7,sp,#0
 2661              	.LCFI222:
 2662              	 .cfi_def_cfa_register 7
 2663 0006 7860     	 str r0,[r7,#4]
 2664 0008 0B46     	 mov r3,r1
 2665 000a FB70     	 strb r3,[r7,#3]
 2666 000c 1346     	 mov r3,r2
 2667 000e BB70     	 strb r3,[r7,#2]
1183:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t srs;
1184:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t mask;
1185:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t pos;
1186:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1187:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice))
1188:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU8_SLICE_CHECK_SR_ID(sr));
1189:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event)
1190:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1191:../Libraries/XMCLib/src/xmc_ccu8.c ****   srs = slice->SRS;
 2668              	 .loc 2 1191 0
 2669 0010 7B68     	 ldr r3,[r7,#4]
 2670 0012 D3F8A830 	 ldr r3,[r3,#168]
 2671 0016 FB60     	 str r3,[r7,#12]
1192:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1193:../Libraries/XMCLib/src/xmc_ccu8.c ****   switch(event)
 2672              	 .loc 2 1193 0
 2673 0018 FB78     	 ldrb r3,[r7,#3]
 2674 001a 092B     	 cmp r3,#9
 2675 001c 31D8     	 bhi .L80
 2676 001e 01A2     	 adr r2,.L82
 2677 0020 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 2678              	 .p2align 2
 2679              	.L82:
 2680 0024 4D000000 	 .word .L81+1
 2681 0028 4D000000 	 .word .L81+1
 2682 002c 57000000 	 .word .L83+1
 2683 0030 57000000 	 .word .L83+1
 2684 0034 61000000 	 .word .L84+1
 2685 0038 61000000 	 .word .L84+1
 2686 003c 83000000 	 .word .L80+1
 2687 0040 83000000 	 .word .L80+1
 2688 0044 6B000000 	 .word .L85+1
 2689 0048 77000000 	 .word .L86+1
 2690              	 .p2align 1
 2691              	.L81:
1194:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1195:../Libraries/XMCLib/src/xmc_ccu8.c ****     case XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH:
1196:../Libraries/XMCLib/src/xmc_ccu8.c ****     case XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH:
1197:../Libraries/XMCLib/src/xmc_ccu8.c ****       mask = ((uint32_t) CCU8_CC8_SRS_POSR_Msk);
 2692              	 .loc 2 1197 0
 2693 004c 0323     	 movs r3,#3
 2694 004e 7B61     	 str r3,[r7,#20]
1198:../Libraries/XMCLib/src/xmc_ccu8.c ****       pos  = CCU8_CC8_SRS_POSR_Pos;
 2695              	 .loc 2 1198 0
 2696 0050 0023     	 movs r3,#0
 2697 0052 3B61     	 str r3,[r7,#16]
1199:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;
 2698              	 .loc 2 1199 0
 2699 0054 1BE0     	 b .L87
 2700              	.L83:
1200:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1201:../Libraries/XMCLib/src/xmc_ccu8.c ****     case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1:
1202:../Libraries/XMCLib/src/xmc_ccu8.c ****     case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1:
1203:../Libraries/XMCLib/src/xmc_ccu8.c ****       mask = ((uint32_t) CCU8_CC8_SRS_CM1SR_Msk);
 2701              	 .loc 2 1203 0
 2702 0056 0C23     	 movs r3,#12
 2703 0058 7B61     	 str r3,[r7,#20]
1204:../Libraries/XMCLib/src/xmc_ccu8.c ****       pos  = CCU8_CC8_SRS_CM1SR_Pos;
 2704              	 .loc 2 1204 0
 2705 005a 0223     	 movs r3,#2
 2706 005c 3B61     	 str r3,[r7,#16]
1205:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;
 2707              	 .loc 2 1205 0
 2708 005e 16E0     	 b .L87
 2709              	.L84:
1206:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1207:../Libraries/XMCLib/src/xmc_ccu8.c ****     case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2:
1208:../Libraries/XMCLib/src/xmc_ccu8.c ****     case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2:
1209:../Libraries/XMCLib/src/xmc_ccu8.c ****       mask = ((uint32_t) CCU8_CC8_SRS_CM2SR_Msk);
 2710              	 .loc 2 1209 0
 2711 0060 3023     	 movs r3,#48
 2712 0062 7B61     	 str r3,[r7,#20]
1210:../Libraries/XMCLib/src/xmc_ccu8.c ****       pos  = CCU8_CC8_SRS_CM2SR_Pos;
 2713              	 .loc 2 1210 0
 2714 0064 0423     	 movs r3,#4
 2715 0066 3B61     	 str r3,[r7,#16]
1211:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;
 2716              	 .loc 2 1211 0
 2717 0068 11E0     	 b .L87
 2718              	.L85:
1212:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1213:../Libraries/XMCLib/src/xmc_ccu8.c ****     case XMC_CCU8_SLICE_IRQ_ID_EVENT0:
1214:../Libraries/XMCLib/src/xmc_ccu8.c ****       mask = ((uint32_t) CCU8_CC8_SRS_E0SR_Msk);
 2719              	 .loc 2 1214 0
 2720 006a 4FF44073 	 mov r3,#768
 2721 006e 7B61     	 str r3,[r7,#20]
1215:../Libraries/XMCLib/src/xmc_ccu8.c ****       pos  = CCU8_CC8_SRS_E0SR_Pos;
 2722              	 .loc 2 1215 0
 2723 0070 0823     	 movs r3,#8
 2724 0072 3B61     	 str r3,[r7,#16]
1216:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;
 2725              	 .loc 2 1216 0
 2726 0074 0BE0     	 b .L87
 2727              	.L86:
1217:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1218:../Libraries/XMCLib/src/xmc_ccu8.c ****     case XMC_CCU8_SLICE_IRQ_ID_EVENT1:
1219:../Libraries/XMCLib/src/xmc_ccu8.c ****       mask = ((uint32_t) CCU8_CC8_SRS_E1SR_Msk);
 2728              	 .loc 2 1219 0
 2729 0076 4FF44063 	 mov r3,#3072
 2730 007a 7B61     	 str r3,[r7,#20]
1220:../Libraries/XMCLib/src/xmc_ccu8.c ****       pos  = CCU8_CC8_SRS_E1SR_Pos;
 2731              	 .loc 2 1220 0
 2732 007c 0A23     	 movs r3,#10
 2733 007e 3B61     	 str r3,[r7,#16]
1221:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;
 2734              	 .loc 2 1221 0
 2735 0080 05E0     	 b .L87
 2736              	.L80:
1222:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1223:../Libraries/XMCLib/src/xmc_ccu8.c ****     default:
1224:../Libraries/XMCLib/src/xmc_ccu8.c ****       mask = ((uint32_t) CCU8_CC8_SRS_E2SR_Msk);
 2737              	 .loc 2 1224 0
 2738 0082 4FF44053 	 mov r3,#12288
 2739 0086 7B61     	 str r3,[r7,#20]
1225:../Libraries/XMCLib/src/xmc_ccu8.c ****       pos  = CCU8_CC8_SRS_E2SR_Pos;
 2740              	 .loc 2 1225 0
 2741 0088 0C23     	 movs r3,#12
 2742 008a 3B61     	 str r3,[r7,#16]
1226:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;
 2743              	 .loc 2 1226 0
 2744 008c 00BF     	 nop
 2745              	.L87:
1227:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1228:../Libraries/XMCLib/src/xmc_ccu8.c ****   
1229:../Libraries/XMCLib/src/xmc_ccu8.c ****   srs &= ~mask;
 2746              	 .loc 2 1229 0
 2747 008e 7B69     	 ldr r3,[r7,#20]
 2748 0090 DB43     	 mvns r3,r3
 2749 0092 FA68     	 ldr r2,[r7,#12]
 2750 0094 1340     	 ands r3,r3,r2
 2751 0096 FB60     	 str r3,[r7,#12]
1230:../Libraries/XMCLib/src/xmc_ccu8.c ****   srs |= (uint32_t)sr << pos;
 2752              	 .loc 2 1230 0
 2753 0098 BA78     	 ldrb r2,[r7,#2]
 2754 009a 3B69     	 ldr r3,[r7,#16]
 2755 009c 02FA03F3 	 lsl r3,r2,r3
 2756 00a0 FA68     	 ldr r2,[r7,#12]
 2757 00a2 1343     	 orrs r3,r3,r2
 2758 00a4 FB60     	 str r3,[r7,#12]
1231:../Libraries/XMCLib/src/xmc_ccu8.c ****   
1232:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->SRS = srs;
 2759              	 .loc 2 1232 0
 2760 00a6 7B68     	 ldr r3,[r7,#4]
 2761 00a8 FA68     	 ldr r2,[r7,#12]
 2762 00aa C3F8A820 	 str r2,[r3,#168]
1233:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 2763              	 .loc 2 1233 0
 2764 00ae 1C37     	 adds r7,r7,#28
 2765              	.LCFI223:
 2766              	 .cfi_def_cfa_offset 4
 2767 00b0 BD46     	 mov sp,r7
 2768              	.LCFI224:
 2769              	 .cfi_def_cfa_register 13
 2770              	 
 2771 00b2 5DF8047B 	 ldr r7,[sp],#4
 2772              	.LCFI225:
 2773              	 .cfi_restore 7
 2774              	 .cfi_def_cfa_offset 0
 2775 00b6 7047     	 bx lr
 2776              	 .cfi_endproc
 2777              	.LFE241:
 2779              	 .section .text.XMC_CCU8_SLICE_SetPassiveLevel,"ax",%progbits
 2780              	 .align 2
 2781              	 .global XMC_CCU8_SLICE_SetPassiveLevel
 2782              	 .thumb
 2783              	 .thumb_func
 2785              	XMC_CCU8_SLICE_SetPassiveLevel:
 2786              	.LFB242:
1234:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1235:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Asserts passive level for the slice output */
1236:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_SetPassiveLevel(XMC_CCU8_SLICE_t *const slice,
1237:../Libraries/XMCLib/src/xmc_ccu8.c ****                                     const XMC_CCU8_SLICE_OUTPUT_t out,
1238:../Libraries/XMCLib/src/xmc_ccu8.c ****                                     const XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_t level)
1239:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 2787              	 .loc 2 1239 0
 2788              	 .cfi_startproc
 2789              	 
 2790              	 
 2791              	 
 2792 0000 80B4     	 push {r7}
 2793              	.LCFI226:
 2794              	 .cfi_def_cfa_offset 4
 2795              	 .cfi_offset 7,-4
 2796 0002 85B0     	 sub sp,sp,#20
 2797              	.LCFI227:
 2798              	 .cfi_def_cfa_offset 24
 2799 0004 00AF     	 add r7,sp,#0
 2800              	.LCFI228:
 2801              	 .cfi_def_cfa_register 7
 2802 0006 7860     	 str r0,[r7,#4]
 2803 0008 0B46     	 mov r3,r1
 2804 000a FB70     	 strb r3,[r7,#3]
 2805 000c 1346     	 mov r3,r2
 2806 000e BB70     	 strb r3,[r7,#2]
1240:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t psl;
1241:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1242:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetPassiveLevel:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1243:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetPassiveLevel:Invalid Slice Output", XMC_CCU8_SLICE_CHECK_OUTPUT(out
1244:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetPassiveLevel:Invalid Passive Level",
1245:../Libraries/XMCLib/src/xmc_ccu8.c ****              ((level == XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_LOW) ||\
1246:../Libraries/XMCLib/src/xmc_ccu8.c ****               (level == XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_HIGH)));
1247:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1248:../Libraries/XMCLib/src/xmc_ccu8.c ****   psl = slice->PSL;
 2807              	 .loc 2 1248 0
 2808 0010 7B68     	 ldr r3,[r7,#4]
 2809 0012 9B69     	 ldr r3,[r3,#24]
 2810 0014 FB60     	 str r3,[r7,#12]
1249:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1250:../Libraries/XMCLib/src/xmc_ccu8.c ****   psl &= ~((uint32_t) out);
 2811              	 .loc 2 1250 0
 2812 0016 FB78     	 ldrb r3,[r7,#3]
 2813 0018 DB43     	 mvns r3,r3
 2814 001a FA68     	 ldr r2,[r7,#12]
 2815 001c 1340     	 ands r3,r3,r2
 2816 001e FB60     	 str r3,[r7,#12]
1251:../Libraries/XMCLib/src/xmc_ccu8.c ****   psl |= (uint32_t) level << ((uint32_t)out >> 1U);
 2817              	 .loc 2 1251 0
 2818 0020 BB78     	 ldrb r3,[r7,#2]
 2819 0022 FA78     	 ldrb r2,[r7,#3]
 2820 0024 5208     	 lsrs r2,r2,#1
 2821 0026 D2B2     	 uxtb r2,r2
 2822 0028 9340     	 lsls r3,r3,r2
 2823 002a FA68     	 ldr r2,[r7,#12]
 2824 002c 1343     	 orrs r3,r3,r2
 2825 002e FB60     	 str r3,[r7,#12]
1252:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1253:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Program CC8 slice output passive level */
1254:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->PSL = psl;
 2826              	 .loc 2 1254 0
 2827 0030 7B68     	 ldr r3,[r7,#4]
 2828 0032 FA68     	 ldr r2,[r7,#12]
 2829 0034 9A61     	 str r2,[r3,#24]
1255:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 2830              	 .loc 2 1255 0
 2831 0036 1437     	 adds r7,r7,#20
 2832              	.LCFI229:
 2833              	 .cfi_def_cfa_offset 4
 2834 0038 BD46     	 mov sp,r7
 2835              	.LCFI230:
 2836              	 .cfi_def_cfa_register 13
 2837              	 
 2838 003a 5DF8047B 	 ldr r7,[sp],#4
 2839              	.LCFI231:
 2840              	 .cfi_restore 7
 2841              	 .cfi_def_cfa_offset 0
 2842 003e 7047     	 bx lr
 2843              	 .cfi_endproc
 2844              	.LFE242:
 2846              	 .section .text.XMC_CCU8_SLICE_DeadTimeInit,"ax",%progbits
 2847              	 .align 2
 2848              	 .global XMC_CCU8_SLICE_DeadTimeInit
 2849              	 .thumb
 2850              	 .thumb_func
 2852              	XMC_CCU8_SLICE_DeadTimeInit:
 2853              	.LFB243:
1256:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1257:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Initializes Dead time configuration for the slice outputs */
1258:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_DeadTimeInit(XMC_CCU8_SLICE_t *const slice,
1259:../Libraries/XMCLib/src/xmc_ccu8.c ****                                  const XMC_CCU8_SLICE_DEAD_TIME_CONFIG_t *const config)
1260:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 2854              	 .loc 2 1260 0
 2855              	 .cfi_startproc
 2856              	 
 2857              	 
 2858              	 
 2859 0000 80B4     	 push {r7}
 2860              	.LCFI232:
 2861              	 .cfi_def_cfa_offset 4
 2862              	 .cfi_offset 7,-4
 2863 0002 83B0     	 sub sp,sp,#12
 2864              	.LCFI233:
 2865              	 .cfi_def_cfa_offset 16
 2866 0004 00AF     	 add r7,sp,#0
 2867              	.LCFI234:
 2868              	 .cfi_def_cfa_register 7
 2869 0006 7860     	 str r0,[r7,#4]
 2870 0008 3960     	 str r1,[r7]
1261:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureDeadTime:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice)
1262:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1263:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Program dead time value for channel 1 */
1264:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->DC1R = config->dc1r;
 2871              	 .loc 2 1264 0
 2872 000a 3B68     	 ldr r3,[r7]
 2873 000c 5A68     	 ldr r2,[r3,#4]
 2874 000e 7B68     	 ldr r3,[r7,#4]
 2875 0010 1A65     	 str r2,[r3,#80]
1265:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Program dead time value for channel 2 */
1266:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->DC2R = config->dc2r;
 2876              	 .loc 2 1266 0
 2877 0012 3B68     	 ldr r3,[r7]
 2878 0014 9A68     	 ldr r2,[r3,#8]
 2879 0016 7B68     	 ldr r3,[r7,#4]
 2880 0018 5A65     	 str r2,[r3,#84]
1267:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Program dead time control configuration */
1268:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->DTC = config->dtc;
 2881              	 .loc 2 1268 0
 2882 001a 3B68     	 ldr r3,[r7]
 2883 001c 1A68     	 ldr r2,[r3]
 2884 001e 7B68     	 ldr r3,[r7,#4]
 2885 0020 DA64     	 str r2,[r3,#76]
1269:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 2886              	 .loc 2 1269 0
 2887 0022 0C37     	 adds r7,r7,#12
 2888              	.LCFI235:
 2889              	 .cfi_def_cfa_offset 4
 2890 0024 BD46     	 mov sp,r7
 2891              	.LCFI236:
 2892              	 .cfi_def_cfa_register 13
 2893              	 
 2894 0026 5DF8047B 	 ldr r7,[sp],#4
 2895              	.LCFI237:
 2896              	 .cfi_restore 7
 2897              	 .cfi_def_cfa_offset 0
 2898 002a 7047     	 bx lr
 2899              	 .cfi_endproc
 2900              	.LFE243:
 2902              	 .section .text.XMC_CCU8_SLICE_ConfigureDeadTime,"ax",%progbits
 2903              	 .align 2
 2904              	 .global XMC_CCU8_SLICE_ConfigureDeadTime
 2905              	 .thumb
 2906              	 .thumb_func
 2908              	XMC_CCU8_SLICE_ConfigureDeadTime:
 2909              	.LFB244:
1270:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1271:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Activates or deactivates dead time for compare channel and ST path */
1272:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_ConfigureDeadTime(XMC_CCU8_SLICE_t *const slice, const uint8_t mask)
1273:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 2910              	 .loc 2 1273 0
 2911              	 .cfi_startproc
 2912              	 
 2913              	 
 2914              	 
 2915 0000 80B4     	 push {r7}
 2916              	.LCFI238:
 2917              	 .cfi_def_cfa_offset 4
 2918              	 .cfi_offset 7,-4
 2919 0002 83B0     	 sub sp,sp,#12
 2920              	.LCFI239:
 2921              	 .cfi_def_cfa_offset 16
 2922 0004 00AF     	 add r7,sp,#0
 2923              	.LCFI240:
 2924              	 .cfi_def_cfa_register 7
 2925 0006 7860     	 str r0,[r7,#4]
 2926 0008 0B46     	 mov r3,r1
 2927 000a FB70     	 strb r3,[r7,#3]
1274:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureDeadTime:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice)
1275:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureDeadTime:Invalid Channel", (mask <= XMC_CCU8_SLICE_DEAD_TIME_
1276:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1277:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->DTC &= ~((uint32_t) XMC_CCU8_SLICE_DEAD_TIME_CONFIG_MASK);
 2928              	 .loc 2 1277 0
 2929 000c 7B68     	 ldr r3,[r7,#4]
 2930 000e DB6C     	 ldr r3,[r3,#76]
 2931 0010 23F03F02 	 bic r2,r3,#63
 2932 0014 7B68     	 ldr r3,[r7,#4]
 2933 0016 DA64     	 str r2,[r3,#76]
1278:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->DTC |= (uint32_t) mask;
 2934              	 .loc 2 1278 0
 2935 0018 7B68     	 ldr r3,[r7,#4]
 2936 001a DA6C     	 ldr r2,[r3,#76]
 2937 001c FB78     	 ldrb r3,[r7,#3]
 2938 001e 1A43     	 orrs r2,r2,r3
 2939 0020 7B68     	 ldr r3,[r7,#4]
 2940 0022 DA64     	 str r2,[r3,#76]
1279:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 2941              	 .loc 2 1279 0
 2942 0024 0C37     	 adds r7,r7,#12
 2943              	.LCFI241:
 2944              	 .cfi_def_cfa_offset 4
 2945 0026 BD46     	 mov sp,r7
 2946              	.LCFI242:
 2947              	 .cfi_def_cfa_register 13
 2948              	 
 2949 0028 5DF8047B 	 ldr r7,[sp],#4
 2950              	.LCFI243:
 2951              	 .cfi_restore 7
 2952              	 .cfi_def_cfa_offset 0
 2953 002c 7047     	 bx lr
 2954              	 .cfi_endproc
 2955              	.LFE244:
 2957 002e 00BF     	 .section .text.XMC_CCU8_SLICE_SetDeadTimeValue,"ax",%progbits
 2958              	 .align 2
 2959              	 .global XMC_CCU8_SLICE_SetDeadTimeValue
 2960              	 .thumb
 2961              	 .thumb_func
 2963              	XMC_CCU8_SLICE_SetDeadTimeValue:
 2964              	.LFB245:
1280:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1281:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Configures rising edge delay and falling edge delay for dead time */
1282:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_SetDeadTimeValue(XMC_CCU8_SLICE_t *const slice,
1283:../Libraries/XMCLib/src/xmc_ccu8.c ****                                      const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
1284:../Libraries/XMCLib/src/xmc_ccu8.c ****                                      const uint8_t rise_value,
1285:../Libraries/XMCLib/src/xmc_ccu8.c ****                                      const uint8_t fall_value)
1286:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 2965              	 .loc 2 1286 0
 2966              	 .cfi_startproc
 2967              	 
 2968              	 
 2969              	 
 2970 0000 80B4     	 push {r7}
 2971              	.LCFI244:
 2972              	 .cfi_def_cfa_offset 4
 2973              	 .cfi_offset 7,-4
 2974 0002 83B0     	 sub sp,sp,#12
 2975              	.LCFI245:
 2976              	 .cfi_def_cfa_offset 16
 2977 0004 00AF     	 add r7,sp,#0
 2978              	.LCFI246:
 2979              	 .cfi_def_cfa_register 7
 2980 0006 7860     	 str r0,[r7,#4]
 2981 0008 0846     	 mov r0,r1
 2982 000a 1146     	 mov r1,r2
 2983 000c 1A46     	 mov r2,r3
 2984 000e 0346     	 mov r3,r0
 2985 0010 FB70     	 strb r3,[r7,#3]
 2986 0012 0B46     	 mov r3,r1
 2987 0014 BB70     	 strb r3,[r7,#2]
 2988 0016 1346     	 mov r3,r2
 2989 0018 7B70     	 strb r3,[r7,#1]
1287:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetDeadTimeValue:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice))
1288:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetDeadTimeValue:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(c
1289:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1290:../Libraries/XMCLib/src/xmc_ccu8.c ****   if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 2990              	 .loc 2 1290 0
 2991 001a FB78     	 ldrb r3,[r7,#3]
 2992 001c 002B     	 cmp r3,#0
 2993 001e 06D1     	 bne .L92
1291:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1292:../Libraries/XMCLib/src/xmc_ccu8.c ****     slice->DC1R = (((uint32_t) fall_value) << CCU8_CC8_DC1R_DT1F_Pos) | ((uint32_t) rise_value);
 2994              	 .loc 2 1292 0
 2995 0020 7B78     	 ldrb r3,[r7,#1]
 2996 0022 1A02     	 lsls r2,r3,#8
 2997 0024 BB78     	 ldrb r3,[r7,#2]
 2998 0026 1A43     	 orrs r2,r2,r3
 2999 0028 7B68     	 ldr r3,[r7,#4]
 3000 002a 1A65     	 str r2,[r3,#80]
 3001 002c 05E0     	 b .L91
 3002              	.L92:
1293:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1294:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
1295:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1296:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->DC2R = (((uint32_t) fall_value) << CCU8_CC8_DC2R_DT2F_Pos) | ((uint32_t) rise_value);
 3003              	 .loc 2 1296 0
 3004 002e 7B78     	 ldrb r3,[r7,#1]
 3005 0030 1A02     	 lsls r2,r3,#8
 3006 0032 BB78     	 ldrb r3,[r7,#2]
 3007 0034 1A43     	 orrs r2,r2,r3
 3008 0036 7B68     	 ldr r3,[r7,#4]
 3009 0038 5A65     	 str r2,[r3,#84]
 3010              	.L91:
1297:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1298:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 3011              	 .loc 2 1298 0
 3012 003a 0C37     	 adds r7,r7,#12
 3013              	.LCFI247:
 3014              	 .cfi_def_cfa_offset 4
 3015 003c BD46     	 mov sp,r7
 3016              	.LCFI248:
 3017              	 .cfi_def_cfa_register 13
 3018              	 
 3019 003e 5DF8047B 	 ldr r7,[sp],#4
 3020              	.LCFI249:
 3021              	 .cfi_restore 7
 3022              	 .cfi_def_cfa_offset 0
 3023 0042 7047     	 bx lr
 3024              	 .cfi_endproc
 3025              	.LFE245:
 3027              	 .section .text.XMC_CCU8_SLICE_SetDeadTimePrescaler,"ax",%progbits
 3028              	 .align 2
 3029              	 .global XMC_CCU8_SLICE_SetDeadTimePrescaler
 3030              	 .thumb
 3031              	 .thumb_func
 3033              	XMC_CCU8_SLICE_SetDeadTimePrescaler:
 3034              	.LFB246:
1299:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1300:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Configures clock division factor for dead time */
1301:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_SetDeadTimePrescaler(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_DTC_DI
1302:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 3035              	 .loc 2 1302 0
 3036              	 .cfi_startproc
 3037              	 
 3038              	 
 3039              	 
 3040 0000 80B4     	 push {r7}
 3041              	.LCFI250:
 3042              	 .cfi_def_cfa_offset 4
 3043              	 .cfi_offset 7,-4
 3044 0002 83B0     	 sub sp,sp,#12
 3045              	.LCFI251:
 3046              	 .cfi_def_cfa_offset 16
 3047 0004 00AF     	 add r7,sp,#0
 3048              	.LCFI252:
 3049              	 .cfi_def_cfa_register 7
 3050 0006 7860     	 str r0,[r7,#4]
 3051 0008 0B46     	 mov r3,r1
 3052 000a FB70     	 strb r3,[r7,#3]
1303:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetDeadTimePrescaler:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(sli
1304:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetDeadTimePrescaler:Invalid divider value", XMC_CCU8_SLICE_CHECK_DTC_
1305:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1306:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->DTC &= ~((uint32_t) CCU8_CC8_DTC_DTCC_Msk);
 3053              	 .loc 2 1306 0
 3054 000c 7B68     	 ldr r3,[r7,#4]
 3055 000e DB6C     	 ldr r3,[r3,#76]
 3056 0010 23F0C002 	 bic r2,r3,#192
 3057 0014 7B68     	 ldr r3,[r7,#4]
 3058 0016 DA64     	 str r2,[r3,#76]
1307:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->DTC |= ((uint32_t) div_val) << CCU8_CC8_DTC_DTCC_Pos;
 3059              	 .loc 2 1307 0
 3060 0018 7B68     	 ldr r3,[r7,#4]
 3061 001a DA6C     	 ldr r2,[r3,#76]
 3062 001c FB78     	 ldrb r3,[r7,#3]
 3063 001e 9B01     	 lsls r3,r3,#6
 3064 0020 1A43     	 orrs r2,r2,r3
 3065 0022 7B68     	 ldr r3,[r7,#4]
 3066 0024 DA64     	 str r2,[r3,#76]
1308:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 3067              	 .loc 2 1308 0
 3068 0026 0C37     	 adds r7,r7,#12
 3069              	.LCFI253:
 3070              	 .cfi_def_cfa_offset 4
 3071 0028 BD46     	 mov sp,r7
 3072              	.LCFI254:
 3073              	 .cfi_def_cfa_register 13
 3074              	 
 3075 002a 5DF8047B 	 ldr r7,[sp],#4
 3076              	.LCFI255:
 3077              	 .cfi_restore 7
 3078              	 .cfi_def_cfa_offset 0
 3079 002e 7047     	 bx lr
 3080              	 .cfi_endproc
 3081              	.LFE246:
 3083              	 .section .text.XMC_CCU8_SLICE_ConfigureStatusBitOutput,"ax",%progbits
 3084              	 .align 2
 3085              	 .global XMC_CCU8_SLICE_ConfigureStatusBitOutput
 3086              	 .thumb
 3087              	 .thumb_func
 3089              	XMC_CCU8_SLICE_ConfigureStatusBitOutput:
 3090              	.LFB247:
1309:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1310:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Configures status ST1, ST2 mapping to STy */
1311:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_ConfigureStatusBitOutput(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_ST
1312:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 3091              	 .loc 2 1312 0
 3092              	 .cfi_startproc
 3093              	 
 3094              	 
 3095              	 
 3096 0000 80B4     	 push {r7}
 3097              	.LCFI256:
 3098              	 .cfi_def_cfa_offset 4
 3099              	 .cfi_offset 7,-4
 3100 0002 83B0     	 sub sp,sp,#12
 3101              	.LCFI257:
 3102              	 .cfi_def_cfa_offset 16
 3103 0004 00AF     	 add r7,sp,#0
 3104              	.LCFI258:
 3105              	 .cfi_def_cfa_register 7
 3106 0006 7860     	 str r0,[r7,#4]
 3107 0008 0B46     	 mov r3,r1
 3108 000a FB70     	 strb r3,[r7,#3]
1313:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOutput:Invalid Slice Pointer", XMC_CCU8_IsValidSlice
1314:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOutput:Invalid Channel", XMC_CCU8_SLICE_CHECK_SLICE_
1315:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1316:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC &= ~((uint32_t) CCU8_CC8_TC_STOS_Msk);
 3109              	 .loc 2 1316 0
 3110 000c 7B68     	 ldr r3,[r7,#4]
 3111 000e 5B69     	 ldr r3,[r3,#20]
 3112 0010 23F0C042 	 bic r2,r3,#1610612736
 3113 0014 7B68     	 ldr r3,[r7,#4]
 3114 0016 5A61     	 str r2,[r3,#20]
1317:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC |= ((uint32_t) channel) << CCU8_CC8_TC_STOS_Pos;
 3115              	 .loc 2 1317 0
 3116 0018 7B68     	 ldr r3,[r7,#4]
 3117 001a 5A69     	 ldr r2,[r3,#20]
 3118 001c FB78     	 ldrb r3,[r7,#3]
 3119 001e 5B07     	 lsls r3,r3,#29
 3120 0020 1A43     	 orrs r2,r2,r3
 3121 0022 7B68     	 ldr r3,[r7,#4]
 3122 0024 5A61     	 str r2,[r3,#20]
1318:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 3123              	 .loc 2 1318 0
 3124 0026 0C37     	 adds r7,r7,#12
 3125              	.LCFI259:
 3126              	 .cfi_def_cfa_offset 4
 3127 0028 BD46     	 mov sp,r7
 3128              	.LCFI260:
 3129              	 .cfi_def_cfa_register 13
 3130              	 
 3131 002a 5DF8047B 	 ldr r7,[sp],#4
 3132              	.LCFI261:
 3133              	 .cfi_restore 7
 3134              	 .cfi_def_cfa_offset 0
 3135 002e 7047     	 bx lr
 3136              	 .cfi_endproc
 3137              	.LFE247:
 3139              	 .text
 3140              	.Letext0:
 3141              	 .file 3 "c:\\program files (x86)\\dave\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 3142              	 .file 4 "c:\\program files (x86)\\dave\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 3143              	 .file 5 "C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 3144              	 .file 6 "C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc/xmc4_scu.h"
 3145              	 .file 7 "C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/CMSIS/Include/core_cm4.h"
 3146              	 .file 8 "C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_ccu8.c
    {standard input}:20     .text.XMC_CCU8_StartPrescaler:00000000 $t
    {standard input}:24     .text.XMC_CCU8_StartPrescaler:00000000 XMC_CCU8_StartPrescaler
    {standard input}:66     .text.XMC_CCU8_SLICE_StopTimer:00000000 $t
    {standard input}:70     .text.XMC_CCU8_SLICE_StopTimer:00000000 XMC_CCU8_SLICE_StopTimer
    {standard input}:109    .text.XMC_CCU8_SLICE_SetDitherCompareValue:00000000 $t
    {standard input}:113    .text.XMC_CCU8_SLICE_SetDitherCompareValue:00000000 XMC_CCU8_SLICE_SetDitherCompareValue
    {standard input}:154    .text.XMC_CCU8_lAssertReset:00000000 $t
    {standard input}:158    .text.XMC_CCU8_lAssertReset:00000000 XMC_CCU8_lAssertReset
    {standard input}:208    .text.XMC_CCU8_lAssertReset:00000030 $d
    {standard input}:214    .text.XMC_CCU8_lDeassertReset:00000000 $t
    {standard input}:218    .text.XMC_CCU8_lDeassertReset:00000000 XMC_CCU8_lDeassertReset
    {standard input}:267    .text.XMC_CCU8_lDeassertReset:00000030 $d
    {standard input}:273    .text.XMC_CCU8_EnableModule:00000000 $t
    {standard input}:278    .text.XMC_CCU8_EnableModule:00000000 XMC_CCU8_EnableModule
    {standard input}:315    .text.XMC_CCU8_DisableModule:00000000 $t
    {standard input}:320    .text.XMC_CCU8_DisableModule:00000000 XMC_CCU8_DisableModule
    {standard input}:354    .text.XMC_CCU8_Init:00000000 $t
    {standard input}:359    .text.XMC_CCU8_Init:00000000 XMC_CCU8_Init
    {standard input}:416    .text.XMC_CCU8_SetModuleClock:00000000 $t
    {standard input}:421    .text.XMC_CCU8_SetModuleClock:00000000 XMC_CCU8_SetModuleClock
    {standard input}:476    .text.XMC_CCU8_SLICE_CompareInit:00000000 $t
    {standard input}:481    .text.XMC_CCU8_SLICE_CompareInit:00000000 XMC_CCU8_SLICE_CompareInit
    {standard input}:564    .text.XMC_CCU8_SLICE_CaptureInit:00000000 $t
    {standard input}:569    .text.XMC_CCU8_SLICE_CaptureInit:00000000 XMC_CCU8_SLICE_CaptureInit
    {standard input}:633    .text.XMC_CCU8_SLICE_SetOutPath:00000000 $t
    {standard input}:638    .text.XMC_CCU8_SLICE_SetOutPath:00000000 XMC_CCU8_SLICE_SetOutPath
    {standard input}:695    .text.XMC_CCU8_SetMultiChannelShadowTransferMode:00000000 $t
    {standard input}:700    .text.XMC_CCU8_SetMultiChannelShadowTransferMode:00000000 XMC_CCU8_SetMultiChannelShadowTransferMode
    {standard input}:757    .text.XMC_CCU8_SLICE_StartConfig:00000000 $t
    {standard input}:762    .text.XMC_CCU8_SLICE_StartConfig:00000000 XMC_CCU8_SLICE_StartConfig
    {standard input}:841    .text.XMC_CCU8_SLICE_StopConfig:00000000 $t
    {standard input}:846    .text.XMC_CCU8_SLICE_StopConfig:00000000 XMC_CCU8_SLICE_StopConfig
    {standard input}:921    .text.XMC_CCU8_SLICE_LoadConfig:00000000 $t
    {standard input}:926    .text.XMC_CCU8_SLICE_LoadConfig:00000000 XMC_CCU8_SLICE_LoadConfig
    {standard input}:981    .text.XMC_CCU8_SLICE_LoadSelector:00000000 $t
    {standard input}:986    .text.XMC_CCU8_SLICE_LoadSelector:00000000 XMC_CCU8_SLICE_LoadSelector
    {standard input}:1041   .text.XMC_CCU8_SLICE_ModulationConfig:00000000 $t
    {standard input}:1046   .text.XMC_CCU8_SLICE_ModulationConfig:00000000 XMC_CCU8_SLICE_ModulationConfig
    {standard input}:1156   .text.XMC_CCU8_SLICE_CountConfig:00000000 $t
    {standard input}:1161   .text.XMC_CCU8_SLICE_CountConfig:00000000 XMC_CCU8_SLICE_CountConfig
    {standard input}:1216   .text.XMC_CCU8_SLICE_GateConfig:00000000 $t
    {standard input}:1221   .text.XMC_CCU8_SLICE_GateConfig:00000000 XMC_CCU8_SLICE_GateConfig
    {standard input}:1276   .text.XMC_CCU8_SLICE_Capture0Config:00000000 $t
    {standard input}:1281   .text.XMC_CCU8_SLICE_Capture0Config:00000000 XMC_CCU8_SLICE_Capture0Config
    {standard input}:1336   .text.XMC_CCU8_SLICE_Capture1Config:00000000 $t
    {standard input}:1341   .text.XMC_CCU8_SLICE_Capture1Config:00000000 XMC_CCU8_SLICE_Capture1Config
    {standard input}:1396   .text.XMC_CCU8_SLICE_DirectionConfig:00000000 $t
    {standard input}:1401   .text.XMC_CCU8_SLICE_DirectionConfig:00000000 XMC_CCU8_SLICE_DirectionConfig
    {standard input}:1456   .text.XMC_CCU8_SLICE_StatusBitOverrideConfig:00000000 $t
    {standard input}:1461   .text.XMC_CCU8_SLICE_StatusBitOverrideConfig:00000000 XMC_CCU8_SLICE_StatusBitOverrideConfig
    {standard input}:1512   .text.XMC_CCU8_SLICE_TrapConfig:00000000 $t
    {standard input}:1517   .text.XMC_CCU8_SLICE_TrapConfig:00000000 XMC_CCU8_SLICE_TrapConfig
    {standard input}:1610   .text.XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:00000000 $t
    {standard input}:1615   .text.XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:00000000 XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent
    {standard input}:1748   .text.XMC_CCU8_SLICE_ConfigureEvent:00000000 $t
    {standard input}:1753   .text.XMC_CCU8_SLICE_ConfigureEvent:00000000 XMC_CCU8_SLICE_ConfigureEvent
    {standard input}:1891   .text.XMC_CCU8_SLICE_SetInput:00000000 $t
    {standard input}:1896   .text.XMC_CCU8_SLICE_SetInput:00000000 XMC_CCU8_SLICE_SetInput
    {standard input}:1966   .text.XMC_CCU8_SLICE_SetTimerRepeatMode:00000000 $t
    {standard input}:1971   .text.XMC_CCU8_SLICE_SetTimerRepeatMode:00000000 XMC_CCU8_SLICE_SetTimerRepeatMode
    {standard input}:2031   .text.XMC_CCU8_SLICE_SetTimerCountingMode:00000000 $t
    {standard input}:2036   .text.XMC_CCU8_SLICE_SetTimerCountingMode:00000000 XMC_CCU8_SLICE_SetTimerCountingMode
    {standard input}:2096   .text.XMC_CCU8_SLICE_SetTimerPeriodMatch:00000000 $t
    {standard input}:2101   .text.XMC_CCU8_SLICE_SetTimerPeriodMatch:00000000 XMC_CCU8_SLICE_SetTimerPeriodMatch
    {standard input}:2142   .text.XMC_CCU8_SLICE_GetCaptureRegisterValue:00000000 $t
    {standard input}:2147   .text.XMC_CCU8_SLICE_GetCaptureRegisterValue:00000000 XMC_CCU8_SLICE_GetCaptureRegisterValue
    {standard input}:2192   .text.XMC_CCU8_SLICE_GetLastCapturedTimerValue:00000000 $t
    {standard input}:2197   .text.XMC_CCU8_SLICE_GetLastCapturedTimerValue:00000000 XMC_CCU8_SLICE_GetLastCapturedTimerValue
    {standard input}:2315   .text.XMC_CCU8_GetCapturedValueFromFifo:00000000 $t
    {standard input}:2320   .text.XMC_CCU8_GetCapturedValueFromFifo:00000000 XMC_CCU8_GetCapturedValueFromFifo
    {standard input}:2378   .text.XMC_CCU8_SLICE_EnableDithering:00000000 $t
    {standard input}:2383   .text.XMC_CCU8_SLICE_EnableDithering:00000000 XMC_CCU8_SLICE_EnableDithering
    {standard input}:2458   .text.XMC_CCU8_SLICE_SetPrescaler:00000000 $t
    {standard input}:2463   .text.XMC_CCU8_SLICE_SetPrescaler:00000000 XMC_CCU8_SLICE_SetPrescaler
    {standard input}:2522   .text.XMC_CCU8_SLICE_SetTimerCompareMatch:00000000 $t
    {standard input}:2527   .text.XMC_CCU8_SLICE_SetTimerCompareMatch:00000000 XMC_CCU8_SLICE_SetTimerCompareMatch
    {standard input}:2581   .text.XMC_CCU8_SLICE_GetTimerCompareMatch:00000000 $t
    {standard input}:2586   .text.XMC_CCU8_SLICE_GetTimerCompareMatch:00000000 XMC_CCU8_SLICE_GetTimerCompareMatch
    {standard input}:2641   .text.XMC_CCU8_SLICE_SetInterruptNode:00000000 $t
    {standard input}:2646   .text.XMC_CCU8_SLICE_SetInterruptNode:00000000 XMC_CCU8_SLICE_SetInterruptNode
    {standard input}:2680   .text.XMC_CCU8_SLICE_SetInterruptNode:00000024 $d
    {standard input}:2690   .text.XMC_CCU8_SLICE_SetInterruptNode:0000004c $t
    {standard input}:2780   .text.XMC_CCU8_SLICE_SetPassiveLevel:00000000 $t
    {standard input}:2785   .text.XMC_CCU8_SLICE_SetPassiveLevel:00000000 XMC_CCU8_SLICE_SetPassiveLevel
    {standard input}:2847   .text.XMC_CCU8_SLICE_DeadTimeInit:00000000 $t
    {standard input}:2852   .text.XMC_CCU8_SLICE_DeadTimeInit:00000000 XMC_CCU8_SLICE_DeadTimeInit
    {standard input}:2903   .text.XMC_CCU8_SLICE_ConfigureDeadTime:00000000 $t
    {standard input}:2908   .text.XMC_CCU8_SLICE_ConfigureDeadTime:00000000 XMC_CCU8_SLICE_ConfigureDeadTime
    {standard input}:2958   .text.XMC_CCU8_SLICE_SetDeadTimeValue:00000000 $t
    {standard input}:2963   .text.XMC_CCU8_SLICE_SetDeadTimeValue:00000000 XMC_CCU8_SLICE_SetDeadTimeValue
    {standard input}:3028   .text.XMC_CCU8_SLICE_SetDeadTimePrescaler:00000000 $t
    {standard input}:3033   .text.XMC_CCU8_SLICE_SetDeadTimePrescaler:00000000 XMC_CCU8_SLICE_SetDeadTimePrescaler
    {standard input}:3084   .text.XMC_CCU8_SLICE_ConfigureStatusBitOutput:00000000 $t
    {standard input}:3089   .text.XMC_CCU8_SLICE_ConfigureStatusBitOutput:00000000 XMC_CCU8_SLICE_ConfigureStatusBitOutput
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_SCU_RESET_AssertPeripheralReset
XMC_SCU_RESET_DeassertPeripheralReset
XMC_SCU_CLOCK_EnableClock
