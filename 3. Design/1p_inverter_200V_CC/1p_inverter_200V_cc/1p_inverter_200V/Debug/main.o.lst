   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "main.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_GPIO_SetOutputHigh,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_GPIO_SetOutputHigh:
  25              	.LFB164:
  26              	 .file 1 "C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc/xmc_gpio.h"
   1:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** /**
   2:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * @file xmc_gpio.h
   3:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * @date 2015-06-20
   4:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *
   5:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * @cond
   6:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
   7:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMClib v2.1.12 - XMC Peripheral Driver Library 
   8:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *
   9:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * Copyright (c) 2015-2017, Infineon Technologies AG
  10:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * All rights reserved.                        
  11:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                             
  12:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * following conditions are met:   
  14:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  15:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * disclaimer.                        
  17:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  18:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  21:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  24:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  32:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  35:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  36:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * Change History
  37:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * --------------
  38:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  39:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * 2015-02-20:
  40:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Initial draft<br>
  41:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Documentation improved <br>
  42:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *      
  43:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * 2015-06-20:
  44:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  45:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  46:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * @endcond
  47:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  48:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  49:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** 
  50:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** #ifndef XMC_GPIO_H
  51:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_H
  52:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** 
  53:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
  54:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * HEADER FILES
  55:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  56:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** 
  57:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc_common.h"
  58:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** 
  59:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** /**
  60:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * @addtogroup XMClib XMC Peripheral Library
  61:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * @{
  62:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  63:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** 
  64:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** /**
  65:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * @addtogroup GPIO
  66:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * @brief General Purpose Input Output (GPIO) driver for the XMC microcontroller family.
  67:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  68:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * GPIO driver provide a generic and very flexible software interface for all standard digital I/O 
  69:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * Each port slice has individual interfaces for the operation as General Purpose I/O and it furthe
  70:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * connectivity to the on-chip periphery and the control for the pad characteristics. 
  71:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  72:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * The driver is divided into Input and Output mode.
  73:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  74:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * Input mode features:
  75:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Configuration structure XMC_GPIO_CONFIG_t and initialization function XMC_GPIO_Init()
  76:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of weak pull-up or pull-down device. Configuration structure XMC_GPIO_MO
  77:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC1
  78:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of input hysteresis. XMC_GPIO_SetInputHysteresis()
  79:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
  80:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  81:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  82:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * Output mode features:
  83:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of push pull/open drain and Alternate output. Configuration structure XM
  84:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC4
  85:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of pad driver strength. Configuration structure XMC_GPIO_OUTPUT_STRENGTH
  86:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
  87:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  88:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of initial output level. Configuration structure XMC_GPIO_OUTPUT_LEVEL_t
  89:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  90:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *@{
  91:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  92:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  
  93:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
  94:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * MACROS
  95:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  96:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** 
  97:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Pos PORT0_IOCR0_PC0_Pos
  98:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Msk PORT0_IOCR0_PC0_Msk
  99:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** 
 100:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Size 				(8U)
 101:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** 											
 102:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** 
 103:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_CHECK_OUTPUT_LEVEL(level) ((level == XMC_GPIO_OUTPUT_LEVEL_LOW) || \
 104:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****                                             (level == XMC_GPIO_OUTPUT_LEVEL_HIGH))
 105:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****                                             
 106:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_CHECK_HWCTRL(hwctrl) ((hwctrl == XMC_GPIO_HWCTRL_DISABLED) || \
 107:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****                                        (hwctrl == XMC_GPIO_HWCTRL_PERIPHERAL1) || \
 108:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****                                        (hwctrl == XMC_GPIO_HWCTRL_PERIPHERAL2))                    
 109:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****                                             
 110:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 111:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * ENUMS
 112:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 113:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** 
 114:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** 
 115:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 116:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * Defines output level of a pin. Use type \a XMC_GPIO_OUTPUT_LEVEL_t for this enum.
 117:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 118:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** typedef enum XMC_GPIO_OUTPUT_LEVEL
 119:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** {
 120:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_OUTPUT_LEVEL_LOW  = 0x10000U, /**<  Reset bit */
 121:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_OUTPUT_LEVEL_HIGH = 0x1U, 	/**< Set bit  */
 122:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** } XMC_GPIO_OUTPUT_LEVEL_t;
 123:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** 
 124:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 125:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * Defines direct hardware control characteristics of the pin . Use type \a XMC_GPIO_HWCTRL_t for t
 126:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 127:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** typedef enum XMC_GPIO_HWCTRL
 128:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** {
 129:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_DISABLED     = 0x0U, /**<  Software control only */
 130:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_PERIPHERAL1  = 0x1U, /**<  HWI0/HWO0 control path can override the software confi
 131:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_PERIPHERAL2  = 0x2U  /**<  HWI1/HWO1 control path can override the software confi
 132:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** } XMC_GPIO_HWCTRL_t;
 133:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** 
 134:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 135:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * DEVICE FAMILY EXTENSIONS
 136:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 137:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** 
 138:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  #if UC_FAMILY == XMC1
 139:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc1_gpio.h"
 140:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** #elif UC_FAMILY == XMC4
 141:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc4_gpio.h"
 142:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** #else
 143:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** #error "xmc_gpio.h: family device not supported"
 144:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** #endif
 145:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** 
 146:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 147:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * API PROTOTYPES
 148:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 149:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** 
 150:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** #ifdef __cplusplus
 151:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** extern "C" {
 152:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** #endif
 153:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** 
 154:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** 
 155:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 156:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	  Constant pointer pointing to GPIO port, to access port registers like Pn_OUT,Pn_O
 157:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	  Port pin number.
 158:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  config GPIO configuration data structure. Refer data structure @ref XMC_GPIO_CONFIG_t fo
 159:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 160:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 161:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 162:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 163:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC1
 164:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * Initializes input / output mode settings like, pull up / pull down devices,hysteresis, push pull
 165:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * Also configures alternate function outputs and clears hardware port control for a selected \a po
 166:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * \a config provides selected I/O settings. It configures hardware registers Pn_IOCR,Pn_OUT, Pn_OM
 167:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
 168:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC4
 169:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * Initializes input / output mode settings like, pull up / pull down devices,push pull /open drain
 170:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * Also configures alternate function outputs and clears hardware port control for selected \a port
 171:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * It configures hardware registers Pn_IOCR,Pn_OUT,Pn_OMR,Pn_PDISC and Pn_PDR.\n
 172:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
 173:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 174:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 175:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *  None
 176:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 177:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 178:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * This API is called in definition of DAVE_init by code generation and therefore should not be exp
 179:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * for the normal operation. Use other APIs only after DAVE_init is called successfully (returns DA
 180:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 181:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 182:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 183:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** 
 184:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  
 185:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const c
 186:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  
 187:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 188:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 189:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	Constant pointer pointing to GPIO port, to access hardware register Pn_IOCR.
 190:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	Port pin number.
 191:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  mode input / output functionality selection. Refer @ref XMC_GPIO_MODE_t for valid values
 192:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 193:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 194:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 195:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 196:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * Sets digital input and output driver functionality and characteristics of a GPIO port pin. It co
 197:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * registers Pn_IOCR. \a mode is initially configured during initialization in XMC_GPIO_Init(). Cal
 198:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * the port direction functionality as needed later in the program.
 199:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 200:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 201:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *  None
 202:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 203:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 204:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** 
 205:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode);
 206:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** 
 207:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** 
 208:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 209:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 210:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	 Constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 211:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	 Port pin number.
 212:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  level output level selection. Refer @ref XMC_GPIO_OUTPUT_LEVEL_t for valid values.
 213:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 214:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 215:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 216:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 217:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * Set port pin output level to high or low.It configures hardware registers Pn_OMR.\a level is ini
 218:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * configured during initialization in XMC_GPIO_Init(). Call this API to alter output level as need
 219:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 220:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 221:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *  XMC_GPIO_SetOutputHigh(), XMC_GPIO_SetOutputLow().
 222:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 223:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 224:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().
 225:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 226:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 227:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** 
 228:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** 
 229:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT_t *const port, const uint8_t pin, const 
 230:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** {
 231:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 232:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid output level", XMC_GPIO_CHECK_OUTPUT_LEVEL(level));
 233:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****   
 234:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = (uint32_t)level << pin;
 235:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** }
 236:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** 
 237:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** 
 238:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 239:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 240:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	Port pin number.
 241:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 242:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 243:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 244:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 245:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *  Sets port pin output to high. It configures hardware registers Pn_OMR.
 246:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 247:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *  \par<b>Related APIs:</b><BR>
 248:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *  XMC_GPIO_SetOutputLow()
 249:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 250:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 251:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().\n
 252:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value 
 253:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 254:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 255:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** 
 256:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 257:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** {
  27              	 .loc 1 257 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43 0008 0B46     	 mov r3,r1
  44 000a FB70     	 strb r3,[r7,#3]
 258:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 259:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** 
 260:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = (uint32_t)0x1U << pin;
  45              	 .loc 1 260 0
  46 000c FB78     	 ldrb r3,[r7,#3]
  47 000e 0122     	 movs r2,#1
  48 0010 9A40     	 lsls r2,r2,r3
  49 0012 7B68     	 ldr r3,[r7,#4]
  50 0014 5A60     	 str r2,[r3,#4]
 261:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** }
  51              	 .loc 1 261 0
  52 0016 0C37     	 adds r7,r7,#12
  53              	.LCFI3:
  54              	 .cfi_def_cfa_offset 4
  55 0018 BD46     	 mov sp,r7
  56              	.LCFI4:
  57              	 .cfi_def_cfa_register 13
  58              	 
  59 001a 5DF8047B 	 ldr r7,[sp],#4
  60              	.LCFI5:
  61              	 .cfi_restore 7
  62              	 .cfi_def_cfa_offset 0
  63 001e 7047     	 bx lr
  64              	 .cfi_endproc
  65              	.LFE164:
  67              	 .section .text.XMC_GPIO_SetOutputLow,"ax",%progbits
  68              	 .align 2
  69              	 .thumb
  70              	 .thumb_func
  72              	XMC_GPIO_SetOutputLow:
  73              	.LFB165:
 262:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** 
 263:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 264:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 265:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 266:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	port pin number.
 267:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 268:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return  None
 269:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 270:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Description:</b><br>
 271:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * Sets port pin output to low. It configures hardware registers Pn_OMR.\n
 272:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 273:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>>
 274:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMC_GPIO_SetOutputHigh()
 275:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 276:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Note:</b><br>
 277:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().
 278:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value 
 279:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 280:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 281:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** 
 282:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 283:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** {
  74              	 .loc 1 283 0
  75              	 .cfi_startproc
  76              	 
  77              	 
  78              	 
  79 0000 80B4     	 push {r7}
  80              	.LCFI6:
  81              	 .cfi_def_cfa_offset 4
  82              	 .cfi_offset 7,-4
  83 0002 83B0     	 sub sp,sp,#12
  84              	.LCFI7:
  85              	 .cfi_def_cfa_offset 16
  86 0004 00AF     	 add r7,sp,#0
  87              	.LCFI8:
  88              	 .cfi_def_cfa_register 7
  89 0006 7860     	 str r0,[r7,#4]
  90 0008 0B46     	 mov r3,r1
  91 000a FB70     	 strb r3,[r7,#3]
 284:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 285:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** 
 286:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = 0x10000U << pin;
  92              	 .loc 1 286 0
  93 000c FB78     	 ldrb r3,[r7,#3]
  94 000e 4FF48032 	 mov r2,#65536
  95 0012 9A40     	 lsls r2,r2,r3
  96 0014 7B68     	 ldr r3,[r7,#4]
  97 0016 5A60     	 str r2,[r3,#4]
 287:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_gpio.h **** }
  98              	 .loc 1 287 0
  99 0018 0C37     	 adds r7,r7,#12
 100              	.LCFI9:
 101              	 .cfi_def_cfa_offset 4
 102 001a BD46     	 mov sp,r7
 103              	.LCFI10:
 104              	 .cfi_def_cfa_register 13
 105              	 
 106 001c 5DF8047B 	 ldr r7,[sp],#4
 107              	.LCFI11:
 108              	 .cfi_restore 7
 109              	 .cfi_def_cfa_offset 0
 110 0020 7047     	 bx lr
 111              	 .cfi_endproc
 112              	.LFE165:
 114 0022 00BF     	 .section .text.DIGITAL_IO_SetOutputHigh,"ax",%progbits
 115              	 .align 2
 116              	 .thumb
 117              	 .thumb_func
 119              	DIGITAL_IO_SetOutputHigh:
 120              	.LFB257:
 121              	 .file 2 "C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO/digital_io.h"
   1:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** /*
   2:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   3:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @file digital_io.h
   4:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @date 2016-07-08
   5:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   6:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  * NOTE:
   7:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   8:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   9:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @cond
  10:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  11:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DIGITAL_IO v4.0.16 - The DIGITAL_IO APP is used to configure a port pin as digital Input/Output.
  12:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  13:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  14:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  * All rights reserved.
  15:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  16:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  17:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  * following conditions are met:
  18:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  19:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  20:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   disclaimer.
  21:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  22:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  23:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  24:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  25:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  26:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   products derived from this software without specific prior written permission.
  27:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  28:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  29:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  30:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  31:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  32:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  33:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  34:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  36:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  37:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  * with Infineon Technologies AG (dave@infineon.com).
  38:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  39:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  40:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Change History
  41:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  * --------------
  42:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  43:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-02-16
  44:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Initial version
  45:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  46:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-04-22
  47:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - XMC_ASSERT is added in static inline functions.<br>
  48:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  49:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-06-20
  50:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Version check added for XMCLib dependency.<br>
  51:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  52:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-12-22
  53:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Added hardware controlled IO feature.
  54:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2016-07-08:
  55:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Fixed incorrect case for an included header.<br>
  56:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  57:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @endcond
  58:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  59:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  */
  60:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  61:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
  62:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  * HEADER FILES
  63:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  64:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  65:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** #ifndef DIGITAL_IO_H
  66:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** #define DIGITAL_IO_H
  67:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  68:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** #include <xmc_gpio.h>
  69:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** #include <DAVE_Common.h>
  70:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** #include "digital_io_conf.h"
  71:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  72:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
  73:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  * MACROS
  74:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  75:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** #if (!((XMC_LIB_MAJOR_VERSION == 2U) && \
  76:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****        (XMC_LIB_MINOR_VERSION >= 0U) && \
  77:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****        (XMC_LIB_PATCH_VERSION >= 0U)))
  78:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** #error "DIGITAL_IO requires XMC Peripheral Library v2.0.0 or higher"
  79:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** #endif
  80:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  81:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  /*************************************************************************************************
  82:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  * ENUMS
  83:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  84:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  85:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
  86:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_enumerations
  87:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
  88:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** */
  89:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  90:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
  91:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Initialization status of DIGITAL_IO APP.
  92:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** */
  93:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** typedef enum DIGITAL_IO_STATUS
  94:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** {
  95:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****   DIGITAL_IO_STATUS_OK = 0U,/**< 0=Status OK */
  96:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****   DIGITAL_IO_STATUS_FAILURE = 1U/**< 1=Status Failed */
  97:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** } DIGITAL_IO_STATUS_t;
  98:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  99:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 100:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * @}
 101:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 102:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 103:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
 104:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DATA STRUCTURES
 105:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
 106:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 107:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_datastructures
 108:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
 109:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 110:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 111:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 112:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Initialization data structure of DIGITAL_IO APP
 113:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 114:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** typedef struct DIGITAL_IO
 115:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 116:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_PORT_t *const gpio_port;             /**< port number */
 117:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****   const XMC_GPIO_CONFIG_t gpio_config;          /**< mode, initial output level and pad driver stre
 118:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****   const uint8_t gpio_pin;                       /**< pin number */
 119:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****   const XMC_GPIO_HWCTRL_t hwctrl;               /**< Hardware port control */
 120:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** } DIGITAL_IO_t;
 121:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 122:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 123:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 124:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * @}
 125:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 126:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 127:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 128:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
 129:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  * API Prototypes
 130:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
 131:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 132:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 133:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** #ifdef __cplusplus
 134:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** extern "C" {
 135:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** #endif
 136:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 137:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 138:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_apidoc
 139:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
 140:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 141:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 142:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 143:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 144:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 145:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Get DIGITAL_IO APP version
 146:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 147:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 148:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description: </b><br>
 149:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * The function can be used to check application software compatibility with a
 150:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * specific version of the APP.
 151:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 152:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 153:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 154:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 155:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>
 156:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 157:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 158:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 159:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t init_status;
 160:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_APP_VERSION_t version;
 161:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 162:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *   // Initialize DIGITAL_IO APP:
 163:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *   // DIGITAL_IO_Init() is called from within DAVE_Init().
 164:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *   init_status = DAVE_Init();
 165:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(init_status == DAVE_STATUS_SUCCESS)
 166:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 167:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *     version = DIGITAL_IO_GetAppVersion();
 168:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *     if (version.major != 4U) {
 169:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // Probably, not the right version.
 170:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 171:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 172:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 173:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // More code here
 174:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1) {
 175:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 176:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 177:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *     return (1);
 178:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *  }
 179:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * @endcode<BR>
 180:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 181:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 182:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** DAVE_APP_VERSION_t DIGITAL_IO_GetAppVersion(void);
 183:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 184:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 185:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 186:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to initialize the port pin as per UI settings.
 187:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 188:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status. Refer @ref DIGITAL_IO_STATUS_t structure for d
 189:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 190:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 191:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function initializes GPIO port registers IOCR,PDISC,OMR,PDR/PHCR to configure pin direction,
 192:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * and pad driver strength/hysteresis.
 193:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 194:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 195:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * None
 196:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 197:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 198:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 199:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 200:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 201:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 202:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t status;
 203:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *   status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_In
 204:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(status == DAVE_STATUS_SUCCESS)
 205:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 206:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 207:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 208:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *   else
 209:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 210:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 211:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1U)
 212:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *     {
 213:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 214:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 215:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 216:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *   while(1U)
 217:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 218:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 219:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return 1U;
 220:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *  }
 221:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 222:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 223:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 224:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler);
 225:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 226:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 227:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 228:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to set port pin high.
 229:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 230:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return None
 231:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 232:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 233:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function configures port output modification register Pn_OMR, to make port pin to high level
 234:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 235:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 236:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *  DIGITAL_IO_SetOutputLow()
 237:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 238:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 239:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 240:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 241:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 242:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 243:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t status;
 244:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *   status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_In
 245:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(status == DAVE_STATUS_SUCCESS)
 246:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 247:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 248:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 249:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *   else
 250:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 251:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 252:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1U)
 253:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *     {
 254:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 255:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 256:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 257:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_0);
 258:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *   while(1U)
 259:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 260:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // Add application code here
 261:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 262:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 263:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return (1);
 264:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * }
 265:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 266:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 267:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 268:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** __STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
 269:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 122              	 .loc 2 269 0
 123              	 .cfi_startproc
 124              	 
 125              	 
 126 0000 80B5     	 push {r7,lr}
 127              	.LCFI12:
 128              	 .cfi_def_cfa_offset 8
 129              	 .cfi_offset 7,-8
 130              	 .cfi_offset 14,-4
 131 0002 82B0     	 sub sp,sp,#8
 132              	.LCFI13:
 133              	 .cfi_def_cfa_offset 16
 134 0004 00AF     	 add r7,sp,#0
 135              	.LCFI14:
 136              	 .cfi_def_cfa_register 7
 137 0006 7860     	 str r0,[r7,#4]
 270:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
 271:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 138              	 .loc 2 271 0
 139 0008 7B68     	 ldr r3,[r7,#4]
 140 000a 1A68     	 ldr r2,[r3]
 141 000c 7B68     	 ldr r3,[r7,#4]
 142 000e 1B7C     	 ldrb r3,[r3,#16]
 143 0010 1046     	 mov r0,r2
 144 0012 1946     	 mov r1,r3
 145 0014 FFF7FEFF 	 bl XMC_GPIO_SetOutputHigh
 272:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** }
 146              	 .loc 2 272 0
 147 0018 0837     	 adds r7,r7,#8
 148              	.LCFI15:
 149              	 .cfi_def_cfa_offset 8
 150 001a BD46     	 mov sp,r7
 151              	.LCFI16:
 152              	 .cfi_def_cfa_register 13
 153              	 
 154 001c 80BD     	 pop {r7,pc}
 155              	 .cfi_endproc
 156              	.LFE257:
 158 001e 00BF     	 .section .text.DIGITAL_IO_SetOutputLow,"ax",%progbits
 159              	 .align 2
 160              	 .thumb
 161              	 .thumb_func
 163              	DIGITAL_IO_SetOutputLow:
 164              	.LFB258:
 273:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 274:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 275:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to reset port pin.
 276:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 277:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return None
 278:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 279:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 280:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function configures port output modification register Pn_OMR, to make port pin to low level.
 281:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 282:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 283:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * DIGITAL_IO_SetOutputHigh()
 284:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 285:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 286:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 287:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *  #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 288:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *  int main(void)
 289:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *  {
 290:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *    DAVE_STATUS_t status;
 291:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *    status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_I
 292:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *    if(status == DAVE_STATUS_SUCCESS)
 293:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 294:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *      XMC_DEBUG("DAVE Apps initialization success\n");
 295:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 296:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *    else
 297:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 298:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *      XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 299:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *      while(1U)
 300:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *      {
 301:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *      }
 302:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 303:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *    //Placeholder for user application code. The while loop below can be replaced with user applic
 304:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *    DIGITAL_IO_SetOutputLow(&DIGITAL_IO_0);
 305:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *    while(1U)
 306:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 307:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *      // Add application code here
 308:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 309:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 310:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return (1);
 311:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** * }
 312:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 313:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 314:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 315:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** __STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
 316:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 165              	 .loc 2 316 0
 166              	 .cfi_startproc
 167              	 
 168              	 
 169 0000 80B5     	 push {r7,lr}
 170              	.LCFI17:
 171              	 .cfi_def_cfa_offset 8
 172              	 .cfi_offset 7,-8
 173              	 .cfi_offset 14,-4
 174 0002 82B0     	 sub sp,sp,#8
 175              	.LCFI18:
 176              	 .cfi_def_cfa_offset 16
 177 0004 00AF     	 add r7,sp,#0
 178              	.LCFI19:
 179              	 .cfi_def_cfa_register 7
 180 0006 7860     	 str r0,[r7,#4]
 317:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
 318:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 181              	 .loc 2 318 0
 182 0008 7B68     	 ldr r3,[r7,#4]
 183 000a 1A68     	 ldr r2,[r3]
 184 000c 7B68     	 ldr r3,[r7,#4]
 185 000e 1B7C     	 ldrb r3,[r3,#16]
 186 0010 1046     	 mov r0,r2
 187 0012 1946     	 mov r1,r3
 188 0014 FFF7FEFF 	 bl XMC_GPIO_SetOutputLow
 319:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO\digital_io.h **** }
 189              	 .loc 2 319 0
 190 0018 0837     	 adds r7,r7,#8
 191              	.LCFI20:
 192              	 .cfi_def_cfa_offset 8
 193 001a BD46     	 mov sp,r7
 194              	.LCFI21:
 195              	 .cfi_def_cfa_register 13
 196              	 
 197 001c 80BD     	 pop {r7,pc}
 198              	 .cfi_endproc
 199              	.LFE258:
 201 001e 00BF     	 .section .text.XMC_VADC_GROUP_GetResult,"ax",%progbits
 202              	 .align 2
 203              	 .thumb
 204              	 .thumb_func
 206              	XMC_VADC_GROUP_GetResult:
 207              	.LFB335:
 208              	 .file 3 "C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc/xmc_vadc.h"
   1:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
   2:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @file xmc_vadc.h
   3:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @date 2017-02-06
   4:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
   5:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @cond
   6:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
   7:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMClib v2.1.12 - XMC Peripheral Driver Library 
   8:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
   9:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Copyright (c) 2015-2017, Infineon Technologies AG
  10:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * All rights reserved.                        
  11:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                             
  12:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * following conditions are met:   
  14:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                                                              
  15:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * disclaimer.                        
  17:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * 
  18:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * 
  21:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                                                              
  24:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                                                              
  32:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
  35:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  36:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Change History
  37:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * --------------
  38:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  39:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-02-15:
  40:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Initial <br>
  41:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *      
  42:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-02-20:
  43:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Revised for XMC1201 device.<br>
  44:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *   
  45:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-04-27:
  46:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new APIs for SHS.<br>
  47:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added New APIs for trigger edge selection.<BR>
  48:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new APIs for Queue flush entries, boundary selection, Boundary node pointer.<BR>
  49:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Revised GatingMode APIs and EMUX Control Init API.<BR>
  50:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  51:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-06-20:
  52:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  53:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-06-25:
  54:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - BFL configuration in channel initialization fixed.
  55:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  56:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-07-28:
  57:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - CLOCK_GATING_SUPPORTED and PERIPHERAL_RESET_SUPPORTED macros used
  58:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Clubbed the macro definitions for XMC13 XMC12 and XMC14
  59:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Clubbed the macro definitions for XMC44 XMC47 and XMC48
  60:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New APIs Created.
  61:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GLOBAL_SetIndividualBoundary
  62:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetIndividualBoundary
  63:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetAlias
  64:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetInputClass
  65:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelSetIclass
  66:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetResultAlignment
  67:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetInputClass
  68:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetResultSubtractionValue
  69:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  70:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-12-01:
  71:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added:
  72:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - XMC4300 device supported
  73:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  74:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed:
  75:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - XMC_VADC_GLOBAL_TriggerEvent API updated. OR operation removed. 
  76:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - XMC_VADC_GLOBAL_ClearEvent API updated. Multiple events triggering on clearing the event i
  77:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Wrong MACRO name defined in xmc_vadc_map.h file corrected for XMC4200/4100 devices.
  78:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *       XMC_VADC_G3_SAMPLE renamed to XMC_VADC_G1_SAMPLE
  79:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  80:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-12-01:
  81:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New APIs Created.
  82:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled
  83:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled
  84:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed the analog calibration voltage for XMC1100 to external reference upper supply range.
  85:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed the XMC_VADC_GLOBAL_StartupCalibration() for XMC1100.
  86:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  87:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2016-03-09:
  88:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Optimization of write only registers
  89:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  90:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2016-03-18:
  91:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed XMC_VADC_GLOBAL_SHS_IsConverterReady(): API checks the STEPCFG register for the read
  92:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *       SHSCFG SFR. 
  93:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  94:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2016-06-17:
  95:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New macros added XMC_VADC_SHS_FULL_SET_REG, XMC_VADC_RESULT_PRIORITY_AVAILABLE
  96:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New Enum added XMC_VADC_SHS_GAIN_LEVEL_t and XMC_VADC_SYNCTR_EVAL_t
  97:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New APIs added are:
  98:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetSyncSlaveReadySignal
  99:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetAssertedEvents
 100:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetAssertedResultEvents
 101:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetResultRegPriority
 102:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetSyncReadySignal
 103:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetSyncReadySignal
 104:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetResultRegPriority
 105:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 106:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2017-02-06:
 107:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new functions to remove channels from background request source, XMC_VADC_GLOBAL_Bac
 108:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 109:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @endcond 
 110:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 111:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 112:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 113:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #ifndef XMC_VADC_H
 114:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_H
 115:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  
 116:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 117:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * HEADER FILES
 118:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 119:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #include <xmc_common.h>
 120:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #include <xmc_scu.h>
 121:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #include <xmc_vadc_map.h>
 122:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 123:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 124:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @addtogroup XMClib XMC Peripheral Library
 125:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @{
 126:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 127:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  
 128:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 129:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @addtogroup VADC
 130:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @brief Versatile Analog to Digital Converter (VADC) driver for XMC microcontroller family.
 131:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 132:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * The XMC microcontroller provides a series of analog input channels connected to a cluster of Ana
 133:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Converters using the Successive Approximation Register (SAR) principle to convert analog input v
 134:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * to discrete digital values.
 135:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \if XMC1
 136:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * The XMC1x is based on Sample & Hold converters, where a cluster contains 2 Sample&Hold units whi
 137:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * converter.
 138:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \endif
 139:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 140:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each converter of the ADC cluster can operate independent of the others, controlled by a dedicat
 141:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * registers and triggered by a dedicated group request source. The results of each channel can be 
 142:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * dedicated channel-specific result register or in a group-specific result register.<BR>
 143:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 144:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * The Versatile Analog to Digital Converter module (VADC) of the XMC comprises a set of converter 
 145:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * can be operated either independently or via a common request source that emulates a background c
 146:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each converter block is equipped with a dedicated input multiplexer and dedicated request source
 147:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * which together build separate groups.
 148:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 149:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \if XMC4
 150:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @image html "vadc_overview_xmc4x.png"
 151:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \else
 152:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @image html "vadc_overview_xmc1x.png"
 153:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \endif
 154:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 155:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * The VADC LLD is split into GLOBAL and GROUP related APIs.<BR>
 156:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * <B>GLOBAL: </B><BR>
 157:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * <UL>
 158:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Global APIs act on the entire ADC module. Configures global configuration registers</LI>
 159:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Allows configuration of the background request source of the VADC.</LI>
 160:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>The clock related configurations for the VADC module are configured in the Global APIs/</LI>
 161:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>The Global API names are prefixed by the \b XMC_VADC_GLOBAL_ and they accept ::XMC_VADC_GLOB
 162:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *     one of its arguments.</LI>
 163:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the background request source of the VADC. The APIs which act on the background r
 164:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GLOBAL_Background</LI>
 165:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the sample and hold unit of the VADC. The APIs which act on the SHS related regis
 166:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GLOBAL_SHS_</LI>
 167:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * </UL><BR>
 168:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 169:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * <B>GROUP: </B><BR>
 170:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * <UL>
 171:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Group APIs act on a VADC group. Configures the group configuration registers</LI>
 172:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the queue request source of the VADC. The APIs which act on the queue related reg
 173:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GROUP_Queue</LI>
 174:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the scan request source of the VADC. The APIs which act on the scan related regis
 175:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GROUP_Scan</LI>
 176:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configuration of the channels of each group are done by the API which have a prefix as
 177:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *     \b XMC_VADC_GROUP_Channel.</LI>
 178:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>The Group API names are prefixed by the \b XMC_VADC_GROUP_ and they accept ::XMC_VADC_GROUP_
 179:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *     one of its arguments.</LI>
 180:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * </UL><BR>
 181:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @{
 182:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 183:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  
 184:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 185:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * MACROS
 186:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 187:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 188:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #if ((UC_SERIES == XMC42)||(UC_SERIES == XMC41) || (UC_SERIES == XMC43))
 189:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE           (1U) /*  Defines the availability of group resource in a
 190:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE           (1U) /*  Defines the availability of scan request resour
 191:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE           (1U) /*  Defines the availability of queue request resou
 192:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE            (1U) /*  Defines the availability of external multiplexe
 193:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 194:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE        (1U) /*  Defines the availability of boundary check supp
 195:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS      (1U) /*  Defines the availability of synchronous request
 196:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS        (2U) /*  Defines the maximum number of groups available 
 197:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT      (1U) /*  Defines the availability of boundary flags in a
 198:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE         (1U) /*  Defines the external multiplexer channel select
 199:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 200:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE             (0U) /* Defines the availability of sample and hold modu
 201:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG          (0U) /* Defines the availability of sample and hold modu
 202:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE    (1U) /* Define the availability of a source specific res
 203:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 204:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 205:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 206:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC44 || UC_SERIES == XMC47 || UC_SERIES == XMC48)
 207:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 208:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 209:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 210:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 211:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 212:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 213:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 214:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (4U) /*  Defines the maximum number of groups available in
 215:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (1U) /*  Defines the availability of boundary flags in a d
 216:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (1U) /*  Defines the external multiplexer channel selectio
 217:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 218:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (0U) /* Defines the availability of sample and hold module
 219:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (0U) /* Defines the availability of sample and hold module
 220:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (1U) /* Define the availability of a source specific resul
 221:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 222:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 223:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 224:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC45)
 225:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 226:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 227:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 228:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 229:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 230:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 231:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 232:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (4U) /*  Defines the maximum number of groups available in
 233:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (0U) /*  Defines the availability of boundary flags in a d
 234:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (0U) /*  Defines the external multiplexer channel selectio
 235:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 236:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (0U) /* Defines the availability of sample and hold module
 237:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (0U) /* Defines the availability of sample and hold module
 238:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (0U) /* Define the availability of a source specific resul
 239:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 240:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 241:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 242:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC14 || UC_SERIES == XMC13 || UC_SERIES == XMC12)
 243:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 244:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 245:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 246:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 247:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 248:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 249:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 250:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (2U) /*  Defines the maximum number of groups available in
 251:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (1U) /*  Defines the availability of boundary flags in a d
 252:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (1U) /*  Defines the external multiplexer channel selectio
 253:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 254:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (1U) /* Defines the availability of sample and hold module
 255:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (1U) /* Defines the availability of sample and hold module
 256:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (1U) /* Define the availability of a source specific resul
 257:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (1U) /* Define the availability of a priority for result
 258:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 259:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 260:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC11)
 261:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (0U) /*  Defines the availability of group resource in a d
 262:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (0U) /*  Defines the availability of scan request resource
 263:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (0U) /*  Defines the availability of queue request resourc
 264:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (0U) /*  Defines the availability of external multiplexer 
 265:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 266:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (0U) /*  Defines the availability of boundary check suppor
 267:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (0U) /*  Defines the availability of synchronous request s
 268:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (2U) /*  Defines the maximum number of groups available in
 269:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (0U) /*  Defines the availability of boundary flags in a d
 270:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_START_UP_CAL_ACTIVE (3U) /*  Defines the need for SHS startup calibration acti
 271:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     XMC1100 devices */
 272:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_CONV_ENABLE_FOR_XMC11   (*(uint32_t*) 0x40010500UL) /*  Defines the additional err
 273:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     XMC1100 device for effective working*/ 
 274:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (0U) /*  Defines the external multiplexer channel selectio
 275:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 276:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (1U) /* Defines the availability of sample and hold module
 277:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (0U) /* Defines the availability of sample and hold module
 278:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (0U) /* Define the availability of a source specific resul
 279:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 280:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 281:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 282:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_PORTS               (16U) /* Defines the number of hardware ports that can be 
 283:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     as triggers and gating signals */
 284:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 285:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_RESULT_REGISTERS    (16U) /* Defines the number of result holding registers pe
 286:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 287:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_CHANNELS_PER_GROUP  (8U)  /**< Defines the number of ADC channels per group */
 288:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 289:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 290:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * ENUMS
 291:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 292:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef uint16_t XMC_VADC_RESULT_SIZE_t; /**< Type defined the converted result size to unsigned 16
 293:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef VADC_GLOBAL_TypeDef XMC_VADC_GLOBAL_t; /**< Type defined the device header file vadc global
 294:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                              type to VADC type*/
 295:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 296:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_AVAILABLE == 1U)
 297:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef VADC_G_TypeDef XMC_VADC_GROUP_t; /**< Type defined the device header file vadc group regist
 298:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                              type to VADC Group type*/
 299:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 300:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 301:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 302:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef SHS_Type XMC_VADC_GLOBAL_SHS_t; /**< Type defined the sample and hold register structure*/
 303:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 304:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 305:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the return status after execution of VADC specific API's. Use @ref XMC_VADC_STATUS_t fo
 306:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 307:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_STATUS
 308:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
 309:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STATUS_SUCCESS = 0,   /**< Returned when the API has been able to fulfill the callers re
 310:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STATUS_ERROR          /**< Returned when the API cannot fulfill the request */
 311:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_STATUS_t;
 312:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 313:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 314:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the various service requests lines. Each group can raise up to 4 service requests indep
 315:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  all groups together have the possibility of raising 4 module wide service requests. Use @ref XM
 316:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  enumeration.
 317:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 318:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SR
 319:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
 320:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR0 = 0, /**< Group specific Service Request-0 */
 321:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR1,     /**< Group specific Service Request-1 */
 322:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR2,     /**< Group specific Service Request-2 */
 323:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR3,     /**< Group specific Service Request-3 */
 324:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR0,    /**< Module Wide Common Service Request-0 */
 325:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR1,    /**< Module Wide Common Service Request-1 */
 326:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR2,    /**< Module Wide Common Service Request-2 */
 327:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR3    /**< Module Wide Common Service Request-3 */
 328:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SR_t;
 329:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 330:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 331:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the mode of operation of a channel, when an ongoing conversion gets interrupted in betw
 332:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_STARTMODE_t for this enumeration.
 333:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 334:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_STARTMODE
 335:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
 336:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_WFS = 0, /**< An ongoing conversion completes without interruption */
 337:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_CIR,     /**< An ongoing conversion can be interrupted and resumed later*/
 338:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_CNR     /**< An ongoing conversion can be interrupted and never resumed */
 339:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_STARTMODE_t;
 340:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 341:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 342:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the edge sensitivity of the trigger signal which can assert a conversion.
 343:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_TRIGGER_EDGE_t for this enumeration.
 344:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 345:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_TRIGGER_EDGE
 346:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
 347:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_NONE = 0, /**< No external trigger. Conversion request can be asserted by s
 348:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_FALLING,  /**< The falling edge of the external trigger can assert conversi
 349:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_RISING,   /**< The rising edge of the external trigger can assert conversio
 350:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_ANY       /**< Both the edges can assert conversion request */
 351:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_TRIGGER_EDGE_t;
 352:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 353:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 354:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the external trigger input selection possibilities, to assert a conversion. Refer the V
 355:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  section of the reference manual for details of peripherals which can be used. Also refer xmc_va
 356:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  detailed definitions of the peripherals which can take the control of these enumeration items.
 357:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_TRIGGER_INPUT_SELECT_t for this enumeration.
 358:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 359:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_TRIGGER_INPUT_SELECT
 360:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
 361:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_A = 0, /**< Trigger select signal A */
 362:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_B,     /**< Trigger select signal B */
 363:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_C,     /**< Trigger select signal C */
 364:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_D,     /**< Trigger select signal D */
 365:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_E,     /**< Trigger select signal E */
 366:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_F,     /**< Trigger select signal F */
 367:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_G,     /**< Trigger select signal G */
 368:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_H,     /**< Trigger select signal H */
 369:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_I,     /**< Trigger select signal I */
 370:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_J,     /**< Trigger select signal J */
 371:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_K,     /**< Trigger select signal K */
 372:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_L,     /**< Trigger select signal L */
 373:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_M,     /**< Trigger select signal M */
 374:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_N,     /**< Trigger select signal N */
 375:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_O,     /**< Trigger select signal O */
 376:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_P      /**< Trigger select signal P */
 377:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   
 378:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_TRIGGER_INPUT_SELECT_t;
 379:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 380:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 381:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the external gating input selection possibilities, to gate the conversion requests. Ref
 382:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  interconnects section of the reference manual for details of peripherals which can be used. Als
 383:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  xmc_vadc_map.h file for detailed definitions of the peripherals which can take the control of t
 384:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  items. Use @ref XMC_VADC_GATE_INPUT_SELECT_t for this enumeration.
 385:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 386:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GATE_INPUT_SELECT
 387:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
 388:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_A = 0, /**< Gating select signal A */
 389:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_B,     /**< Gating select signal B */
 390:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_C,     /**< Gating select signal C */
 391:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_D,     /**< Gating select signal D */
 392:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_E,     /**< Gating select signal E */
 393:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_F,     /**< Gating select signal F */
 394:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_G,     /**< Gating select signal G */
 395:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_H,     /**< Gating select signal H */
 396:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_I,     /**< Gating select signal I */
 397:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_J,     /**< Gating select signal J */
 398:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_K,     /**< Gating select signal K */
 399:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_L,     /**< Gating select signal L */
 400:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_M,     /**< Gating select signal M */
 401:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_N,     /**< Gating select signal N */
 402:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_O,     /**< Gating select signal O */
 403:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_P      /**< Gating select signal P */
 404:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   
 405:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GATE_INPUT_SELECT_t;
 406:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 407:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 408:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the condition for gating the conversion requests. It can be used to set the ENGT field
 409:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * of ASMR/BSMR/QMR register respectively for auto_scan/background_scan/queue request sources.
 410:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Use @ref XMC_VADC_GATEMODE_t for this enumeration.
 411:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 412:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GATEMODE
 413:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
 414:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_BLOCK = 0,  /**< External triggers are permanently blocked */
 415:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_IGNORE,     /**< External triggers are unconditionally passed */
 416:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_ACTIVEHIGH, /**< External trigger is passed only if the gate signal is high */
 417:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_ACTIVELOW  /**< External trigger is passed only if the gate signal is low */
 418:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GATEMODE_t;
 419:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 420:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 421:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the conversion result handling mode. Use @ref XMC_VADC_DMM_t for this enumeration.
 422:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 423:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_DMM
 424:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
 425:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_REDUCTION_MODE = 0, /**< Standard Data reduction mode*/
 426:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_FILTERING_MODE,     /**< Provide option to select Finite Impulse Response Filter (FI
 427:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                         Infinite Impulse Response Filter (IIR)*/
 428:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_DIFFERENCE_MODE,    /**< Difference mode is selected*/
 429:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_DMM_t;
 430:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 431:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 432:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the conversion mode. It defines the resolution of conversion. Use XMC_VADC_CONVMODE_t f
 433:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 434:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CONVMODE
 435:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
 436:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_12BIT       = 0,  /**< Results of conversion are 12bits wide */
 437:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_10BIT       = 1,  /**< Results of conversion are 10bits wide */
 438:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_8BIT        = 2,  /**< Results of conversion are 8bits wide */
 439:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_FASTCOMPARE = 5  /**< Input signal compared with a preset range */
 440:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CONVMODE_t;
 441:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 442:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 443:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the output of a fast compare mode. Use @ref XMC_VADC_FAST_COMPARE_t for
 444:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  this enumeration.
 445:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 446:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_FAST_COMPARE
 447:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
 448:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_LOW = 0, /**< Input lower than than programmed reference */
 449:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_HIGH ,   /**< Input higher than than programmed reference */
 450:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_UNKNOWN  /**< Unknown, Conversion probably still ongoing */
 451:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_FAST_COMPARE_t;
 452:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  
 453:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 454:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the type of scan request source to be used. It can choose between auto scan and backgrou
 455:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * source methods. Use @ref XMC_VADC_SCAN_TYPE_t for this enumeration.
 456:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 457:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SCAN_TYPE
 458:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
 459:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_TYPE_GROUPSCAN = 0, /**< Auto scan mode of operation selected. Also called as Group
 460:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_TYPE_BACKGROUND    /**< Background scan mode of operation selected. Also called as 
 461:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_TYPE_t;
 462:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 463:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 464:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the behavior of load event for the scan request source. Use @ref XMC_VADC_SCAN_LOAD_t fo
 465:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 466:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SCAN_LOAD
 467:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
 468:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_LOAD_OVERWRITE = 0, /**< The old set of channels is discarded in favor of the new s
 469:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                          awaiting conversion */
 470:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_LOAD_COMBINE       /**< The new set of channels are combined with the pending chann
 471:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                          previous set */
 472:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_LOAD_t;
 473:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 474:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 475:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the conversion classes that can be selected for each channel. The enumeration members ho
 476:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * global classes. The conversion classes decides the properties of conversion, like resolution, sa
 477:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Use @ref XMC_VADC_CHANNEL_CONV_t for this enumeration.
 478:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 479:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 480:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_CONV
 481:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
 482:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 = 0, /**< Conversion property set-0 specific to the group */
 483:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GROUP_CLASS1,     /**< Conversion property set-1 specific to the group */
 484:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS0,    /**< Conversion property set-0, Module wide */
 485:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS1    /**< Conversion property set-1, Module wide */
 486:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_CONV_t;
 487:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 488:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 489:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the references to boundary values used for limit checking feature. Each of these can be 
 490:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * either an upper bound or a lower bound. Use @ref XMC_VADC_CHANNEL_BOUNDARY_t for this enumeratio
 491:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 492:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 493:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BOUNDARY
 494:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
 495:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0 = 0, /**< Group specific Boundary-0 value */
 496:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND1,     /**< Group specific Boundary-1 value */
 497:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND0,    /**< Module wide Boundary-0 value */
 498:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND1    /**< Module wide Boundary-1 value */
 499:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BOUNDARY_t;
 500:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 501:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 502:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the voltage which the capacitor is charged to. Used in Broken wire detection feature. Us
 503:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @ref XMC_VADC_CHANNEL_BWDCH_t for this enumeration.
 504:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 505:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BWDCH
 506:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
 507:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BWDCH_VAGND = 0, /**< Capacitor pre-charged to ground*/
 508:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BWDCH_VAREF     /**< Capacitor pre-charged to reference voltage*/
 509:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BWDCH_t;
 510:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 511:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 512:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Defines the criteria for event generation by the channel. Use @ref XMC_VADC_CHANNEL_EVGEN_t fo
 513:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 514:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_EVGEN
 515:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
 516:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_NEVER     = 0,  /**< No event generated */
 517:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_INBOUND   = 1U, /**< Event generated when the result is within the normal 
 518:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_COMPHIGH  = 1U, /**< Event generated when the result of fast compare opera
 519:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_OUTBOUND  = 2U, /**< Event generated when the result is outside the normal
 520:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_COMPLOW   = 2U, /**< Event generated when the result result of fast compar
 521:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_ALWAYS    = 3U /**< Event generated always after conversion - unconditiona
 522:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_EVGEN_t;
 523:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 524:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 525:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the reference voltage selection for conversion. Use @ref XMC_VADC_CHANNEL_REF_t for this
 526:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 527:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_REF
 528:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
 529:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_REF_INTREF = 0, /**< Internal VARef */
 530:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_REF_ALT_CH0    /**< External voltage available on Channel-0 of the perticular gr
 531:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_REF_t;
 532:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  
 533:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 534:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the criteria for boundary flag assertion. Use @ref XMC_VADC_CHANNEL_BOUNDARY_CONDITION_t
 535:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * enumeration.
 536:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 537:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BOUNDARY_CONDITION
 538:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
 539:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_CONDITION_ABOVE_BAND = 0, /**< Set Boundary condition criteria to asser
 540:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_CONDITION_BELOW_BAND     /**< Set Boundary condition criteria to assert
 541:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BOUNDARY_CONDITION_t;
 542:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  
 543:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 544:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the event which can lead to a global service request assertion. Use @ref XMC_VADC_GLOBAL
 545:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * enumeration.
 546:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 547:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_EVENT
 548:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
 549:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE = VADC_GLOBEFLAG_SEVGLB_Msk, /**< Background scan request sourc
 550:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_EVENT_RESULT      = VADC_GLOBEFLAG_REVGLB_Msk  /**< Global result event */
 551:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_EVENT_t;
 552:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  
 553:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 554:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the power modes of a VADC Group. Use @ref XMC_VADC_GROUP_POWERMODE_t for this enumeratio
 555:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 556:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_POWERMODE
 557:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
 558:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_OFF       = 0, /**< Group is powered down */
 559:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_RESERVED1,     /**< Reserved */
 560:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_RESERVED2,     /**< Reserved */
 561:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_NORMAL        /**< Group is powered up */
 562:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_POWERMODE_t;
 563:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 564:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 565:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the status of a VADC group (also known as kernel). Use @ref XMC_VADC_GROUP_STATE_t for 
 566:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 567:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_STATE
 568:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
 569:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_STATE_IDLE = 0, /**< Idle and can convert if requested */
 570:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_STATE_BUSY      /**< Busy with an ongoing conversion */
 571:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_STATE_t;
 572:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 573:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 574:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the reference to sample time and conversion mode settings. Use @ref XMC_VADC_GROUP_CONV
 575:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  enumeration.
 576:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 577:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_CONV
 578:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
 579:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CONV_STD = 0, /**< Settings pertaining to channels directly attached to VADC modul
 580:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CONV_EMUX    /**< Settings pertaining to channels connected to VADC via EMUX */
 581:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CONV_t;
 582:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 583:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 584:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the request source arbiter behavior. Use @ref XMC_VADC_GROUP_ARBMODE_t for this enumera
 585:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 586:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_ARBMODE
 587:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
 588:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_ARBMODE_ALWAYS = 0, /**< Arbiter runs all the time */
 589:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_ARBMODE_ONDEMAND    /**< Arbiter runs only if a conversion request is asserted by 
 590:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                           request sources */
 591:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_ARBMODE_t;
 592:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 593:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 594:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the EMUX mode of operation. Use @ref XMC_VADC_GROUP_EMUXMODE_t for this enumeration.
 595:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 596:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_EMUXMODE
 597:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
 598:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SWCTRL = 0,     /**< Perform EMUX in Software control mode*/
 599:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_STEADYMODE,     /**< Perform EMUX in Steady mode (Use EMUX set value)*/
 600:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SINGLEMODE,     /**< Perform EMUX in Single step mode*/
 601:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SEQUENCEMODE,   /**< Perform EMUX in Sequence mode*/
 602:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXMODE_t;
 603:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 604:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 605:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the EMUX channel selection encoding scheme. Use @ref XMC_VADC_GROUP_EMUXCODE_t for this
 606:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 607:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_EMUXCODE
 608:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
 609:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXCODE_BINARY = 0, /**< A linearly incrementing code serves are MUX-SEL */
 610:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXCODE_GRAY       /**< The MUX-SEL is gray encoded */
 611:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXCODE_t;
 612:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 613:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 614:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the service request set used. Use @ref XMC_VADC_GROUP_IRQ_t for this enumeration.
 615:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 616:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_IRQ
 617:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
 618:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_IRQ_KERNEL = 0, /**< Refers to Group specific service request */
 619:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_IRQ_SHARED     /**< Refers to Module wide service request */
 620:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_IRQ_t;
 621:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 622:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 623:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the alignment of the converted result. Use @ref XMC_VADC_RESULT_ALIGN_t for this enumer
 624:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 625:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_RESULT_ALIGN
 626:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
 627:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_ALIGN_LEFT = 0,  /**< Always align result to left */
 628:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_ALIGN_RIGHT      /**< Always align result to right */
 629:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_ALIGN_t;
 630:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 631:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_RESULT_SUBTRATION 
 632:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
 633:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_12BIT_LEFT_ALIGN  = 0U,  /**< Always align result to left */
 634:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_12BIT_RIGHT_ALIGN = 0U,  /**< Always align result to right */
 635:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_10BIT_LEFT_ALIGN  = 2U,  /**< Always align result to left */
 636:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_10BIT_RIGHT_ALIGN = 0U,  /**< Always align result to right */
 637:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_8BIT_LEFT_ALIGN   = 4U,  /**< Always align result to left */
 638:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_8BIT_RIGHT_ALIGN  = 0U,  /**< Always align result to right */
 639:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_SUBTRATION_t;
 640:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 641:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 642:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the request source arbitration priority. Use @ref XMC_VADC_GROUP_RS_PRIORITY_t for this
 643:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 644:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_RS_PRIORITY
 645:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
 646:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_0 = 0, /**< Lowest priority for the request source*/
 647:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_1,     /**< Second lowest priority for the request source*/
 648:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_2,     /**< Second highest priority for the request source*/
 649:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_3,     /**< Highest priority for the request source*/
 650:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GROUP_RS_PRIORITY_t;
 651:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 652:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 653:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the various modes for the boundary flag. Use @ref XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t f
 654:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 655:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_BOUNDARY_FLAG_MODE
 656:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
 657:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_DISABLED = 0,       /**< Disable boundary flag*/
 658:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED,            /**< Always enable boundary*/
 659:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED_ACTIVE_LOW, /**< Enable boundary flag when gate level
 660:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED_ACTIVE_HIGH /**< Enable boundary flag when gate level
 661:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t;
 662:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 663:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 664:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 665:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the boundary select for Channel. Use @ref XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t for this 
 666:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 667:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_BOUNDARY_SELECT
 668:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
 669:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_SELECT_LOWER_BOUND = 0U,       /**< Select the lower boundary*/
 670:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_SELECT_UPPER_BOUND = 2U        /**< Selects the upper boundary*/
 671:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_BOUNDARY_SELECT_t;
 672:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 673:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 674:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 675:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the group indices. Use @ref XMC_VADC_GROUP_INDEX_t for this enumeration.
 676:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 677:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_INDEX
 678:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
 679:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_0   = 0,
 680:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_1,
 681:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
 682:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_2,
 683:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_3
 684:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 685:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GROUP_INDEX_t;
 686:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 687:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 688:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** * Defines channel alias.
 689:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** * All enum items are available for channels 0 and 1. Other Channels can accept only XMC_VADC_CHANNE
 690:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** */
 691:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_ALIAS
 692:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
 693:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_DISABLED = -1,
 694:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH0 = 0,
 695:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH1 = 1,
 696:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH2 = 2,
 697:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH3 = 3,
 698:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH4 = 4,
 699:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH5 = 5,
 700:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH6 = 6,
 701:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH7 = 7
 702:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_ALIAS_t;
 703:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 704:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 705:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 706:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
 707:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 708:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the gain calibration selection.
 709:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 710:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SHS_GAIN_LEVEL
 711:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
 712:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_0 = SHS_CALOC0_CALOFFVAL0_Pos, /**< Select the calibration value for gain
 713:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_1 = SHS_CALOC0_CALOFFVAL1_Pos, /**< Select the calibration value for gain
 714:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_2 = SHS_CALOC0_CALOFFVAL2_Pos, /**< Select the calibration value for gain
 715:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_3 = SHS_CALOC0_CALOFFVAL3_Pos  /**< Select the calibration value for gain
 716:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_SHS_GAIN_LEVEL_t;
 717:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 718:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 719:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 720:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the Delta sigma loop.
 721:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 722:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SHS_LOOP_CH
 723:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
 724:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_LOOP_CH_0 = SHS_LOOP_LPCH0_Pos, /**< Select Delta-sigma loop 0*/
 725:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_LOOP_CH_1 = SHS_LOOP_LPCH1_Pos /**< Select Delta-sigma loop 1*/
 726:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_SHS_LOOP_CH_t;
 727:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 728:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 729:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Provides the order in which the SHS should do the calibration
 730:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 731:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER
 732:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
 733:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_POST_CONV = 0, /**< Calibration occur after conversion take
 734:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_PRE_CONV   /**< Calibration occur before conversion takes p
 735:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_t;
 736:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 737:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 738:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 739:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 740:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Provides possible routing values for the boundary flag.
 741:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 742:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_BOUNDARY_NODE
 743:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
 744:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_0 = 0U, /**<Route the Group boundary flag to Common b
 745:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_1,      /**<Route the Group boundary flag to Common b
 746:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_2,      /**<Route the Group boundary flag to Common b
 747:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_3,      /**<Route the Group boundary flag to Common b
 748:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_0,  /**<Route the Group boundary flag to Common Service Req
 749:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_1,  /**<Route the Group boundary flag to Common Service Req
 750:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_2,  /**<Route the Group boundary flag to Common Service Req
 751:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_3   /**<Route the Group boundary flag to Common Service Req
 752:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_BOUNDARY_NODE_t;
 753:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 754:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 755:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 756:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 757:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the ready signal selection
 758:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 759:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SYNCTR_EVAL
 760:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
 761:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SYNCTR_EVAL_1 = VADC_G_SYNCTR_EVALR1_Msk, /**<Mask to set the EVAL1 bits of SYNCTR */
 762:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
 763:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SYNCTR_EVAL_2 = VADC_G_SYNCTR_EVALR2_Msk, /**<Mask to set the EVAL2 bits of SYNCTR */
 764:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SYNCTR_EVAL_3 = VADC_G_SYNCTR_EVALR3_Msk  /**<Mask to set the EVAL3 bits of SYNCTR */
 765:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 766:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_SYNCTR_EVAL_t;
 767:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 768:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 769:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * DATA STRUCTURES
 770:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 771:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /*Anonymous structure/union guard start*/
 772:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #if defined(__CC_ARM)
 773:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma push
 774:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma anon_unions
 775:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #elif defined(__TASKING__)
 776:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma warning 586
 777:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 778:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 779:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 780:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing the VADC scan request source. Use type @ref XMC_VADC_SCAN_CONFIG_t for t
 781:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 782:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_SCAN_CONFIG
 783:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
 784:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t conv_start_mode  : 2;  /**< One converter is shared between the queue and scan request
 785:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                          group. This field determines how scan request source would
 786:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                          conversion. Uses @ref XMC_VADC_STARTMODE_t */
 787:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t req_src_priority : 2;  /**< Request source priority for the arbiter. If the Conversion
 788:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                          selected as Cancel inject repeat/Never mode then this fiel
 789:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                          priority of scan request source. Uses @ref XMC_VADC_GROUP_
 790:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 791:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 792:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 793:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 794:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_SRCREG_AVAILABLE == (1U))
 795:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t src_specific_result_reg : 4;  /**< Use any one Group related result register as 
 796:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     for all conversions results. To use the  indivi
 797:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     from each channel configuration, configure this
 798:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 799:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 800:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 801:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 802:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_signal          : 4;  /**< Select one of the 16 possibilities for trigge
 803:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_TRIGGER_INPUT_SELECT_t enumeration*/
 804:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 805:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_edge            : 2;  /**< Edge selection for trigger signal. Uses @ref
 806:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_TRIGGER_EDGE_t */
 807:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 808:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t gate_signal             : 4;  /**< Select one of the 16 possibilities for gating
 809:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_GATE_INPUT_SELECT_t */
 810:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 8;
 811:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t timer_mode              : 1;  /**< Decides whether timer mode for equi-distant s
 812:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       activated or not.*/
 813:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 3;
 814:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 815:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t asctrl;
 816:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 817:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 818:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 819:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 820:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 821:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                    : 2;
 822:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t external_trigger   : 1;  /**< Conversions be initiated by external hardware trig
 823:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t req_src_interrupt  : 1;  /**< Request source event can be generated after a conv
 824:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t enable_auto_scan   : 1;  /**< Enables the continuous conversion mode. Conversion
 825:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  of the last channel in a scan sequence will cause 
 826:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t load_mode          : 1;  /**< Selects load event mode. Uses @ref XMC_VADC_SCAN_L
 827:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                    : 26;
 828:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 829:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t asmr;
 830:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 831:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_CONFIG_t;
 832:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 833:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 834:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef XMC_VADC_SCAN_CONFIG_t XMC_VADC_BACKGROUND_CONFIG_t; /**< Type defined the scan configurati
 835:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                  structure for background Request S
 836:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 837:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 838:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing the VADC channel. Use type XMC_VADC_CHANNEL_CONFIG_t for this enumeratio
 839:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 840:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_CHANNEL_CONFIG
 841:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
 842:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 843:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 844:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 845:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 846:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t input_class                : 2;  /**< Input conversion class selection.
 847:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_CONV_t */
 848:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                            : 2;
 849:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t lower_boundary_select      : 2;  /**< Which boundary register serves as lower bo
 850:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Accepts enum @ref XMC_VADC_CHANNEL_BOUNDAR
 851:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t upper_boundary_select      : 2;  /**< Which boundary register serves as upper bo
 852:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Accepts enum @ref XMC_VADC_CHANNEL_BOUNDAR
 853:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t event_gen_criteria         : 2;  /**< When should an event be generated?
 854:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_EVGEN_t */
 855:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sync_conversion            : 1;  /**< Enables synchronous conversion for the con
 856:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t alternate_reference        : 1;  /**< Input reference voltage selection either V
 857:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_REF_t*/
 858:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                            : 4;
 859:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t result_reg_number          : 4;  /**< Group result register number */
 860:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t use_global_result          : 1;  /**< Use global result register for background 
 861:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t result_alignment           : 1;  /**< Alignment of the results read in the resul
 862:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_RESULT_ALIGN_t */
 863:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                            : 6;
 864:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t broken_wire_detect_channel : 2;  /**< Source to be used to charge the capacitor 
 865:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BWDCH_t. */
 866:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t broken_wire_detect         : 1;  /**< Configures extra phase before the capacito
 867:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 868:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t chctr;
 869:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 870:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 871:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 872:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 873:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 874:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 8;
 875:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 876:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch0 : 1; /**< Condition for which the boundary flag should
 877:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                        Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDITIO
 878:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch1 : 1; /**< Condition for which the boundary flag should
 879:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 880:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch2 : 1; /**< Condition for which the boundary flag should
 881:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 882:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch3 : 1; /**< Condition for which the boundary flag should
 883:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 884:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 885:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 4;
 886:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 887:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 4;
 888:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 889:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch0  : 1; /**< Inverts boundary flag output.*/
 890:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch1  : 1; /**< Inverts boundary flag output.*/
 891:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch2  : 1; /**< Inverts boundary flag output.*/
 892:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch3  : 1; /**< Inverts boundary flag output.*/
 893:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 894:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 895:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch0  : 1; /**< Enable the boundary flag output on the speci
 896:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch1  : 1; /**< Enable the boundary flag output on the speci
 897:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch2  : 1; /**< Enable the boundary flag output on the speci
 898:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch3  : 1; /**< Enable the boundary flag output on the speci
 899:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 900:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 12;
 901:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 902:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t bfl;
 903:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 904:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 905:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 906:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 907:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 908:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 909:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch0    : 4; /**< Specify the basic operation of boundary flag 
 910:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 911:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch1    : 4; /**< Specify the basic operation of boundary flag 
 912:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 913:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch2    : 4; /**< Specify the basic operation of boundary flag 
 914:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 915:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch3    : 4; /**< Specify the basic operation of boundary flag 
 916:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 917:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t                           : 16;
 918:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 919:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t bflc;
 920:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 921:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 922:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     bool    channel_priority;  /**< Only non priority channels can be converted by Background Reque
 923:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     int8_t  alias_channel;     /**< Specifies the channel which has to be aliased with CH0/CH1 (whi
 924:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                     Force the value to \b(int8_t)-1 to bypass alias feature.
 925:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                     Uses @ref XMC_VADC_CHANNEL_ALIAS_t  for configuration.*/
 926:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_CONFIG_t;
 927:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 928:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 929:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize a queue entry. Use type @ref XMC_VADC_QUEUE_ENTRY_t.
 930:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 931:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_QUEUE_ENTRY
 932:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
 933:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 934:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 935:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 936:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 937:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t channel_num        : 5;  /**< Channel number associated with this queue entry.<B
 938:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t refill_needed      : 1;  /**< Conversion completed channel gets inserted back in
 939:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t generate_interrupt : 1;  /**< Generates a queue request source event */
 940:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t external_trigger   : 1;  /**< Conversion requests are raised on an external trig
 941:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                    : 24;
 942:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 943:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 944:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t qinr0;
 945:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 946:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_QUEUE_ENTRY_t;
 947:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 948:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 949:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing a VADC queue request source. Use type @ref XMC_VADC_QUEUE_CONFIG_t.
 950:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 951:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_QUEUE_CONFIG
 952:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
 953:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t conv_start_mode  : 2;  /**< One converter is shared between the queue and scan request
 954:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                          group. This field determines how queue request source woul
 955:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                          conversion. Uses @ref XMC_VADC_STARTMODE_t */
 956:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t req_src_priority : 2;  /**< Request source priority for the arbiter.Uses @ref XMC_VADC
 957:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 958:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 959:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 960:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 961:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_SRCREG_AVAILABLE == (1U))
 962:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t src_specific_result_reg : 4;  /**< Uses any one Group related result register as
 963:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     for all conversions results. To use the  indivi
 964:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     from each channel configuration, configure this
 965:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 966:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 967:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 968:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 969:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_signal          : 4;  /**< Select one of the 16 possibilities for trigge
 970:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_TRIGGER_INPUT_SELECT_t */
 971:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 972:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_edge            : 2;  /**< Edge selection for trigger signal.
 973:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_TRIGGER_EDGE_t */
 974:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 975:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t gate_signal             : 4;  /**< Select one of the 16 possibilities for gating
 976:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GATE_INPUT_SELECT_t */
 977:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 8;
 978:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t timer_mode              : 1;  /**< Timer mode for equi-distant sampling shall be
 979:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 3;
 980:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 981:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t qctrl0;
 982:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 983:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 984:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 985:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 986:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 987:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                   : 2;
 988:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t external_trigger  : 1;  /**< Are external triggers supported? */
 989:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                   : 29;
 990:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 991:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t qmr0;
 992:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 993:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_QUEUE_CONFIG_t;
 994:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 995:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
 996:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 997:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize the global input class configuration. Configured parameters are sample 
 998:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  conversion Mode.
 999:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1000:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CLASS
1001:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
1002:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1003:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1004:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1005:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1006:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sample_time_std_conv            : 5;  /**< Sample time for channels directly con
1007:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1008:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1009:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_standard        : 3;  /**< Conversion mode for channels directly
1010:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1011:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1012:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_EMUX_AVAILABLE == 1U)
1013:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sampling_phase_emux_channel     : 5;  /**< Sample time for channels connected vi
1014:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1015:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1016:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_emux            : 3;  /**< Conversion mode for channels connecte
1017:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1018:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1019:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1020:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 16;
1021:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1022:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1023:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globiclass;
1024:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1025:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CLASS_t;
1026:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1027:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE != 0U)
1028:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1029:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize converter and arbiter clock configuration
1030:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1031:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CLOCK
1032:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
1033:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1034:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1035:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1036:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1037:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1038:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t analog_clock_divider     : 5;  /**< Clock for the converter. <BR>Range: [0x0 to 
1039:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 2;
1040:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t msb_conversion_clock     : 1;  /**< Additional clock cycle for analog converter 
1041:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t arbiter_clock_divider    : 2;  /**< Request source arbiter clock divider. <BR>Ra
1042:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 5;
1043:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 17;
1044:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1045:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globcfg;
1046:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1047:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CLOCK_t;
1048:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1049:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1050:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1051:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1052:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize the VADC Global functions
1053:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1054:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CONFIG
1055:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
1056:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1057:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1058:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1059:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1060:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary0  : 12;  /**< Boundary value for results comparison*/
1061:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1062:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary1  : 12;  /**< Boundary value for results comparison*/
1063:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1064:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1065:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globbound;
1066:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1067:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE != 0U)
1068:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GLOBAL_CLOCK_t clock_config; /**< ADC clock configurations*/
1069:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1070:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GLOBAL_CLASS_t  class0;      /**< ADC input conversion configurations for GLOBICLASS[0
1071:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GLOBAL_CLASS_t  class1;      /**< ADC input conversion configurations for GLOBICLASS[1
1072:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1073:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1074:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1075:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1076:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 16;
1077:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t data_reduction_control  : 4;  /**< Data reduction stages */
1078:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
1079:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t wait_for_read_mode      : 1;  /**< Results of the next conversion will not be ov
1080:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       result register until the previous value is r
1081:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 6;
1082:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t event_gen_enable        : 1;  /**< Generates an event on availability of new res
1083:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1084:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globrcr;
1085:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1086:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1087:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1088:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1089:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1090:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t module_disable              : 1;  /**< Disables the module clock.*/
1091:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                             : 2;
1092:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t disable_sleep_mode_control  : 1;  /**< Set it to true in order to disable the Sl
1093:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                             : 28;
1094:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1095:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t clc;
1096:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1097:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CONFIG_t;
1098:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1099:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1100:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1101:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize the group input class configuration. Configured parameters are sample t
1102:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  conversion Mode.
1103:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1104:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_CLASS
1105:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
1106:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1107:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1108:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1109:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1110:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sample_time_std_conv            : 5;  /**< Sample time for channels directly con
1111:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1112:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1113:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_standard        : 3;  /**< Conversion mode for channels directly
1114:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1115:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1116:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sampling_phase_emux_channel     : 5;  /**< Sample time for channels connected vi
1117:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1118:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1119:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_emux            : 3;  /**< Conversion mode for channels connecte
1120:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1121:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1122:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1123:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_iclass0;
1124:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1125:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CLASS_t;
1126:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1127:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1128:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1129:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  EMUX related configuration structure.
1130:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1131:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_EMUXCFG
1132:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
1133:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1134:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1135:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1136:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1137:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t starting_external_channel : 3;  /**< External channel number to which the VADC w
1138:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         generate a control signal (needed to select
1139:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         the analog multiplexer)*/
1140:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 13;
1141:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
1142:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t connected_channel         : 10; /**< The Channel to which the EMUX is connected.
1143:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1144:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t connected_channel         : 5;  /**< The Channel to which the EMUX is connected.
1145:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 5;
1146:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1147:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t emux_mode                 : 2;  /**< Selects the external multiplexer modes: Ste
1148:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         Uses @ref XMC_VADC_GROUP_EMUXMODE_t*/
1149:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t emux_coding               : 1;  /**< Select Binary or Gray coding. Uses @ref XMC
1150:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t stce_usage                : 1;  /**< Use STCE for each conversion of an external
1151:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
1152:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t emux_channel_select_style : 1;  /**< Selects the style of configuring the \b con
1153:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         (Each bit represents the channel or entire 
1154:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 1;
1155:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1156:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 2;
1157:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1158:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1159:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_emuxctr;
1160:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1161:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXCFG_t;
1162:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1163:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1164:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1165:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Group Configuration Data Structures
1166:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1167:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1168:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_CONFIG
1169:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
1170:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_EMUXCFG_t emux_config;    /**< External multiplexer related configurations */
1171:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_CLASS_t class0;           /**< ADC input conversion configurations for GxICLASS[
1172:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_CLASS_t class1;           /**< ADC input conversion configurations for GxICLASS[
1173:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1174:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1175:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1176:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1177:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary0  : 12;  /**< Boundary value for results comparison*/
1178:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1179:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary1  : 12;  /**< Boundary value for results comparison*/
1180:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1181:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1182:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_bound;
1183:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1184:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1185:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1186:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1187:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1188:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 4;
1189:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t arbitration_round_length : 2;  /**< Number of arbiter slots to be considered */
1190:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 1;
1191:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t arbiter_mode             : 1;  /**< Arbiter mode - Select either Continuous mode
1192:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_ARBMODE_t */
1193:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 24;
1194:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1195:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_arbcfg;
1196:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1197:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CONFIG_t;
1198:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1199:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1200:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize VADC Group result register.
1201:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1202:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1203:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_RESULT_CONFIG
1204:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
1205:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1206:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1207:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1208:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1209:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 16;
1210:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t data_reduction_control  : 4;  /**< Configures the data reduction stages */
1211:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t post_processing_mode    : 2;  /**< Result data processing mode. Uses @ref  XMC_V
1212:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       For normal operation select
1213:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_DMM_t::XMC_VADC_DMM_REDUCTION_MODE
1214:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       and data_reduction_control as 0*/
1215:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 2;
1216:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t wait_for_read_mode      : 1;  /**< Allow the conversion only after previous resu
1217:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t part_of_fifo            : 2;  /**< Make the result register a part of Result FIF
1218:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
1219:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t event_gen_enable        : 1;  /**< Generates an event on availability of new res
1220:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1221:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_rcr;
1222:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1223:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_CONFIG_t;
1224:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1225:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
1226:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1227:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1228:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Structure to initialize the Stepper configurations
1229:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1230:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_SHS_STEP_CONFIG
1231:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
1232:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1233:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1234:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1235:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1236:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step0            :3;  /**< Select a Sample and hold unit for the stepper's s
1237:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1238:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step0             :1;  /**< Should the step be added to the sequence */
1239:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step1            :3;  /**< Select a Sample and hold unit for the stepper's s
1240:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1241:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step1             :1;  /**< Should the step be added to the sequence */
1242:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step2            :3;  /**< Select a Sample and hold unit for the stepper's s
1243:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1244:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step2             :1;  /**< Should the step be added to the sequence */
1245:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step3            :3;  /**< Select a Sample and hold unit for the stepper's s
1246:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1247:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step3             :1;  /**< Should the step be added to the sequence */
1248:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step4            :3;  /**< Select a Sample and hold unit for the stepper's s
1249:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1250:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step4             :1;  /**< Should the step be added to the sequence */
1251:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step5            :3;  /**< Select a Sample and hold unit for the stepper's s
1252:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1253:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step5             :1;  /**< Should the step be added to the sequence */
1254:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step6            :3;  /**< Select a Sample and hold unit for the stepper's s
1255:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1256:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step6             :1;  /**< Should the step be added to the sequence */
1257:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step7            :3;  /**< Select a Sample and hold unit for the stepper's s
1258:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1259:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step7             :1;  /**< Should the step be added to the sequence */
1260:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1261:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1262:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t stepcfg;
1263:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1264:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_STEP_CONFIG_t;
1265:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1266:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1267:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sample and hold Initialization structure
1268:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1269:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_SHS_CONFIG
1270:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
1271:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1272:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1273:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1274:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1275:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t shs_clock_divider        :4; /**< The divider value for the SHS clock. Range: [0x0 t
1276:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          :6;
1277:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t analog_reference_select  :2; /**< It is possible to different reference voltage for 
1278:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  */
1279:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          :20;
1280:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1281:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t shscfg;
1282:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1283:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1284:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_t calibration_order; /**< order in which the calibration sh
1285:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1286:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_CONFIG_t;
1287:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1288:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1289:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1290:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Detailed result structure
1291:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1292:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  typedef struct XMC_VADC_DETAILED_RESULT
1293:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
1294:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1295:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1296:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1297:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1298:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t result                   :16;  /**< Result of the Analog to digital conversion*/
1299:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t data_reduction_counter   :4;   /**< Results reduction counter value*/
1300:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t channel_number           :5;   /**< Converted channel number*/
1301:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t emux_channel_number      :3;   /**< Converted external multiplexer channel number.
1302:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  Only applicable for GxRES[0] result register*/
1303:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t converted_request_source :2;   /**< Converted request source*/
1304:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t fast_compare_result      :1;   /**< Fast compare result if conversion mode is fast c
1305:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t vaild_result             :1;   /**< Valid flag is set when a new result is available
1306:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1307:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t res;
1308:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1309:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_DETAILED_RESULT_t;
1310:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  
1311:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1312:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /*Anonymous structure/union guard end*/
1313:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #if defined(__CC_ARM)
1314:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma pop
1315:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #elif defined(__TASKING__)
1316:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma warning restore
1317:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1318:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
1319:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * static inline functions
1320:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
1321:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1322:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U) 
1323:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_CHECK_GROUP_PTR(XMC_VADC_GROUP_t *const group_ptr)
1324:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
1325:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS == 4U)
1326:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   return((group_ptr == VADC_G0) || (group_ptr == VADC_G1) || (group_ptr == VADC_G2) || (group_ptr =
1327:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1328:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   return((group_ptr == VADC_G0) || (group_ptr == VADC_G1));
1329:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1330:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
1331:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1332:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
1333:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * API Prototypes
1334:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
1335:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1336:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #ifdef __cplusplus
1337:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** extern "C" {
1338:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1339:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1340:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1341:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param None
1342:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1343:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1344:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1345:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1346:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the VADC module.<BR>\n
1347:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would ungate the clock to the VADC module (if applicable). Also this API would bring
1348:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * the VADC module out of reset state(if applicable), by asserting the appropriate registers.
1349:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would invoke XMC_SCU_CLOCK_UngatePeripheralClock() and XMC_SCU_RESET_DeassertPeripheral
1350:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * if needed. Directly accessed register is  COMPARATOR.ORCCTRL (Refer to the errata for XMC1100).
1351:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1352:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1353:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableModule().
1354:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1355:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_EnableModule(void);
1356:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1357:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1358:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param None
1359:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1360:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1361:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1362:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1363:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the VADC module.<BR>\n
1364:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would gate the clock to the VADC module (if applicable). Also this API would put
1365:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * the VADC module into the reset state(if applicable) by asserting the appropriate registers.
1366:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would invoke XMC_SCU_CLOCK_GatePeripheralClock() and XMC_SCU_RESET_AssertPeripheralRese
1367:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1368:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1369:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableModule().
1370:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1371:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_DisableModule(void);
1372:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1373:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1374:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1375:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr   Constant pointer to the VADC module.
1376:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config Pointer to initialization data structure
1377:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1378:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1379:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1380:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1381:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the VADC global module with the associated configuration structure pointed by \a con
1382:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * enables the global access to registers by configuring reset and clock un-gating for selected dev
1383:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * initializes global class, boundary , result resources by setting GLOBICLASS,GLOBBOUND,GLOBRCR re
1384:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * configures the global analog and digital clock dividers by setting GLOBCFG register. Refer relat
1385:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * the configurations later in the program.
1386:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1387:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1388:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_ClockInit()<BR>
1389:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1390:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *conf
1391:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1392:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1393:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1394:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1395:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1396:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1397:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1398:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1399:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the VADC module clock.\n\n Call this API before any further configuration of VADC. It se
1400:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * register to enable.
1401:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1402:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1403:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_Init()
1404:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1405:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1406:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnableModuleClock(XMC_VADC_GLOBAL_t *const global_ptr)
1407:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
1408:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_Enable:Wrong Module Pointer", (global_ptr == VADC))
1409:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC &= ~((uint32_t)VADC_CLC_DISR_Msk);
1410:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
1411:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1412:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1413:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1414:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1415:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1416:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1417:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1418:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1419:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the VADC module clock.\n\n After this API call, no conversion will occur. Call
1420:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableModuleClock() to enable the VADC module later in the program.
1421:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1422:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1423:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_Init()
1424:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1425:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1426:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableModuleClock(XMC_VADC_GLOBAL_t *const global_ptr)
1427:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
1428:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_Disable:Wrong Module Pointer", (global_ptr == VADC))
1429:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC |= (uint32_t) ((uint32_t)1 <<  VADC_CLC_DISR_Pos);
1430:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
1431:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1432:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1433:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1434:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr    Constant pointer to the VADC module.
1435:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1436:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1437:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1438:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1439:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables VADC module to sleep if a sleep request comes.\n\n
1440:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * It resets the EDIS bit of CLC register for enabling the sleep mode.
1441:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1442:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1443:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableSleepMode().
1444:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1445:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnableSleepMode(XMC_VADC_GLOBAL_t *const global_ptr)
1446:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
1447:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_EnableSleepMode:Wrong Module Pointer", (global_ptr == VADC))
1448:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC &= ~((uint32_t)VADC_CLC_EDIS_Msk);
1449:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
1450:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1451:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1452:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1453:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr    Constant pointer to the VADC module.
1454:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1455:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1456:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1457:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1458:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Ignores the sleep mode request for the VADC.\n\n
1459:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * With the sleep feature enabled, the module will respond to sleep
1460:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * requests by going into a low power mode. It resets the EDIS bit of CLC register for enabling the
1461:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1462:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1463:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableSleepMode().
1464:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1465:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableSleepMode(XMC_VADC_GLOBAL_t *const global_ptr)
1466:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
1467:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisableSleepMode:Wrong Module Pointer", (global_ptr == VADC))
1468:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC |= (uint32_t) ((uint32_t)1 <<  VADC_CLC_EDIS_Pos);
1469:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
1470:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1471:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
1472:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1473:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1474:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1475:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Pointer to the data structure containing clock configuration data
1476:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1477:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1478:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1479:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1480:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the VADC clock.<BR>\n
1481:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up the clock configuration of the VADC module using the config structure pointed by \a conf
1482:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * The clock to the analog converter and to the request source arbiter is configured by setting the
1483:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1484:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1485:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1486:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1487:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1488:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_ClockInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_
1489:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
1490:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClockInit:Wrong Module Pointer", (global_ptr == VADC))
1491:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1492:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Write the Clock configuration into the GLOBCFG register */
1493:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG = (uint32_t)(config->globcfg | (VADC_GLOBCFG_DIVWC_Msk));
1494:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
1495:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1496:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1497:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1498:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1499:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1500:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Conversion class parameter structure
1501:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param conv_type configure the input call for either standard conversion or EMUX related convers
1502:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param set_num Conversion class set<BR>
1503:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                Range: [0x0, 0x1]
1504:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1505:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1506:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the ADC conversion settings like sample time and resolution.<BR>\n
1507:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up the conversion settings for vadc global resource associated with \a config structure. It
1508:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * conversion class properties like sampling time and resolution for selected \a conv_type channels
1509:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * the GLOBALICLASS register specified by \a set_num with the required settings.
1510:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1511:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1512:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1513:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1514:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1515:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1516:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1517:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLAS
1518:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set
1519:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1520:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1521:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1522:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC global module
1523:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Pointer to result configuration data structure
1524:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1525:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1526:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1527:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1528:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes global result register.<BR>\n
1529:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes Global Result Register with specified settings configured in the \a config structure
1530:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * results in configuration of GLOBRCR register. This helps in configuring the Data reduction mode,
1531:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * , wait for read mode on the GLOBRES register.
1532:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1533:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1534:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1535:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1536:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1537:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1538:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1539:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  __STATIC_INLINE void XMC_VADC_GLOBAL_ResultInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VAD
1540:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  {
1541:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ResultInit:Wrong Module Pointer", (global_ptr == VADC))
1542:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1543:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Configure GLOBRCR*/
1544:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBRCR = config->g_rcr;
1545:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  }
1546:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  
1547:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1548:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1549:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1550:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1551:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1552:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1553:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1554:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the startup calibration feature of the VADC module.\n\n It configures the SUCAL bit of G
1555:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * enable the startup calibration feature. After turning it on, it loops until all active groups fi
1556:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call XMC_VADC_GLOBAL_Enable() and XMC_VADC_GLOBAL_ClockInit() before calling this API in sequenc
1557:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableStartupCalibration() can disable the calibration feature at runtime.
1558:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1559:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1560:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_Enable()<BR>
1561:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit()<BR>
1562:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1563:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1564:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr);
1565:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1566:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1567:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1568:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1569:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr  Constant pointer to the VADC module.
1570:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1571:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1572:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1573:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1574:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the startup calibration feature of the VADC module.\n\n It configures the SUCAL bit of 
1575:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * disable the startup calibration feature. Calling the API XMC_VADC_GLOBAL_EnsableStartupCalibrati
1576:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * calibration feature at runtime.
1577:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1578:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1579:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1580:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1581:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1582:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableStartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
1583:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
1584:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisableStartupCalibration:Wrong Module Pointer", (global_ptr == VADC)
1585:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG &= ~((uint32_t)VADC_GLOBCFG_SUCAL_Msk);
1586:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
1587:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1588:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
1589:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1590:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1591:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1592:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_number  group number whose post calibration feature is to be disabled. <BR>
1593:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                      Range[0x0 to 0x3] Accepts the enum ::XMC_VADC_GROUP_INDEX_t
1594:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1595:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1596:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1597:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1598:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the post calibration for a particular group specified as \a group_number.\n\n It config
1599:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * of GLOBCFG register to disable the post calibration feature. Call XMC_VADC_GLOBAL_Enable() and
1600:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit() before calling this API in sequence. Calling the API
1601:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnablePostCalibration() can enable back the calibration feature at runtime.
1602:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1603:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1604:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_Enable()<BR>
1605:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit()<BR>
1606:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
1607:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1608:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1609:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1610:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, ui
1611:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
1612:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))
1613:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1614:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_numbe
1615:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
1616:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1617:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1618:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1619:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1620:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_number  group number whose post calibration feature is to be enabled. <BR>
1621:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                      Range[0x0 to 0x3] Accepts the enum ::XMC_VADC_GROUP_INDEX_t
1622:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1623:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1624:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1625:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1626:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the post calibration for a particular group specified as \a group_number.\n\n It configu
1627:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * of GLOBCFG register to enable the post calibration feature. Calling the API XMC_VADC_GLOBAL_Disa
1628:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * can disable the calibration feature at runtime.
1629:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1630:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1631:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
1632:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1633:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1634:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uin
1635:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
1636:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_EnablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))
1637:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1638:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG &= (~ (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_nu
1639:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
1640:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1641:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1642:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)
1643:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1644:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1645:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1646:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary0  Boundary-0 Value<BR>Range[0 - 4095]
1647:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary1  Boundary-1 Value<BR>Range[0 - 4095]
1648:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1649:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1650:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1651:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1652:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs the boundaries with \a boundary0 and boundary1 for result comparison.\n\n These two bou
1653:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * absolute boundaries. They define a range against which the result of a conversion can be compare
1654:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * fast compare mode, the two boundaries provide hysteresis capability to a compare value. In any c
1655:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * values entered here form a boundary pallete. There are dedicated upper and lower boundary regist
1656:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * GLOBBOUND1 who will derive their values from this palette.
1657:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1658:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1659:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1660:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1661:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1662:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetBoundaries(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t boundary0, c
1663:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1664:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1665:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1666:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1667:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param selection The boundary value selected for \b boundary_value.
1668:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary_value  Boundary Value<BR>Range[0 - 4095]
1669:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1670:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1671:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1672:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1673:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs either the boundary 0 or boundary 1 for result comparison.\n\n This defines a range aga
1674:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * the result of a conversion can be compared. In the fast compare mode, the two boundaries provide
1675:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * capability to a compare value.
1676:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1677:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1678:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1679:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1680:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1681:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetIndividualBoundary(XMC_VADC_GLOBAL_t *const global_ptr,
1682:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                            const XMC_VADC_CHANNEL_BOUNDARY_t selection,
1683:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                            const uint16_t boundary_value); 
1684:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1685:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1686:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_AVAILABLE== 1U)
1687:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1688:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1689:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr   Constant pointer to the VADC module
1690:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param emuxif       The EMUX interface<BR>Range[0x0 - 0x1]
1691:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group        The VADC group which must be bound to the desired emux
1692:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1693:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1694:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1695:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1696:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Binds a VADC \a group to an EMUX interface specified in \a emuxif.<BR>\n
1697:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects which group's scan request source will control the EMUX interface (set of control select
1698:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * By passing \b group it would configure that group's scan request source to control the EMUX sele
1699:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \b emuxif.
1700:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1701:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1702:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1703:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1704:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BindGroupToEMux(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t emuxif, co
1705:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1706:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1707:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1708:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1709:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1710:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1711:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return uint32_t Complete global result register value GLOBRES
1712:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1713:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1714:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Retrieves the complete result from the global result register associated with the \a global_ptr.
1715:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * the result register GLOBRES for the validity of the data. If the validity is assured, data is fi
1716:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * the global result register, cached locally next and subsequently returned to the caller.
1717:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1718:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1719:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_GetResult()
1720:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1721:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GLOBAL_GetDetailedResult(XMC_VADC_GLOBAL_t *const global_ptr)
1722:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
1723:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_GetDetailedResult:Wrong Module Pointer", (global_ptr == VADC))
1724:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1725:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  return(global_ptr->GLOBRES);
1726:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
1727:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1728:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1729:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1730:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1731:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1732:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return XMC_VADC_RESULT_SIZE_t 16 bit result register value.<BR>
1733:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *         Range[0x0 - 0X0FFF]
1734:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1735:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1736:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Retrieves the conversion result from the global result register associated with the \a global_pt
1737:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * lightweight version of XMC_VADC_GLOBAL_GetDetailedResult(). The behavior is exactly the same, ju
1738:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * only the 16 bit numeric result returned back to the application instead of the complete GLOBRES 
1739:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1740:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1741:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_GetDetailedResult()
1742:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1743:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GLOBAL_GetResult(XMC_VADC_GLOBAL_t *const global_pt
1744:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
1745:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_GetResult:Wrong Module Pointer", (global_ptr == VADC))
1746:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1747:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((XMC_VADC_RESULT_SIZE_t)global_ptr->GLOBRES);
1748:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
1749:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1750:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1751:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1752:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1753:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param compare_val Compare value which the result of a conversion will be compared against.
1754:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *         <BR>Range[0x0 - 0X0FFF]
1755:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1756:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1757:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1758:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1759:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Set compare value in the global result register for fast compare mode.\n\n The result of a conve
1760:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * be compared to the compare value entered as part of \a compare_val. The prerequisite is that the
1761:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * with this global register must select an ICLASS which has the conversion mode configured as fast
1762:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @ref XMC_VADC_GLOBAL_GetCompareResult() after this API to
1763:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1764:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1765:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1766:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1767:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetCompareValue(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_RESULT_SIZ
1768:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1769:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1770:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1771:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1772:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return compare high or low. Refer @ref XMC_VADC_FAST_COMPARE_t enum
1773:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1774:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1775:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1776:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1777:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determines the result of fast compare operation.\n\n This API returns the result of fast compare
1778:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * the valid flag in the global result register GLOBRES is set.
1779:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1780:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1781:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1782:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1783:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** XMC_VADC_FAST_COMPARE_t XMC_VADC_GLOBAL_GetCompareResult(XMC_VADC_GLOBAL_t *const global_ptr);
1784:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1785:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1786:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1787:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr         Constant pointer to the VADC module
1788:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param event_type   Desired event that must be manually asserted
1789:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    Use the enum ::XMC_VADC_GLOBAL_EVENT_t to create a mask to be used with this 
1790:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1791:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1792:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1793:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Manually asserts an event that can lead to an interrupt.\n\n This API manually asserts the reque
1794:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * (Background request source event or a global result event) by setting the GLOBEVFLAG register wi
1795:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \a event_type.
1796:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1797:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1798:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1799:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1800:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1801:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_TriggerEvent(XMC_VADC_GLOBAL_t *const global_ptr, const uint32
1802:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
1803:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_TriggerEvent:Wrong Module Pointer", (global_ptr == VADC))
1804:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_TriggerEvent:Wrong Global Event", 
1805:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****             ((XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE == event_type) || (XMC_VADC_GLOBAL_EVENT_RESULT == 
1806:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1807:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG = event_type;
1808:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
1809:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1810:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1811:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1812:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1813:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param event_type Event that must be acknowledged
1814:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    Use the enum ::XMC_VADC_GLOBAL_EVENT_t to create a mask to be used with this 
1815:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1816:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1817:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1818:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1819:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Acknowledges an event that has been asserted manually or automatically.\n\n This API acknowledge
1820:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * by clearing GLOBEFLAG sticky flag.
1821:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1822:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1823:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1824:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1825:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_ClearEvent(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t
1826:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
1827:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClearEvent:Wrong Module Pointer", (global_ptr == VADC))
1828:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClearEvent:Wrong Global Event", 
1829:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****             ((XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE == event_type) || (XMC_VADC_GLOBAL_EVENT_RESULT == 
1830:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1831:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG = ((uint32_t)(event_type << (uint32_t)16));
1832:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
1833:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1834:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1835:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1836:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1837:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr The service request to which the global result event is connected. Refer @ref XMC_VADC
1838:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1839:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1840:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1841:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1842:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Binds the global result event to one of the 4 shared service requests.\n\n This API binds the g
1843:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  to one of the 4 module wide shared service requests .Sets GLOBEVNP register with the correspond
1844:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1845:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1846:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode()
1847:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1848:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetResultEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t
1849:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1850:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1851:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1852:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1853:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr The service request to which the global request source event is connected. Refer @ref 
1854:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1855:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1856:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1857:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1858:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Binds the background request source event to one of the 4 shared service requests.\n\n This API 
1859:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * request source event to one of the 4 module wide shared service requests. Sets GLOBEVNP register
1860:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * corresponding \a sr line.
1861:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1862:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1863:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SetResultEventInterruptNode()
1864:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1865:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC
1866:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1867:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
1868:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1869:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1870:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  config Struct consisting of various SHS related configurations.
1871:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1872:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1873:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1874:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1875:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure the basic SHS parameters.<BR>\n
1876:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would initialize the clock divider configuration, the analog reference selection and
1877:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * the calibration order for the Sample and Hold unit.
1878:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1879:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1880:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1881:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1882:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  void XMC_VADC_GLOBAL_SHS_Init(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, const XMC_VADC_GLOBAL_SHS_CONF
1883:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1884:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1885:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  /**
1886:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   * @param shs_ptr Constant pointer to the VADC Sample and hold module
1887:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   * @param  config Struct consisting of various step configurations.
1888:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1889:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   * @return None
1890:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1891:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Description:</b><br>
1892:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   * Configures the stepper sequence for the converter.<BR>\n
1893:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   * Stepper of the SHS can be configured to take up a specific sequence of groups for conversion.
1894:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   * The stepper sequence is configured using this API.
1895:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1896:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Related APIs:</b><BR>
1897:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   * None.
1898:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   */
1899:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetStepperSequence(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1900:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                              const XMC_VADC_GLOBAL_SHS_STEP_CONFIG_
1901:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  {
1902:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong SHS Pointer",
1903:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
1904:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong config pointer",
1905:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****              (config == (XMC_VADC_GLOBAL_SHS_STEP_CONFIG_t*)NULL))
1906:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1907:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->STEPCFG = (uint32_t) config->stepcfg;
1908:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  }
1909:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1910:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1911:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  /**
1912:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   * @param shs_ptr Constant pointer to the VADC Sample and hold module
1913:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1914:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   * @return bool returns true if the analog converter is operable
1915:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   *              returns false if the analog converter is powered down
1916:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1917:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Description:</b><br>
1918:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   * Returns the converter status.<BR>\n
1919:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   * Returns the ANRDY bit field of the SHSCFG register.
1920:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1921:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Related APIs:</b><BR>
1922:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   * None.
1923:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   */
1924:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  __STATIC_INLINE bool XMC_VADC_GLOBAL_SHS_IsConverterReady(XMC_VADC_GLOBAL_SHS_t *const shs_ptr)
1925:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  {
1926:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_IsConverterReady:Wrong SHS Pointer",(shs_ptr == (XMC_VADC_GLOBAL_
1927:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1928:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   return((bool)((shs_ptr->SHSCFG >> (uint32_t)SHS_SHSCFG_ANRDY_Pos) & (uint32_t)0x1));
1929:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  }
1930:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1931:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1932:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1933:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1934:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be enabled.<BR>Range: [0x0
1935:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1936:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1937:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1938:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1939:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the Accelerated timing mode.<BR>\n
1940:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is needed when a switch from compatible mode to accelerated mode of conversion is neede
1941:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * this mode the ADC module will convert the input depending on the value stored in the SST bit of 
1942:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would configure the accelerated mode in the SHS0_TIMCFG0 and SHS0_TIMCFG1 registers.
1943:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1944:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1945:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1946:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1947:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,XMC_VADC_GROUP_
1948:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1949:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1950:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1951:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be disabled.<BR>Range: [0x
1952:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1953:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1954:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1955:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1956:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the Accelerated timing mode.<BR>\n
1957:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is needed when a switch from accelerated mode to compatible mode of conversion is neede
1958:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would clear the accelerated mode in the SHS0_TIMCFG0 and SHS0_TIMCFG1 registers.
1959:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1960:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1961:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1962:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1963:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,XMC_VADC_GROUP
1964:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1965:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1966:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1967:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be enabled.<BR>Range: [0x0
1968:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sst_value Value of short sample time that needs to be configured.<BR>
1969:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                  Range: [0x0 to 0x3F]
1970:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1971:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1972:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1973:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1974:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the Accelerated timing mode sample time.<BR>\n
1975:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is needed when a switch from compatible mode to accelerated mode of conversion is neede
1976:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Accelerated mode the ADC module will convert the input depending on the value stored in the SST 
1977:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  SHS0_TIMCFGx. This API would configure the shot sample time either in SHS0_TIMCFG0.SST or SHS0_
1978:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1979:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1980:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1981:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1982:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetShortSampleTime(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1983:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                             XMC_VADC_GROUP_INDEX_t group_num,
1984:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                             uint8_t sst_value);
1985:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
1986:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1987:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1988:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1989:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  divs_value The clock divider value that is possible
1990:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    <BR>Range:[0x0 to 0xF]
1991:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1992:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1993:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1994:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure Sample and hold clock divider value.<BR>\n
1995:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would initialize the clock divider configuration. This determines the frequency of conversio
1996:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * of the Sample and hold converter.
1997:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1998:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1999:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2000:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2001:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetClockDivider(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, uint
2002:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
2003:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetClockDivider:Wrong SHS Pointer",
2004:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2005:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetClockDivider:Wrong divide factor selected",
2006:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****              (divs_value < (uint32_t)0x10))
2007:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2008:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->SHSCFG =  (shs_ptr->SHSCFG & (~(uint32_t)SHS_SHSCFG_DIVS_Msk)) | (uint32_t)SHS_SHSCFG_SC
2009:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->SHSCFG |=  ((uint32_t)divs_value << SHS_SHSCFG_DIVS_Pos) | (uint32_t)SHS_SHSCFG_SCWC_Msk
2010:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
2011:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2012:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2013:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2014:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  gain_value gain value possible
2015:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    Range:[0x0 to 0x3]
2016:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2017:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  ch_num The channel number for which the gain has to be configured
2018:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2019:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2020:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2021:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure the gain value for SHS.<BR>\n
2022:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would set the gain factor for a selected channel.
2023:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2024:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2025:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2026:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2027:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetGainFactor(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2028:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                        uint8_t gain_value,
2029:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                        XMC_VADC_GROUP_INDEX_t group_num,
2030:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                        uint8_t ch_num);
2031:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2032:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
2033:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2034:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2035:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  max_calibration_time calibration time
2036:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                              Range:[0x0 to 0x3F]
2037:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2038:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2039:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2040:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure the Maximum calibration timing.<BR>\n
2041:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would initialize the Maximum time after which the calibration should occur. If no adc conver
2042:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * occur during this duration then the calibration would run irrespective of conversions. The max t
2043:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * converter can go without a calibration is set in this API.
2044:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2045:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2046:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2047:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2048:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetMaxCalTime(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2049:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                        uint32_t max_calibration_time)
2050:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
2051:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetMaxCalTime:Wrong SHS Pointer",
2052:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2053:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2054:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->CALCTR &= ~((uint32_t)SHS_CALCTR_CALMAX_Msk);
2055:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->CALCTR |=  ((uint32_t)max_calibration_time << SHS_CALCTR_CALMAX_Pos);
2056:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
2057:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2058:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2059:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2060:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2061:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2062:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2063:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2064:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2065:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enable the Gain and offset calibration.<BR>\n
2066:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enable the gain and offset calibration for all the Sample and hold units.
2067:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2068:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2069:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations()<BR>.
2070:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2071:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2072:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          XMC_VADC_GROUP_INDEX_t group_num);
2073:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2074:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2075:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2076:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2077:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2078:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2079:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2080:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the Gain and offset calibration.<BR>\n
2081:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the gain and offset calibration for all the Sample and hold units.
2082:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2083:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2084:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2085:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2086:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2087:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                           XMC_VADC_GROUP_INDEX_t group_num);
2088:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2089:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2090:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2091:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2092:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  gain_level The gain level whose calibration value has to read.
2093:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2094:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2095:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2096:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Read the calibration value for the selected gain level.<BR>\n
2097:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each gain value has a offset calibration value, this API would return the offset calibration val
2098:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * selected gain level. This is applicable for all the channels in the group that use the particula
2099:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2100:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2101:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue()<BR>.
2102:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2103:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** uint8_t XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2104:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_GROUP_INDEX_t group_num,
2105:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_SHS_GAIN_LEVEL_t gain_level);
2106:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2107:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2108:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2109:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2110:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  gain_level The gain level whose calibration value has to read.
2111:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  offset_calibration_value The offset calibration value to be set.
2112:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2113:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2114:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2115:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Set the calibration value for the selected gain level.<BR>\n
2116:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each gain value has a offset calibration value, this API would set the offset value of the selec
2117:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2118:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2119:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue()<BR>.
2120:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2121:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2122:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                    XMC_VADC_GROUP_INDEX_t group_num,
2123:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                    XMC_VADC_SHS_GAIN_LEVEL_t gain_level,
2124:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                    uint8_t offset_calibration_value);
2125:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2126:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2127:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2128:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2129:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2130:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2131:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  ch_num Channel number for which the configurations applies
2132:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2133:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2134:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2135:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the delta sigma loop of the SHS.<BR>\n
2136:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * There are 2 Delta-Sigma loops that can be configured. This API would configure the loop (loop_se
2137:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * with the appropriate group_num and channel_num.
2138:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the SHS_LOOP bit fields.
2139:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2140:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2141:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop()<BR>.
2142:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2143:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2144:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                            XMC_VADC_GROUP_INDEX_t group_num,
2145:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                            XMC_VADC_SHS_LOOP_CH_t loop_select,
2146:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                            uint8_t ch_num);
2147:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2148:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2149:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2150:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2151:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2152:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2153:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2154:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enable the selected Delta-Sigma loop.<BR>\n
2155:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the SHS_LOOP.LPENx bit field.
2156:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2157:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2158:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop()<BR>.
2159:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2160:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2161:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2162:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               XMC_VADC_SHS_LOOP_CH_t loop_select)
2163:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
2164:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop:Wrong SHS Pointer",
2165:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2166:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop:Wrong Delta sigma loop selected",
2167:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****              (loop_select == XMC_VADC_SHS_LOOP_CH_0)||(loop_select == XMC_VADC_SHS_LOOP_CH_1))
2168:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2169:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->LOOP |= (uint32_t)SHS_LOOP_LPEN0_Msk << (uint32_t)loop_select;
2170:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
2171:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2172:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2173:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2174:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2175:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2176:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2177:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2178:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the selected delta sigma loop.<BR>\n
2179:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the SHS_LOOP.LPENx bit field.
2180:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2181:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2182:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop()<BR>.
2183:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2184:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2185:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr
2186:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                XMC_VADC_SHS_LOOP_CH_t loop_select)
2187:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
2188:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop:Wrong SHS Pointer",
2189:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2190:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop:Wrong Delta sigma loop selected",
2191:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****              (loop_select == XMC_VADC_SHS_LOOP_CH_0)||(loop_select == XMC_VADC_SHS_LOOP_CH_1))
2192:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2193:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->LOOP &= ~((uint32_t)SHS_LOOP_LPEN0_Msk << (uint32_t)loop_select);
2194:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2195:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
2196:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2197:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2198:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
2199:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2200:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2201:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr   Constant pointer to the VADC group.
2202:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config Pointer to the initialization data structure
2203:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2204:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2205:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2206:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2207:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the VADC group module with the associated configuration structure pointed by \a conf
2208:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * initializes the group specified as part of the \a group_ptr. It initializes group conversion cla
2209:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * configuration , boundary configuration by setting GxICLASS,GxARBCFG,GxBOUND, registers. It also
2210:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * configures the EMUX control register if applicable. Refer related API's to change the configurat
2211:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  program.
2212:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2213:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2214:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_InputClassInit()<BR>
2215:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_SetPowerMode()<BR>
2216:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_SetBoundaries()<BR>
2217:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ExternalMuxControlInit()<BR>
2218:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2219:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_Init(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config);
2220:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2221:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2222:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2223:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group.
2224:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  group related conversion class parameter structure
2225:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param conv_type Use direct channels or EMUX channels. Refer @ref XMC_VADC_GROUP_CONV_t enum
2226:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param set_num Conversion class set<BR>
2227:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                Range[0x0, 0x1]
2228:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2229:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2230:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2231:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2232:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up the conversion settings for vadc group resource associated with \a config structure. It 
2233:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * conversion class properties like sampling time and resolution for selected \a conv_type channels
2234:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * the G_ICLASS register specified by \a set_num with the required settings.
2235:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2236:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2237:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2238:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_Init()
2239:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2240:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2241:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t 
2242:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                    const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num);
2243:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2244:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2245:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2246:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC Group which must be set as a slave
2247:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param master_grp The master group number<BR>
2248:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x3]
2249:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param slave_group The slave group number<BR>
2250:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x3]
2251:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2252:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2253:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2254:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2255:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures a VADC Group as a slave group.\n\n Conversion of identically numbered channels across
2256:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * synchronized. For example, when the trigger to convert CH-1 of Group-2 is received, it is possib
2257:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * simultaneously request conversion of CH-1 of Group-0 and Group-3. Group-2 in this example is the
2258:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * master group while Groups-0 and 3 are the slave groups. It uses the SYNCCTR register for the con
2259:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2260:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2261:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_SetSyncMaster()<BR>
2262:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR>
2263:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_EnableChannelSyncRequest()<BR>
2264:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2265:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2266:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetSyncSlave(XMC_VADC_GROUP_t *const group_ptr, uint32_t master_grp, uint32_t s
2267:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2268:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2269:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2270:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC Group.
2271:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param power_mode  Desired power mode
2272:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2273:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2274:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2275:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2276:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the power mode of a VADC group.\n\n For a VADC group to actually convert an analog si
2277:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * converter must be turned on.
2278:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2279:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2280:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2281:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2282:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_
2283:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2284:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2285:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2286:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group.
2287:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2288:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2289:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2290:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2291:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures a VADC Group as a master group.<BR>\n
2292:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Conversion of identically numbered channels across groups can be
2293:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * synchronized. For example, when the trigger to convert CH-1 of Group-2 is received, it is possib
2294:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * request conversion of CH-1 of Group-0 and Group-3. Group-2 in this example is therefore the mast
2295:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Groups-0 and 3 are the slave groups.
2296:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2297:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2298:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2299:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2300:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetSyncMaster(XMC_VADC_GROUP_t *const group_ptr);
2301:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2302:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2303:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2304:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr       Pointer to the master VADC Group
2305:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param slave_group  The slave VADC Group number
2306:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                     <BR>Range: [0x0 to 0x3]
2307:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2308:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2309:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2310:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the ready signal for master group.<BR>\n
2311:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would read the \b slave_group number and determine which EVAL configuration to apply fo
2312:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * slave set. Checks the readiness of slaves in synchronized conversions. Conversion of identically
2313:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * across groups can be synchronized. For example, when the trigger to convert CH-1 of Group-2 is r
2314:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * possible to simultaneously request conversion of CH-1 of Group-0 and Group-3. Group-2 in this ex
2315:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * therefore the master group while Groups-0 and 3 are the slave groups. Before the master can requ
2316:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * for synchronized conversion, it has the option of checking the readiness of the slaves.
2317:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2318:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2319:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR> XMC_VADC_GROUP_SetSyncMaster()
2320:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2321:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_CheckSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group);
2322:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2323:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2324:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2325:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the master VADC Group
2326:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param slave_group  The slave VADC Group number
2327:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2328:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2329:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2330:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Clears the ready signal for master group.<BR>\n
2331:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Ignores the readiness of slaves in synchronized conversions.This API would read the \b slave_gro
2332:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * determine which EVAL configuration to apply for the given master slave set. Then clears the conf
2333:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is called when the master should issue the conversion request without waiting for the s
2334:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * assert a ready signal. The ready signal is asserted by the slave group(s) when the conversion is
2335:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * in these channels.
2336:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2337:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2338:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_SetSyncMaster()<BR>
2339:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2340:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_IgnoreSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group);
2341:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2342:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2343:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2344:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the VADC Group waiting for ready signal
2345:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param eval_waiting_group  The VADC Group which expects a ready signal to start it's conversion.
2346:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param eval_origin_group  The VADC Group from which the eval_waiting_group will expect a ready s
2347:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2348:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2349:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2350:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets the ready signal in the eval_waiting_group .<BR>\n
2351:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * For Synchronized conversion all the slaves participating need to configure the ready signal.
2352:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A slave group will also need to configure the ready signals coming from the other slave groups.
2353:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the Sync.slave's EVAL Bits (GxSYNCTR.EVALy).
2354:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2355:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2356:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR>
2357:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2358:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetSyncSlaveReadySignal(XMC_VADC_GROUP_t *const group_ptr,
2359:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                             uint32_t eval_waiting_group,
2360:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                             uint32_t eval_origin_group);
2361:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2362:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2363:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2364:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the VADC Group
2365:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2366:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *         uint32_t EVAL bits for the group
2367:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2368:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2369:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Get the Eval bits of the group.<BR>\n
2370:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * For Synchronized conversion the master's ready signal configuration must be copied onto the slav
2371:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would return the Sync EVAL Bits (GxSYNCTR.EVALy) which can be used to set in 
2372:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2373:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2374:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR>
2375:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2376:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GROUP_GetSyncReadySignal(XMC_VADC_GROUP_t *const group_ptr)
2377:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
2378:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   uint32_t eval_mask;
2379:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetSyncReadySignal:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
2380:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2381:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
2382:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk | VADC_G_SYNCTR_EVALR2_Msk | VADC_G_SYNCTR_EVALR3_Msk;
2383:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #else
2384:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk;
2385:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2386:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   return( group_ptr->SYNCTR & eval_mask);
2387:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
2388:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2389:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2390:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the VADC Group
2391:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param eval_mask  mask to configure the eval bits
2392:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Use XMC_VADC_SYNCTR_EVAL_t to create the mask.
2393:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2394:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2395:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2396:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Set the Eval bits of the group.<BR>\n
2397:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * For Synchronized conversion the master's ready signal configuration must be copied onto the slav
2398:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the Sync EVAL Bits (GxSYNCTR.EVALy).
2399:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2400:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2401:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR>
2402:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2403:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_SetSyncReadySignal(XMC_VADC_GROUP_t *const group_ptr, uint32_t 
2404:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
2405:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   uint32_t eval_mask;
2406:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncReadySignal:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
2407:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2408:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
2409:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk | VADC_G_SYNCTR_EVALR2_Msk | VADC_G_SYNCTR_EVALR3_Msk;
2410:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #else
2411:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk;
2412:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2413:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SYNCTR &= ~(eval_mask);
2414:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SYNCTR |= mask;
2415:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
2416:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2417:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2418:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2419:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr   Constant pointer to the master VADC Group
2420:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num  Channel whose conversion triggers conversion in slave groups
2421:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2422:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2423:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2424:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up a channel for synchronized conversion.\n\n Conversion of identically numbered channels a
2425:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * can be synchronized. For example, when the trigger to
2426:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * convert CH-1 of Group-2 is received, it is possible to simultaneously request conversion of CH-1
2427:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Group-3. Group-2 in this example is therefore the master group while Groups-0 and 3 are the slav
2428:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Before the master can request its slaves for synchronized conversion, it has the option of check
2429:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * of the slaves.
2430:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2431:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2432:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2433:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2434:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_EnableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_n
2435:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2436:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2437:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2438:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr       Pointer to the master VADC Group
2439:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     Channel whose conversion triggers conversion in slave groups
2440:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2441:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2442:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2443:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the synchronization request for the particular channel specified as ch_num. To enable th
2444:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * call the API @ref XMC_VADC_GROUP_EnableChannelSyncRequest().
2445:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2446:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2447:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2448:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2449:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_DisableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_
2450:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2451:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2452:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2453:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group.
2454:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2455:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return retuns IDLE if converter is free else returns busy. Refer @ref XMC_VADC_GROUP_STATE_t en
2456:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2457:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2458:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Checks the live status of the analog to digital converter. The converter can either idle doing n
2459:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * sampling + converting.
2460:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2461:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2462:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2463:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2464:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** XMC_VADC_GROUP_STATE_t XMC_VADC_GROUP_IsConverterBusy(XMC_VADC_GROUP_t *const group_ptr);
2465:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2466:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2467:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2468:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group whose global boundary registers are to be pr
2469:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary0  Boundary-0 Value<BR>
2470:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x0FFF]
2471:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary1  Boundary-1 Value<BR>
2472:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x0FFF]
2473:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2474:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2475:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2476:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2477:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs the boundaries with \a boundary0 and boundary1 for result comparison.\n\n These two bou
2478:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * absolute boundaries. They defines a range against which the result of a conversion can be compar
2479:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * fast compare mode, the two boundaries provide hysteresis capability to a compare value. In any c
2480:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * values entered here form a boundary pallete. There are dedicated upper and lower boundary regist
2481:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * G_BOUND1 who will derive their values from this palette.
2482:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2483:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2484:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2485:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2486:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2487:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetBoundaries(XMC_VADC_GROUP_t *const group_ptr, 
2488:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                   const uint32_t boundary0, 
2489:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                   const uint32_t boundary1);
2490:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2491:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2492:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2493:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param selection The boundary value selected for \b boundary_value.
2494:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary_value Select the boundary value.
2495:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2496:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2497:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2498:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2499:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs the boundary with \a boundary_value for result comparison.\n\n This defines a range aga
2500:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * the result of a conversion can be compared. In the fast compare mode, the two boundaries provide
2501:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * capability to a compare value.
2502:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2503:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2504:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2505:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2506:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetIndividualBoundary(XMC_VADC_GROUP_t *const group_ptr,
2507:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const XMC_VADC_CHANNEL_BOUNDARY_t selection,
2508:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const uint16_t boundary_value); 
2509:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2510:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2511:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2512:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr_num   The service request number (0 through 3)
2513:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param type     IRQ type (Kernel specific interrupt vs Module wide shared interrupt )
2514:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2515:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2516:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2517:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Activates a Service Request line(manually trigger).<BR>\n
2518:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * VADC provides few SR lines for each group and a few more which is shared across all the groups.
2519:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * These SR lines can be connected to an NVIC node which in-turn would generate an interrupt.
2520:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would manually trigger the given SR line. Could be used for evaluation and testing purp
2521:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2522:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2523:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2524:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2525:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_TriggerServiceRequest(XMC_VADC_GROUP_t *const group_ptr, 
2526:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const uint32_t sr_num, 
2527:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const XMC_VADC_GROUP_IRQ_t type);
2528:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2529:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2530:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2531:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC group
2532:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param emux_cfg   EMUX configuration structure
2533:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2534:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2535:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2536:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures group EMUX parameters associated with the \a emux_cfg configuration structure.\n\n An
2537:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * interface allows additional channels to be connected to a VADC group. The conversion properties
2538:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * of such channels can be different from the standard channels which are directly connected to the
2539:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API configures conversion properties of channels connected via EMUX interface.
2540:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2541:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2542:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2543:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2544:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
2545:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                            const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
2546:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
2547:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   uint32_t   emux_config;
2548:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2549:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
2550:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2551:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_P
2552:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****               ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
2553:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2554:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->EMUXCTR  = emux_config;
2555:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
2556:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                 ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
2557:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                 ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
2558:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2559:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
2560:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_P
2561:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2562:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
2563:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
2564:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2565:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #if XMC_VADC_BOUNDARY_FLAG_SELECT == 1U
2566:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2567:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2568:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2569:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary_flag_num The Boundary flag for which the interrupt node needs to be configured.
2570:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                          Range: [0x0 to 0x3]
2571:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param node    Service Request node Id
2572:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2573:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2574:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2575:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2576:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Connects the boundary event to the SR line of VADC or to a common boundary flag.<BR>\n
2577:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will connect a Service Request line(SR) to a boundary event. Hence to get a interrupt o
2578:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Service request line one has to enable the required NVIC node.  A call to this API would configu
2579:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * field GxBFLNP.BFLxNP.
2580:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2581:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2582:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2583:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2584:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetBoundaryEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
2585:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                   const uint8_t boundary_flag_num,
2586:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                   const XMC_VADC_BOUNDARY_NODE_t node);
2587:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2588:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2589:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2590:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2591:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2592:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    uint32_t The complete GxALIAS register
2593:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2594:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2595:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the ALIAS values.\n The ALIAS value that is configured for Channel-0 and channel-1 are r
2596:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2597:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2598:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2599:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2600:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GROUP_GetAlias(XMC_VADC_GROUP_t *const group_ptr)
2601:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
2602:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetAliasWrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
2603:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   return (group_ptr->ALIAS);
2604:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
2605:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2606:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2607:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2608:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param conv_class  conversion property to be extracted
2609:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2610:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    XMC_VADC_GROUP_CLASS_t The complete GxICLASSy register
2611:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2612:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2613:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the input class configuration values.\n
2614:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This returns the sampling time configuration and resolution configured in the appropriate group 
2615:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \b conv_class. A call to this API would return the register GxICLASSy.
2616:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2617:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2618:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2619:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2620:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE XMC_VADC_GROUP_CLASS_t XMC_VADC_GROUP_GetInputClass(XMC_VADC_GROUP_t *const group_p
2621:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                     const XMC_VADC_CHANNEL_CONV_t c
2622:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
2623:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CLASS_t input_value;
2624:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetInputClass:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr
2625:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetInputClass:Wrong conv_class selected", 
2626:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****              (XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 == conv_class) || (XMC_VADC_CHANNEL_CONV_GROUP_CLA
2627:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2628:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   input_value.g_iclass0 = (uint32_t) 0xFFFFFFFF;
2629:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   if ((XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 == conv_class) || (XMC_VADC_CHANNEL_CONV_GROUP_CLASS1 == 
2630:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   {
2631:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     input_value.g_iclass0 = group_ptr->ICLASS[(uint32_t)conv_class];
2632:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   }
2633:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2634:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   return (input_value);
2635:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
2636:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2637:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2638:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GSCAN_AVAILABLE == 1U)
2639:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2640:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Pointer to the VADC group
2641:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config     Pointer to Scan configuration
2642:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2643:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2644:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2645:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the VADC SCAN functional block.<BR>\n
2646:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * The GROUP SCAN request source functional block converts channels sequentially starting with the 
2647:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * channel to the lowest. Channels must register themselves as being part of the the scan sequence.
2648:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API will first disable the arbitration slot for queue (XMC_VADC_GROUP_ScanEnableA
2649:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * and then it would configure all the related registers with the required configuration values.
2650:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * The arbitration slot is re-enabled at the end of init by invoking XMC_VADC_GROUP_ScanDisableArbi
2651:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxARBPR, GxASCTRL, GxASMR needed scan request s
2652:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2653:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2654:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableArbitrationSlot()<BR> XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR>
2655:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR> XMC_VADC_GROUP_ScanSelectGating()<BR>
2656:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2657:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_SCAN_CONFIG_t *confi
2658:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2659:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2660:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2661:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2662:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2663:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2664:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2665:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables arbitration slot of the scan request source.<BR>\n
2666:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the scan request source must have its conversion request considered by the arbiter, it must p
2667:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the scan channel can only be converted when 
2668:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the scan slot. Thus this must be enabled if any conversion need to take place.
2669:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN1.
2670:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2671:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2672:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR>
2673:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2674:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
2675:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
2676:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
2677:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN1_Msk;
2678:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
2679:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2680:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2681:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2682:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2683:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2684:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2685:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2686:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables arbitration slot of the scan request source.<BR>\n
2687:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the scan request source must have its conversion request considered by the arbiter, it must p
2688:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the scan channel can only be converted when 
2689:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the scan slot.A call to this API will lead to all conversions request by scan to be blocked.
2690:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN1.
2691:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2692:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2693:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableArbitrationSlot()<BR>
2694:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2695:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
2696:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
2697:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
2698:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN1_Msk);
2699:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
2700:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2701:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2702:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2703:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2704:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    bool  returns true if the arbitration is enabled else returns false.
2705:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2706:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2707:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the arbitration status of the scan request source.<BR>\n
2708:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the scan request source must have its conversion request considered by the arbiter, it must p
2709:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the scan channel can only be converted when 
2710:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the scan slot. A call to this API would return the status of the arbitration slot of scan.
2711:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would read the register bit field GxARBPR.ASEN1.
2712:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2713:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2714:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableArbitrationSlot(),<BR>  XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR
2715:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2716:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled(XMC_VADC_GROUP_t *const group_ptr)
2717:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
2718:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled:Wrong Group Pointer", XMC_VADC_CHECK_GROU
2719:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2720:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((group_ptr->ARBPR & (uint32_t)VADC_G_ARBPR_ASEN1_Msk) >> VADC_G_ARBPR_ASEN1_Pos);
2721:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
2722:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2723:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2724:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2725:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_input  Choice of the input earmarked as a trigger line
2726:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2727:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2728:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2729:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2730:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal for scan request source.<BR>\n
2731:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A scan request source will raise conversion request only if there were either a request from app
2732:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
2733:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the scan request source.
2734:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
2735:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASCTRL.XTSEL.
2736:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2737:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2738:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectGating()<BR> XMC_VADC_GROUP_ScanEnableExternalTrigger()<BR>
2739:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2740:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectTrigger(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_TRIGGER_INPUT_SEL
2741:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2742:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2743:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2744:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2745:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_edge  Trigger edge selection
2746:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2747:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2748:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2749:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2750:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the trigger edge for scan request source.<BR>\n
2751:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A scan request source will raise conversion request only if there were either a request from app
2752:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 possible trigger edges. This is
2753:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the scan request source.
2754:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASCTRL.XTMODE.
2755:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2756:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2757:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR>
2758:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2759:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGER
2760:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2761:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2762:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2763:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param gating_input  Module input signal meant to be selected as gating input
2764:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2765:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2766:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2767:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2768:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Gating signal for scan request source.<BR>\n
2769:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
2770:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the scan request source o
2771:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxASMR.ENGT has to be config
2772:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field GxAS
2773:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2774:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2775:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR>
2776:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2777:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectGating(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_GATE_INPUT_SELECT_
2778:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2779:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2780:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2781:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the scan request source
2782:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2783:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2784:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2785:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2786:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the gating mode of scan request source.<BR>\n
2787:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
2788:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
2789:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
2790:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2791:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2792:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ScanSelectGating();
2793:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2794:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanSetGatingMode(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_G
2795:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
2796:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetGatingMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
2797:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_GATEMODE
2798:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2799:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Clear the existing gate configuration */
2800:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= (uint32_t) (~((uint32_t)VADC_G_ASMR_ENGT_Msk));
2801:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Set the new gating mode */
2802:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)((uint32_t)mode_sel << VADC_G_ASMR_ENGT_Pos);
2803:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
2804:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2805:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2806:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2807:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2808:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2809:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2810:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2811:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables continuous conversion mode.<BR>\n
2812:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a scan request source to generate conversion request, either a hardware trigger or
2813:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
2814:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a scan request s
2815:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
2816:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. Every request source event will cause a load event to occur. A call to this API would 
2817:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * the register bit field GxASMR.SCAN.
2818:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2819:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2820:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanDisableContinuousMode()<BR>
2821:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2822:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableContinuousMode(XMC_VADC_GROUP_t *const group_ptr)
2823:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
2824:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableContinuousMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
2825:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_SCAN_Msk;
2826:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
2827:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2828:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2829:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2830:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2831:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2832:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2833:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2834:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables continuous conversion mode.<BR>\n
2835:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a scan request source to generate conversion request, either a hardware trigger or
2836:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
2837:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a scan request s
2838:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
2839:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. By invoking this feature the Autoscan mode of operations is disabled. A call to this A
2840:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * the register bit field GxASMR.SCAN.
2841:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2842:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2843:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableContinuousMode()<BR>
2844:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2845:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableContinuousMode(XMC_VADC_GROUP_t *const group_ptr)
2846:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
2847:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableContinuousMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
2848:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_SCAN_Msk);
2849:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
2850:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2851:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2852:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2853:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2854:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2855:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2856:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2857:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>\n
2858:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
2859:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * the scan unit to generate a conversion request to the analog converter. It is assumed that the s
2860:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * been filled up with entries. A call to this API would configure the register bit field GxASMR.LD
2861:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2862:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2863:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2864:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2865:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanTriggerConversion(XMC_VADC_GROUP_t *const group_ptr)
2866:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
2867:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanTriggerConversion:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
2868:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_LDEV_Msk;
2869:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
2870:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2871:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2872:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2873:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2874:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2875:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2876:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2877:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Aborts an ongoing scan sequence conversion.<BR>\n
2878:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * An ongoing sequence can be aborted at any time. The scan unit picks the pending channels one by 
2879:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * pending register and requests for their conversion. This API essentially clears the channel pend
2880:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * creating an illusion that there are no more channels left in the sequence.
2881:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxASMR, GxASCTRL, GxARBPR to achieve the sequen
2882:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2883:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2884:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2885:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2886:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSequenceAbort(XMC_VADC_GROUP_t *const group_ptr);
2887:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2888:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2889:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2890:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The channel meant to be added to scan sequence
2891:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
2892:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2893:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2894:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2895:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2896:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds a channel to the scan sequence.<BR>\n
2897:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a new single channel into the scan request source. This will be added to
2898:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channel will be part of the conversion sequence when the next load event occ
2899:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of GxASSEL.
2900:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2901:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2902:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanAddMultipleChannels()<BR>
2903:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2904:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanAddChannelToSequence(XMC_VADC_GROUP_t *const group_ptr, con
2905:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
2906:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("VADC_GSCAN_AddSingleChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr)
2907:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanAddChannelToSequence:Wrong Channel Number", 
2908:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
2909:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASSEL |= (uint32_t)((uint32_t)1 << ch_num);
2910:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
2911:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2912:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2913:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2914:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_mask    Mask word indicating channels which form part of scan conversion sequence
2915:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Bit location 0/1/2/3/4/5/6/7 represents channels-0/1/2/3/4/5/6/7 respectively.
2916:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   To Add the channel to the scan sequence enable the respective bit.
2917:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Passing a 0x0 will clear all the selected channels
2918:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0xFF]
2919:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2920:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2921:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2922:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2923:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds multiple channels to the scan sequence.<BR>\n
2924:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a multiple channels into the scan request source. This will be added to 
2925:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channels will be a part of the conversion sequence when the next load event 
2926:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of GxASSEL.
2927:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2928:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2929:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanAddChannelToSequence()<BR>
2930:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2931:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanAddMultipleChannels(XMC_VADC_GROUP_t *const group_ptr, cons
2932:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
2933:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanAddMultipleChannels:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR
2934:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASSEL = ch_mask;
2935:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
2936:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2937:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2938:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2939:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The channel being audited for completion of conversion
2940:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
2941:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2942:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *     bool   returns true if the channel is pending conversion else returns false
2943:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2944:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2945:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determine if the channel is pending for conversion.<BR>\n
2946:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will check if the Channel in question is awaiting conversion in the current arbitration
2947:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
2948:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. This API would return true
2949:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the channel is found in the pending register (GxASPND).
2950:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2951:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2952:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanGetNumChannelsPending()<BR>
2953:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2954:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_ScanIsChannelPending(XMC_VADC_GROUP_t *const group_ptr, const u
2955:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
2956:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2957:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanIsChannelPending:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
2958:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanIsChannelPending:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_C
2959:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2960:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   return( (bool)((uint32_t)(group_ptr->ASPND >> ch_num) & 1U));
2961:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
2962:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2963:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2964:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_ptr     Constant pointer to the VADC group
2965:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return  <BR>
2966:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *   uint32_t   Returns the total channels pending for conversion.
2967:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *              <BR>Range: [0x0 to 0x8]
2968:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2969:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2970:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the total number of pending channels.<BR>\n
2971:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will read the pending channels register and will return the number of channels that are
2972:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
2973:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. When the API is called it 
2974:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * return the total number of channels pending (GxASPND).
2975:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2976:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2977:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanIsChannelPending()<BR>
2978:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2979:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** uint32_t XMC_VADC_GROUP_ScanGetNumChannelsPending(XMC_VADC_GROUP_t *const group_ptr);
2980:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
2981:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2982:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2983:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2984:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2985:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2986:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2987:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Manually asserts the conversion complete request source event.<BR>\n
2988:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will set the request source event for scan. This will trigger a interrupt if the
2989:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * service node pointer for the scan has been configured.
2990:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxSEFLAG.SEV1.
2991:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2992:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2993:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2994:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2995:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanTriggerReqSrcEvent(XMC_VADC_GROUP_t *const group_ptr)
2996:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
2997:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanTriggerReqSrcEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
2998:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SEFLAG    |= (uint32_t)VADC_G_SEFLAG_SEV1_Msk;
2999:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
3000:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3001:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3002:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3003:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3004:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3005:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3006:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3007:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Acknowledges the scan conversion complete request source event.<BR>\n
3008:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will clear the request source event that occurred. This will clear a interrupt if it wa
3009:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxSEFLAG.SEV1.
3010:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3011:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3012:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanTriggerReqSrcEvent()<BR>
3013:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3014:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanClearReqSrcEvent(XMC_VADC_GROUP_t *const group_ptr)
3015:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
3016:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanClearReqSrcEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
3017:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SEFCLR |= (uint32_t)VADC_G_SEFCLR_SEV1_Msk;
3018:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
3019:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3020:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3021:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3022:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3023:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *   bool   returns true if the service request event is raised.
3024:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *          returns false if the service request event was not raised.
3025:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3026:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3027:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determines if the request source event is asserted.<BR>
3028:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will get the status of the scan request source event. Will return a true
3029:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the event has occurred for scan. A call to this API would access the register bit field GxSEF
3030:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3031:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3032:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3033:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3034:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_ScanGetReqSrcEventStatus(XMC_VADC_GROUP_t *const group_ptr)
3035:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
3036:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GSCAN_GetRSEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
3037:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   return( (bool)(group_ptr->SEFLAG & (uint32_t)VADC_G_SEFLAG_SEV1_Msk));
3038:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
3039:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3040:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3041:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
3042:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr    Service Request Id
3043:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3044:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3045:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3046:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3047:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Connects the scan request source event to the SR line of VADC.<BR>\n
3048:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will connect a Service Request line(SR) to a scan request source event. Hence to get a 
3049:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Service request line one has to enable the required NVIC node.  A call to this API would configu
3050:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * field GxSEVNP.SEV1NP .
3051:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3052:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3053:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3054:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3055:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VA
3056:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3057:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3058:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3059:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3060:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3061:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3062:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3063:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the trigger for scan request source.<BR>\n
3064:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API, the trigger signal will be activated for the scan request source. The trigger
3065:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * edge will be selected from the ASCTRL register. The Selection of a input will be done by
3066:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ScanSelectTrigger(). A call to this API would configure the register bit field Gx
3067:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3068:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3069:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR> XMC_VADC_GROUP_ScanDisableExternalTrigger()<BR>
3070:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3071:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableExternalTrigger(XMC_VADC_GROUP_t *const group_ptr)
3072:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
3073:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableExternalTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
3074:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3075:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_ENTR_Msk;
3076:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
3077:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3078:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3079:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3080:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3081:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3082:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3083:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3084:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the trigger for scan request source.<BR>
3085:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the trigger will be deactivated for the scan request source.
3086:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This will just deactivate the H/W trigger for the scan request source. If any configuration were
3087:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * to select the trigger input in GxASCTRL, it will be not be effected by this API.
3088:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASMR.ENTR.
3089:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3090:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3091:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableExternalTrigger()<BR>
3092:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3093:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableExternalTrigger(XMC_VADC_GROUP_t *const group_ptr)
3094:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
3095:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableExternalTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
3096:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3097:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_ENTR_Msk);
3098:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
3099:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3100:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3101:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3102:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param channel_num   channel number to be removed from the scan sequence.
3103:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3104:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3105:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3106:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3107:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Removes a channel from the scan sequence.<BR>
3108:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the it is possible to remove a single channel from the conversion sequence.
3109:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * The remaining channels will continue however they are.
3110:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register GxASSEL.
3111:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3112:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3113:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3114:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3115:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanRemoveChannel(XMC_VADC_GROUP_t *const group_ptr, const uint32_t channel_num
3116:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3117:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3118:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3119:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3120:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3121:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3122:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3123:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the scan request source event .<BR>
3124:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the request source event will be activated for the scan request source.
3125:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3126:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASMR.ENSI.
3127:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3128:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3129:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanDisableEvent(),<BR> XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode()<BR>
3130:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3131:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableEvent(XMC_VADC_GROUP_t *const group_ptr)
3132:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
3133:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_p
3134:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3135:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= ((uint32_t)VADC_G_ASMR_ENSI_Msk);
3136:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
3137:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3138:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3139:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3140:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3141:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3142:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3143:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3144:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the scan request source event .<BR>
3145:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the request source event will be deactivated for the scan request source.
3146:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3147:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASMR.ENSI.
3148:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3149:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3150:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableEvent(),<BR> XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode()<BR>
3151:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3152:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableEvent(XMC_VADC_GROUP_t *const group_ptr)
3153:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
3154:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_
3155:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3156:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_ENSI_Msk);
3157:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
3158:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
3159:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3160:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3161:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Pointer to the VADC module
3162:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config     Pointer to initialization data structure
3163:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3164:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3165:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the Background scan functional block.<BR>\n
3166:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * The BACKGROUND SCAN request source functional block converts channels of all VADC groups that ha
3167:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * been assigned as a priority channel (priority channels can be converted only by queue and scan).
3168:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * request source converts the unprioritized channels. Unprioritized channels however can also be u
3169:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * and scan. But a channel which is prioritized can not be used with background request source.
3170:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3171:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3172:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR> XMC_VADC_GROUP_BackgroundDisableArbitratio
3173:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR> XMC_VADC_GLOBAL_BackgroundSelectGating()<BR>
3174:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3175:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_
3176:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3177:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
3178:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3179:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group which may receive a
3180:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                  conversion request from background request source
3181:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3182:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3183:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3184:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3185:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3186:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables arbitration slot of the Background request source.<BR>\n
3187:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the Background request source must have its conversion request considered by the arbiter, it 
3188:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the Background channel can only be converted
3189:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * comes to the Background slot. Thus this must be enabled if any conversion need to take place.
3190:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN2.
3191:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3192:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3193:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
3194:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3195:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_p
3196:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
3197:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_
3198:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
3199:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
3200:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3201:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3202:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC group which may receive a conversion request
3203:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                     from background request source
3204:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3205:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3206:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3207:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3208:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables arbitration slot of the Background request source.<BR>\n
3209:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the Background request source must have its conversion request considered by the arbiter, it 
3210:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the Background channel can only be converted
3211:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * comes to the Background slot.A call to this API will lead to all conversions request by Backgrou
3212:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN2
3213:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3214:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3215:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
3216:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3217:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_
3218:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
3219:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK
3220:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
3221:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
3222:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
3223:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3224:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3225:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3226:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as a trigger line
3227:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Accepts enum ::XMC_VADC_TRIGGER_INPUT_SELECT_t
3228:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3229:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3230:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3231:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3232:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal for Background request source.<BR>\n
3233:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A Background request source will raise conversion request only if there were either a request fr
3234:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
3235:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the Background request source.
3236:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3237:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSCTRL.XTSEL.
3238:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3239:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3240:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectGating()<BR> XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<
3241:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3242:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectTrigger(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t in
3243:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3244:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3245:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3246:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3247:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_edge  Select the trigger edge
3248:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3249:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3250:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3251:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3252:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger edge for Background request source.<BR>\n
3253:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A Background request source will raise conversion request only if there were either a request fr
3254:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 possible values for the trigger 
3255:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the Background request source.
3256:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSCTRL.XTMODE.
3257:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3258:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3259:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectGating()<BR> XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<
3260:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3261:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VAD
3262:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3263:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3264:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3265:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Module input signal meant to be selected as gating input
3266:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Accepts enum ::XMC_VADC_GATE_INPUT_SELECT_t
3267:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3268:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3269:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3270:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3271:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Gating signal for Background request source.<BR>\n
3272:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
3273:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the Background request so
3274:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxBRSMR.ENGT has to be confi
3275:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field BRSC
3276:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3277:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3278:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR>
3279:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3280:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectGating(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t inp
3281:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3282:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3283:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3284:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the background scan request source
3285:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3286:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3287:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3288:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * <b>Details of function</b><br>
3289:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the gating mode of background request source.<BR>\n
3290:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
3291:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
3292:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
3293:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSMR.ENGT.
3294:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3295:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
3296:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSelectGating();
3297:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3298:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundSetGatingMode(XMC_VADC_GLOBAL_t *const global_ptr,
3299:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                             XMC_VADC_GATEMODE_t mode_sel)
3300:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
3301:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetGatingMode:Wrong Module Pointer", (global_ptr == VADC))
3302:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_G
3303:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3304:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Clear the existing gate configuration */
3305:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= (uint32_t)(~((uint32_t)VADC_BRSMR_ENGT_Msk));
3306:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Configure the new gating mode*/
3307:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)((uint32_t)mode_sel << VADC_BRSMR_ENGT_Pos);
3308:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
3309:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3310:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3311:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3312:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3313:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3314:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3315:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3316:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3317:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables continuous conversion mode.<BR>\n
3318:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a Background request source to generate conversion request, either a hardware trig
3319:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is needed. Using autoscan (continuous conversion)feature it is possible to start the con
3320:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * once and allow the sequence to repeat without any further triggers. Once all channels belonging 
3321:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * request source have been converted, a request source completion event is generated. Generation o
3322:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * can restart the Background configure sequence. Every request source event will cause a load even
3323:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would access the register bit field BRSMR.SCAN.
3324:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3325:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3326:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundDisableContinuousMode()<BR>
3327:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3328:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundEnableContinuousMode(XMC_VADC_GLOBAL_t *const global
3329:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
3330:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundEnableContinuousMode:Wrong Module Pointer", (global_ptr == 
3331:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_SCAN_Msk;
3332:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
3333:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3334:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3335:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3336:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3337:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3338:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3339:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3340:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables continuous conversion mode.<BR>\n
3341:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a Background request source to generate conversion request, either a hardware trig
3342:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
3343:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a Background req
3344:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
3345:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. By invoking this API the Autoscan mode of operations is disabled. A call to this API w
3346:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * register bit field BRSMR.SCAN.
3347:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3348:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3349:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundEnableContinuousMode()<BR>
3350:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3351:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundDisableContinuousMode(XMC_VADC_GLOBAL_t *const globa
3352:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
3353:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundDisableContinuousMode:Wrong Module Pointer", (global_ptr ==
3354:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= ~((uint32_t)VADC_BRSMR_SCAN_Msk);
3355:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
3356:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3357:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3358:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3359:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3360:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3361:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3362:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3363:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>\n
3364:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
3365:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * the scan unit to generate a conversion request to the analog converter. It is assumed that the b
3366:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * has already been filled up with entries. A call to this API would set the register bit field BRS
3367:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3368:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3369:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3370:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3371:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_pt
3372:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
3373:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VAD
3374:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
3375:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
3376:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3377:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3378:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3379:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3380:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3381:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3382:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3383:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Aborts an ongoing background scan conversion(sequence).<BR>\n
3384:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * An ongoing sequence can be aborted at any time. The scan unit picks the pending channels one by 
3385:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * pending register and requests for their conversion. This API essentially clears the channel pend
3386:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * creating an illusion that there are no more channels left in the sequence.
3387:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers BRSMR, BRSCTRL, GxARBPR(if group is available) 
3388:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * current scan sequence.
3389:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3390:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3391:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3392:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3393:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundAbortSequence(XMC_VADC_GLOBAL_t *const global_ptr);
3394:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3395:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3396:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3397:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3398:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Request source
3399:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The unprioritized channel meant to be added to the scan sequence
3400:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3401:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3402:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3403:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3404:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3405:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds a channel to the background scan sequence.<BR>\n
3406:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a new single channel into the background scan request source. This will 
3407:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channel will be part of the conversion sequence when the next load event occ
3408:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3409:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3410:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3411:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddMultipleChannels()<BR>
3412:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3413:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(XMC_VADC_GLOBAL_t *const global
3414:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                     const uint32_t grp_num,
3415:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                     const uint32_t ch_num)
3416:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
3417:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == 
3418:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number",((grp_num) < XMC_V
3419:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
3420:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
3421:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3422:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
3423:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
3424:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3425:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3426:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3427:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3428:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_mask    Mask word indicating channels which form part of scan conversion sequence
3429:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Bit location 0/1/2/3/4/5/6/7 represents channels-0/1/2/3/4/5/6/7 respectively.
3430:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   To Add the channel to the scan sequence enable the respective bit.
3431:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Passing a 0x0 will clear all the previously selected channels
3432:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0xFF]
3433:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3434:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3435:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3436:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3437:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds multiple channels to the scan sequence.<BR>\n
3438:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a multiple channels into the scan request source. This will be added to 
3439:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channels will be a part of the conversion sequence when the next load event 
3440:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3441:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3442:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3443:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddChannelToSequence()<BR>
3444:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3445:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgndAddMultipleChannels(XMC_VADC_GLOBAL_t *const global_ptr
3446:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                 const uint32_t grp_num,
3447:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                 const uint32_t ch_mask)
3448:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
3449:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Module Pointer", (global_ptr == VADC
3450:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Group Number",   ((grp_num) < XMC_VA
3451:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] |= ch_mask;
3452:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
3453:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3454:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3455:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3456:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3457:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Request source
3458:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The unprioritized channel meant to be added to the scan sequence
3459:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3460:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3461:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3462:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3463:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3464:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Removes a channel to the background scan sequence.<BR>\n
3465:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a new single channel into the background scan request source. This will 
3466:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channel will be part of the conversion sequence when the next load event occ
3467:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3468:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3469:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3470:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddChannelToSequence()<BR>
3471:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3472:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundRemoveChannelFromSequence(XMC_VADC_GLOBAL_t *const g
3473:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                          const uint32_t grp_num,
3474:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                          const uint32_t ch_num)
3475:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
3476:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == 
3477:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number",((grp_num) < XMC_V
3478:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
3479:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
3480:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3481:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] &= (uint32_t)~((uint32_t)1 << ch_num);
3482:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
3483:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3484:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3485:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3486:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3487:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_mask    Mask word indicating channels which form part of scan conversion sequence
3488:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Bit location 0/1/2/3/4/5/6/7 represents channels-0/1/2/3/4/5/6/7 respectively.
3489:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   To Add the channel to the scan sequence enable the respective bit.
3490:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Passing a 0x0 will clear all the previously selected channels
3491:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0xFF]
3492:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3493:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3494:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3495:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3496:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Removes multiple channels to the scan sequence.<BR>\n
3497:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a multiple channels into the scan request source. This will be added to 
3498:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channels will be a part of the conversion sequence when the next load event 
3499:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3500:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3501:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3502:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddChannelToSequence()<BR>
3503:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3504:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgndRemoveMultipleChannels(XMC_VADC_GLOBAL_t *const global_
3505:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                    const uint32_t grp_num,
3506:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                    const uint32_t ch_mask)
3507:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
3508:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Module Pointer", (global_ptr == VADC
3509:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Group Number",   ((grp_num) < XMC_VA
3510:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] &= (uint32_t)~ch_mask;
3511:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
3512:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3513:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3514:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3515:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3516:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The channel being audited for completion of conversion
3517:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3518:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3519:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *     bool   returns true if the channel is pending conversion else returns false
3520:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3521:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3522:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determine if the channel is pending.<BR>\n
3523:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will check if the Channel in question is awaiting conversion in the current arbitration
3524:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3525:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. This API would return true
3526:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the channel is found in the pending register (BRSPND[\b grp_num]).
3527:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3528:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3529:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending()<BR>
3530:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3531:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GLOBAL_BackgroundIsChannelPending(XMC_VADC_GLOBAL_t *const global_ptr
3532:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                 const uint32_t grp_num,
3533:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                 const uint32_t ch_num)
3534:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
3535:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Module Pointer", (global_ptr == VADC
3536:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Group Number",   ((grp_num) < XMC_VA
3537:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Channel Number",
3538:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
3539:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3540:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   return( (bool)(global_ptr->BRSPND[grp_num] & (uint32_t)((uint32_t)1 << ch_num)));
3541:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
3542:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3543:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3544:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3545:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   * @return  <BR>
3546:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *   uint32_t   Returns the total channels pending for conversion.
3547:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *              <BR>Range: [0x0 to (0x8*number of groups)]
3548:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3549:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3550:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the number of pending channels.<BR>\n
3551:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will read the pending channels register and will return the number of channels that are
3552:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3553:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. When the API is called it 
3554:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * return the total number of channels pending (BRSPND[\b grp_num]).
3555:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3556:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3557:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundIsChannelPending()<BR>
3558:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3559:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** uint32_t XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending(XMC_VADC_GLOBAL_t *const global_ptr);
3560:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3561:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3562:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3563:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3564:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3565:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3566:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3567:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Manually asserts the conversion complete request source event.<BR>\n
3568:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will set the request source event for background scan. This will trigger a interrupt if
3569:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * service node pointer for the scan has been configured.
3570:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GLOBEFLAG.SEVGLB.
3571:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3572:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3573:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
3574:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3575:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent(XMC_VADC_GLOBAL_t *const global_p
3576:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
3577:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent:Wrong Module Pointer", (global_ptr == VA
3578:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG |= (uint32_t)VADC_GLOBEFLAG_SEVGLB_Msk;
3579:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
3580:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3581:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3582:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3583:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3584:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3585:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3586:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3587:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Acknowledges the background scan conversion complete request source event.<BR>\n
3588:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will clear the request source event that occurred. This will clear a interrupt if it wa
3589:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GLOBEFLAG.SEVGLB
3590:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3591:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3592:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent()<BR>
3593:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3594:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundClearReqSrcEvent(XMC_VADC_GLOBAL_t *const global_ptr
3595:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
3596:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundClearReqSrcEvent:Wrong Module Pointer", (global_ptr == VADC
3597:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG |= (uint32_t)VADC_GLOBEFLAG_SEVGLBCLR_Msk;
3598:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
3599:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3600:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3601:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3602:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3603:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *   bool   returns true if the service request event is raised.
3604:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *          returns false if the service request event was not raised.
3605:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3606:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3607:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determines if the request source event is asserted.<BR>
3608:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will get the status of the background scan request source event. Will return a true
3609:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the event has occurred for background scan. A call to this API would configure the register
3610:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * bit field GLOBEFLAG.SEVGLB.
3611:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3612:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3613:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3614:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3615:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GLOBAL_BackgroundGetReqSrcEventStatus(XMC_VADC_GLOBAL_t *const global
3616:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
3617:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundGetReqSrcEventStatus:Wrong Module Pointer", (global_ptr == 
3618:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   return((bool)(global_ptr->GLOBEFLAG & (uint32_t)VADC_GLOBEFLAG_SEVGLB_Msk));
3619:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
3620:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3621:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3622:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3623:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3624:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3625:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3626:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3627:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the trigger for background scan request source.<BR>\n
3628:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the trigger will be activated for the scan request source. The trigger signal 
3629:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * edge will be selected from the BRSCTRL register. The Selection of a input will be done by
3630:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSelectTrigger(). A call to this API would configure the register bit f
3631:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3632:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3633:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR> XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger(
3634:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3635:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger(XMC_VADC_GLOBAL_t *const globa
3636:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
3637:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger:Wrong Module Pointer", (global_ptr ==
3638:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3639:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_ENTR_Msk;
3640:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
3641:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3642:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3643:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3644:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3645:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3646:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3647:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3648:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the trigger for background scan request source.<BR>
3649:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the trigger will be deactivated for the background scan request source.
3650:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This will just deactivate the H/W trigger for the background scan request source. If any configu
3651:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * to select the trigger input in BRSCTRL will be not be effected. A call to this API would configu
3652:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * bit field BRSMR.ENTR.
3653:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3654:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Related APIs:</b><br>
3655:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<BR>
3656:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3657:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger(XMC_VADC_GLOBAL_t *const glob
3658:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
3659:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger:Wrong Module Pointer", (global_ptr =
3660:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3661:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= ~((uint32_t)VADC_BRSMR_ENTR_Msk);
3662:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
3663:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3664:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3665:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3666:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3667:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3668:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3669:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3670:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the background scan request source event .<BR>
3671:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the request source event will be activated for the background scan request sou
3672:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3673:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSMR.ENSI.
3674:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3675:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3676:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundEnableEvent(),<BR> XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptN
3677:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3678:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundEnableEvent(XMC_VADC_GLOBAL_t *const global_ptr)
3679:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
3680:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundEnableEvent:Wrong Module Pointer", (global_ptr == VADC))
3681:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3682:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= ((uint32_t)VADC_BRSMR_ENSI_Msk);
3683:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
3684:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3685:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3686:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr     Pointer to the VADC module
3687:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3688:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3689:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3690:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3691:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the background scan request source event .<BR>
3692:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the request source event will be deactivated for the background scan request s
3693:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3694:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSMR.ENSI.
3695:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3696:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3697:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundEnableEvent(),<BR> XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNo
3698:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3699:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundDisableEvent(XMC_VADC_GLOBAL_t *const global_ptr)
3700:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
3701:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundDisableEvent:Wrong Module Pointer", (global_ptr == VADC))
3702:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3703:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= ~((uint32_t)VADC_BRSMR_ENSI_Msk);
3704:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
3705:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3706:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_QUEUE_AVAILABLE == 1U)
3707:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3708:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Pointer to the VADC group
3709:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config     Pointer to initialization data structure
3710:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3711:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3712:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3713:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3714:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes VADC QUEUE functional block.<BR>\n
3715:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * The QUEUE request source functional block converts channels stored in a queue. The first channel
3716:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * queue is converted first. A channel once converted, can be placed back into the queue if desired
3717:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API will first disable the arbitration slot for queue (XMC_VADC_GROUP_QueueEnable
3718:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * and then it would configure all the related registers with the required configuration values.
3719:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * The arbitration slot is re-enabled at the end of init by invoking XMC_VADC_GROUP_QueueDisableArb
3720:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxARBPR, GxQCTRL0, GxQMR0 to configure the queu
3721:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * source.
3722:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3723:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3724:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR> XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR
3725:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectTrigger()<BR> XMC_VADC_GROUP_QueueSelectGating()<BR>
3726:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3727:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_QUEUE_CONFIG_t *con
3728:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3729:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3730:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3731:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3732:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3733:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3734:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3735:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables arbitration slot of the queue request source.<BR>\n
3736:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the QUEUE request source must have its conversion request considered by the arbiter, it must 
3737:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the queue channel can only be converted when
3738:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the queue slot. Thus this must be enabled if any conversion need to take place.
3739:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN0.
3740:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3741:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3742:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR>
3743:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3744:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
3745:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
3746:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
3747:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)1 << VADC_G_ARBPR_ASEN0_Pos);
3748:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
3749:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3750:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3751:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3752:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3753:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3754:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3755:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3756:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables arbitration slot of the queue request source.<BR>\n
3757:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the QUEUE request source must have its conversion request considered by the arbiter, it must 
3758:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the queue channel can only be converted when
3759:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the queue slot.A call to this API will lead to all conversions request by queue to be blocked
3760:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN0.
3761:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3762:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3763:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR>
3764:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3765:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
3766:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
3767:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP
3768:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN0_Msk);
3769:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
3770:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3771:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3772:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3773:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3774:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3775:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    bool  returns true if the arbitration is enabled else returns false.
3776:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3777:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3778:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the arbitration status of the queue request source.<BR>\n
3779:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the queue request source must have its conversion request considered by the arbiter, it must 
3780:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the queue channel can only be converted when
3781:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the queue slot. A call to this API would return the status of the arbitration slot of queue.
3782:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would read the register bit field GxARBPR.ASEN1.
3783:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3784:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3785:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableArbitrationSlot(),<BR>  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<
3786:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3787:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled(XMC_VADC_GROUP_t *const group_ptr
3788:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
3789:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled:Wrong Group Pointer", XMC_VADC_CHECK_GRO
3790:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3791:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((group_ptr->ARBPR & (uint32_t)VADC_G_ARBPR_ASEN0_Msk) >> VADC_G_ARBPR_ASEN0_Pos);
3792:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
3793:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3794:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3795:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3796:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as a trigger line
3797:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3798:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3799:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3800:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3801:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal for queue request source.<BR>\n
3802:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A queue request source will raise conversion request only if there were either a request from ap
3803:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
3804:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the queue request source.
3805:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3806:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxQCTRL0.XTSEL.
3807:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3808:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3809:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectGating()<BR> XMC_VADC_GROUP_QueueEnableExternalTrigger()<BR>
3810:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3811:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectTrigger(XMC_VADC_GROUP_t *const group_ptr, 
3812:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                        const XMC_VADC_TRIGGER_INPUT_SELECT_t input_num);
3813:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3814:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3815:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3816:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_edge  Choice of the trigger edge
3817:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3818:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3819:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3820:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3821:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal edge for queue request source.<BR>\n
3822:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A queue request source will raise conversion request only if there were either a request from ap
3823:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 trigger edges. This is
3824:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the queue request source.
3825:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3826:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxQCTRL0.XTMODE.
3827:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3828:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3829:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectGating()<BR> XMC_VADC_GROUP_QueueEnableExternalTrigger()<BR>
3830:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3831:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGE
3832:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3833:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3834:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3835:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as the gating line
3836:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3837:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3838:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3839:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3840:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Gating signal for queue request source.<BR>\n
3841:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
3842:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the queue request source 
3843:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxQMR0.ENGT has to be config
3844:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field GxQC
3845:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3846:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3847:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectTrigger()<BR>
3848:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3849:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectGating(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GATE_INPUT_
3850:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3851:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3852:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3853:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the queue request source
3854:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3855:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3856:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3857:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * <b>Details of function</b><br>
3858:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the gating mode of queue request source.<BR>\n
3859:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
3860:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
3861:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
3862:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxQMR0.ENGT.
3863:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3864:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
3865:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_QueueSelectGating();
3866:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3867:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueSetGatingMode(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_
3868:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
3869:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
3870:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_GATEMOD
3871:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3872:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Clear the existing gate configuration */
3873:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 &= (uint32_t)(~((uint32_t) VADC_G_QMR0_ENGT_Msk));
3874:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Set the new gating mode */
3875:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)((uint32_t)mode_sel << VADC_G_QMR0_ENGT_Pos);
3876:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
3877:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3878:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3879:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3880:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3881:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3882:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3883:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3884:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3885:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>
3886:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
3887:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * the queue unit to generate a conversion request to the analog converter. It is assumed that the 
3888:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * been filled up with entries. A call to this API would configure the register bit field GxQMR0.TR
3889:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3890:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Note:</b><br>
3891:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * The conversion of queue entry will start immediately after the entry has been loaded into GxQINR
3892:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This happens only if the queue entry has been loaded into the register without the need for the 
3893:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * If a H/W Trigger is selected while loading the entry, the conversion will occur in one of the 2 
3894:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * <ul>
3895:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * <li> The H/W generates a trigger needed for the queue request source.
3896:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * <li> The Conversion is triggered manually by calling this API.
3897:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * </ul>
3898:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3899:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3900:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueInsertChannel()<BR>
3901:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3902:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueTriggerConversion(XMC_VADC_GROUP_t *const group_ptr)
3903:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
3904:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueTriggerConversion:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
3905:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)((uint32_t)1 << VADC_G_QMR0_TREV_Pos);
3906:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
3907:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3908:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3909:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3910:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3911:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    uint32_t returns the total number of channels.
3912:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *             <BR>Range: [0x0 to 0x8]
3913:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3914:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3915:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the number of channels present in the queue.<BR>\n
3916:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will return the queue buffer size. This buffer will be consisting of valid queue entrie
3917:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * will be converted when a trigger event occurs. All the entries that are loaded onto the GxQINR0 
3918:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * be added to the queue buffer. Hence if an application needs to get the number of valid queue ent
3919:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * this API would provide the interface. A call to this API would access the registers GxQBUR0, GxQ
3920:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * to determine the queue length.
3921:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3922:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3923:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueInsertChannel()<BR>
3924:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3925:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** uint32_t XMC_VADC_GROUP_QueueGetLength(XMC_VADC_GROUP_t *const group_ptr);
3926:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3927:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3928:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3929:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3930:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3931:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3932:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3933:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Aborts an ongoing conversion by flushing the queue.<BR>\n
3934:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will flush the queue buffer. Ongoing conversion of the Queue request source will
3935:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * not be effected by this API. This would clear all the contents that are present in the queue buf
3936:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxQCTRL0, GxQMR0, GxARBPR in order to abort
3937:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * the queue sequence.
3938:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3939:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3940:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueRemoveChannel()<BR> XMC_VADC_GROUP_QueueFlushEntries() <BR>
3941:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3942:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueAbortSequence(XMC_VADC_GROUP_t *const group_ptr);
3943:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3944:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3945:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3946:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3947:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3948:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3949:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3950:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Flushing the queue Entry.<BR>\n
3951:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will flush one entry in the queue buffer. Ongoing conversion of the Queue request sourc
3952:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * not be effected by this API. This would clear all the contents that are present in the queue buf
3953:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers  GxQMR0. This is a Blocking API, i.e will only 
3954:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * all the entries are removed from the queue.
3955:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3956:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3957:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueRemoveChannel()<BR> XMC_VADC_GROUP_QueueAbortSequence(0<BR>
3958:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3959:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueFlushEntries(XMC_VADC_GROUP_t *const group_ptr)
3960:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
3961:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Initiate flushing of the queue */
3962:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)VADC_G_QMR0_FLUSH_Msk;
3963:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3964:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   while( !((group_ptr->QSR0)& (uint32_t)VADC_G_QSR0_EMPTY_Msk))
3965:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   {
3966:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****     /* Wait until the queue is indeed flushed */
3967:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   }
3968:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
3969:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3970:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3971:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3972:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3973:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3974:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3975:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3976:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3977:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Clears the next valid channel in the queue buffer.<BR>\n
3978:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A queue entry lined up for conversion can be removed and replaced by its successor. The call to 
3979:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * first check if a valid queue entry is present in the queue backup register if present would clea
3980:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * If no valid queue entries are present in the backup then the first channel
3981:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * present in the queue buffer would be cleared.
3982:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxQCTRL0, GxQMR0, GxARBPR in order to clear a
3983:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * channel from the queue.
3984:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3985:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3986:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueInsertChannel()<BR>
3987:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3988:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueRemoveChannel(XMC_VADC_GROUP_t *const group_ptr);
3989:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
3990:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3991:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3992:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3993:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param entry      Details of the node being added
3994:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3995:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3996:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3997:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3998:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Inserts a queue entry to the tail of the queue buffer.<BR>\n
3999:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will insert a new channel into the queue buffer. The Queue will start conversion of
4000:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * the channels from the head of the buffer. This Insert will place the entry after the last valid 
4001:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * If no valid entries are present then this API will place the Queue entry at the head of the buff
4002:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Then the successive call to the insert will place the new entry after the last entry.
4003:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register GxQINR0 for a single queue entry.
4004:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4005:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4006:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueRemoveChannel()<BR>
4007:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4008:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueInsertChannel(XMC_VADC_GROUP_t *const group_ptr,
4009:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                        const XMC_VADC_QUEUE_ENTRY_t entry)
4010:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
4011:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueInsertChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
4012:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Insert the channel physically and get the length of the queue*/
4013:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QINR0 = entry.qinr0;
4014:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
4015:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
4016:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4017:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
4018:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4019:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *     int32_t Returns -1 if there are no channels for conversion
4020:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *             Else would return the next valid channel for conversion.
4021:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *             <BR>Range: [0x0 to 0x8]
4022:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4023:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4024:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the next entry in the queue request source for conversion.<BR>\n
4025:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Identifies the channel in the queue lined up for conversion next.
4026:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * API will return a valid queue entry from the queue buffer. First checks for the valid channel en
4027:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * in the backup register and returns if present. If the valid entry has not been found in the back
4028:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * then the queue buffer is searched for a valid entry. A call to this API would access the registe
4029:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * GxQBUR0 to determine the next channel.
4030:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4031:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4032:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueRemoveChannel()<BR> XMC_VADC_GROUP_QueueInsertChannel()<BR>
4033:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4034:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** int32_t XMC_VADC_GROUP_QueueGetNextChannel(XMC_VADC_GROUP_t *const group_ptr);
4035:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
4036:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4037:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
4038:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4039:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *     int32_t Returns -1 if there is no channel that have been interrupted.
4040:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *             Else would return the channel that is interrupted.
4041:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *             <BR>Range: [0x0 to 0x8]
4042:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4043:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4044:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Identifies the channel whose conversion was suspended.<BR>\n
4045:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * When using cancel inject repeat mode the canceled conversion will be placed in the backup regist
4046:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will return the valid queue channel number from the backup register. This happens when 
4047:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * there is a high priority conversion interrupts the conversion of queue request source. This forc
4048:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * to goto the backup register. A call to this API would access the register GxQBUR0 to determine t
4049:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * interrupted channel.
4050:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4051:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4052:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
4053:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4054:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** int32_t XMC_VADC_GROUP_QueueGetInterruptedChannel(XMC_VADC_GROUP_t *const group_ptr);
4055:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
4056:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4057:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
4058:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4059:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4060:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4061:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4062:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Manually asserts the conversion complete request source event.<BR>\n
4063:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will set the request source event for queue. This will trigger a interrupt if the
4064:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * service node pointer for the scan has been configured.
4065:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxSEFLAG.SEV0.
4066:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4067:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4068:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueClearReqSrcEvent()<BR>
4069:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4070:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueTriggerReqSrcEvent(XMC_VADC_GROUP_t *const group_ptr)
4071:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
4072:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueTriggerReqSrcEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR
4073:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SEFLAG |= 1U;
4074:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
4075:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
4076:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4077:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
4078:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4079:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4080:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4081:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4082:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Acknowledges the conversion complete request source event.<BR>\n
4083:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will clear the request source event that occurred. This will clear a interrupt if it wa
4084:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxSEFCLR.SEV0.
4085:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4086:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4087:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueTriggerReqSrcEvent()<BR>
4088:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4089:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueClearReqSrcEvent(XMC_VADC_GROUP_t *const group_ptr)
4090:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
4091:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueClearReqSrcEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
4092:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SEFCLR = (uint32_t)VADC_G_SEFCLR_SEV0_Msk;
4093:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
4094:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
4095:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4096:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
4097:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4098:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *   bool   returns true if the service request event is raised.
4099:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *          returns false if the service request event was not raised.
4100:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4101:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4102:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determines if the request source event is asserted.<BR>
4103:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will get the status of the queue request source event. Will return a true
4104:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the event has occurred for queue. A call to this API would acces the register bit field  GxSE
4105:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4106:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4107:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
4108:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4109:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_QueueGetReqSrcEventStatus(XMC_VADC_GROUP_t *const group_ptr)
4110:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
4111:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
4112:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueGetReqSrcEventStatus:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
4113:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   return(group_ptr->SEFLAG & (uint32_t)VADC_G_SEFLAG_SEV0_Msk);
4114:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
4115:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
4116:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4117:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
4118:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr     The service request line (Common SR lines, Group specific SR lines)
4119:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4120:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4121:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4122:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4123:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Connects the event to the SR line of VADC.<BR>\n
4124:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will connect a Service Request line(SR) to a queue request source event. Hence to get a
4125:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Service request line one has to enable the required NVIC node. A call to this API would configur
4126:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * bit field GxSEVNP.SEVNP0.
4127:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4128:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4129:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
4130:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4131:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_V
4132:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
4133:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4134:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4135:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4136:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4137:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4138:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4139:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the trigger for queue request source.<BR>\n
4140:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the trigger will be activated for the queue request source. The trigger signal
4141:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * edge will be selected from the QCTRL register. The Selection of a input will be done by
4142:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_QueueSelectTrigger(). A call to this API would configure the register bit field G
4143:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4144:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4145:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectTrigger()<BR> XMC_VADC_GROUP_QueueDisableExternalTrigger()<BR>
4146:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4147:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueEnableExternalTrigger(XMC_VADC_GROUP_t *const group_ptr)
4148:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
4149:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueEnableExternalTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
4150:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
4151:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)VADC_G_QMR0_ENTR_Msk;
4152:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
4153:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
4154:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4155:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4156:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4157:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4158:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4159:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4160:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the trigger for queue request source.<BR>
4161:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the trigger will be deactivated for the queue request source.
4162:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This will just deactivate the H/W trigger for the queue request source. If any configuration was
4163:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * to select the trigger input in GxQCTRL0 will be not be effected.  A call to this API would confi
4164:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * register bit field GxQMR0.ENTR
4165:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4166:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4167:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableExternalTrigger()<BR>
4168:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4169:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueDisableExternalTrigger(XMC_VADC_GROUP_t *const group_ptr)
4170:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
4171:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueDisableExternalTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP
4172:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
4173:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 &= ~((uint32_t)VADC_G_QMR0_ENTR_Msk);
4174:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
4175:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
4176:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
4177:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
4178:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4179:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC group
4180:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num  The channel being initialized
4181:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4182:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Pointer to initialization data
4183:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4184:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4185:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4186:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4187:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the ADC channel for conversion.<BR>\n
4188:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will do the channel related initializations. This includes configuration of the CHCTR s
4189:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * and boundary flag settings. This must be called in the application in order to enable the conver
4190:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * a channel. After a request source has been initialized this API has to be called for each channe
4191:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * has to be converted.  A call to this API would configure the registers GxCHCTR GxBFL GxALIAS GxC
4192:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * GxBFLC(depending on device) in order to configure the channel.
4193:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4194:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4195:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
4196:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4197:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
4198:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                         const XMC_VADC_CHANNEL_CONFIG_t *config);
4199:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
4200:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4201:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr    Constant pointer to the VADC group
4202:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param src_ch_num   Channel which will be converted by \b alias_ch_num, when called by the reque
4203:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                     <BR>Range:[0x0 to 0x7]
4204:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param alias_ch_num This is the alias channel (Ch-0 or Ch-1)
4205:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                     <BR>Range:[0x0, 0x1]
4206:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4207:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4208:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4209:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4210:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets the Alias channel(\b alias_ch_num) to convert from the source channel(\b src_ch_num).<BR>\n
4211:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a alias configuration takes place the request source(queue/scan/background) will not call c
4212:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * The Request sources will call the channel \b alias_ch_num , this would invoke the conversion of
4213:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * the pin associated with \b src_ch_num. The configuration of the alias channel (\b alias_ch_num) 
4214:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * for the conversion.\n
4215:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * When an alias channel (Ch-0 or Ch-1) receives a trigger, it converts the aliased channel (\b src
4216:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * The properties of Ch-0 or Ch-1 (as indicated in \b alias_ch_num ) apply when \b src_ch_num is co
4217:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  A call to this API would configure the register GxALIAS.
4218:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4219:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Note:</b><br>
4220:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Alias Channel (\b alias_ch_num) and the source channel (\b src_ch_num) cannot be the same.
4221:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * If they are, that alias feature is not used for the conversion. In order to Reset the alias
4222:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * feature that was previously selected this method can be used.
4223:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4224:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4225:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
4226:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4227:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetChannelAlias(XMC_VADC_GROUP_t *const group_ptr,
4228:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                     const uint32_t src_ch_num,
4229:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                     const uint32_t alias_ch_num);
4230:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
4231:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4232:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr    Constant pointer to the VADC group
4233:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num  Channel whose input was converted
4234:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4235:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4236:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *   bool  Returns true if there was violation w.r.t the specified boundaries.
4237:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4238:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4239:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determines if the result of the channel confines with the specified boundaries.<BR>\n
4240:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * An application may not necessarily always need to know the exact value of the converted result, 
4241:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * an indication if the generated result is within stipulated boundaries. Generation of Channel eve
4242:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * to channel event generation criteria (Generate always, Never generate, Generate if result is out
4243:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Generate if result is within bounds). When interrupts are not enabled, this API can be used to d
4244:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * nature of the result.  A call to this API would access the registers GxCHCTR and GxCEFLAG in ord
4245:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * if a violation has occured.
4246:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4247:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4248:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
4249:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4250:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** bool XMC_VADC_GROUP_ChannelIsResultOutOfBounds(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch
4251:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
4252:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4253:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr    Constant pointer to the VADC group
4254:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num  Channel whose input is to be converted
4255:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4256:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ref     Reference voltage
4257:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4258:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4259:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4260:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4261:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the reference voltage for conversion.<BR>\n
4262:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * An internal voltage reference (VARef) or an external voltage reference fed to Ch-0 can serve as 
4263:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * for conversions.  A call to this API would configure the register bit field GxCHCTR.REFSEL.
4264:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4265:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4266:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
4267:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4268:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ChannelSetInputReference(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_n
4269:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                            const XMC_VADC_CHANNEL_REF_t ref);
4270:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
4271:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4272:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4273:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num   Channel whose i/p is to be converted
4274:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4275:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param result_reg_num  Result Register associated with this channel
4276:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4277:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4278:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4279:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4280:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the target result register.<BR>\n
4281:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * There are upto 16 result registers which a channel can choose from to store the results of conve
4282:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This selects only the group related result registers. A call to this API would configure the reg
4283:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * bit field GxCHCTR.RESREG.
4284:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4285:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4286:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
4287:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4288:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ChannelSetResultRegister(XMC_VADC_GROUP_t *const group_ptr,
4289:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                              const uint32_t ch_num,
4290:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                              const uint32_t result_reg_num);
4291:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
4292:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4293:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4294:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num   Channel whose conversion class is to be configured
4295:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4296:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param conversion_class  conversion property to be associated with this channel
4297:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4298:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4299:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4300:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4301:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the conversion class registers.<BR>\n
4302:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * It configures the channel to have a particular conversion class properties like sampling
4303:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * time and resolution.  A call to this API would configure the register
4304:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * bit field GxCHCTR.ICLSEL.
4305:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4306:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4307:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ChannelGetInputClass().
4308:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4309:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ChannelSetIclass(XMC_VADC_GROUP_t *const group_ptr,
4310:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                      const uint32_t ch_num,
4311:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                      const XMC_VADC_CHANNEL_CONV_t conversion_class); 
4312:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
4313:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4314:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4315:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num   Channel whose result alignment is to be returned
4316:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4317:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4318:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    XMC_VADC_RESULT_ALIGN_LEFT if the result are aligned to the left
4319:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    XMC_VADC_RESULT_ALIGN_RIGHT if the result are aligned to the right
4320:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4321:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4322:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the channel result alignment.<BR>\n
4323:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * The results are aligned either to the left or to the right. A left aligned 10bit resolution has 
4324:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * at bit2 where as a left aligned 8bit resolution starts at bit4. A call to this API would return 
4325:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * configured alignment value.
4326:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would read the register bit field GxCHCTR.RESPOS.
4327:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4328:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4329:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
4330:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4331:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE XMC_VADC_RESULT_ALIGN_t XMC_VADC_GROUP_ChannelGetResultAlignment(XMC_VADC_GROUP_t *
4332:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                      const uint32_t ch_num) 
4333:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
4334:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelGetResultAlignment:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
4335:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelGetResultAlignment:Wrong Channel Number",
4336:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
4337:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
4338:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((XMC_VADC_RESULT_ALIGN_t)((group_ptr->CHCTR[ch_num] & (uint32_t)VADC_G_CHCTR_RESPOS_Msk) 
4339:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 		  (uint32_t)VADC_G_CHCTR_RESPOS_Pos) );
4340:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
4341:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
4342:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
4343:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4344:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4345:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num   Channel whose result alignment is to be returned
4346:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4347:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4348:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    XMC_VADC_CHANNEL_CONV_t Returns the configured input class for the \b ch_num
4349:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4350:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4351:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the channel's input class for conversion for the required channel.<BR>\n
4352:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * The sampling time and resolution can be taken from any of the 4 possible Input class registers.
4353:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would return the input class register that is taken up by \b ch_num for conversion.
4354:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would read the register bit field GxCHCTR.RESPOS.
4355:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4356:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4357:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ChannelSetIclass().
4358:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4359:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE XMC_VADC_CHANNEL_CONV_t XMC_VADC_GROUP_ChannelGetInputClass(XMC_VADC_GROUP_t *const
4360:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                      const uint32_t ch_num) 
4361:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
4362:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelGetInputClass:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
4363:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelGetInputClass:Wrong Channel Number",
4364:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
4365:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
4366:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((XMC_VADC_CHANNEL_CONV_t)((group_ptr->CHCTR[ch_num] & (uint32_t)VADC_G_CHCTR_ICLSEL_Msk) 
4367:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 		  (uint32_t)VADC_G_CHCTR_ICLSEL_Pos) );
4368:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
4369:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
4370:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4371:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4372:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4373:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num   Channel whose associated result register is to be found
4374:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4375:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4376:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  uint8_t  returns the Group result register to which it is linked to.
4377:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *           <BR>Range: [0x0 to 0xF]
4378:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4379:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4380:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Returns the result register associated with this channel.<br>\n
4381:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  There are upto 16 result registers which a channel can choose from to store the results of conv
4382:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  This returns only the group related result registers.  A call to this API would access the regi
4383:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * bit field GxCHCTR.RESREG.
4384:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4385:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4386:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
4387:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4388:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** uint8_t XMC_VADC_GROUP_ChannelGetResultRegister(XMC_VADC_GROUP_t *const group_ptr, const uint32_t c
4389:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
4390:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4391:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4392:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num   Channel whose channel event is to be asserted
4393:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4394:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4395:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4396:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4397:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4398:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Manually asserts a Channel event.<BR>\n
4399:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * It is merely the channel event which is asserted. For this asserted event to lead to an interrup
4400:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * have been bound to an SR and that SR must have been enabled. It can potentially lead to an inter
4401:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * SR line is connected to an NVIC node.  A call to this API would configure the register bit field
4402:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4403:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4404:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ChannelClearEvent().
4405:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4406:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ChannelTriggerEvent(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num);
4407:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
4408:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4409:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4410:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4411:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *      uint32_t returns the asserted channel events
4412:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4413:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4414:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the Channel event flag register.<BR>\n
4415:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * The return is merely the channel events which are asserted.
4416:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would read the register bit fields of GxCEFLAG.
4417:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4418:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4419:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ChannelClearEvent().
4420:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4421:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GROUP_ChannelGetAssertedEvents(XMC_VADC_GROUP_t *const group_ptr)
4422:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
4423:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelGetAssertedEvents:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
4424:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   return(group_ptr->CEFLAG);
4425:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
4426:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
4427:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4428:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4429:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num   Channel whose channel event is to be acknowledged
4430:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4431:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4432:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4433:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4434:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4435:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Acknowledges a Channel event.<BR>\n
4436:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a channel event is raised after the conversion of that channel, it has to be cleared. This 
4437:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * the Channel event of a particular channel if it has occurred.  A call to this API would configur
4438:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * bit fields of GxCEFCLR.
4439:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4440:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4441:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ChannelTriggerEvent().
4442:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4443:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ChannelClearEvent(XMC_VADC_GROUP_t *const group_ptr, const uint
4444:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
4445:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
4446:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelClearEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
4447:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelClearEvent:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHAN
4448:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->CEFCLR = (uint32_t)((uint32_t)1 << ch_num);
4449:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
4450:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
4451:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4452:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4453:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num   Channel whose channel event is to be connected to a service request line
4454:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4455:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr       The service request line to which the channel event is to be connected
4456:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4457:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4458:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4459:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4460:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Binds a channel event to a requested Service Request line.<BR>\n
4461:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * The channel event is connected to a service request line. For an event to result in an interrupt
4462:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * request line must be enabled in VADC and the NVIC node which this service request line is connec
4463:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * interrupt generation enabled.  A call to this API would configure the register bit fields of GxC
4464:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4465:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4466:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ChannelTriggerEvent()<BR> XMC_VADC_GROUP_ChannelClearEvent()
4467:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4468:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ChannelSetEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
4469:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  const uint32_t ch_num,
4470:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  const XMC_VADC_SR_t sr);
4471:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
4472:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4473:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4474:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num   Channel whose channel event is being configured
4475:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4476:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param criteria The condition under which the channel may assert its channel event
4477:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4478:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4479:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4480:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4481:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the conditions under which a channel may assert its channel event.<BR>\n
4482:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * The channel event can be generated under the following conditions - Always, Never, Result Out of
4483:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * inside the boundaries.  A call to this API would configure the register bit field GxCHCTR.CHEVMO
4484:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4485:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4486:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ChannelTriggerEvent()<BR> XMC_VADC_GROUP_ChannelClearEvent()<BR>
4487:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ChannelSetEventInterruptNode()<BR>
4488:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4489:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ChannelTriggerEventGenCriteria(XMC_VADC_GROUP_t *const group_ptr,
4490:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                    const uint32_t ch_num,
4491:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                    const XMC_VADC_CHANNEL_EVGEN_t criteria);
4492:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
4493:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
4494:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4495:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4496:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num   Channel whose channel event is being configured
4497:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4498:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary_sel Select the upper/lower boundary configuration .
4499:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param selection The boundary value selected for \b boundary_sel.
4500:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4501:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4502:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4503:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4504:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure the boundary selection for the given channel<BR>\n
4505:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * The channel event can be generated under the following conditions - Always, Never, Result Out of
4506:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * inside the boundaries. The boundary values to which results are compared can be selected from se
4507:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxCHCTR.BNDSELL or GxCHCTR.BNDSELU  .
4508:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4509:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4510:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
4511:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4512:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void  XMC_VADC_GROUP_ChannelSetBoundarySelection(XMC_VADC_GROUP_t *const group_ptr,
4513:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  const uint32_t ch_num,
4514:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  XMC_VADC_BOUNDARY_SELECT_t boundary_sel,
4515:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  XMC_VADC_CHANNEL_BOUNDARY_t selection);
4516:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
4517:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4518:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr   Constant pointer to the VADC group
4519:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param res_reg_num  Result register which is intended to be initialized
4520:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                     <BR>Range: [0x0 to 0xF]
4521:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config       Pointer to initialization data
4522:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4523:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4524:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4525:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4526:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes a Group Result Register.<BR>
4527:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Various options needed for the working of the result result will be configured with this API.
4528:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This would determine the result handling of the group registers. This API must be called after
4529:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * the channel Init (XMC_VADC_GROUP_ChannelInit())to initialize the result register that is selecte
4530:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would also determine if the result register that is being configured has to a part of a
4531:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * In this API one can also configure the various result handling options line FIR/IIR filters and 
4532:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Also configures the Data reduction to accumulate 2/3/4 results need to be done. This API will al
4533:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * the result event generation.  A call to this API would configure the register GxRCR with the \b 
4534:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4535:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4536:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_AddResultToFifo()<BR> XMC_VADC_GROUP_EnableResultEvent()<br> XMC_VADC_GROUP_Disab
4537:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4538:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ResultInit(XMC_VADC_GROUP_t *const group_ptr,
4539:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                const uint32_t res_reg_num,
4540:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                const XMC_VADC_RESULT_CONFIG_t *config)
4541:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
4542:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ResultInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
4543:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->RCR[res_reg_num] = config->g_rcr;
4544:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
4545:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
4546:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
4547:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
4548:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4549:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4550:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param res_reg  Register which is required to be a part of results FIFO
4551:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                 <BR>Range: [0x0 to 0xF]
4552:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4553:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4554:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4555:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4556:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Adds result register to Result FIFO.<BR>\n
4557:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sometimes, the rate of consumption of results by application software may not match the rate at 
4558:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * results are produced. A Result FIFO thus helps a slow consumer to read out results without loss 
4559:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a result register is added to fifo, it is in fact chained to its higher numbered neighbor. 
4560:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Result Register-5 is to be added to FIFO, it gets chained to Result Register-6. Results are writ
4561:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * while the same can be read out of Register-5 leisurely by software.
4562:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxRCR.FEN.
4563:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4564:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Note:</b><br>
4565:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * The FIFO is always read by the software with the lowest numbered result register.
4566:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * The hardware will write the results from the highest numbered result register.
4567:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4568:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4569:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
4570:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4571:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_AddResultToFifo(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg);
4572:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
4573:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4574:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4575:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param res_reg  Result Register for which event generation is to be enabled
4576:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                 <BR>Range: [0x0 to 0xF]
4577:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4578:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4579:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4580:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4581:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables result event generation.<BR>\n
4582:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Once the results of conversion are available, the result event (which is being enabled in this f
4583:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * if connected to a service request line(Group or Shared service request) can lead to an interrupt
4584:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * not only necessary to enable the event, but also to connect it to a service request line. The
4585:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * service request generation capability must also be enabled and so should the corresponding NVIC 
4586:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxRCR.SRGEN.
4587:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4588:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4589:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_SetResultInterruptNode().
4590:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4591:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_EnableResultEvent(XMC_VADC_GROUP_t *const group_ptr, const uint
4592:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
4593:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
4594:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_EnableResultEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
4595:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_EnableResultEvent:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RE
4596:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->RCR[res_reg] |= (uint32_t)VADC_G_RCR_SRGEN_Msk;
4597:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
4598:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
4599:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4600:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4601:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param res_reg  Result Register for which event generation is to be disabled
4602:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                 <BR>Range: [0x0 to 0xF]
4603:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4604:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4605:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4606:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4607:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable result event generation.<BR>\n
4608:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This would just disable the event. It would not alter anything w.r.t the SR line if it was confi
4609:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxRCR.SRGEN.
4610:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4611:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4612:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_EnableResultEvent().
4613:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4614:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_DisableResultEvent(XMC_VADC_GROUP_t *const group_ptr, const uin
4615:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
4616:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_DisableResultEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
4617:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_DisableResultEvent:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_R
4618:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->RCR[res_reg] &= ~((uint32_t)VADC_G_RCR_SRGEN_Msk);
4619:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
4620:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
4621:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4622:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4623:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param res_reg  Result Register from which the result of conversion is to be read out
4624:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                 <BR>Range: [0x0 to 0xF]
4625:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4626:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    uint32_t  returns the complete result register GxRESy.
4627:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4628:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4629:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the result register completely (result of conversion as well as other info).<BR>\n
4630:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * The Result register will have information regarding the channel that is requesting the conversio
4631:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the result is valid, if the fast compare bit, Data Reduction Counter, and the request source 
4632:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * All these information will be returned back. And if the user is polling for the result he can us
4633:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * result if the valid bit is set. A call to this API would return the complete register GxRES.
4634:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4635:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4636:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_GetResult().
4637:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4638:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GROUP_GetDetailedResult(XMC_VADC_GROUP_t *const group_ptr, const 
4639:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
4640:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetDetailedResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
4641:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetDetailedResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RE
4642:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   return(group_ptr->RES[res_reg]);
4643:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
4644:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
4645:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4646:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4647:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param res_reg  Result Register from which the result of conversion is to be read out
4648:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                 <BR>Range: [0x0 to 0xF]
4649:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4650:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *    XMC_VADC_RESULT_SIZE_t Result register values.
4651:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range:[ 0x0 to 0xFFF] (Result of single conversion. Accumulated results not c
4652:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4653:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4654:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the result of the conversion.<BR>\n
4655:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will only return the result of the conversion and will strip out the other information 
4656:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * in the result register. A call to this API would access the register bit field GxRES.RESULT.
4657:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4658:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4659:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_GetDetailedResult().
4660:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4661:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GROUP_GetResult(XMC_VADC_GROUP_t *const group_ptr, 
4662:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                 const uint32_t res_reg)
4663:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** {
 209              	 .loc 3 4663 0
 210              	 .cfi_startproc
 211              	 
 212              	 
 213              	 
 214 0000 80B4     	 push {r7}
 215              	.LCFI22:
 216              	 .cfi_def_cfa_offset 4
 217              	 .cfi_offset 7,-4
 218 0002 83B0     	 sub sp,sp,#12
 219              	.LCFI23:
 220              	 .cfi_def_cfa_offset 16
 221 0004 00AF     	 add r7,sp,#0
 222              	.LCFI24:
 223              	 .cfi_def_cfa_register 7
 224 0006 7860     	 str r0,[r7,#4]
 225 0008 3960     	 str r1,[r7]
4664:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
4665:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REG
4666:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** 
4667:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((XMC_VADC_RESULT_SIZE_t)group_ptr->RES[res_reg]);
 226              	 .loc 3 4667 0
 227 000a 7B68     	 ldr r3,[r7,#4]
 228 000c 3A68     	 ldr r2,[r7]
 229 000e C032     	 adds r2,r2,#192
 230 0010 53F82230 	 ldr r3,[r3,r2,lsl#2]
 231 0014 9BB2     	 uxth r3,r3
4668:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc\xmc_vadc.h **** }
 232              	 .loc 3 4668 0
 233 0016 1846     	 mov r0,r3
 234 0018 0C37     	 adds r7,r7,#12
 235              	.LCFI25:
 236              	 .cfi_def_cfa_offset 4
 237 001a BD46     	 mov sp,r7
 238              	.LCFI26:
 239              	 .cfi_def_cfa_register 13
 240              	 
 241 001c 5DF8047B 	 ldr r7,[sp],#4
 242              	.LCFI27:
 243              	 .cfi_restore 7
 244              	 .cfi_def_cfa_offset 0
 245 0020 7047     	 bx lr
 246              	 .cfi_endproc
 247              	.LFE335:
 249 0022 00BF     	 .section .text.ADC_MEASUREMENT_ADV_GetResult,"ax",%progbits
 250              	 .align 2
 251              	 .thumb
 252              	 .thumb_func
 254              	ADC_MEASUREMENT_ADV_GetResult:
 255              	.LFB340:
 256              	 .file 4 "C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV/adc_measurement_adv.h"
   1:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**
   2:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @file adc_measure_adv.h
   3:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @date 2016-08-18
   4:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
   5:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * NOTE:
   6:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
   8:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @cond
   9:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  **************************************************************************************************
  10:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * ADC_MEASUREMENT_ADV v4.0.14 - Incorporates advanced features of the Versatile Analog to Digital 
  11:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *                               to measure analog inputs.
  12:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
  13:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  14:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * All rights reserved.
  15:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
  16:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  17:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * following conditions are met:
  18:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
  19:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  20:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *   disclaimer.
  21:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
  22:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  23:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  24:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
  25:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  26:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *   products derived from this software without specific prior written permission.
  27:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
  28:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  29:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  30:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  31:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  32:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  33:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  34:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
  36:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  37:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * with Infineon Technologies AG (dave@infineon.com).
  38:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  **************************************************************************************************
  39:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
  40:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * Change History
  41:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * --------------
  42:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
  43:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * 2015-10-09:
  44:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *     - Initial version for DAVEv4.<BR>
  45:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
  46:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * 2015-10-20:
  47:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *     - Documentation updated.<BR>
  48:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
  49:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * 2015-12-15:
  50:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *     - Added support for XMC4300 devices.<BR>
  51:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
  52:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * 2016-01-18:
  53:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *     - 1.Internal consumption of request source.<BR>
  54:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *     - 2.Support for synchronized conversion reduced from 8 master channels to 4 .<BR>
  55:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *     - 3.Converted the SetBoundary() API from public API to private API .<BR>
  56:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *     - 4.Updated all APIs for the Internal consumption of request source.<BR>
  57:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
  58:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * 2016-02-05:
  59:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *     - Documentation updated.<BR>
  60:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
  61:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * 2016-03-18:
  62:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *     - Added consumption of the GLOBAL ICLASS -1 for Sync. Conversions.<BR>
  63:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *     - Added consumption of the result register-0 for subtraction mode.<BR>
  64:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *     - Removed ADC_MEASUREMENT_ADV_SetUniformConversion().<BR>
  65:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *     - New API ADC_MEASUREMENT_ADV_SetIclass() added to configure the GLOBAL ICLASS for Slaves. <
  66:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
  67:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * 2016-04-26:
  68:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *     - The synchronized conversion in a master slave configuration is currently not supported.<BR
  69:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
  70:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * 2016-06-17:
  71:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *     - The synchronized conversion is supported.<BR>
  72:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *     - Modified the Sync initialization sequence to configure the EVAL bits in the slave groups.<
  73:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
  74:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * 2016-08-18:
  75:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *     - Minimum sample time at low frequencies changed to incorporate Errata ADC_AI.H006 and ADC_A
  76:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
  77:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @endcond
  78:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
  79:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  */
  80:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
  81:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /*CODE_BLOCK_BEGIN*/
  82:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #ifndef ADC_MEASUREMENT_ADV_H
  83:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #define ADC_MEASUREMENT_ADV_H
  84:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
  85:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
  86:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**************************************************************************************************
  87:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * HEADER FILES
  88:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  **************************************************************************************************
  89:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
  90:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #include "GLOBAL_ADC/global_adc.h"
  91:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #include "adc_measurement_adv_conf.h"
  92:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
  93:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  /*************************************************************************************************
  94:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * MACROS
  95:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  **************************************************************************************************
  96:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #if (!((XMC_LIB_MAJOR_VERSION == 2U) && \
  97:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****        (XMC_LIB_MINOR_VERSION >= 1U) && \
  98:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****        (XMC_LIB_PATCH_VERSION >= 8U)))
  99:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #error "ADC_MEASUREMENT_ADV requires XMC Peripheral Library v2.1.8 or higher"
 100:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #endif
 101:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  /*************************************************************************************************
 102:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * ENUMS
 103:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  **************************************************************************************************
 104:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**
 105:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @ingroup ADC_MEASUREMENT_ADV_enumerations
 106:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @{
 107:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  */
 108:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**@brief Return value of an API  */
 109:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 110:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** typedef enum ADC_MEASUREMENT_ADV_STATUS
 111:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** {
 112:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_STATUS_SUCCESS = 0,  /**< The API call is successful*/
 113:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_STATUS_FAILURE,      /**< The API call is failed*/
 114:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_STATUS_UNINITIALIZED /**< APP has not been Initialized */
 115:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** } ADC_MEASUREMENT_ADV_STATUS_t;
 116:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 117:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 118:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**
 119:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @brief The selected Request source.
 120:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  */
 121:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** typedef enum ADC_MEASUREMENT_ADV_REQUEST_SOURCE
 122:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** {
 123:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_REQUEST_SOURCE_SCAN = 0, /**< Uses the ADC_SCAN APP's, scan request source.*/
 124:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_REQUEST_SOURCE_LOCAL_SCAN, /**< Uses the internally consumed Scan request sou
 125:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_REQUEST_SOURCE_QUEUE,    /**< Uses the ADC_QUEUE APP's, queue request source.
 126:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_REQUEST_SOURCE_LOCAL_QUEUE,    /**< Uses the internally consumed Queue reques
 127:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** } ADC_MEASUREMENT_ADV_REQUEST_SOURCE_t;
 128:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 129:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**
 130:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @brief The gain applied on the input signal.
 131:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  */
 132:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** typedef enum ADC_MEASUREMENT_ADV_GAIN
 133:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** {
 134:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_GAIN_1 = 0U,   /**< The gain value of 1:1 is selected*/
 135:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_GAIN_3 = 1U,   /**< The gain value of 1:3 is selected*/
 136:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_GAIN_6 = 2U,   /**< The gain value of 1:6 is selected*/
 137:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_GAIN_12 = 3U   /**< The gain value of 1:12 is selected*/
 138:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** } ADC_MEASUREMENT_ADV_GAIN_t;
 139:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 140:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**
 141:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @brief Alignment options for the subtraction value
 142:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  */
 143:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** typedef enum ADC_MEASUREMENT_ADV_SUBTRATION
 144:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** {
 145:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_SUBTRATION_12BIT_LEFT_ALIGN  = 0U,     /**< Always align result to left */
 146:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_SUBTRATION_12BIT_RIGHT_ALIGN = 0U,     /**< Always align result to right */
 147:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_SUBTRATION_10BIT_LEFT_ALIGN  = 2U,     /**< Always align result to left */
 148:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_SUBTRATION_10BIT_RIGHT_ALIGN = 0U,     /**< Always align result to right */
 149:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_SUBTRATION_8BIT_LEFT_ALIGN   = 4U,     /**< Always align result to left */
 150:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_SUBTRATION_8BIT_RIGHT_ALIGN  = 0U      /**< Always align result to right */
 151:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** } ADC_MEASUREMENT_ADV_SUBTRATION_t;
 152:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 153:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**
 154:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @brief The result of the fast compare operation.
 155:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  */
 156:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** typedef enum ADC_MEASUREMENT_ADV_FAST_COMPARE
 157:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** {
 158:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_FAST_COMPARE_LOW     = 0U, /**< The result of fast conversion is low.*/
 159:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_FAST_COMPARE_HIGH    = 1U, /**< The result of fast conversion is high.*/
 160:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_FAST_COMPARE_INVALID = 2U  /**< The result is invalid since no new results ar
 161:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** } ADC_MEASUREMENT_ADV_FAST_COMPARE_t;
 162:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 163:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**
 164:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @brief The result of the fast compare operation.
 165:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  */
 166:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** typedef enum ADC_MEASUREMENT_ADV_SYNC_SEQ
 167:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** {
 168:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_SYNC_SEQ_POWER_DOWN = 0U, /**< The result of fast conversion is low.*/
 169:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_SYNC_SEQ_STSEL_CONFIG, /**< The result of fast conversion is low.*/
 170:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_SYNC_SEQ_EVAL_CONFIG, /**< The result of fast conversion is low.*/
 171:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** } ADC_MEASUREMENT_ADV_SYNC_SEQ_t;
 172:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 173:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 174:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**
 175:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @}
 176:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  */
 177:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 178:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**************************************************************************************************
 179:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** * DATA STRUCTURES
 180:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** ***************************************************************************************************
 181:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**
 182:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @ingroup ADC_MEASUREMENT_ADV_datastructures
 183:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @{
 184:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  */
 185:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /*Anonymous structure/union guard start*/
 186:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #if defined(__CC_ARM)
 187:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   #pragma push
 188:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   #pragma anon_unions
 189:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #elif defined(__TASKING__)
 190:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   #pragma warning 586
 191:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #endif
 192:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 193:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** typedef void (*ADC_MEASUREMENT_ADV_EVENT_CONFIG_t)(void); /**< Function pointer to the mux configur
 194:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 195:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**
 196:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @brief NVIC Configuration structure for request source interrupt.
 197:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  */
 198:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** typedef struct ADC_MEASUREMENT_ADV_NVIC_CONFIG
 199:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** {
 200:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   uint32_t node_id;    /**< This indicates the NVIC Node number.*/
 201:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 202:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   uint32_t priority;   /**< This indicates the NVIC priority.*/
 203:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #if(UC_FAMILY == XMC4)
 204:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   uint32_t sub_priority; /**< This indicates the NVIC sub priority in XMC4x Devices.*/
 205:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #endif
 206:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   bool interrupt_enable; /**< This flag indicates if a Interrupt has been requested.*/
 207:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #ifdef ADC_MEASUREMENT_ADV_NON_DEFAULT_IRQ_SOURCE_SELECTED
 208:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   uint8_t irqctrl;       /**< This indicates the service request source selected for the consumed N
 209:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #endif
 210:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** } ADC_MEASUREMENT_ADV_NVIC_CONFIG_t;
 211:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 212:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #ifdef ADC_MEASUREMENT_ADV_LOCAL_SCAN_USED
 213:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**
 214:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @brief Configuration Data structure of scan request source.
 215:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  */
 216:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** typedef struct ADC_MEASUREMENT_ADV_SCAN
 217:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** {
 218:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   const ADC_MEASUREMENT_ADV_NVIC_CONFIG_t rs_intr_handle;    /**< Holds the ISR Handle*/
 219:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 220:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   const XMC_VADC_GROUP_CLASS_t iclass_config_handle;         /**< Holds the ICLASS Configurations*/
 221:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 222:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   const XMC_VADC_SCAN_CONFIG_t *const scan_config_handle;    /**< Holds the LLD SCAN Structure*/
 223:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 224:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   const XMC_VADC_GATEMODE_t gating_mode;         /**< Gating mode configuration needed for Scan req
 225:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 226:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   const XMC_VADC_SR_t srv_req_node;              /**< Source event interrupt node pointer*/
 227:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 228:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   const uint32_t  insert_mask;                  /**< Insert Mask for the scan request source*/
 229:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 230:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   const uint8_t iclass_num;                      /**< Holds the ICLASS ID either ICLASS-0 or ICLASS
 231:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 232:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** } ADC_MEASUREMENT_ADV_SCAN_t;
 233:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #endif
 234:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 235:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #ifdef ADC_MEASUREMENT_ADV_LOCAL_QUEUE_USED
 236:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**
 237:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @brief Configuration Data structure of queue request source.
 238:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  */
 239:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** typedef struct ADC_MEASUREMENT_ADV_QUEUE
 240:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** {
 241:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   const ADC_MEASUREMENT_ADV_NVIC_CONFIG_t rs_intr_handle;    /**< Holds the ISR Handle*/
 242:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 243:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   const XMC_VADC_GROUP_CLASS_t iclass_config_handle;         /**< Holds the ICLASS Configurations*/
 244:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 245:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   const XMC_VADC_QUEUE_CONFIG_t *const queue_config_handle;    /**< Holds the LLD QUEUE Structure*/
 246:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 247:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   const XMC_VADC_GATEMODE_t gating_mode;         /**< Gating mode configuration needed for Scan req
 248:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 249:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   const XMC_VADC_SR_t srv_req_node;              /**< Source event interrupt node pointer*/
 250:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 251:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   const uint8_t iclass_num;                      /**< Holds the ICLASS ID either ICLASS-0 or ICLASS
 252:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 253:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** } ADC_MEASUREMENT_ADV_QUEUE_t;
 254:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #endif
 255:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 256:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 257:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**
 258:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * Structure to configure the channels in the ADC_MEASUREMENT_ADV APP.
 259:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  */
 260:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** typedef struct ADC_MEASUREMENT_ADV_CHANNEL
 261:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** {
 262:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   XMC_VADC_CHANNEL_CONFIG_t *ch_handle; /**< This holds the VADC Channel LLD structures*/
 263:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 264:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   XMC_VADC_RESULT_CONFIG_t *res_handle[ADC_MEASUREMENT_ADV_RESULT_REG]; /**< This hold the VADC LLD
 265:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****                                                                               configuration structu
 266:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 267:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #ifdef ADC_MEASUREMENT_ADV_ANALOG_IO_USED
 268:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ANALOG_IO_t   *analog_io_config;    /**< This hold the address of the ANALOG_IO configuration str
 269:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #endif
 270:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 271:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #ifdef ADC_MEASUREMENT_ADV_FIFO_USED
 272:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   uint8_t max_fifo_required;             /**< The required number of FIFO elements*/
 273:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 274:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   uint8_t result_fifo_tail_number;      /**< The tail result register number if FIFO is selected. *
 275:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #endif
 276:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   uint8_t group_index;          /**< This holds the group index*/
 277:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 278:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   uint8_t ch_num;             /**< This Holds the Channel Number*/
 279:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 280:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #if(UC_FAMILY == XMC1)
 281:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_GAIN_t shs_gain_factor; /**< The required gain factor for the channel.*/
 282:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #endif
 283:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 284:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** } ADC_MEASUREMENT_ADV_CHANNEL_t;
 285:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 286:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**
 287:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * Structure to configure ADC_MEASUREMENT_ADV APP.
 288:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  */
 289:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** typedef struct ADC_MEASUREMENT_ADV
 290:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** {
 291:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   const ADC_MEASUREMENT_ADV_CHANNEL_t **const channel_array;      /**< This holds an array of chann
 292:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****                                                               by the current instance of the ADC_ME
 293:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #if defined(ADC_MEASUREMENT_ADV_ADC_SCAN_USED) || defined(ADC_MEASUREMENT_ADV_ADC_QUEUE_USED) || \
 294:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     defined(ADC_MEASUREMENT_ADV_LOCAL_QUEUE_USED)
 295:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   union
 296:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   {
 297:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #ifdef ADC_MEASUREMENT_ADV_ADC_SCAN_USED
 298:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   const ADC_SCAN_ENTRY_t **const scan_entries;   /**< Holds the pointer to the scan entries. */
 299:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #endif
 300:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #ifdef ADC_MEASUREMENT_ADV_ADC_QUEUE_USED
 301:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   const ADC_QUEUE_ENTRY_t **const queue_entries;  /**< Holds the pointer to the queue entries.*/
 302:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #endif
 303:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #ifdef ADC_MEASUREMENT_ADV_LOCAL_QUEUE_USED
 304:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   const XMC_VADC_QUEUE_ENTRY_t **const local_queue_entries;  /**< Holds the pointer to the queue en
 305:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #endif
 306:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   };
 307:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #endif
 308:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 309:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_EVENT_CONFIG_t event_config; /**< This hold the pointer to the function
 310:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****                                                       that does mux configuration. Which entails ch
 311:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****                                                       result node configuration*/
 312:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   union
 313:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   {
 314:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #ifdef ADC_MEASUREMENT_ADV_ADC_SCAN_USED
 315:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     ADC_SCAN_t *const scan_handle;     /**< Pointer to the ADC_SCAN APP handle*/
 316:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #endif
 317:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #ifdef ADC_MEASUREMENT_ADV_ADC_QUEUE_USED
 318:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     ADC_QUEUE_t *const queue_handle;   /**< Pointer to the ADC_QUEUE APP handle*/
 319:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #endif
 320:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #ifdef ADC_MEASUREMENT_ADV_LOCAL_SCAN_USED
 321:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     ADC_MEASUREMENT_ADV_SCAN_t *const local_scan_handle;   /**< Pointer to the scan handle*/
 322:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #endif
 323:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #ifdef ADC_MEASUREMENT_ADV_LOCAL_QUEUE_USED
 324:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     ADC_MEASUREMENT_ADV_QUEUE_t *const local_queue_handle;   /**< Pointer to the queue handle*/
 325:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #endif
 326:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   };
 327:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 328:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_STATUS_t *init_state;   /**< This enumeration gives information about the sta
 329:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 330:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_REQUEST_SOURCE_t req_src; /**< The request source used by this instance of
 331:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****                                                       the ADC_MEASUREMENT_ADV APP */
 332:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 333:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #ifdef ADC_MEASUREMENT_ADV_SYNC_USED
 334:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   union
 335:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   {
 336:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     struct
 337:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     {
 338:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****       uint8_t sync_slave_g0 :1; /**< If set the group-0 will be configured as the slave group.*/
 339:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****       uint8_t sync_slave_g1 :1; /**< If set the group-1 will be configured as the slave group*/
 340:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****       uint8_t sync_slave_g2 :1; /**< If set the group-2 will be configured as the slave group*/
 341:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****       uint8_t sync_slave_g3 :1; /**< If set the group-3 will be configured as the slave group*/
 342:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****       uint8_t               :4;
 343:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     };
 344:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     uint8_t sync_slaves;
 345:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   };
 346:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 347:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #endif
 348:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   const uint8_t group_index; /**< The group index number for the APP*/
 349:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 350:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   const uint8_t total_number_of_entries; /**< Indicates the total number of entries configured in
 351:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****                                               the current APP instance*/
 352:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 353:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   const uint8_t total_number_of_channels; /**< Indicates the total number of channels configured in
 354:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****                                                the current APP instance*/
 355:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 356:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   const bool start_at_initialization; /**< This determines if the insertion of the queue or
 357:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****                                             scan entries should happen after initialization of the 
 358:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #ifdef ADC_MEASUREMENT_ADV_SYNC_USED
 359:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   const bool configure_globiclass1;  /**< Copy the master channels conversion parameters to the glo
 360:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****                                           Hence the slave channels are using the same features as t
 361:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #endif
 362:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** } ADC_MEASUREMENT_ADV_t;
 363:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 364:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**
 365:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @}
 366:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  */
 367:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 368:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /*Anonymous structure/union guard end*/
 369:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #if defined(__CC_ARM)
 370:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   #pragma pop
 371:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #elif defined(__TASKING__)
 372:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   #pragma warning restore
 373:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #endif
 374:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 375:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #ifdef __cplusplus
 376:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** extern "C" {
 377:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #endif
 378:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 379:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**************************************************************************************************
 380:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * API Prototypes
 381:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  **************************************************************************************************
 382:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**
 383:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @ingroup ADC_MEASUREMENT_ADV_apidoc
 384:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @{
 385:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  */
 386:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 387:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**
 388:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @brief Get ADC_MEASUREMENT_ADV APP version
 389:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @return DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 390:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
 391:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * \par<b>Description: </b><br>
 392:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * The function can be used to check application software compatibility with a
 393:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * specific version of the APP.
 394:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
 395:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * Example Usage:
 396:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
 397:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @code
 398:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * #include <DAVE.h>
 399:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
 400:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * int main(void) {
 401:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *   DAVE_STATUS_t init_status;
 402:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *   DAVE_APP_VERSION_t version;
 403:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
 404:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *   // Initialize ADC_MEASUREMENT_ADV APP:
 405:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *   // ADC_MEASUREMENT_ADV_Init() is called from within DAVE_Init().
 406:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *   init_status = DAVE_Init();
 407:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
 408:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *   version = ADC_MEASUREMENT_ADV_GetAppVersion();
 409:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *   if (version.major != 1U) {
 410:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *     // Probably, not the right version.
 411:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *   }
 412:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
 413:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *   // More code here
 414:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *   while(1) {
 415:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
 416:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *   }
 417:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *   return (0);
 418:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * }
 419:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @endcode
 420:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  */
 421:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** DAVE_APP_VERSION_t ADC_MEASUREMENT_ADV_GetAppVersion(void);
 422:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 423:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**
 424:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @brief Starts the VADC request source.
 425:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @param handle_ptr constant pointer to the APP handle structure<BR>
 426:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @return None <BR>
 427:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
 428:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * \par<b>Description: </b><br>
 429:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * This API would start the request source of the VADC. After this API is invoked the ADC is ready 
 430:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * conversion requests.
 431:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * If scan request source is selected then this API would write to GxARBPR.ASEN1 bit.
 432:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * If queue request source is selected then this API would write to GxARBPR.ASEN0 bit. At the time 
 433:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * for the queue, If there was queue entry waiting in the queue buffer without waiting for a hardwa
 434:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * start the conversion of such a queue.
 435:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
 436:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * Example Usage:
 437:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
 438:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @code
 439:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** // Initialize the ADC_MEASUREMENT_ADV APP. Set the number of required channels to 2.
 440:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** // Goto interrupts tab enable request source interrupt.
 441:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** // Goto the ADC_SCAN/ADC_QUEUE APP and enable the request source interrupt.
 442:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** // Generate the code and build.
 443:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** // Replace this in the main.c.
 444:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declaratio
 445:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 446:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** uint16_t result[2];
 447:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** void adc_measurement_adv_callback(void)
 448:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** {
 449:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   result[0] = ADC_MEASUREMENT_ADV_GetResult(&ADC_MEASUREMENT_ADV_0_Channel_A);
 450:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   result[1] = ADC_MEASUREMENT_ADV_GetResult(&ADC_MEASUREMENT_ADV_0_Channel_B);
 451:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** }
 452:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 453:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** int main(void)
 454:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** {
 455:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   DAVE_STATUS_t status;
 456:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 457:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   status = DAVE_Init();           // Initialization of DAVE APPs
 458:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 459:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   if(status == DAVE_STATUS_FAILURE)
 460:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   {
 461:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     // Placeholder for error handler code. The while loop below can be replaced with an user error 
 462:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     XMC_DEBUG("DAVE APPs initialization failed\n");
 463:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 464:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     while(1U)
 465:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     {
 466:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 467:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     }
 468:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   }
 469:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 470:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   // Start the selected request source
 471:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_StartADC(&ADC_MEASUREMENT_ADV_0);
 472:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 473:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   while(1U)
 474:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   {
 475:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     // Continuously re-trigger the scan conversion sequence
 476:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     ADC_MEASUREMENT_ADV_SoftwareTrigger(&ADC_MEASUREMENT_ADV_0);
 477:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   }
 478:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** }
 479:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @endcode
 480:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  */
 481:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** void ADC_MEASUREMENT_ADV_StartADC(const ADC_MEASUREMENT_ADV_t *const handle_ptr);
 482:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 483:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**
 484:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @brief Starts the conversion of the required channels
 485:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @param handle_ptr constant pointer to the APP handle structure<BR>
 486:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @return None <BR>
 487:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
 488:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * \par<b>Description: </b><br>
 489:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * Trigger a load event for the required channels thus starting the conversion of the ADC channels.
 490:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * If scan request source is selected then this API would write to GxASMR.LDEV bit, causing the con
 491:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * If queue request source is selected then this API would write to GxQMR0.TREV bit. At the time of
 492:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * for the queue. If there was queue entry waiting in the queue buffer for a hardware trigger, writ
 493:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * triggers the conversion for that entry.
 494:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
 495:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * Example Usage:
 496:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
 497:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @code
 498:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** // Initialize the ADC_MEASUREMENT_ADV APP. Set the number of required channels to 2.
 499:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** // Goto interrupts tab enable request source interrupt.
 500:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** // Goto the ADC_SCAN/ADC_QUEUE APP and enable the request source interrupt.
 501:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** // Generate the code and build.
 502:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** // Replace this in the main.c.
 503:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declaratio
 504:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 505:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** uint16_t result[2];
 506:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** void adc_measurement_adv_callback(void)
 507:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** {
 508:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   result[0] = ADC_MEASUREMENT_ADV_GetResult(&ADC_MEASUREMENT_ADV_0_Channel_A);
 509:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   result[1] = ADC_MEASUREMENT_ADV_GetResult(&ADC_MEASUREMENT_ADV_0_Channel_B);
 510:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** }
 511:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 512:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** int main(void)
 513:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** {
 514:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   DAVE_STATUS_t status;
 515:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 516:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   status = DAVE_Init();           // Initialization of DAVE APPs
 517:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 518:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   if(status == DAVE_STATUS_FAILURE)
 519:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   {
 520:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     // Placeholder for error handler code. The while loop below can be replaced with an user error 
 521:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     XMC_DEBUG("DAVE APPs initialization failed\n");
 522:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 523:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     while(1U)
 524:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     {
 525:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 526:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     }
 527:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   }
 528:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 529:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   // Start the selected request source
 530:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_StartADC(&ADC_MEASUREMENT_ADV_0);
 531:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 532:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   while(1U)
 533:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   {
 534:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     // Continuously re-trigger the scan conversion sequence
 535:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     ADC_MEASUREMENT_ADV_SoftwareTrigger(&ADC_MEASUREMENT_ADV_0);
 536:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   }
 537:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** }
 538:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @endcode
 539:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  */
 540:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** void ADC_MEASUREMENT_ADV_SoftwareTrigger(const ADC_MEASUREMENT_ADV_t *const handle_ptr);
 541:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 542:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**
 543:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @brief Initializes the ADC_MEASUREMENT_ADV APP Instance
 544:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @param handle_ptr constant pointer to the APP handle structure<BR>
 545:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @return None <BR>
 546:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
 547:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * \par<b>Description: </b><br>
 548:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * Initialize the ADC and all the required configurations. A call to this API would initialize the 
 549:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * or the scan request source depending on the GUI selection. The initialization is taken up by cal
 550:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * or ADC_SCAN_Init(). Following this the synchronous conversion related initializations are taken 
 551:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * initialization the slave groups and the master group are powered down and either GxSYNCTR.STSEL 
 552:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * GxSYNCTR.EVALRy (if master) are configured. After the sync related configurations are completed 
 553:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * alone is powered on. Following this the result event or channel event related service request no
 554:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * are done (if required). Then the GxCHCTR configurations are completed. After the channel initial
 555:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * result handling initializations are done. This entails configuring the GxRCR registers for resul
 556:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * accumulation, subtraction and FIFO. After all these initialization are completed the channels co
 557:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * in the GUI is inserted into the appropriate ADC_QUEUE or ADC_SCAN APP buffer. If the GUI check b
 558:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * "Insert channels at initialization" is enable then these entries is pushed to the Hardware.
 559:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
 560:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * Example Usage:
 561:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
 562:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @code
 563:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * #include <DAVE.h>
 564:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * int main(void)
 565:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * {
 566:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *    DAVE_Init(); //ADC_MEASUREMENT_ADV_Init is called within DAVE_Init
 567:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *    return 0;
 568:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * }
 569:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @endcode
 570:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  */
 571:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** ADC_MEASUREMENT_ADV_STATUS_t ADC_MEASUREMENT_ADV_Init(const ADC_MEASUREMENT_ADV_t *const handle_ptr
 572:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 573:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** /**
 574:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @brief Returns the conversion result
 575:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @param handle_ptr constant pointer to the channel handle structure.
 576:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *                   (Use the channel handle related macros which are defined in adc_measure_adv_co
 577:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @return uint16_t conversion result.<BR>
 578:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *                                Range: [ 0x0 to 0xFFF] without any filters/ accumulation/ subtrac
 579:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
 580:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * \par<b>Description: </b><br>
 581:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * Return the converted result stored in the result register [GxRESy.RESULT].
 582:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * In the APP each channel is configured to a particular group result register (excluding FIFO). Th
 583:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * is defined in the channel handle structure @ref ADC_MEASUREMENT_ADV_CHANNEL_t. Hence this API sh
 584:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * with a pointer to the channel handle of type  @ref ADC_MEASUREMENT_ADV_CHANNEL_t (Directly use t
 585:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * related macros which are defined in adc_measure_adv_conf.h).
 586:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
 587:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * \par<b>Note: </b><br>
 588:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * This API is not Applicable for reading the result from the result FIFO registers
 589:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * Use @ref ADC_MEASUREMENT_ADV_GetFifoResult in order to read the FIFO result.
 590:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
 591:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * Example Usage:
 592:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  *
 593:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @code
 594:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** // Initialize the ADC_MEASUREMENT_ADV APP. Set the number of required channels to 2.
 595:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** // Select the request source APP from ADC_SCAN to ADC_QUEUE.
 596:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** // Goto the sequence plan and select Channel_A at position-0 and Channel_B at position-1.
 597:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** // Enable Wait for trigger for the Channel_A.
 598:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** // Goto interrupts tab enable request source interrupt.
 599:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** // Goto the ADC_QUEUE APP and enable the request source interrupt.
 600:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** // Generate the code and build.
 601:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** // Replace this in the main.c.
 602:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declaratio
 603:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 604:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** uint16_t result[2];
 605:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** void adc_measurement_adv_callback(void)
 606:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** {
 607:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   // Use the channel handle parameter in this format "<APP Name>_<CHANNEL Name>"
 608:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   result[0] = ADC_MEASUREMENT_ADV_GetResult(&ADC_MEASUREMENT_ADV_0_Channel_A);
 609:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   result[1] = ADC_MEASUREMENT_ADV_GetResult(&ADC_MEASUREMENT_ADV_0_Channel_B);
 610:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** }
 611:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 612:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** int main(void)
 613:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** {
 614:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   DAVE_STATUS_t status;
 615:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 616:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   status = DAVE_Init();           // Initialization of DAVE APPs
 617:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 618:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   if(status == DAVE_STATUS_FAILURE)
 619:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   {
 620:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     // Placeholder for error handler code. The while loop below can be replaced with an user error 
 621:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     XMC_DEBUG("DAVE APPs initialization failed\n");
 622:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 623:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     while(1U)
 624:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     {
 625:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 626:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****     }
 627:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   }
 628:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 629:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   // Start the selected request source
 630:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_StartADC(&ADC_MEASUREMENT_ADV_0);
 631:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 632:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   // Start the queue conversion sequence
 633:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   ADC_MEASUREMENT_ADV_SoftwareTrigger(&ADC_MEASUREMENT_ADV_0);
 634:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 635:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   while(1U)
 636:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   {
 637:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   }
 638:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** }
 639:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  * @endcode
 640:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****  */
 641:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** __STATIC_INLINE uint16_t ADC_MEASUREMENT_ADV_GetResult(const ADC_MEASUREMENT_ADV_CHANNEL_t *const h
 642:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** {
 257              	 .loc 4 642 0
 258              	 .cfi_startproc
 259              	 
 260              	 
 261 0000 80B5     	 push {r7,lr}
 262              	.LCFI28:
 263              	 .cfi_def_cfa_offset 8
 264              	 .cfi_offset 7,-8
 265              	 .cfi_offset 14,-4
 266 0002 84B0     	 sub sp,sp,#16
 267              	.LCFI29:
 268              	 .cfi_def_cfa_offset 24
 269 0004 00AF     	 add r7,sp,#0
 270              	.LCFI30:
 271              	 .cfi_def_cfa_register 7
 272 0006 7860     	 str r0,[r7,#4]
 643:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   uint16_t result;
 644:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   extern XMC_VADC_GROUP_t *const group_ptrs[XMC_VADC_MAXIMUM_NUM_GROUPS];
 645:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   XMC_ASSERT("ADC_MEASUREMENT_ADV_GetResult:Invalid handle_ptr", (handle_ptr != NULL))
 646:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** 
 647:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   result = XMC_VADC_GROUP_GetResult(group_ptrs[handle_ptr->group_index],
 273              	 .loc 4 647 0
 274 0008 7B68     	 ldr r3,[r7,#4]
 275 000a 1B7A     	 ldrb r3,[r3,#8]
 276 000c 1A46     	 mov r2,r3
 277 000e 0A4B     	 ldr r3,.L9
 278 0010 53F82220 	 ldr r2,[r3,r2,lsl#2]
 648:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****                                     (uint32_t) handle_ptr->ch_handle->result_reg_number);
 279              	 .loc 4 648 0
 280 0014 7B68     	 ldr r3,[r7,#4]
 281 0016 1B68     	 ldr r3,[r3]
 282 0018 9B78     	 ldrb r3,[r3,#2]
 283 001a C3F30303 	 ubfx r3,r3,#0,#4
 284 001e DBB2     	 uxtb r3,r3
 647:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****                                     (uint32_t) handle_ptr->ch_handle->result_reg_number);
 285              	 .loc 4 647 0
 286 0020 1046     	 mov r0,r2
 287 0022 1946     	 mov r1,r3
 288 0024 FFF7FEFF 	 bl XMC_VADC_GROUP_GetResult
 289 0028 0346     	 mov r3,r0
 290 002a FB81     	 strh r3,[r7,#14]
 649:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h ****   return(result);
 291              	 .loc 4 649 0
 292 002c FB89     	 ldrh r3,[r7,#14]
 650:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV\adc_measurement_adv.h **** }
 293              	 .loc 4 650 0
 294 002e 1846     	 mov r0,r3
 295 0030 1037     	 adds r7,r7,#16
 296              	.LCFI31:
 297              	 .cfi_def_cfa_offset 8
 298 0032 BD46     	 mov sp,r7
 299              	.LCFI32:
 300              	 .cfi_def_cfa_register 13
 301              	 
 302 0034 80BD     	 pop {r7,pc}
 303              	.L10:
 304 0036 00BF     	 .align 2
 305              	.L9:
 306 0038 00000000 	 .word group_ptrs
 307              	 .cfi_endproc
 308              	.LFE340:
 310              	 .global Vdc_error
 311              	 .section .bss.Vdc_error,"aw",%nobits
 312              	 .align 2
 315              	Vdc_error:
 316 0000 00000000 	 .space 4
 317              	 .global chargeTime
 318              	 .section .rodata.chargeTime,"a",%progbits
 319              	 .align 2
 322              	chargeTime:
 323 0000 80841E00 	 .word 2000000
 324              	 .global ADC
 325              	 .section .data.ADC,"aw",%progbits
 326              	 .align 2
 329              	ADC:
 330 0000 5940533A 	 .word 978534489
 331 0004 3333D33F 	 .word 1070805811
 332 0008 F910AE43 	 .word 1135481081
 333 000c 2200483E 	 .word 1044906018
 334 0010 0080ED41 	 .word 1106083840
 335              	 .global K_sync
 336              	 .section .rodata.K_sync,"a",%progbits
 337              	 .align 2
 340              	K_sync:
 341 0000 00504347 	 .word 1195593728
 342 0004 0000403F 	 .word 1061158912
 343 0008 00002041 	 .word 1092616192
 344 000c 00000000 	 .space 4
 345              	 .global PI_K_CC
 346              	 .section .rodata.PI_K_CC,"a",%progbits
 347              	 .align 2
 350              	PI_K_CC:
 351 0000 0AD72340 	 .word 1076090634
 352 0004 00209944 	 .word 1150885888
 353              	 .global HPF_K
 354              	 .section .rodata.HPF_K,"a",%progbits
 355              	 .align 2
 358              	HPF_K:
 359 0000 7B698A38 	 .word 948595067
 360 0004 7B698AB8 	 .word -1198888581
 361 0008 022B873D 	 .word 1032268546
 362 000c 94F6863D 	 .word 1032255124
 363              	 .global LPF_K_1
 364              	 .section .rodata.LPF_K_1,"a",%progbits
 365              	 .align 2
 368              	LPF_K_1:
 369 0000 0000803F 	 .word 1065353216
 370 0004 88A8A439 	 .word 967092360
 371 0008 D6D67F3F 	 .word 1065342678
 372              	 .global LPF_K_10
 373              	 .section .rodata.LPF_K_10,"a",%progbits
 374              	 .align 2
 377              	LPF_K_10:
 378 0000 0000803F 	 .word 1065353216
 379 0004 202D803B 	 .word 998255904
 380 0008 4BFF7D3F 	 .word 1065221963
 381              	 .global LPF_K_50
 382              	 .section .rodata.LPF_K_50,"a",%progbits
 383              	 .align 2
 386              	LPF_K_50:
 387 0000 0000803F 	 .word 1065353216
 388 0004 04617D3C 	 .word 1014849796
 389 0008 F714783F 	 .word 1064834295
 390              	 .global LPF_K_100
 391              	 .section .rodata.LPF_K_100,"a",%progbits
 392              	 .align 2
 395              	LPF_K_100:
 396 0000 0000803F 	 .word 1065353216
 397 0004 4085F93C 	 .word 1022985536
 398 0008 AC67703F 	 .word 1064331180
 399              	 .global LPF_K_500
 400              	 .section .rodata.LPF_K_500,"a",%progbits
 401              	 .align 2
 404              	LPF_K_500:
 405 0000 0000803F 	 .word 1065353216
 406 0004 D6DD163E 	 .word 1041685974
 407 0008 1591343F 	 .word 1060409621
 408              	 .global LPF_K_1500
 409              	 .section .rodata.LPF_K_1500,"a",%progbits
 410              	 .align 2
 413              	LPF_K_1500:
 414 0000 0000803F 	 .word 1065353216
 415 0004 77FEA33E 	 .word 1050934903
 416 0008 1303B83E 	 .word 1052246803
 417              	 .global conf
 418              	 .section .data.conf,"aw",%progbits
 419              	 .align 2
 422              	conf:
 423 0000 00803B44 	 .word 1144750080
 424 0004 0000AF43 	 .word 1135542272
 425 0008 AE07BB43 	 .word 1136330670
 426 000c 293C8A43 	 .word 1133132841
 427 0010 85CBA143 	 .word 1134676869
 428 0014 9A399543 	 .word 1133853082
 429 0018 00007041 	 .word 1097859072
 430 001c 000070C1 	 .word -1049624576
 431 0020 00409C45 	 .word 1167867904
 432              	 .global conv
 433              	 .section .bss.conv,"aw",%nobits
 434              	 .align 2
 437              	conv:
 438 0000 00000000 	 .space 40
 438      00000000 
 438      00000000 
 438      00000000 
 438      00000000 
 439              	 .global LPF_idq_ref
 440              	 .section .data.LPF_idq_ref,"aw",%progbits
 441              	 .align 2
 444              	LPF_idq_ref:
 445 0000 0000803F 	 .word 1065353216
 446 0004 04617D3C 	 .word 1014849796
 447 0008 F714783F 	 .word 1064834295
 448 000c 00000000 	 .word 0
 449 0010 00000000 	 .word 0
 450 0014 00000000 	 .word 0
 451 0018 00000000 	 .word 0
 452              	 .global LPF_iAB
 453              	 .section .data.LPF_iAB,"aw",%progbits
 454              	 .align 2
 457              	LPF_iAB:
 458 0000 0000803F 	 .word 1065353216
 459 0004 D6DD163E 	 .word 1041685974
 460 0008 1591343F 	 .word 1060409621
 461 000c 00000000 	 .word 0
 462 0010 00000000 	 .word 0
 463 0014 00000000 	 .word 0
 464 0018 00000000 	 .word 0
 465              	 .global LPF_vAB
 466              	 .section .data.LPF_vAB,"aw",%progbits
 467              	 .align 2
 470              	LPF_vAB:
 471 0000 0000803F 	 .word 1065353216
 472 0004 D6DD163E 	 .word 1041685974
 473 0008 1591343F 	 .word 1060409621
 474 000c 00000000 	 .word 0
 475 0010 00000000 	 .word 0
 476 0014 00000000 	 .word 0
 477 0018 00000000 	 .word 0
 478              	 .global LPF2_K_10
 479              	 .section .data.LPF2_K_10,"aw",%progbits
 480              	 .align 2
 483              	LPF2_K_10:
 484 0000 E25C8138 	 .word 948002018
 485 0004 E25C0139 	 .word 956390626
 486 0008 E25C8138 	 .word 948002018
 487 000c 0C957E40 	 .word 1082037516
 488 0010 FDFEFFC0 	 .word -1056964867
 489 0014 0D957E3E 	 .word 1048483085
 490 0018 00000000 	 .word 0
 491 001c 00000000 	 .word 0
 492 0020 00000000 	 .word 0
 493 0024 00000000 	 .word 0
 494              	 .global LPF2_K_50
 495              	 .section .data.LPF2_K_50,"aw",%progbits
 496              	 .align 2
 499              	LPF2_K_50:
 500 0000 D65C813A 	 .word 981556438
 501 0004 D65C013B 	 .word 989945046
 502 0008 D65C813A 	 .word 981556438
 503 000c 54607A40 	 .word 1081761876
 504 0010 D4EFFFC0 	 .word -1056968748
 505 0014 52607A3E 	 .word 1048207442
 506 0018 00000000 	 .word 0
 507 001c 00000000 	 .word 0
 508 0020 00000000 	 .word 0
 509 0024 00000000 	 .word 0
 510              	 .global LPF2_K_100
 511              	 .section .data.LPF2_K_100,"aw",%progbits
 512              	 .align 2
 515              	LPF2_K_100:
 516 0000 F15C813B 	 .word 998333681
 517 0004 F15C013C 	 .word 1006722289
 518 0008 F15C813B 	 .word 998333681
 519 000c FDE07440 	 .word 1081401597
 520 0010 52BFFFC0 	 .word -1056981166
 521 0014 EDE0743E 	 .word 1047847149
 522 0018 00000000 	 .word 0
 523 001c 00000000 	 .word 0
 524 0020 00000000 	 .word 0
 525 0024 00000000 	 .word 0
 526              	 .global LPF2_K_500
 527              	 .section .data.LPF2_K_500,"aw",%progbits
 528              	 .align 2
 531              	LPF2_K_500:
 532 0000 9093F43D 	 .word 1039438736
 533 0004 9093743E 	 .word 1047827344
 534 0008 9093F43D 	 .word 1039438736
 535 000c 55164940 	 .word 1078531669
 536 0010 645BF8C0 	 .word -1057465500
 537 0014 7DE8483E 	 .word 1044965501
 538 0018 00000000 	 .word 0
 539 001c 00000000 	 .word 0
 540 0020 00000000 	 .word 0
 541 0024 00000000 	 .word 0
 542              	 .global LPF2_K_1500
 543              	 .section .data.LPF2_K_1500,"aw",%progbits
 544              	 .align 2
 547              	LPF2_K_1500:
 548 0000 5165633F 	 .word 1063478609
 549 0004 5165E33F 	 .word 1071867217
 550 0008 5165633F 	 .word 1063478609
 551 000c FD3D0E40 	 .word 1074675197
 552 0010 AC26C7C0 	 .word -1060690260
 553 0014 B18E073E 	 .word 1040682673
 554 0018 00000000 	 .word 0
 555 001c 00000000 	 .word 0
 556 0020 00000000 	 .word 0
 557 0024 00000000 	 .word 0
 558              	 .global PI_PLL
 559              	 .section .data.PI_PLL,"aw",%progbits
 560              	 .align 2
 563              	PI_PLL:
 564 0000 295CAF3F 	 .word 1068457001
 565 0004 00002343 	 .word 1126367232
 566 0008 949E6B44 	 .word 1147903636
 567 000c 949E6BC4 	 .word -999580012
 568 0010 00000000 	 .word 0
 569 0014 00000000 	 .word 0
 570 0018 00       	 .byte 0
 571 0019 000000   	 .space 3
 572              	 .global PI_Vdc
 573              	 .section .data.PI_Vdc,"aw",%progbits
 574              	 .align 2
 577              	PI_Vdc:
 578 0000 52499D39 	 .word 966609234
 579 0004 A69BC43B 	 .word 1002740646
 580 0008 00007041 	 .word 1097859072
 581 000c 000070C1 	 .word -1049624576
 582 0010 00000000 	 .word 0
 583 0014 00000000 	 .word 0
 584 0018 00       	 .byte 0
 585 0019 000000   	 .space 3
 586              	 .global PI_d
 587              	 .section .data.PI_d,"aw",%progbits
 588              	 .align 2
 591              	PI_d:
 592 0000 CDCC4C3D 	 .word 1028443341
 593 0004 00002042 	 .word 1109393408
 594 0008 00007041 	 .word 1097859072
 595 000c 000070C1 	 .word -1049624576
 596 0010 00000000 	 .word 0
 597 0014 00000000 	 .word 0
 598 0018 00       	 .byte 0
 599 0019 000000   	 .space 3
 600              	 .global PI_q
 601              	 .section .data.PI_q,"aw",%progbits
 602              	 .align 2
 605              	PI_q:
 606 0000 CDCC4C3D 	 .word 1028443341
 607 0004 00002042 	 .word 1109393408
 608 0008 00007041 	 .word 1097859072
 609 000c 000070C1 	 .word -1049624576
 610 0010 00000000 	 .word 0
 611 0014 00000000 	 .word 0
 612 0018 00       	 .byte 0
 613 0019 000000   	 .space 3
 614              	 .global PI_cc
 615              	 .section .data.PI_cc,"aw",%progbits
 616              	 .align 2
 619              	PI_cc:
 620 0000 0AD72340 	 .word 1076090634
 621 0004 00004445 	 .word 1162084352
 622 0008 00803144 	 .word 1144094720
 623 000c 00002FC4 	 .word -1003552768
 624 0010 00000000 	 .word 0
 625 0014 00000000 	 .word 0
 626 0018 00000000 	 .word 0
 627 001c 00000000 	 .word 0
 628 0020 00       	 .byte 0
 629 0021 000000   	 .space 3
 630              	 .global dqsg
 631              	 .section .data.dqsg,"aw",%progbits
 632              	 .align 2
 635              	dqsg:
 636 0000 63149D43 	 .word 1134367843
 637 0004 00000000 	 .word 0
 638 0008 00000000 	 .word 0
 639 000c F404B53F 	 .word 1068827892
 640 0010 00000000 	 .word 0
 641 0014 00000000 	 .word 0
 642 0018 17B7D138 	 .word 953267991
 643 001c 00000000 	 .word 0
 644 0020 00000000 	 .word 0
 645 0024 F404B53F 	 .word 1068827892
 646 0028 00000000 	 .word 0
 647 002c 00000000 	 .word 0
 648 0030 17B7D138 	 .word 953267991
 649              	 .global i_dqsg
 650              	 .section .data.i_dqsg,"aw",%progbits
 651              	 .align 2
 654              	i_dqsg:
 655 0000 63149D43 	 .word 1134367843
 656 0004 00000000 	 .word 0
 657 0008 00000000 	 .word 0
 658 000c F404B53F 	 .word 1068827892
 659 0010 00000000 	 .word 0
 660 0014 00000000 	 .word 0
 661 0018 17B7D138 	 .word 953267991
 662 001c 00000000 	 .word 0
 663 0020 00000000 	 .word 0
 664 0024 F404B53F 	 .word 1068827892
 665 0028 00000000 	 .word 0
 666 002c 00000000 	 .word 0
 667 0030 17B7D138 	 .word 953267991
 668              	 .global V_dq_ref
 669              	 .section .data.V_dq_ref,"aw",%progbits
 670              	 .align 2
 673              	V_dq_ref:
 674 0000 00008241 	 .word 1099038720
 675 0004 00000000 	 .word 0
 676              	 .global I_dq_ref
 677              	 .section .bss.I_dq_ref,"aw",%nobits
 678              	 .align 2
 681              	I_dq_ref:
 682 0000 00000000 	 .space 8
 682      00000000 
 683              	 .global PQ_ref
 684              	 .section .bss.PQ_ref,"aw",%nobits
 685              	 .align 2
 688              	PQ_ref:
 689 0000 00000000 	 .space 8
 689      00000000 
 690              	 .global V_DC_ref
 691              	 .section .bss.V_DC_ref,"aw",%nobits
 692              	 .align 2
 695              	V_DC_ref:
 696 0000 00000000 	 .space 4
 697              	 .global V_DC_ref_f
 698              	 .section .bss.V_DC_ref_f,"aw",%nobits
 699              	 .align 2
 702              	V_DC_ref_f:
 703 0000 00000000 	 .space 4
 704              	 .global state
 705              	 .section .bss.state,"aw",%nobits
 706              	 .align 1
 709              	state:
 710 0000 0000     	 .space 2
 711              	 .global relayTimerFlag
 712              	 .section .bss.relayTimerFlag,"aw",%nobits
 713              	 .align 1
 716              	relayTimerFlag:
 717 0000 0000     	 .space 2
 718              	 .global mode
 719              	 .section .bss.mode,"aw",%nobits
 722              	mode:
 723 0000 00       	 .space 1
 724              	 .global ramp
 725              	 .section .data.ramp,"aw",%progbits
 728              	ramp:
 729 0000 FF       	 .byte -1
 730              	 .global sync
 731              	 .section .bss.sync,"aw",%nobits
 732              	 .align 1
 735              	sync:
 736 0000 0000     	 .space 2
 737              	 .global B2command
 738              	 .section .bss.B2command,"aw",%nobits
 739              	 .align 1
 742              	B2command:
 743 0000 0000     	 .space 2
 744              	 .global fault_rst
 745              	 .section .bss.fault_rst,"aw",%nobits
 746              	 .align 1
 749              	fault_rst:
 750 0000 0000     	 .space 2
 751              	 .global SWcommand
 752              	 .section .bss.SWcommand,"aw",%nobits
 753              	 .align 1
 756              	SWcommand:
 757 0000 0000     	 .space 2
 758              	 .global REARMcommand
 759              	 .section .bss.REARMcommand,"aw",%nobits
 760              	 .align 1
 763              	REARMcommand:
 764 0000 0000     	 .space 2
 765              	 .comm relayTimer,2,2
 766              	 .global fault_flag
 767              	 .section .bss.fault_flag,"aw",%nobits
 768              	 .align 1
 771              	fault_flag:
 772 0000 0000     	 .space 2
 773              	 .global error_code
 774              	 .section .bss.error_code,"aw",%nobits
 775              	 .align 2
 778              	error_code:
 779 0000 00000000 	 .space 4
 780              	 .global fan_pwm
 781              	 .section .bss.fan_pwm,"aw",%nobits
 782              	 .align 2
 785              	fan_pwm:
 786 0000 00000000 	 .space 4
 787              	 .global sync_aux3
 788              	 .section .bss.sync_aux3,"aw",%nobits
 789              	 .align 1
 792              	sync_aux3:
 793 0000 0000     	 .space 2
 794              	 .global termistor_temp
 795              	 .section .bss.termistor_temp,"aw",%nobits
 796              	 .align 1
 799              	termistor_temp:
 800 0000 0000     	 .space 2
 801              	 .global V_DC_adc
 802              	 .section .bss.V_DC_adc,"aw",%nobits
 803              	 .align 1
 806              	V_DC_adc:
 807 0000 0000     	 .space 2
 808              	 .global m_abc
 809              	 .section .bss.m_abc,"aw",%nobits
 810              	 .align 2
 813              	m_abc:
 814 0000 00000000 	 .space 12
 814      00000000 
 814      00000000 
 815              	 .global V_abc_adc
 816              	 .section .bss.V_abc_adc,"aw",%nobits
 817              	 .align 2
 820              	V_abc_adc:
 821 0000 00000000 	 .space 6
 821      0000
 822              	 .global I_abc_adc
 823 0006 0000     	 .section .bss.I_abc_adc,"aw",%nobits
 824              	 .align 2
 827              	I_abc_adc:
 828 0000 00000000 	 .space 6
 828      0000
 829              	 .global conv_temp_C
 830 0006 0000     	 .section .bss.conv_temp_C,"aw",%nobits
 831              	 .align 2
 834              	conv_temp_C:
 835 0000 00000000 	 .space 4
 836              	 .global V_DC
 837              	 .section .bss.V_DC,"aw",%nobits
 838              	 .align 2
 841              	V_DC:
 842 0000 00000000 	 .space 4
 843              	 .global V_abc
 844              	 .section .bss.V_abc,"aw",%nobits
 845              	 .align 2
 848              	V_abc:
 849 0000 00000000 	 .space 12
 849      00000000 
 849      00000000 
 850              	 .global I_abc
 851              	 .section .bss.I_abc,"aw",%nobits
 852              	 .align 2
 855              	I_abc:
 856 0000 00000000 	 .space 12
 856      00000000 
 856      00000000 
 857              	 .global V_AB
 858              	 .section .bss.V_AB,"aw",%nobits
 859              	 .align 2
 862              	V_AB:
 863 0000 00000000 	 .space 8
 863      00000000 
 864              	 .global I_AB
 865              	 .section .bss.I_AB,"aw",%nobits
 866              	 .align 2
 869              	I_AB:
 870 0000 00000000 	 .space 8
 870      00000000 
 871              	 .global V_DCf
 872              	 .section .bss.V_DCf,"aw",%nobits
 873              	 .align 2
 876              	V_DCf:
 877 0000 00000000 	 .space 4
 878              	 .global V_ABf
 879              	 .section .bss.V_ABf,"aw",%nobits
 880              	 .align 2
 883              	V_ABf:
 884 0000 00000000 	 .space 8
 884      00000000 
 885              	 .global I_ABf
 886              	 .section .bss.I_ABf,"aw",%nobits
 887              	 .align 2
 890              	I_ABf:
 891 0000 00000000 	 .space 8
 891      00000000 
 892              	 .global V_dq
 893              	 .section .bss.V_dq,"aw",%nobits
 894              	 .align 2
 897              	V_dq:
 898 0000 00000000 	 .space 8
 898      00000000 
 899              	 .global I_dq
 900              	 .section .bss.I_dq,"aw",%nobits
 901              	 .align 2
 904              	I_dq:
 905 0000 00000000 	 .space 8
 905      00000000 
 906              	 .global I_dq_ref_f
 907              	 .section .bss.I_dq_ref_f,"aw",%nobits
 908              	 .align 2
 911              	I_dq_ref_f:
 912 0000 00000000 	 .space 8
 912      00000000 
 913              	 .global Ie_dq
 914              	 .section .bss.Ie_dq,"aw",%nobits
 915              	 .align 2
 918              	Ie_dq:
 919 0000 00000000 	 .space 8
 919      00000000 
 920              	 .global ID_dq
 921              	 .section .bss.ID_dq,"aw",%nobits
 922              	 .align 2
 925              	ID_dq:
 926 0000 00000000 	 .space 8
 926      00000000 
 927              	 .global PI_sat_CC
 928              	 .section .data.PI_sat_CC,"aw",%progbits
 929              	 .align 2
 932              	PI_sat_CC:
 933 0000 00000000 	 .word 0
 934 0004 00000080 	 .word -2147483648
 935              	 .global Vm_abc
 936              	 .section .bss.Vm_abc,"aw",%nobits
 937              	 .align 2
 940              	Vm_abc:
 941 0000 00000000 	 .space 12
 941      00000000 
 941      00000000 
 942              	 .global Vm_AB
 943              	 .section .bss.Vm_AB,"aw",%nobits
 944              	 .align 2
 947              	Vm_AB:
 948 0000 00000000 	 .space 8
 948      00000000 
 949              	 .global Vm_dq
 950              	 .section .data.Vm_dq,"aw",%progbits
 951              	 .align 2
 954              	Vm_dq:
 955 0000 0000F041 	 .word 1106247680
 956 0004 00000000 	 .word 0
 957              	 .global Vm_AB2
 958              	 .section .bss.Vm_AB2,"aw",%nobits
 959              	 .align 2
 962              	Vm_AB2:
 963 0000 00000000 	 .space 4
 964              	 .global w
 965              	 .section .data.w,"aw",%progbits
 966              	 .align 2
 969              	w:
 970 0000 63149D43 	 .word 1134367843
 971              	 .global dw
 972              	 .section .bss.dw,"aw",%nobits
 973              	 .align 2
 976              	dw:
 977 0000 00000000 	 .space 4
 978              	 .global wf
 979              	 .section .bss.wf,"aw",%nobits
 980              	 .align 2
 983              	wf:
 984 0000 00000000 	 .space 4
 985              	 .global wt
 986              	 .section .bss.wt,"aw",%nobits
 987              	 .align 2
 990              	wt:
 991 0000 00000000 	 .space 4
 992              	 .global sync_aux2
 993              	 .section .bss.sync_aux2,"aw",%nobits
 994              	 .align 2
 997              	sync_aux2:
 998 0000 00000000 	 .space 4
 999              	 .global PI_PLL_buff
 1000              	 .section .bss.PI_PLL_buff,"aw",%nobits
 1001              	 .align 2
 1004              	PI_PLL_buff:
 1005 0000 00000000 	 .space 12
 1005      00000000 
 1005      00000000 
 1006              	 .global PI_CCd_buff
 1007              	 .section .bss.PI_CCd_buff,"aw",%nobits
 1008              	 .align 2
 1011              	PI_CCd_buff:
 1012 0000 00000000 	 .space 12
 1012      00000000 
 1012      00000000 
 1013              	 .global PI_CCq_buff
 1014              	 .section .bss.PI_CCq_buff,"aw",%nobits
 1015              	 .align 2
 1018              	PI_CCq_buff:
 1019 0000 00000000 	 .space 12
 1019      00000000 
 1019      00000000 
 1020              	 .global PI_V_DC_buff
 1021              	 .section .bss.PI_V_DC_buff,"aw",%nobits
 1022              	 .align 2
 1025              	PI_V_DC_buff:
 1026 0000 00000000 	 .space 12
 1026      00000000 
 1026      00000000 
 1027              	 .global HPFd_buff
 1028              	 .section .bss.HPFd_buff,"aw",%nobits
 1029              	 .align 2
 1032              	HPFd_buff:
 1033 0000 00000000 	 .space 8
 1033      00000000 
 1034              	 .global HPFq_buff
 1035              	 .section .bss.HPFq_buff,"aw",%nobits
 1036              	 .align 2
 1039              	HPFq_buff:
 1040 0000 00000000 	 .space 8
 1040      00000000 
 1041              	 .global dw_buff
 1042              	 .section .bss.dw_buff,"aw",%nobits
 1043              	 .align 2
 1046              	dw_buff:
 1047 0000 00000000 	 .space 4
 1048              	 .global wt_buff
 1049              	 .section .bss.wt_buff,"aw",%nobits
 1050              	 .align 2
 1053              	wt_buff:
 1054 0000 00000000 	 .space 4
 1055              	 .global sync_aux3_buff
 1056              	 .section .bss.sync_aux3_buff,"aw",%nobits
 1057              	 .align 1
 1060              	sync_aux3_buff:
 1061 0000 0000     	 .space 2
 1062              	 .global LPF_buff_w0
 1063              	 .section .bss.LPF_buff_w0,"aw",%nobits
 1064              	 .align 2
 1067              	LPF_buff_w0:
 1068 0000 00000000 	 .space 8
 1068      00000000 
 1069              	 .global LPF_buff_w
 1070              	 .section .bss.LPF_buff_w,"aw",%nobits
 1071              	 .align 2
 1074              	LPF_buff_w:
 1075 0000 00000000 	 .space 8
 1075      00000000 
 1076              	 .global LPF_buff_conv_w
 1077              	 .section .bss.LPF_buff_conv_w,"aw",%nobits
 1078              	 .align 2
 1081              	LPF_buff_conv_w:
 1082 0000 00000000 	 .space 8
 1082      00000000 
 1083              	 .global LPF_buff_conv_wt
 1084              	 .section .bss.LPF_buff_conv_wt,"aw",%nobits
 1085              	 .align 2
 1088              	LPF_buff_conv_wt:
 1089 0000 00000000 	 .space 8
 1089      00000000 
 1090              	 .global LPF_buff_sync2
 1091              	 .section .bss.LPF_buff_sync2,"aw",%nobits
 1092              	 .align 2
 1095              	LPF_buff_sync2:
 1096 0000 00000000 	 .space 8
 1096      00000000 
 1097              	 .global LPF_buff_VA
 1098              	 .section .bss.LPF_buff_VA,"aw",%nobits
 1099              	 .align 2
 1102              	LPF_buff_VA:
 1103 0000 00000000 	 .space 8
 1103      00000000 
 1104              	 .global LPF_buff_VB
 1105              	 .section .bss.LPF_buff_VB,"aw",%nobits
 1106              	 .align 2
 1109              	LPF_buff_VB:
 1110 0000 00000000 	 .space 8
 1110      00000000 
 1111              	 .global LPF_buff_IA
 1112              	 .section .bss.LPF_buff_IA,"aw",%nobits
 1113              	 .align 2
 1116              	LPF_buff_IA:
 1117 0000 00000000 	 .space 8
 1117      00000000 
 1118              	 .global LPF_buff_IB
 1119              	 .section .bss.LPF_buff_IB,"aw",%nobits
 1120              	 .align 2
 1123              	LPF_buff_IB:
 1124 0000 00000000 	 .space 8
 1124      00000000 
 1125              	 .global LPF_buff_Vdc
 1126              	 .section .bss.LPF_buff_Vdc,"aw",%nobits
 1127              	 .align 2
 1130              	LPF_buff_Vdc:
 1131 0000 00000000 	 .space 8
 1131      00000000 
 1132              	 .global LPF_buff_Vdc_ref
 1133              	 .section .bss.LPF_buff_Vdc_ref,"aw",%nobits
 1134              	 .align 2
 1137              	LPF_buff_Vdc_ref:
 1138 0000 00000000 	 .space 8
 1138      00000000 
 1139              	 .section .text.HPF1,"ax",%progbits
 1140              	 .align 2
 1141              	 .global HPF1
 1142              	 .thumb
 1143              	 .thumb_func
 1145              	HPF1:
 1146              	.LFB381:
 1147              	 .file 5 "../functions.h"
   1:../functions.h **** // v10.3
   2:../functions.h **** // Updated in 07/06/2019
   3:../functions.h **** 
   4:../functions.h **** // Needs to be validated!
   5:../functions.h **** float HPF1(float val, float *HPF_buff, const float *HPF_K){
 1148              	 .loc 5 5 0
 1149              	 .cfi_startproc
 1150              	 
 1151              	 
 1152              	 
 1153 0000 80B4     	 push {r7}
 1154              	.LCFI33:
 1155              	 .cfi_def_cfa_offset 4
 1156              	 .cfi_offset 7,-4
 1157 0002 87B0     	 sub sp,sp,#28
 1158              	.LCFI34:
 1159              	 .cfi_def_cfa_offset 32
 1160 0004 00AF     	 add r7,sp,#0
 1161              	.LCFI35:
 1162              	 .cfi_def_cfa_register 7
 1163 0006 F860     	 str r0,[r7,#12]
 1164 0008 B960     	 str r1,[r7,#8]
 1165 000a 7A60     	 str r2,[r7,#4]
   6:../functions.h **** 	float res=(*(HPF_K+3)**HPF_buff+*HPF_K*val+*(HPF_K+1)**(HPF_buff+1))/(*HPF_K);
 1166              	 .loc 5 6 0
 1167 000c 7B68     	 ldr r3,[r7,#4]
 1168 000e 0C33     	 adds r3,r3,#12
 1169 0010 93ED007A 	 flds s14,[r3]
 1170 0014 BB68     	 ldr r3,[r7,#8]
 1171 0016 D3ED007A 	 flds s15,[r3]
 1172 001a 27EE277A 	 fmuls s14,s14,s15
 1173 001e 7B68     	 ldr r3,[r7,#4]
 1174 0020 D3ED006A 	 flds s13,[r3]
 1175 0024 D7ED037A 	 flds s15,[r7,#12]
 1176 0028 66EEA77A 	 fmuls s15,s13,s15
 1177 002c 37EE277A 	 fadds s14,s14,s15
 1178 0030 7B68     	 ldr r3,[r7,#4]
 1179 0032 0433     	 adds r3,r3,#4
 1180 0034 D3ED006A 	 flds s13,[r3]
 1181 0038 BB68     	 ldr r3,[r7,#8]
 1182 003a 0433     	 adds r3,r3,#4
 1183 003c D3ED007A 	 flds s15,[r3]
 1184 0040 66EEA77A 	 fmuls s15,s13,s15
 1185 0044 37EE277A 	 fadds s14,s14,s15
 1186 0048 7B68     	 ldr r3,[r7,#4]
 1187 004a D3ED007A 	 flds s15,[r3]
 1188 004e C7EE277A 	 fdivs s15,s14,s15
 1189 0052 C7ED057A 	 fsts s15,[r7,#20]
   7:../functions.h **** 	*HPF_buff=res;
 1190              	 .loc 5 7 0
 1191 0056 BB68     	 ldr r3,[r7,#8]
 1192 0058 7A69     	 ldr r2,[r7,#20]
 1193 005a 1A60     	 str r2,[r3]
   8:../functions.h **** 	*(HPF_buff+1)=val;
 1194              	 .loc 5 8 0
 1195 005c BB68     	 ldr r3,[r7,#8]
 1196 005e 0433     	 adds r3,r3,#4
 1197 0060 FA68     	 ldr r2,[r7,#12]
 1198 0062 1A60     	 str r2,[r3]
   9:../functions.h **** 	return res;
 1199              	 .loc 5 9 0
 1200 0064 7B69     	 ldr r3,[r7,#20]
  10:../functions.h **** }
 1201              	 .loc 5 10 0
 1202 0066 1846     	 mov r0,r3
 1203 0068 1C37     	 adds r7,r7,#28
 1204              	.LCFI36:
 1205              	 .cfi_def_cfa_offset 4
 1206 006a BD46     	 mov sp,r7
 1207              	.LCFI37:
 1208              	 .cfi_def_cfa_register 13
 1209              	 
 1210 006c 5DF8047B 	 ldr r7,[sp],#4
 1211              	.LCFI38:
 1212              	 .cfi_restore 7
 1213              	 .cfi_def_cfa_offset 0
 1214 0070 7047     	 bx lr
 1215              	 .cfi_endproc
 1216              	.LFE381:
 1218 0072 00BF     	 .section .text.fw_integ,"ax",%progbits
 1219              	 .align 2
 1220              	 .global fw_integ
 1221              	 .thumb
 1222              	 .thumb_func
 1224              	fw_integ:
 1225              	.LFB382:
  11:../functions.h **** 
  12:../functions.h **** float fw_integ(float val, float *buff, float Ti, float rst){
 1226              	 .loc 5 12 0
 1227              	 .cfi_startproc
 1228              	 
 1229              	 
 1230              	 
 1231 0000 80B4     	 push {r7}
 1232              	.LCFI39:
 1233              	 .cfi_def_cfa_offset 4
 1234              	 .cfi_offset 7,-4
 1235 0002 87B0     	 sub sp,sp,#28
 1236              	.LCFI40:
 1237              	 .cfi_def_cfa_offset 32
 1238 0004 00AF     	 add r7,sp,#0
 1239              	.LCFI41:
 1240              	 .cfi_def_cfa_register 7
 1241 0006 F860     	 str r0,[r7,#12]
 1242 0008 B960     	 str r1,[r7,#8]
 1243 000a 7A60     	 str r2,[r7,#4]
 1244 000c 3B60     	 str r3,[r7]
  13:../functions.h **** 	float out=*buff+val*Ti;
 1245              	 .loc 5 13 0
 1246 000e BB68     	 ldr r3,[r7,#8]
 1247 0010 93ED007A 	 flds s14,[r3]
 1248 0014 D7ED036A 	 flds s13,[r7,#12]
 1249 0018 D7ED017A 	 flds s15,[r7,#4]
 1250 001c 66EEA77A 	 fmuls s15,s13,s15
 1251 0020 77EE277A 	 fadds s15,s14,s15
 1252 0024 C7ED057A 	 fsts s15,[r7,#20]
  14:../functions.h **** 	if (rst!=0.0f){
 1253              	 .loc 5 14 0
 1254 0028 D7ED007A 	 flds s15,[r7]
 1255 002c F5EE407A 	 fcmpzs s15
 1256 0030 F1EE10FA 	 fmstat
 1257 0034 30D0     	 beq .L14
  15:../functions.h **** 		if (out>rst){
 1258              	 .loc 5 15 0
 1259 0036 97ED057A 	 flds s14,[r7,#20]
 1260 003a D7ED007A 	 flds s15,[r7]
 1261 003e B4EEE77A 	 fcmpes s14,s15
 1262 0042 F1EE10FA 	 fmstat
 1263 0046 10DD     	 ble .L21
  16:../functions.h **** 			out=out-rst+out*Ti;
 1264              	 .loc 5 16 0
 1265 0048 97ED057A 	 flds s14,[r7,#20]
 1266 004c D7ED007A 	 flds s15,[r7]
 1267 0050 37EE677A 	 fsubs s14,s14,s15
 1268 0054 D7ED056A 	 flds s13,[r7,#20]
 1269 0058 D7ED017A 	 flds s15,[r7,#4]
 1270 005c 66EEA77A 	 fmuls s15,s13,s15
 1271 0060 77EE277A 	 fadds s15,s14,s15
 1272 0064 C7ED057A 	 fsts s15,[r7,#20]
 1273 0068 16E0     	 b .L14
 1274              	.L21:
  17:../functions.h **** 		}
  18:../functions.h **** 		else if (out<0.0f){
 1275              	 .loc 5 18 0
 1276 006a D7ED057A 	 flds s15,[r7,#20]
 1277 006e F5EEC07A 	 fcmpezs s15
 1278 0072 F1EE10FA 	 fmstat
 1279 0076 0FD5     	 bpl .L14
  19:../functions.h **** 			out=out+rst-out*Ti;
 1280              	 .loc 5 19 0
 1281 0078 97ED057A 	 flds s14,[r7,#20]
 1282 007c D7ED007A 	 flds s15,[r7]
 1283 0080 37EE277A 	 fadds s14,s14,s15
 1284 0084 D7ED056A 	 flds s13,[r7,#20]
 1285 0088 D7ED017A 	 flds s15,[r7,#4]
 1286 008c 66EEA77A 	 fmuls s15,s13,s15
 1287 0090 77EE677A 	 fsubs s15,s14,s15
 1288 0094 C7ED057A 	 fsts s15,[r7,#20]
 1289              	.L14:
  20:../functions.h **** 		}
  21:../functions.h **** 	}
  22:../functions.h **** 	*buff=out;
 1290              	 .loc 5 22 0
 1291 0098 BB68     	 ldr r3,[r7,#8]
 1292 009a 7A69     	 ldr r2,[r7,#20]
 1293 009c 1A60     	 str r2,[r3]
  23:../functions.h **** 	return out;
 1294              	 .loc 5 23 0
 1295 009e 7B69     	 ldr r3,[r7,#20]
  24:../functions.h **** }
 1296              	 .loc 5 24 0
 1297 00a0 1846     	 mov r0,r3
 1298 00a2 1C37     	 adds r7,r7,#28
 1299              	.LCFI42:
 1300              	 .cfi_def_cfa_offset 4
 1301 00a4 BD46     	 mov sp,r7
 1302              	.LCFI43:
 1303              	 .cfi_def_cfa_register 13
 1304              	 
 1305 00a6 5DF8047B 	 ldr r7,[sp],#4
 1306              	.LCFI44:
 1307              	 .cfi_restore 7
 1308              	 .cfi_def_cfa_offset 0
 1309 00aa 7047     	 bx lr
 1310              	 .cfi_endproc
 1311              	.LFE382:
 1313              	 .section .text.tr_integ,"ax",%progbits
 1314              	 .align 2
 1315              	 .global tr_integ
 1316              	 .thumb
 1317              	 .thumb_func
 1319              	tr_integ:
 1320              	.LFB383:
  25:../functions.h **** 
  26:../functions.h **** float tr_integ(float val, float *buff, float Ti){
 1321              	 .loc 5 26 0
 1322              	 .cfi_startproc
 1323              	 
 1324              	 
 1325              	 
 1326 0000 80B4     	 push {r7}
 1327              	.LCFI45:
 1328              	 .cfi_def_cfa_offset 4
 1329              	 .cfi_offset 7,-4
 1330 0002 87B0     	 sub sp,sp,#28
 1331              	.LCFI46:
 1332              	 .cfi_def_cfa_offset 32
 1333 0004 00AF     	 add r7,sp,#0
 1334              	.LCFI47:
 1335              	 .cfi_def_cfa_register 7
 1336 0006 F860     	 str r0,[r7,#12]
 1337 0008 B960     	 str r1,[r7,#8]
 1338 000a 7A60     	 str r2,[r7,#4]
  27:../functions.h **** 	float out=(buff[0]+val)*0.5f*Ti+buff[1];
 1339              	 .loc 5 27 0
 1340 000c BB68     	 ldr r3,[r7,#8]
 1341 000e 93ED007A 	 flds s14,[r3]
 1342 0012 D7ED037A 	 flds s15,[r7,#12]
 1343 0016 77EE277A 	 fadds s15,s14,s15
 1344 001a B6EE007A 	 fconsts s14,#96
 1345 001e 27EE877A 	 fmuls s14,s15,s14
 1346 0022 D7ED017A 	 flds s15,[r7,#4]
 1347 0026 27EE277A 	 fmuls s14,s14,s15
 1348 002a BB68     	 ldr r3,[r7,#8]
 1349 002c 0433     	 adds r3,r3,#4
 1350 002e D3ED007A 	 flds s15,[r3]
 1351 0032 77EE277A 	 fadds s15,s14,s15
 1352 0036 C7ED057A 	 fsts s15,[r7,#20]
  28:../functions.h **** 	buff[0]=val;
 1353              	 .loc 5 28 0
 1354 003a BB68     	 ldr r3,[r7,#8]
 1355 003c FA68     	 ldr r2,[r7,#12]
 1356 003e 1A60     	 str r2,[r3]
  29:../functions.h **** 	if (out>2.0f*PI){
 1357              	 .loc 5 29 0
 1358 0040 D7ED057A 	 flds s15,[r7,#20]
 1359 0044 9FED147A 	 flds s14,.L31
 1360 0048 F4EEC77A 	 fcmpes s15,s14
 1361 004c F1EE10FA 	 fmstat
 1362 0050 08DD     	 ble .L30
  30:../functions.h **** 		out=out-2.0f*PI;
 1363              	 .loc 5 30 0
 1364 0052 D7ED057A 	 flds s15,[r7,#20]
 1365 0056 9FED107A 	 flds s14,.L31
 1366 005a 77EEC77A 	 fsubs s15,s15,s14
 1367 005e C7ED057A 	 fsts s15,[r7,#20]
 1368 0062 0EE0     	 b .L25
 1369              	.L30:
  31:../functions.h **** 	}
  32:../functions.h **** 	else if (out<0.0f){
 1370              	 .loc 5 32 0
 1371 0064 D7ED057A 	 flds s15,[r7,#20]
 1372 0068 F5EEC07A 	 fcmpezs s15
 1373 006c F1EE10FA 	 fmstat
 1374 0070 07D5     	 bpl .L25
  33:../functions.h **** 		out=out+2.0f*PI;
 1375              	 .loc 5 33 0
 1376 0072 D7ED057A 	 flds s15,[r7,#20]
 1377 0076 9FED087A 	 flds s14,.L31
 1378 007a 77EE877A 	 fadds s15,s15,s14
 1379 007e C7ED057A 	 fsts s15,[r7,#20]
 1380              	.L25:
  34:../functions.h **** 	}
  35:../functions.h **** 	buff[1]=out;
 1381              	 .loc 5 35 0
 1382 0082 BB68     	 ldr r3,[r7,#8]
 1383 0084 0433     	 adds r3,r3,#4
 1384 0086 7A69     	 ldr r2,[r7,#20]
 1385 0088 1A60     	 str r2,[r3]
  36:../functions.h **** 	return out;
 1386              	 .loc 5 36 0
 1387 008a 7B69     	 ldr r3,[r7,#20]
  37:../functions.h **** }
 1388              	 .loc 5 37 0
 1389 008c 1846     	 mov r0,r3
 1390 008e 1C37     	 adds r7,r7,#28
 1391              	.LCFI48:
 1392              	 .cfi_def_cfa_offset 4
 1393 0090 BD46     	 mov sp,r7
 1394              	.LCFI49:
 1395              	 .cfi_def_cfa_register 13
 1396              	 
 1397 0092 5DF8047B 	 ldr r7,[sp],#4
 1398              	.LCFI50:
 1399              	 .cfi_restore 7
 1400              	 .cfi_def_cfa_offset 0
 1401 0096 7047     	 bx lr
 1402              	.L32:
 1403              	 .align 2
 1404              	.L31:
 1405 0098 DB0FC940 	 .word 1086918619
 1406              	 .cfi_endproc
 1407              	.LFE383:
 1409              	 .section .text.deriv,"ax",%progbits
 1410              	 .align 2
 1411              	 .global deriv
 1412              	 .thumb
 1413              	 .thumb_func
 1415              	deriv:
 1416              	.LFB384:
  38:../functions.h **** 
  39:../functions.h **** float deriv(float val, float *buff, float Ti){
 1417              	 .loc 5 39 0
 1418              	 .cfi_startproc
 1419              	 
 1420              	 
 1421              	 
 1422 0000 80B4     	 push {r7}
 1423              	.LCFI51:
 1424              	 .cfi_def_cfa_offset 4
 1425              	 .cfi_offset 7,-4
 1426 0002 87B0     	 sub sp,sp,#28
 1427              	.LCFI52:
 1428              	 .cfi_def_cfa_offset 32
 1429 0004 00AF     	 add r7,sp,#0
 1430              	.LCFI53:
 1431              	 .cfi_def_cfa_register 7
 1432 0006 F860     	 str r0,[r7,#12]
 1433 0008 B960     	 str r1,[r7,#8]
 1434 000a 7A60     	 str r2,[r7,#4]
  40:../functions.h **** 	float out=(val-*buff)/Ti;
 1435              	 .loc 5 40 0
 1436 000c BB68     	 ldr r3,[r7,#8]
 1437 000e D3ED007A 	 flds s15,[r3]
 1438 0012 97ED037A 	 flds s14,[r7,#12]
 1439 0016 37EE677A 	 fsubs s14,s14,s15
 1440 001a D7ED017A 	 flds s15,[r7,#4]
 1441 001e C7EE277A 	 fdivs s15,s14,s15
 1442 0022 C7ED057A 	 fsts s15,[r7,#20]
  41:../functions.h **** 	*buff=val;
 1443              	 .loc 5 41 0
 1444 0026 BB68     	 ldr r3,[r7,#8]
 1445 0028 FA68     	 ldr r2,[r7,#12]
 1446 002a 1A60     	 str r2,[r3]
  42:../functions.h **** 	return out;
 1447              	 .loc 5 42 0
 1448 002c 7B69     	 ldr r3,[r7,#20]
  43:../functions.h **** }
 1449              	 .loc 5 43 0
 1450 002e 1846     	 mov r0,r3
 1451 0030 1C37     	 adds r7,r7,#28
 1452              	.LCFI54:
 1453              	 .cfi_def_cfa_offset 4
 1454 0032 BD46     	 mov sp,r7
 1455              	.LCFI55:
 1456              	 .cfi_def_cfa_register 13
 1457              	 
 1458 0034 5DF8047B 	 ldr r7,[sp],#4
 1459              	.LCFI56:
 1460              	 .cfi_restore 7
 1461              	 .cfi_def_cfa_offset 0
 1462 0038 7047     	 bx lr
 1463              	 .cfi_endproc
 1464              	.LFE384:
 1466 003a 00BF     	 .section .text.abc_AB,"ax",%progbits
 1467              	 .align 2
 1468              	 .global abc_AB
 1469              	 .thumb
 1470              	 .thumb_func
 1472              	abc_AB:
 1473              	.LFB385:
  44:../functions.h **** 
  45:../functions.h **** void abc_AB(float *abc, float *AB){
 1474              	 .loc 5 45 0
 1475              	 .cfi_startproc
 1476              	 
 1477              	 
 1478              	 
 1479 0000 80B4     	 push {r7}
 1480              	.LCFI57:
 1481              	 .cfi_def_cfa_offset 4
 1482              	 .cfi_offset 7,-4
 1483 0002 83B0     	 sub sp,sp,#12
 1484              	.LCFI58:
 1485              	 .cfi_def_cfa_offset 16
 1486 0004 00AF     	 add r7,sp,#0
 1487              	.LCFI59:
 1488              	 .cfi_def_cfa_register 7
 1489 0006 7860     	 str r0,[r7,#4]
 1490 0008 3960     	 str r1,[r7]
  46:../functions.h **** 	// Conventional conversion into orthogonal components
  47:../functions.h **** 	*AB=K23*(*abc-0.5f**(abc+1)-0.5f**(abc+2));
 1491              	 .loc 5 47 0
 1492 000a 7B68     	 ldr r3,[r7,#4]
 1493 000c 93ED007A 	 flds s14,[r3]
 1494 0010 7B68     	 ldr r3,[r7,#4]
 1495 0012 0433     	 adds r3,r3,#4
 1496 0014 D3ED007A 	 flds s15,[r3]
 1497 0018 F6EE006A 	 fconsts s13,#96
 1498 001c 67EEA67A 	 fmuls s15,s15,s13
 1499 0020 37EE677A 	 fsubs s14,s14,s15
 1500 0024 7B68     	 ldr r3,[r7,#4]
 1501 0026 0833     	 adds r3,r3,#8
 1502 0028 D3ED007A 	 flds s15,[r3]
 1503 002c F6EE006A 	 fconsts s13,#96
 1504 0030 67EEA67A 	 fmuls s15,s15,s13
 1505 0034 77EE677A 	 fsubs s15,s14,s15
 1506 0038 9FED127A 	 flds s14,.L36
 1507 003c 67EE877A 	 fmuls s15,s15,s14
 1508 0040 3B68     	 ldr r3,[r7]
 1509 0042 C3ED007A 	 fsts s15,[r3]
  48:../functions.h **** 	*(AB+1)=K23*(Ksqr32**(abc+1)-Ksqr32**(abc+2));
 1510              	 .loc 5 48 0
 1511 0046 3B68     	 ldr r3,[r7]
 1512 0048 0433     	 adds r3,r3,#4
 1513 004a 7A68     	 ldr r2,[r7,#4]
 1514 004c 0432     	 adds r2,r2,#4
 1515 004e D2ED007A 	 flds s15,[r2]
 1516 0052 9FED0D7A 	 flds s14,.L36+4
 1517 0056 27EE877A 	 fmuls s14,s15,s14
 1518 005a 7A68     	 ldr r2,[r7,#4]
 1519 005c 0832     	 adds r2,r2,#8
 1520 005e D2ED007A 	 flds s15,[r2]
 1521 0062 DFED096A 	 flds s13,.L36+4
 1522 0066 67EEA67A 	 fmuls s15,s15,s13
 1523 006a 77EE677A 	 fsubs s15,s14,s15
 1524 006e 9FED057A 	 flds s14,.L36
 1525 0072 67EE877A 	 fmuls s15,s15,s14
 1526 0076 C3ED007A 	 fsts s15,[r3]
  49:../functions.h **** }
 1527              	 .loc 5 49 0
 1528 007a 0C37     	 adds r7,r7,#12
 1529              	.LCFI60:
 1530              	 .cfi_def_cfa_offset 4
 1531 007c BD46     	 mov sp,r7
 1532              	.LCFI61:
 1533              	 .cfi_def_cfa_register 13
 1534              	 
 1535 007e 5DF8047B 	 ldr r7,[sp],#4
 1536              	.LCFI62:
 1537              	 .cfi_restore 7
 1538              	 .cfi_def_cfa_offset 0
 1539 0082 7047     	 bx lr
 1540              	.L37:
 1541              	 .align 2
 1542              	.L36:
 1543 0084 ABAA2A3F 	 .word 1059760811
 1544 0088 D7B35D3F 	 .word 1063105495
 1545              	 .cfi_endproc
 1546              	.LFE385:
 1548              	 .section .text.abc_AB_Dy,"ax",%progbits
 1549              	 .align 2
 1550              	 .global abc_AB_Dy
 1551              	 .thumb
 1552              	 .thumb_func
 1554              	abc_AB_Dy:
 1555              	.LFB386:
  50:../functions.h **** 
  51:../functions.h **** void abc_AB_Dy(float *abc, float *AB){
 1556              	 .loc 5 51 0
 1557              	 .cfi_startproc
 1558              	 
 1559              	 
 1560              	 
 1561 0000 80B4     	 push {r7}
 1562              	.LCFI63:
 1563              	 .cfi_def_cfa_offset 4
 1564              	 .cfi_offset 7,-4
 1565 0002 83B0     	 sub sp,sp,#12
 1566              	.LCFI64:
 1567              	 .cfi_def_cfa_offset 16
 1568 0004 00AF     	 add r7,sp,#0
 1569              	.LCFI65:
 1570              	 .cfi_def_cfa_register 7
 1571 0006 7860     	 str r0,[r7,#4]
 1572 0008 3960     	 str r1,[r7]
  52:../functions.h **** 	// Conversion into orthogonal components converting triangle to star
  53:../functions.h **** 	*AB=K23sqr3*(Ksqr32**abc-Ksqr32**(abc+2));
 1573              	 .loc 5 53 0
 1574 000a 7B68     	 ldr r3,[r7,#4]
 1575 000c D3ED007A 	 flds s15,[r3]
 1576 0010 9FED1C7A 	 flds s14,.L39
 1577 0014 27EE877A 	 fmuls s14,s15,s14
 1578 0018 7B68     	 ldr r3,[r7,#4]
 1579 001a 0833     	 adds r3,r3,#8
 1580 001c D3ED007A 	 flds s15,[r3]
 1581 0020 DFED186A 	 flds s13,.L39
 1582 0024 67EEA67A 	 fmuls s15,s15,s13
 1583 0028 77EE677A 	 fsubs s15,s14,s15
 1584 002c 9FED167A 	 flds s14,.L39+4
 1585 0030 67EE877A 	 fmuls s15,s15,s14
 1586 0034 3B68     	 ldr r3,[r7]
 1587 0036 C3ED007A 	 fsts s15,[r3]
  54:../functions.h **** 	*(AB+1)=K23sqr3*(-0.5f**abc+*(abc+1)-0.5f**(abc+2));
 1588              	 .loc 5 54 0
 1589 003a 3B68     	 ldr r3,[r7]
 1590 003c 0433     	 adds r3,r3,#4
 1591 003e 7A68     	 ldr r2,[r7,#4]
 1592 0040 D2ED007A 	 flds s15,[r2]
 1593 0044 BEEE007A 	 fconsts s14,#224
 1594 0048 27EE877A 	 fmuls s14,s15,s14
 1595 004c 7A68     	 ldr r2,[r7,#4]
 1596 004e 0432     	 adds r2,r2,#4
 1597 0050 D2ED007A 	 flds s15,[r2]
 1598 0054 37EE277A 	 fadds s14,s14,s15
 1599 0058 7A68     	 ldr r2,[r7,#4]
 1600 005a 0832     	 adds r2,r2,#8
 1601 005c D2ED007A 	 flds s15,[r2]
 1602 0060 F6EE006A 	 fconsts s13,#96
 1603 0064 67EEA67A 	 fmuls s15,s15,s13
 1604 0068 77EE677A 	 fsubs s15,s14,s15
 1605 006c 9FED067A 	 flds s14,.L39+4
 1606 0070 67EE877A 	 fmuls s15,s15,s14
 1607 0074 C3ED007A 	 fsts s15,[r3]
  55:../functions.h **** }
 1608              	 .loc 5 55 0
 1609 0078 0C37     	 adds r7,r7,#12
 1610              	.LCFI66:
 1611              	 .cfi_def_cfa_offset 4
 1612 007a BD46     	 mov sp,r7
 1613              	.LCFI67:
 1614              	 .cfi_def_cfa_register 13
 1615              	 
 1616 007c 5DF8047B 	 ldr r7,[sp],#4
 1617              	.LCFI68:
 1618              	 .cfi_restore 7
 1619              	 .cfi_def_cfa_offset 0
 1620 0080 7047     	 bx lr
 1621              	.L40:
 1622 0082 00BF     	 .align 2
 1623              	.L39:
 1624 0084 D7B35D3F 	 .word 1063105495
 1625 0088 A311C53E 	 .word 1053102499
 1626              	 .cfi_endproc
 1627              	.LFE386:
 1629              	 .section .text.AB_dq,"ax",%progbits
 1630              	 .align 2
 1631              	 .global AB_dq
 1632              	 .thumb
 1633              	 .thumb_func
 1635              	AB_dq:
 1636              	.LFB387:
  56:../functions.h **** 
  57:../functions.h **** void AB_dq(float *AB, float *dq, float wt){
 1637              	 .loc 5 57 0
 1638              	 .cfi_startproc
 1639              	 
 1640              	 
 1641 0000 90B5     	 push {r4,r7,lr}
 1642              	.LCFI69:
 1643              	 .cfi_def_cfa_offset 12
 1644              	 .cfi_offset 4,-12
 1645              	 .cfi_offset 7,-8
 1646              	 .cfi_offset 14,-4
 1647 0002 2DED028B 	 fstmfdd sp!,{d8}
 1648              	.LCFI70:
 1649              	 .cfi_def_cfa_offset 20
 1650              	 .cfi_offset 80,-20
 1651              	 .cfi_offset 81,-16
 1652 0006 85B0     	 sub sp,sp,#20
 1653              	.LCFI71:
 1654              	 .cfi_def_cfa_offset 40
 1655 0008 00AF     	 add r7,sp,#0
 1656              	.LCFI72:
 1657              	 .cfi_def_cfa_register 7
 1658 000a F860     	 str r0,[r7,#12]
 1659 000c B960     	 str r1,[r7,#8]
 1660 000e 7A60     	 str r2,[r7,#4]
  58:../functions.h **** 	// Conventional conversion into orthogonal components
  59:../functions.h **** 	*dq=*AB*arm_cos_f32(wt)+*(AB+1)*arm_sin_f32(wt);
 1661              	 .loc 5 59 0
 1662 0010 FB68     	 ldr r3,[r7,#12]
 1663 0012 93ED008A 	 flds s16,[r3]
 1664 0016 7868     	 ldr r0,[r7,#4]
 1665 0018 FFF7FEFF 	 bl arm_cos_f32
 1666 001c 07EE900A 	 fmsr s15,r0
 1667 0020 28EE278A 	 fmuls s16,s16,s15
 1668 0024 FB68     	 ldr r3,[r7,#12]
 1669 0026 0433     	 adds r3,r3,#4
 1670 0028 D3ED008A 	 flds s17,[r3]
 1671 002c 7868     	 ldr r0,[r7,#4]
 1672 002e FFF7FEFF 	 bl arm_sin_f32
 1673 0032 07EE900A 	 fmsr s15,r0
 1674 0036 68EEA77A 	 fmuls s15,s17,s15
 1675 003a 78EE277A 	 fadds s15,s16,s15
 1676 003e BB68     	 ldr r3,[r7,#8]
 1677 0040 C3ED007A 	 fsts s15,[r3]
  60:../functions.h **** 	*(dq+1)=-*AB*arm_sin_f32(wt)+*(AB+1)*arm_cos_f32(wt);
 1678              	 .loc 5 60 0
 1679 0044 BB68     	 ldr r3,[r7,#8]
 1680 0046 1C1D     	 adds r4,r3,#4
 1681 0048 FB68     	 ldr r3,[r7,#12]
 1682 004a D3ED007A 	 flds s15,[r3]
 1683 004e B1EE678A 	 fnegs s16,s15
 1684 0052 7868     	 ldr r0,[r7,#4]
 1685 0054 FFF7FEFF 	 bl arm_sin_f32
 1686 0058 07EE900A 	 fmsr s15,r0
 1687 005c 28EE278A 	 fmuls s16,s16,s15
 1688 0060 FB68     	 ldr r3,[r7,#12]
 1689 0062 0433     	 adds r3,r3,#4
 1690 0064 D3ED008A 	 flds s17,[r3]
 1691 0068 7868     	 ldr r0,[r7,#4]
 1692 006a FFF7FEFF 	 bl arm_cos_f32
 1693 006e 07EE900A 	 fmsr s15,r0
 1694 0072 68EEA77A 	 fmuls s15,s17,s15
 1695 0076 78EE277A 	 fadds s15,s16,s15
 1696 007a C4ED007A 	 fsts s15,[r4]
  61:../functions.h **** }
 1697              	 .loc 5 61 0
 1698 007e 1437     	 adds r7,r7,#20
 1699              	.LCFI73:
 1700              	 .cfi_def_cfa_offset 20
 1701 0080 BD46     	 mov sp,r7
 1702              	.LCFI74:
 1703              	 .cfi_def_cfa_register 13
 1704              	 
 1705 0082 BDEC028B 	 fldmfdd sp!,{d8}
 1706              	.LCFI75:
 1707              	 .cfi_restore 80
 1708              	 .cfi_restore 81
 1709              	 .cfi_def_cfa_offset 12
 1710 0086 90BD     	 pop {r4,r7,pc}
 1711              	 .cfi_endproc
 1712              	.LFE387:
 1714              	 .section .text.dq_AB,"ax",%progbits
 1715              	 .align 2
 1716              	 .global dq_AB
 1717              	 .thumb
 1718              	 .thumb_func
 1720              	dq_AB:
 1721              	.LFB388:
  62:../functions.h **** 
  63:../functions.h **** void dq_AB(float *dq, float *AB, float wt){
 1722              	 .loc 5 63 0
 1723              	 .cfi_startproc
 1724              	 
 1725              	 
 1726 0000 80B5     	 push {r7,lr}
 1727              	.LCFI76:
 1728              	 .cfi_def_cfa_offset 8
 1729              	 .cfi_offset 7,-8
 1730              	 .cfi_offset 14,-4
 1731 0002 86B0     	 sub sp,sp,#24
 1732              	.LCFI77:
 1733              	 .cfi_def_cfa_offset 32
 1734 0004 00AF     	 add r7,sp,#0
 1735              	.LCFI78:
 1736              	 .cfi_def_cfa_register 7
 1737 0006 F860     	 str r0,[r7,#12]
 1738 0008 B960     	 str r1,[r7,#8]
 1739 000a 7A60     	 str r2,[r7,#4]
  64:../functions.h **** 	// Conventional conversion into orthogonal components
  65:../functions.h **** 	float C=arm_cos_f32(wt);
 1740              	 .loc 5 65 0
 1741 000c 7868     	 ldr r0,[r7,#4]
 1742 000e FFF7FEFF 	 bl arm_cos_f32
 1743 0012 7861     	 str r0,[r7,#20]
  66:../functions.h **** 	float S=arm_sin_f32(wt);
 1744              	 .loc 5 66 0
 1745 0014 7868     	 ldr r0,[r7,#4]
 1746 0016 FFF7FEFF 	 bl arm_sin_f32
 1747 001a 3861     	 str r0,[r7,#16]
  67:../functions.h **** 	*AB=C**dq-S**(dq+1);
 1748              	 .loc 5 67 0
 1749 001c FB68     	 ldr r3,[r7,#12]
 1750 001e 93ED007A 	 flds s14,[r3]
 1751 0022 D7ED057A 	 flds s15,[r7,#20]
 1752 0026 27EE277A 	 fmuls s14,s14,s15
 1753 002a FB68     	 ldr r3,[r7,#12]
 1754 002c 0433     	 adds r3,r3,#4
 1755 002e D3ED006A 	 flds s13,[r3]
 1756 0032 D7ED047A 	 flds s15,[r7,#16]
 1757 0036 66EEA77A 	 fmuls s15,s13,s15
 1758 003a 77EE677A 	 fsubs s15,s14,s15
 1759 003e BB68     	 ldr r3,[r7,#8]
 1760 0040 C3ED007A 	 fsts s15,[r3]
  68:../functions.h **** 	*(AB+1)=S**dq+C**(dq+1);
 1761              	 .loc 5 68 0
 1762 0044 BB68     	 ldr r3,[r7,#8]
 1763 0046 0433     	 adds r3,r3,#4
 1764 0048 FA68     	 ldr r2,[r7,#12]
 1765 004a 92ED007A 	 flds s14,[r2]
 1766 004e D7ED047A 	 flds s15,[r7,#16]
 1767 0052 27EE277A 	 fmuls s14,s14,s15
 1768 0056 FA68     	 ldr r2,[r7,#12]
 1769 0058 0432     	 adds r2,r2,#4
 1770 005a D2ED006A 	 flds s13,[r2]
 1771 005e D7ED057A 	 flds s15,[r7,#20]
 1772 0062 66EEA77A 	 fmuls s15,s13,s15
 1773 0066 77EE277A 	 fadds s15,s14,s15
 1774 006a C3ED007A 	 fsts s15,[r3]
  69:../functions.h **** }
 1775              	 .loc 5 69 0
 1776 006e 1837     	 adds r7,r7,#24
 1777              	.LCFI79:
 1778              	 .cfi_def_cfa_offset 8
 1779 0070 BD46     	 mov sp,r7
 1780              	.LCFI80:
 1781              	 .cfi_def_cfa_register 13
 1782              	 
 1783 0072 80BD     	 pop {r7,pc}
 1784              	 .cfi_endproc
 1785              	.LFE388:
 1787              	 .section .text.AB_abc,"ax",%progbits
 1788              	 .align 2
 1789              	 .global AB_abc
 1790              	 .thumb
 1791              	 .thumb_func
 1793              	AB_abc:
 1794              	.LFB389:
  70:../functions.h **** 
  71:../functions.h **** void AB_abc(float *AB, float *abc){
 1795              	 .loc 5 71 0
 1796              	 .cfi_startproc
 1797              	 
 1798              	 
 1799              	 
 1800 0000 80B4     	 push {r7}
 1801              	.LCFI81:
 1802              	 .cfi_def_cfa_offset 4
 1803              	 .cfi_offset 7,-4
 1804 0002 83B0     	 sub sp,sp,#12
 1805              	.LCFI82:
 1806              	 .cfi_def_cfa_offset 16
 1807 0004 00AF     	 add r7,sp,#0
 1808              	.LCFI83:
 1809              	 .cfi_def_cfa_register 7
 1810 0006 7860     	 str r0,[r7,#4]
 1811 0008 3960     	 str r1,[r7]
  72:../functions.h **** 	// Conventional conversion into orthogonal components
  73:../functions.h **** 	*abc=*AB;
 1812              	 .loc 5 73 0
 1813 000a 7B68     	 ldr r3,[r7,#4]
 1814 000c 1A68     	 ldr r2,[r3]
 1815 000e 3B68     	 ldr r3,[r7]
 1816 0010 1A60     	 str r2,[r3]
  74:../functions.h **** 	*(abc+1)=-0.5f**(AB)+Ksqr32**(AB+1);
 1817              	 .loc 5 74 0
 1818 0012 3B68     	 ldr r3,[r7]
 1819 0014 0433     	 adds r3,r3,#4
 1820 0016 7A68     	 ldr r2,[r7,#4]
 1821 0018 D2ED007A 	 flds s15,[r2]
 1822 001c BEEE007A 	 fconsts s14,#224
 1823 0020 27EE877A 	 fmuls s14,s15,s14
 1824 0024 7A68     	 ldr r2,[r7,#4]
 1825 0026 0432     	 adds r2,r2,#4
 1826 0028 D2ED007A 	 flds s15,[r2]
 1827 002c DFED106A 	 flds s13,.L44
 1828 0030 67EEA67A 	 fmuls s15,s15,s13
 1829 0034 77EE277A 	 fadds s15,s14,s15
 1830 0038 C3ED007A 	 fsts s15,[r3]
  75:../functions.h **** 	*(abc+2)=-0.5f**(AB)-Ksqr32**(AB+1);
 1831              	 .loc 5 75 0
 1832 003c 3B68     	 ldr r3,[r7]
 1833 003e 0833     	 adds r3,r3,#8
 1834 0040 7A68     	 ldr r2,[r7,#4]
 1835 0042 D2ED007A 	 flds s15,[r2]
 1836 0046 BEEE007A 	 fconsts s14,#224
 1837 004a 27EE877A 	 fmuls s14,s15,s14
 1838 004e 7A68     	 ldr r2,[r7,#4]
 1839 0050 0432     	 adds r2,r2,#4
 1840 0052 D2ED007A 	 flds s15,[r2]
 1841 0056 DFED066A 	 flds s13,.L44
 1842 005a 67EEA67A 	 fmuls s15,s15,s13
 1843 005e 77EE677A 	 fsubs s15,s14,s15
 1844 0062 C3ED007A 	 fsts s15,[r3]
  76:../functions.h **** }
 1845              	 .loc 5 76 0
 1846 0066 0C37     	 adds r7,r7,#12
 1847              	.LCFI84:
 1848              	 .cfi_def_cfa_offset 4
 1849 0068 BD46     	 mov sp,r7
 1850              	.LCFI85:
 1851              	 .cfi_def_cfa_register 13
 1852              	 
 1853 006a 5DF8047B 	 ldr r7,[sp],#4
 1854              	.LCFI86:
 1855              	 .cfi_restore 7
 1856              	 .cfi_def_cfa_offset 0
 1857 006e 7047     	 bx lr
 1858              	.L45:
 1859              	 .align 2
 1860              	.L44:
 1861 0070 D7B35D3F 	 .word 1063105495
 1862              	 .cfi_endproc
 1863              	.LFE389:
 1865              	 .section .text.LPF1,"ax",%progbits
 1866              	 .align 2
 1867              	 .global LPF1
 1868              	 .thumb
 1869              	 .thumb_func
 1871              	LPF1:
 1872              	.LFB390:
  77:../functions.h **** 
  78:../functions.h **** float LPF1(float val, float *LPFbuff, const float LPF_K[3]){
 1873              	 .loc 5 78 0
 1874              	 .cfi_startproc
 1875              	 
 1876              	 
 1877              	 
 1878 0000 80B4     	 push {r7}
 1879              	.LCFI87:
 1880              	 .cfi_def_cfa_offset 4
 1881              	 .cfi_offset 7,-4
 1882 0002 87B0     	 sub sp,sp,#28
 1883              	.LCFI88:
 1884              	 .cfi_def_cfa_offset 32
 1885 0004 00AF     	 add r7,sp,#0
 1886              	.LCFI89:
 1887              	 .cfi_def_cfa_register 7
 1888 0006 F860     	 str r0,[r7,#12]
 1889 0008 B960     	 str r1,[r7,#8]
 1890 000a 7A60     	 str r2,[r7,#4]
  79:../functions.h **** 	// y[k]= y[k-1]*(-b0/b1)+a0/b1*(x[k]+x[k-1])
  80:../functions.h **** 	float out= (*(LPF_K+2)) * (*(LPFbuff+1)) + (*LPF_K) * (*(LPF_K+1)) * (val+(*LPFbuff));
 1891              	 .loc 5 80 0
 1892 000c 7B68     	 ldr r3,[r7,#4]
 1893 000e 0833     	 adds r3,r3,#8
 1894 0010 93ED007A 	 flds s14,[r3]
 1895 0014 BB68     	 ldr r3,[r7,#8]
 1896 0016 0433     	 adds r3,r3,#4
 1897 0018 D3ED007A 	 flds s15,[r3]
 1898 001c 27EE277A 	 fmuls s14,s14,s15
 1899 0020 7B68     	 ldr r3,[r7,#4]
 1900 0022 D3ED006A 	 flds s13,[r3]
 1901 0026 7B68     	 ldr r3,[r7,#4]
 1902 0028 0433     	 adds r3,r3,#4
 1903 002a D3ED007A 	 flds s15,[r3]
 1904 002e 66EEA76A 	 fmuls s13,s13,s15
 1905 0032 BB68     	 ldr r3,[r7,#8]
 1906 0034 93ED006A 	 flds s12,[r3]
 1907 0038 D7ED037A 	 flds s15,[r7,#12]
 1908 003c 76EE277A 	 fadds s15,s12,s15
 1909 0040 66EEA77A 	 fmuls s15,s13,s15
 1910 0044 77EE277A 	 fadds s15,s14,s15
 1911 0048 C7ED057A 	 fsts s15,[r7,#20]
  81:../functions.h **** 	*LPFbuff = val;		// x[k-1]
 1912              	 .loc 5 81 0
 1913 004c BB68     	 ldr r3,[r7,#8]
 1914 004e FA68     	 ldr r2,[r7,#12]
 1915 0050 1A60     	 str r2,[r3]
  82:../functions.h **** 	*(LPFbuff+1) = out;	// y[k-1]
 1916              	 .loc 5 82 0
 1917 0052 BB68     	 ldr r3,[r7,#8]
 1918 0054 0433     	 adds r3,r3,#4
 1919 0056 7A69     	 ldr r2,[r7,#20]
 1920 0058 1A60     	 str r2,[r3]
  83:../functions.h **** 	return out;
 1921              	 .loc 5 83 0
 1922 005a 7B69     	 ldr r3,[r7,#20]
  84:../functions.h **** }
 1923              	 .loc 5 84 0
 1924 005c 1846     	 mov r0,r3
 1925 005e 1C37     	 adds r7,r7,#28
 1926              	.LCFI90:
 1927              	 .cfi_def_cfa_offset 4
 1928 0060 BD46     	 mov sp,r7
 1929              	.LCFI91:
 1930              	 .cfi_def_cfa_register 13
 1931              	 
 1932 0062 5DF8047B 	 ldr r7,[sp],#4
 1933              	.LCFI92:
 1934              	 .cfi_restore 7
 1935              	 .cfi_def_cfa_offset 0
 1936 0066 7047     	 bx lr
 1937              	 .cfi_endproc
 1938              	.LFE390:
 1940              	 .section .text.LPF2,"ax",%progbits
 1941              	 .align 2
 1942              	 .global LPF2
 1943              	 .thumb
 1944              	 .thumb_func
 1946              	LPF2:
 1947              	.LFB391:
  85:../functions.h **** 
  86:../functions.h **** float LPF2(float val, struct LPF2 *filter){
 1948              	 .loc 5 86 0
 1949              	 .cfi_startproc
 1950              	 
 1951              	 
 1952              	 
 1953 0000 80B4     	 push {r7}
 1954              	.LCFI93:
 1955              	 .cfi_def_cfa_offset 4
 1956              	 .cfi_offset 7,-4
 1957 0002 85B0     	 sub sp,sp,#20
 1958              	.LCFI94:
 1959              	 .cfi_def_cfa_offset 24
 1960 0004 00AF     	 add r7,sp,#0
 1961              	.LCFI95:
 1962              	 .cfi_def_cfa_register 7
 1963 0006 7860     	 str r0,[r7,#4]
 1964 0008 3960     	 str r1,[r7]
  87:../functions.h **** 	// y[k]=(a2*x[k]+a1*x[k-1]+a2*x[k-2]-(b1*y[k-1]+b0*y[k-2]))*1/b2
  88:../functions.h **** 	float out=(val*filter->K[2]+filter->buff[0]*filter->K[1]+filter->buff[1]*filter->K[0]-(filter->buf
 1965              	 .loc 5 88 0
 1966 000a 3B68     	 ldr r3,[r7]
 1967 000c 93ED027A 	 flds s14,[r3,#8]
 1968 0010 D7ED017A 	 flds s15,[r7,#4]
 1969 0014 27EE277A 	 fmuls s14,s14,s15
 1970 0018 3B68     	 ldr r3,[r7]
 1971 001a D3ED066A 	 flds s13,[r3,#24]
 1972 001e 3B68     	 ldr r3,[r7]
 1973 0020 D3ED017A 	 flds s15,[r3,#4]
 1974 0024 66EEA77A 	 fmuls s15,s13,s15
 1975 0028 37EE277A 	 fadds s14,s14,s15
 1976 002c 3B68     	 ldr r3,[r7]
 1977 002e D3ED076A 	 flds s13,[r3,#28]
 1978 0032 3B68     	 ldr r3,[r7]
 1979 0034 D3ED007A 	 flds s15,[r3]
 1980 0038 66EEA77A 	 fmuls s15,s13,s15
 1981 003c 37EE277A 	 fadds s14,s14,s15
 1982 0040 3B68     	 ldr r3,[r7]
 1983 0042 D3ED086A 	 flds s13,[r3,#32]
 1984 0046 3B68     	 ldr r3,[r7]
 1985 0048 D3ED047A 	 flds s15,[r3,#16]
 1986 004c 66EEA76A 	 fmuls s13,s13,s15
 1987 0050 3B68     	 ldr r3,[r7]
 1988 0052 93ED096A 	 flds s12,[r3,#36]
 1989 0056 3B68     	 ldr r3,[r7]
 1990 0058 D3ED037A 	 flds s15,[r3,#12]
 1991 005c 66EE277A 	 fmuls s15,s12,s15
 1992 0060 76EEA77A 	 fadds s15,s13,s15
 1993 0064 37EE677A 	 fsubs s14,s14,s15
 1994 0068 3B68     	 ldr r3,[r7]
 1995 006a D3ED057A 	 flds s15,[r3,#20]
 1996 006e 67EE277A 	 fmuls s15,s14,s15
 1997 0072 C7ED037A 	 fsts s15,[r7,#12]
  89:../functions.h **** 	filter->buff[1]=filter->buff[0];	// x[k-2]
 1998              	 .loc 5 89 0
 1999 0076 3B68     	 ldr r3,[r7]
 2000 0078 9A69     	 ldr r2,[r3,#24]
 2001 007a 3B68     	 ldr r3,[r7]
 2002 007c DA61     	 str r2,[r3,#28]
  90:../functions.h **** 	filter->buff[0]=val;				// x[k-1]
 2003              	 .loc 5 90 0
 2004 007e 3B68     	 ldr r3,[r7]
 2005 0080 7A68     	 ldr r2,[r7,#4]
 2006 0082 9A61     	 str r2,[r3,#24]
  91:../functions.h **** 	filter->buff[3]=filter->buff[2];	// y[k-2]
 2007              	 .loc 5 91 0
 2008 0084 3B68     	 ldr r3,[r7]
 2009 0086 1A6A     	 ldr r2,[r3,#32]
 2010 0088 3B68     	 ldr r3,[r7]
 2011 008a 5A62     	 str r2,[r3,#36]
  92:../functions.h **** 	filter->buff[2]=out;				// y[k-1]
 2012              	 .loc 5 92 0
 2013 008c 3B68     	 ldr r3,[r7]
 2014 008e FA68     	 ldr r2,[r7,#12]
 2015 0090 1A62     	 str r2,[r3,#32]
  93:../functions.h **** 	return out;
 2016              	 .loc 5 93 0
 2017 0092 FB68     	 ldr r3,[r7,#12]
  94:../functions.h **** }
 2018              	 .loc 5 94 0
 2019 0094 1846     	 mov r0,r3
 2020 0096 1437     	 adds r7,r7,#20
 2021              	.LCFI96:
 2022              	 .cfi_def_cfa_offset 4
 2023 0098 BD46     	 mov sp,r7
 2024              	.LCFI97:
 2025              	 .cfi_def_cfa_register 13
 2026              	 
 2027 009a 5DF8047B 	 ldr r7,[sp],#4
 2028              	.LCFI98:
 2029              	 .cfi_restore 7
 2030              	 .cfi_def_cfa_offset 0
 2031 009e 7047     	 bx lr
 2032              	 .cfi_endproc
 2033              	.LFE391:
 2035              	 .section .text.LPF1_dq,"ax",%progbits
 2036              	 .align 2
 2037              	 .global LPF1_dq
 2038              	 .thumb
 2039              	 .thumb_func
 2041              	LPF1_dq:
 2042              	.LFB392:
  95:../functions.h **** 
  96:../functions.h **** void LPF1_dq (float *x_dq, struct LPF1_dq *lpf, float *xf_dq){
 2043              	 .loc 5 96 0
 2044              	 .cfi_startproc
 2045              	 
 2046              	 
 2047              	 
 2048 0000 80B4     	 push {r7}
 2049              	.LCFI99:
 2050              	 .cfi_def_cfa_offset 4
 2051              	 .cfi_offset 7,-4
 2052 0002 85B0     	 sub sp,sp,#20
 2053              	.LCFI100:
 2054              	 .cfi_def_cfa_offset 24
 2055 0004 00AF     	 add r7,sp,#0
 2056              	.LCFI101:
 2057              	 .cfi_def_cfa_register 7
 2058 0006 F860     	 str r0,[r7,#12]
 2059 0008 B960     	 str r1,[r7,#8]
 2060 000a 7A60     	 str r2,[r7,#4]
  97:../functions.h **** 
  98:../functions.h **** 	// d component
  99:../functions.h **** 	xf_dq[0]=lpf->K[2]*lpf->buff[1]+lpf->K[0]*lpf->K[1]*(x_dq[0]+lpf->buff[0]);
 2061              	 .loc 5 99 0
 2062 000c BB68     	 ldr r3,[r7,#8]
 2063 000e 93ED027A 	 flds s14,[r3,#8]
 2064 0012 BB68     	 ldr r3,[r7,#8]
 2065 0014 D3ED047A 	 flds s15,[r3,#16]
 2066 0018 27EE277A 	 fmuls s14,s14,s15
 2067 001c BB68     	 ldr r3,[r7,#8]
 2068 001e D3ED006A 	 flds s13,[r3]
 2069 0022 BB68     	 ldr r3,[r7,#8]
 2070 0024 D3ED017A 	 flds s15,[r3,#4]
 2071 0028 66EEA76A 	 fmuls s13,s13,s15
 2072 002c FB68     	 ldr r3,[r7,#12]
 2073 002e 93ED006A 	 flds s12,[r3]
 2074 0032 BB68     	 ldr r3,[r7,#8]
 2075 0034 D3ED037A 	 flds s15,[r3,#12]
 2076 0038 76EE277A 	 fadds s15,s12,s15
 2077 003c 66EEA77A 	 fmuls s15,s13,s15
 2078 0040 77EE277A 	 fadds s15,s14,s15
 2079 0044 7B68     	 ldr r3,[r7,#4]
 2080 0046 C3ED007A 	 fsts s15,[r3]
 100:../functions.h **** 	lpf->buff[0]=x_dq[0];	// x[k-1]
 2081              	 .loc 5 100 0
 2082 004a FB68     	 ldr r3,[r7,#12]
 2083 004c 1A68     	 ldr r2,[r3]
 2084 004e BB68     	 ldr r3,[r7,#8]
 2085 0050 DA60     	 str r2,[r3,#12]
 101:../functions.h **** 	lpf->buff[1]=xf_dq[0];	// y[k-1]
 2086              	 .loc 5 101 0
 2087 0052 7B68     	 ldr r3,[r7,#4]
 2088 0054 1A68     	 ldr r2,[r3]
 2089 0056 BB68     	 ldr r3,[r7,#8]
 2090 0058 1A61     	 str r2,[r3,#16]
 102:../functions.h **** 
 103:../functions.h **** 	// q component
 104:../functions.h **** 	xf_dq[1]=lpf->K[2]*lpf->buff[3]+lpf->K[0]*lpf->K[1]*(x_dq[1]+lpf->buff[2]);
 2091              	 .loc 5 104 0
 2092 005a 7B68     	 ldr r3,[r7,#4]
 2093 005c 0433     	 adds r3,r3,#4
 2094 005e BA68     	 ldr r2,[r7,#8]
 2095 0060 92ED027A 	 flds s14,[r2,#8]
 2096 0064 BA68     	 ldr r2,[r7,#8]
 2097 0066 D2ED067A 	 flds s15,[r2,#24]
 2098 006a 27EE277A 	 fmuls s14,s14,s15
 2099 006e BA68     	 ldr r2,[r7,#8]
 2100 0070 D2ED006A 	 flds s13,[r2]
 2101 0074 BA68     	 ldr r2,[r7,#8]
 2102 0076 D2ED017A 	 flds s15,[r2,#4]
 2103 007a 66EEA76A 	 fmuls s13,s13,s15
 2104 007e FA68     	 ldr r2,[r7,#12]
 2105 0080 0432     	 adds r2,r2,#4
 2106 0082 92ED006A 	 flds s12,[r2]
 2107 0086 BA68     	 ldr r2,[r7,#8]
 2108 0088 D2ED057A 	 flds s15,[r2,#20]
 2109 008c 76EE277A 	 fadds s15,s12,s15
 2110 0090 66EEA77A 	 fmuls s15,s13,s15
 2111 0094 77EE277A 	 fadds s15,s14,s15
 2112 0098 C3ED007A 	 fsts s15,[r3]
 105:../functions.h **** 	lpf->buff[2]=x_dq[1];	// x[k-1]
 2113              	 .loc 5 105 0
 2114 009c FB68     	 ldr r3,[r7,#12]
 2115 009e 5A68     	 ldr r2,[r3,#4]
 2116 00a0 BB68     	 ldr r3,[r7,#8]
 2117 00a2 5A61     	 str r2,[r3,#20]
 106:../functions.h **** 	lpf->buff[3]=xf_dq[1];	// y[k-1]
 2118              	 .loc 5 106 0
 2119 00a4 7B68     	 ldr r3,[r7,#4]
 2120 00a6 5A68     	 ldr r2,[r3,#4]
 2121 00a8 BB68     	 ldr r3,[r7,#8]
 2122 00aa 9A61     	 str r2,[r3,#24]
 107:../functions.h **** }
 2123              	 .loc 5 107 0
 2124 00ac 1437     	 adds r7,r7,#20
 2125              	.LCFI102:
 2126              	 .cfi_def_cfa_offset 4
 2127 00ae BD46     	 mov sp,r7
 2128              	.LCFI103:
 2129              	 .cfi_def_cfa_register 13
 2130              	 
 2131 00b0 5DF8047B 	 ldr r7,[sp],#4
 2132              	.LCFI104:
 2133              	 .cfi_restore 7
 2134              	 .cfi_def_cfa_offset 0
 2135 00b4 7047     	 bx lr
 2136              	 .cfi_endproc
 2137              	.LFE392:
 2139 00b6 00BF     	 .section .text.conv2DAC,"ax",%progbits
 2140              	 .align 2
 2141              	 .global conv2DAC
 2142              	 .thumb
 2143              	 .thumb_func
 2145              	conv2DAC:
 2146              	.LFB393:
 108:../functions.h **** 
 109:../functions.h **** int16_t conv2DAC(float value){
 2147              	 .loc 5 109 0
 2148              	 .cfi_startproc
 2149              	 
 2150              	 
 2151              	 
 2152 0000 80B4     	 push {r7}
 2153              	.LCFI105:
 2154              	 .cfi_def_cfa_offset 4
 2155              	 .cfi_offset 7,-4
 2156 0002 85B0     	 sub sp,sp,#20
 2157              	.LCFI106:
 2158              	 .cfi_def_cfa_offset 24
 2159 0004 00AF     	 add r7,sp,#0
 2160              	.LCFI107:
 2161              	 .cfi_def_cfa_register 7
 2162 0006 7860     	 str r0,[r7,#4]
 110:../functions.h **** 	float aux = value;//fmax(value,1.0f);
 2163              	 .loc 5 110 0
 2164 0008 7B68     	 ldr r3,[r7,#4]
 2165 000a FB60     	 str r3,[r7,#12]
 111:../functions.h **** 	aux=(aux>1.0f)?1.0f:aux;    //fmax()
 2166              	 .loc 5 111 0
 2167 000c D7ED037A 	 flds s15,[r7,#12]
 2168 0010 B7EE007A 	 fconsts s14,#112
 2169 0014 F4EEC77A 	 fcmpes s15,s14
 2170 0018 F1EE10FA 	 fmstat
 2171 001c 02DD     	 ble .L61
 2172              	 .loc 5 111 0 is_stmt 0 discriminator 1
 2173 001e 4FF07E53 	 mov r3,#1065353216
 2174 0022 00E0     	 b .L54
 2175              	.L61:
 2176              	 .loc 5 111 0 discriminator 2
 2177 0024 FB68     	 ldr r3,[r7,#12]
 2178              	.L54:
 2179              	 .loc 5 111 0 discriminator 4
 2180 0026 FB60     	 str r3,[r7,#12]
 112:../functions.h **** 	aux=(aux<-1.0f)?-1.0f:aux; //fmin()
 2181              	 .loc 5 112 0 is_stmt 1 discriminator 4
 2182 0028 D7ED037A 	 flds s15,[r7,#12]
 2183 002c BFEE007A 	 fconsts s14,#240
 2184 0030 F4EEC77A 	 fcmpes s15,s14
 2185 0034 F1EE10FA 	 fmstat
 2186 0038 01D5     	 bpl .L62
 2187              	 .loc 5 112 0 is_stmt 0 discriminator 1
 2188 003a 0B4B     	 ldr r3,.L63
 2189 003c 00E0     	 b .L57
 2190              	.L62:
 2191              	 .loc 5 112 0 discriminator 2
 2192 003e FB68     	 ldr r3,[r7,#12]
 2193              	.L57:
 2194              	 .loc 5 112 0 discriminator 4
 2195 0040 FB60     	 str r3,[r7,#12]
 113:../functions.h **** 	return ((int16_t)(aux*2047.0f));
 2196              	 .loc 5 113 0 is_stmt 1 discriminator 4
 2197 0042 D7ED037A 	 flds s15,[r7,#12]
 2198 0046 9FED097A 	 flds s14,.L63+4
 2199 004a 67EE877A 	 fmuls s15,s15,s14
 2200 004e FDEEE77A 	 ftosizs s15,s15
 2201 0052 C7ED007A 	 fsts s15,[r7]
 2202 0056 3B88     	 ldrh r3,[r7]
 2203 0058 9BB2     	 uxth r3,r3
 2204 005a 1BB2     	 sxth r3,r3
 114:../functions.h **** }
 2205              	 .loc 5 114 0 discriminator 4
 2206 005c 1846     	 mov r0,r3
 2207 005e 1437     	 adds r7,r7,#20
 2208              	.LCFI108:
 2209              	 .cfi_def_cfa_offset 4
 2210 0060 BD46     	 mov sp,r7
 2211              	.LCFI109:
 2212              	 .cfi_def_cfa_register 13
 2213              	 
 2214 0062 5DF8047B 	 ldr r7,[sp],#4
 2215              	.LCFI110:
 2216              	 .cfi_restore 7
 2217              	 .cfi_def_cfa_offset 0
 2218 0066 7047     	 bx lr
 2219              	.L64:
 2220              	 .align 2
 2221              	.L63:
 2222 0068 000080BF 	 .word -1082130432
 2223 006c 00E0FF44 	 .word 1157619712
 2224              	 .cfi_endproc
 2225              	.LFE393:
 2227              	 .section .text.PI_FW,"ax",%progbits
 2228              	 .align 2
 2229              	 .global PI_FW
 2230              	 .thumb
 2231              	 .thumb_func
 2233              	PI_FW:
 2234              	.LFB394:
 115:../functions.h **** 
 116:../functions.h **** float PI_FW(float val, float *PI_buff, const float *PI_K){
 2235              	 .loc 5 116 0
 2236              	 .cfi_startproc
 2237              	 
 2238              	 
 2239              	 
 2240 0000 80B4     	 push {r7}
 2241              	.LCFI111:
 2242              	 .cfi_def_cfa_offset 4
 2243              	 .cfi_offset 7,-4
 2244 0002 87B0     	 sub sp,sp,#28
 2245              	.LCFI112:
 2246              	 .cfi_def_cfa_offset 32
 2247 0004 00AF     	 add r7,sp,#0
 2248              	.LCFI113:
 2249              	 .cfi_def_cfa_register 7
 2250 0006 F860     	 str r0,[r7,#12]
 2251 0008 B960     	 str r1,[r7,#8]
 2252 000a 7A60     	 str r2,[r7,#4]
 117:../functions.h **** 	float res=*PI_buff+*PI_K*val+*PI_K**(PI_buff+1);
 2253              	 .loc 5 117 0
 2254 000c BB68     	 ldr r3,[r7,#8]
 2255 000e 93ED007A 	 flds s14,[r3]
 2256 0012 7B68     	 ldr r3,[r7,#4]
 2257 0014 D3ED006A 	 flds s13,[r3]
 2258 0018 D7ED037A 	 flds s15,[r7,#12]
 2259 001c 66EEA77A 	 fmuls s15,s13,s15
 2260 0020 37EE277A 	 fadds s14,s14,s15
 2261 0024 7B68     	 ldr r3,[r7,#4]
 2262 0026 D3ED006A 	 flds s13,[r3]
 2263 002a BB68     	 ldr r3,[r7,#8]
 2264 002c 0433     	 adds r3,r3,#4
 2265 002e D3ED007A 	 flds s15,[r3]
 2266 0032 66EEA77A 	 fmuls s15,s13,s15
 2267 0036 77EE277A 	 fadds s15,s14,s15
 2268 003a C7ED057A 	 fsts s15,[r7,#20]
 118:../functions.h **** 	*PI_buff=res;
 2269              	 .loc 5 118 0
 2270 003e BB68     	 ldr r3,[r7,#8]
 2271 0040 7A69     	 ldr r2,[r7,#20]
 2272 0042 1A60     	 str r2,[r3]
 119:../functions.h **** 	*(PI_buff+1)=val;
 2273              	 .loc 5 119 0
 2274 0044 BB68     	 ldr r3,[r7,#8]
 2275 0046 0433     	 adds r3,r3,#4
 2276 0048 FA68     	 ldr r2,[r7,#12]
 2277 004a 1A60     	 str r2,[r3]
 120:../functions.h **** 	return res;
 2278              	 .loc 5 120 0
 2279 004c 7B69     	 ldr r3,[r7,#20]
 121:../functions.h **** }
 2280              	 .loc 5 121 0
 2281 004e 1846     	 mov r0,r3
 2282 0050 1C37     	 adds r7,r7,#28
 2283              	.LCFI114:
 2284              	 .cfi_def_cfa_offset 4
 2285 0052 BD46     	 mov sp,r7
 2286              	.LCFI115:
 2287              	 .cfi_def_cfa_register 13
 2288              	 
 2289 0054 5DF8047B 	 ldr r7,[sp],#4
 2290              	.LCFI116:
 2291              	 .cfi_restore 7
 2292              	 .cfi_def_cfa_offset 0
 2293 0058 7047     	 bx lr
 2294              	 .cfi_endproc
 2295              	.LFE394:
 2297 005a 00BF     	 .section .text.PI_TR,"ax",%progbits
 2298              	 .align 2
 2299              	 .global PI_TR
 2300              	 .thumb
 2301              	 .thumb_func
 2303              	PI_TR:
 2304              	.LFB395:
 122:../functions.h **** 
 123:../functions.h **** float PI_TR(float val, float *PIbuff, float Ti, const float PI_K[2], const float sat[2], uint16_t *
 2305              	 .loc 5 123 0
 2306              	 .cfi_startproc
 2307              	 
 2308              	 
 2309 0000 80B5     	 push {r7,lr}
 2310              	.LCFI117:
 2311              	 .cfi_def_cfa_offset 8
 2312              	 .cfi_offset 7,-8
 2313              	 .cfi_offset 14,-4
 2314 0002 86B0     	 sub sp,sp,#24
 2315              	.LCFI118:
 2316              	 .cfi_def_cfa_offset 32
 2317 0004 00AF     	 add r7,sp,#0
 2318              	.LCFI119:
 2319              	 .cfi_def_cfa_register 7
 2320 0006 F860     	 str r0,[r7,#12]
 2321 0008 B960     	 str r1,[r7,#8]
 2322 000a 7A60     	 str r2,[r7,#4]
 2323 000c 3B60     	 str r3,[r7]
 124:../functions.h **** 	// bilinear discretization PI in ideal form
 125:../functions.h **** 	// to change it to parallel form replace Ki with Ki/Kp
 126:../functions.h **** 	float error=val;
 2324              	 .loc 5 126 0
 2325 000e FB68     	 ldr r3,[r7,#12]
 2326 0010 3B61     	 str r3,[r7,#16]
 127:../functions.h **** 	float integ_error=*PIbuff+(error+*(PIbuff+1))*0.5f*Ti;
 2327              	 .loc 5 127 0
 2328 0012 BB68     	 ldr r3,[r7,#8]
 2329 0014 93ED007A 	 flds s14,[r3]
 2330 0018 BB68     	 ldr r3,[r7,#8]
 2331 001a 0433     	 adds r3,r3,#4
 2332 001c D3ED006A 	 flds s13,[r3]
 2333 0020 D7ED047A 	 flds s15,[r7,#16]
 2334 0024 76EEA77A 	 fadds s15,s13,s15
 2335 0028 F6EE006A 	 fconsts s13,#96
 2336 002c 67EEA66A 	 fmuls s13,s15,s13
 2337 0030 D7ED017A 	 flds s15,[r7,#4]
 2338 0034 66EEA77A 	 fmuls s15,s13,s15
 2339 0038 77EE277A 	 fadds s15,s14,s15
 2340 003c C7ED057A 	 fsts s15,[r7,#20]
 128:../functions.h **** 	// saturation of integral accumulator:
 129:../functions.h **** 	if (integ_error>0){
 2341              	 .loc 5 129 0
 2342 0040 D7ED057A 	 flds s15,[r7,#20]
 2343 0044 F5EEC07A 	 fcmpezs s15
 2344 0048 F1EE10FA 	 fmstat
 2345 004c 18DD     	 ble .L80
 130:../functions.h **** 		integ_error=fminf(integ_error,sat[0]);		// 7853.98=(pi/4)/Ti
 2346              	 .loc 5 130 0
 2347 004e 3B6A     	 ldr r3,[r7,#32]
 2348 0050 1B68     	 ldr r3,[r3]
 2349 0052 7869     	 ldr r0,[r7,#20]
 2350 0054 1946     	 mov r1,r3
 2351 0056 FFF7FEFF 	 bl fminf
 2352 005a 7861     	 str r0,[r7,#20]
 131:../functions.h **** 		if (integ_error<sat[0])
 2353              	 .loc 5 131 0
 2354 005c 3B6A     	 ldr r3,[r7,#32]
 2355 005e 93ED007A 	 flds s14,[r3]
 2356 0062 D7ED057A 	 flds s15,[r7,#20]
 2357 0066 B4EEE77A 	 fcmpes s14,s15
 2358 006a F1EE10FA 	 fmstat
 2359 006e 03DD     	 ble .L81
 132:../functions.h **** 			*flag=0u;
 2360              	 .loc 5 132 0
 2361 0070 7B6A     	 ldr r3,[r7,#36]
 2362 0072 0022     	 movs r2,#0
 2363 0074 1A80     	 strh r2,[r3]
 2364 0076 1DE0     	 b .L73
 2365              	.L81:
 133:../functions.h **** 		else
 134:../functions.h **** 			*flag=1u;
 2366              	 .loc 5 134 0
 2367 0078 7B6A     	 ldr r3,[r7,#36]
 2368 007a 0122     	 movs r2,#1
 2369 007c 1A80     	 strh r2,[r3]
 2370 007e 19E0     	 b .L73
 2371              	.L80:
 135:../functions.h **** 	}
 136:../functions.h **** 	else{
 137:../functions.h **** 		integ_error=fmaxf(integ_error,sat[1]);
 2372              	 .loc 5 137 0
 2373 0080 3B6A     	 ldr r3,[r7,#32]
 2374 0082 0433     	 adds r3,r3,#4
 2375 0084 1B68     	 ldr r3,[r3]
 2376 0086 7869     	 ldr r0,[r7,#20]
 2377 0088 1946     	 mov r1,r3
 2378 008a FFF7FEFF 	 bl fmaxf
 2379 008e 7861     	 str r0,[r7,#20]
 138:../functions.h **** 		if (integ_error>sat[1])
 2380              	 .loc 5 138 0
 2381 0090 3B6A     	 ldr r3,[r7,#32]
 2382 0092 0433     	 adds r3,r3,#4
 2383 0094 93ED007A 	 flds s14,[r3]
 2384 0098 D7ED057A 	 flds s15,[r7,#20]
 2385 009c B4EEE77A 	 fcmpes s14,s15
 2386 00a0 F1EE10FA 	 fmstat
 2387 00a4 03D5     	 bpl .L82
 139:../functions.h **** 			*flag=0u;
 2388              	 .loc 5 139 0
 2389 00a6 7B6A     	 ldr r3,[r7,#36]
 2390 00a8 0022     	 movs r2,#0
 2391 00aa 1A80     	 strh r2,[r3]
 2392 00ac 02E0     	 b .L73
 2393              	.L82:
 140:../functions.h **** 		else
 141:../functions.h **** 			*flag=1u;
 2394              	 .loc 5 141 0
 2395 00ae 7B6A     	 ldr r3,[r7,#36]
 2396 00b0 0122     	 movs r2,#1
 2397 00b2 1A80     	 strh r2,[r3]
 2398              	.L73:
 142:../functions.h **** 	}
 143:../functions.h **** 	*PIbuff=integ_error;
 2399              	 .loc 5 143 0
 2400 00b4 BB68     	 ldr r3,[r7,#8]
 2401 00b6 7A69     	 ldr r2,[r7,#20]
 2402 00b8 1A60     	 str r2,[r3]
 144:../functions.h **** 	*(PIbuff+1)=error;
 2403              	 .loc 5 144 0
 2404 00ba BB68     	 ldr r3,[r7,#8]
 2405 00bc 0433     	 adds r3,r3,#4
 2406 00be 3A69     	 ldr r2,[r7,#16]
 2407 00c0 1A60     	 str r2,[r3]
 145:../functions.h **** 	return PI_K[0]*(error+PI_K[1]*integ_error);
 2408              	 .loc 5 145 0
 2409 00c2 3B68     	 ldr r3,[r7]
 2410 00c4 93ED007A 	 flds s14,[r3]
 2411 00c8 3B68     	 ldr r3,[r7]
 2412 00ca 0433     	 adds r3,r3,#4
 2413 00cc D3ED006A 	 flds s13,[r3]
 2414 00d0 D7ED057A 	 flds s15,[r7,#20]
 2415 00d4 66EEA76A 	 fmuls s13,s13,s15
 2416 00d8 D7ED047A 	 flds s15,[r7,#16]
 2417 00dc 76EEA77A 	 fadds s15,s13,s15
 2418 00e0 67EE277A 	 fmuls s15,s14,s15
 2419 00e4 17EE903A 	 fmrs r3,s15
 146:../functions.h **** }
 2420              	 .loc 5 146 0
 2421 00e8 1846     	 mov r0,r3
 2422 00ea 1837     	 adds r7,r7,#24
 2423              	.LCFI120:
 2424              	 .cfi_def_cfa_offset 8
 2425 00ec BD46     	 mov sp,r7
 2426              	.LCFI121:
 2427              	 .cfi_def_cfa_register 13
 2428              	 
 2429 00ee 80BD     	 pop {r7,pc}
 2430              	 .cfi_endproc
 2431              	.LFE395:
 2433              	 .section .text.PI_TR_p,"ax",%progbits
 2434              	 .align 2
 2435              	 .global PI_TR_p
 2436              	 .thumb
 2437              	 .thumb_func
 2439              	PI_TR_p:
 2440              	.LFB396:
 147:../functions.h **** 
 148:../functions.h **** float PI_TR_p (float error, float Ti, struct PI_tr_p *pi){
 2441              	 .loc 5 148 0
 2442              	 .cfi_startproc
 2443              	 
 2444              	 
 2445              	 
 2446 0000 80B4     	 push {r7}
 2447              	.LCFI122:
 2448              	 .cfi_def_cfa_offset 4
 2449              	 .cfi_offset 7,-4
 2450 0002 87B0     	 sub sp,sp,#28
 2451              	.LCFI123:
 2452              	 .cfi_def_cfa_offset 32
 2453 0004 00AF     	 add r7,sp,#0
 2454              	.LCFI124:
 2455              	 .cfi_def_cfa_register 7
 2456 0006 F860     	 str r0,[r7,#12]
 2457 0008 B960     	 str r1,[r7,#8]
 2458 000a 7A60     	 str r2,[r7,#4]
 149:../functions.h **** 	// bilinear discretization PI in parallel form:
 150:../functions.h **** 	// to use in ideal form, replace Ki -> Kp*Ki
 151:../functions.h **** 	float u=0.0f;
 2459              	 .loc 5 151 0
 2460 000c 4FF00003 	 mov r3,#0
 2461 0010 7B61     	 str r3,[r7,#20]
 152:../functions.h **** 	// check if output is not saturated
 153:../functions.h **** 	if (pi->flag==0u){
 2462              	 .loc 5 153 0
 2463 0012 7B68     	 ldr r3,[r7,#4]
 2464 0014 1B7E     	 ldrb r3,[r3,#24]
 2465 0016 002B     	 cmp r3,#0
 2466 0018 16D1     	 bne .L84
 154:../functions.h **** 		pi->buff[1]+=(error+pi->buff[0])*0.5f*Ti;
 2467              	 .loc 5 154 0
 2468 001a 7B68     	 ldr r3,[r7,#4]
 2469 001c 93ED057A 	 flds s14,[r3,#20]
 2470 0020 7B68     	 ldr r3,[r7,#4]
 2471 0022 D3ED046A 	 flds s13,[r3,#16]
 2472 0026 D7ED037A 	 flds s15,[r7,#12]
 2473 002a 76EEA77A 	 fadds s15,s13,s15
 2474 002e F6EE006A 	 fconsts s13,#96
 2475 0032 67EEA66A 	 fmuls s13,s15,s13
 2476 0036 D7ED027A 	 flds s15,[r7,#8]
 2477 003a 66EEA77A 	 fmuls s15,s13,s15
 2478 003e 77EE277A 	 fadds s15,s14,s15
 2479 0042 7B68     	 ldr r3,[r7,#4]
 2480 0044 C3ED057A 	 fsts s15,[r3,#20]
 2481              	.L84:
 155:../functions.h **** 	}
 156:../functions.h **** 	u=pi->K[0]*error+pi->K[1]*pi->buff[1];
 2482              	 .loc 5 156 0
 2483 0048 7B68     	 ldr r3,[r7,#4]
 2484 004a 93ED007A 	 flds s14,[r3]
 2485 004e D7ED037A 	 flds s15,[r7,#12]
 2486 0052 27EE277A 	 fmuls s14,s14,s15
 2487 0056 7B68     	 ldr r3,[r7,#4]
 2488 0058 D3ED016A 	 flds s13,[r3,#4]
 2489 005c 7B68     	 ldr r3,[r7,#4]
 2490 005e D3ED057A 	 flds s15,[r3,#20]
 2491 0062 66EEA77A 	 fmuls s15,s13,s15
 2492 0066 77EE277A 	 fadds s15,s14,s15
 2493 006a C7ED057A 	 fsts s15,[r7,#20]
 157:../functions.h **** 	if (u > pi->sat[0]){
 2494              	 .loc 5 157 0
 2495 006e 7B68     	 ldr r3,[r7,#4]
 2496 0070 93ED027A 	 flds s14,[r3,#8]
 2497 0074 D7ED057A 	 flds s15,[r7,#20]
 2498 0078 B4EEE77A 	 fcmpes s14,s15
 2499 007c F1EE10FA 	 fmstat
 2500 0080 0AD5     	 bpl .L93
 158:../functions.h **** 		u=pi->sat[0];
 2501              	 .loc 5 158 0
 2502 0082 7B68     	 ldr r3,[r7,#4]
 2503 0084 9B68     	 ldr r3,[r3,#8]
 2504 0086 7B61     	 str r3,[r7,#20]
 159:../functions.h **** 		pi->flag=pi->flag|0b00000001;
 2505              	 .loc 5 159 0
 2506 0088 7B68     	 ldr r3,[r7,#4]
 2507 008a 1B7E     	 ldrb r3,[r3,#24]
 2508 008c 43F00103 	 orr r3,r3,#1
 2509 0090 DAB2     	 uxtb r2,r3
 2510 0092 7B68     	 ldr r3,[r7,#4]
 2511 0094 1A76     	 strb r2,[r3,#24]
 2512 0096 1BE0     	 b .L87
 2513              	.L93:
 160:../functions.h **** 	}
 161:../functions.h **** 	else if (u < pi->sat[1]){
 2514              	 .loc 5 161 0
 2515 0098 7B68     	 ldr r3,[r7,#4]
 2516 009a 93ED037A 	 flds s14,[r3,#12]
 2517 009e D7ED057A 	 flds s15,[r7,#20]
 2518 00a2 B4EEE77A 	 fcmpes s14,s15
 2519 00a6 F1EE10FA 	 fmstat
 2520 00aa 0ADD     	 ble .L94
 162:../functions.h **** 		u=pi->sat[1];
 2521              	 .loc 5 162 0
 2522 00ac 7B68     	 ldr r3,[r7,#4]
 2523 00ae DB68     	 ldr r3,[r3,#12]
 2524 00b0 7B61     	 str r3,[r7,#20]
 163:../functions.h **** 		pi->flag=pi->flag|0b00000001;
 2525              	 .loc 5 163 0
 2526 00b2 7B68     	 ldr r3,[r7,#4]
 2527 00b4 1B7E     	 ldrb r3,[r3,#24]
 2528 00b6 43F00103 	 orr r3,r3,#1
 2529 00ba DAB2     	 uxtb r2,r3
 2530 00bc 7B68     	 ldr r3,[r7,#4]
 2531 00be 1A76     	 strb r2,[r3,#24]
 2532 00c0 06E0     	 b .L87
 2533              	.L94:
 164:../functions.h **** 	}
 165:../functions.h **** 	else{
 166:../functions.h **** 		pi->flag=pi->flag&0b1111110;
 2534              	 .loc 5 166 0
 2535 00c2 7B68     	 ldr r3,[r7,#4]
 2536 00c4 1B7E     	 ldrb r3,[r3,#24]
 2537 00c6 03F07E03 	 and r3,r3,#126
 2538 00ca DAB2     	 uxtb r2,r3
 2539 00cc 7B68     	 ldr r3,[r7,#4]
 2540 00ce 1A76     	 strb r2,[r3,#24]
 2541              	.L87:
 167:../functions.h **** 	}
 168:../functions.h **** 	pi->buff[0]=error;
 2542              	 .loc 5 168 0
 2543 00d0 7B68     	 ldr r3,[r7,#4]
 2544 00d2 FA68     	 ldr r2,[r7,#12]
 2545 00d4 1A61     	 str r2,[r3,#16]
 169:../functions.h **** 	return u;
 2546              	 .loc 5 169 0
 2547 00d6 7B69     	 ldr r3,[r7,#20]
 170:../functions.h **** }
 2548              	 .loc 5 170 0
 2549 00d8 1846     	 mov r0,r3
 2550 00da 1C37     	 adds r7,r7,#28
 2551              	.LCFI125:
 2552              	 .cfi_def_cfa_offset 4
 2553 00dc BD46     	 mov sp,r7
 2554              	.LCFI126:
 2555              	 .cfi_def_cfa_register 13
 2556              	 
 2557 00de 5DF8047B 	 ldr r7,[sp],#4
 2558              	.LCFI127:
 2559              	 .cfi_restore 7
 2560              	 .cfi_def_cfa_offset 0
 2561 00e2 7047     	 bx lr
 2562              	 .cfi_endproc
 2563              	.LFE396:
 2565              	 .section .text.PI_TR_dq,"ax",%progbits
 2566              	 .align 2
 2567              	 .global PI_TR_dq
 2568              	 .thumb
 2569              	 .thumb_func
 2571              	PI_TR_dq:
 2572              	.LFB397:
 171:../functions.h **** 
 172:../functions.h **** void PI_TR_dq (float *dq_error, float Ti, struct PI_dq_tr *pi, float *u_dq){
 2573              	 .loc 5 172 0
 2574              	 .cfi_startproc
 2575              	 
 2576              	 
 2577              	 
 2578 0000 80B4     	 push {r7}
 2579              	.LCFI128:
 2580              	 .cfi_def_cfa_offset 4
 2581              	 .cfi_offset 7,-4
 2582 0002 85B0     	 sub sp,sp,#20
 2583              	.LCFI129:
 2584              	 .cfi_def_cfa_offset 24
 2585 0004 00AF     	 add r7,sp,#0
 2586              	.LCFI130:
 2587              	 .cfi_def_cfa_register 7
 2588 0006 F860     	 str r0,[r7,#12]
 2589 0008 B960     	 str r1,[r7,#8]
 2590 000a 7A60     	 str r2,[r7,#4]
 2591 000c 3B60     	 str r3,[r7]
 173:../functions.h **** 	// bilinear discretization PI in parallel form:
 174:../functions.h **** 	// to use in ideal form, replace Ki -> Kp*Ki
 175:../functions.h **** 	if (pi->flag==0u){
 2592              	 .loc 5 175 0
 2593 000e 7B68     	 ldr r3,[r7,#4]
 2594 0010 93F82030 	 ldrb r3,[r3,#32]
 2595 0014 002B     	 cmp r3,#0
 2596 0016 30D1     	 bne .L96
 176:../functions.h **** 		pi->buff[1]+=(dq_error[0]+pi->buff[0])*0.5f*Ti;	// d integral component
 2597              	 .loc 5 176 0
 2598 0018 7B68     	 ldr r3,[r7,#4]
 2599 001a 93ED057A 	 flds s14,[r3,#20]
 2600 001e FB68     	 ldr r3,[r7,#12]
 2601 0020 D3ED006A 	 flds s13,[r3]
 2602 0024 7B68     	 ldr r3,[r7,#4]
 2603 0026 D3ED047A 	 flds s15,[r3,#16]
 2604 002a 76EEA77A 	 fadds s15,s13,s15
 2605 002e F6EE006A 	 fconsts s13,#96
 2606 0032 67EEA66A 	 fmuls s13,s15,s13
 2607 0036 D7ED027A 	 flds s15,[r7,#8]
 2608 003a 66EEA77A 	 fmuls s15,s13,s15
 2609 003e 77EE277A 	 fadds s15,s14,s15
 2610 0042 7B68     	 ldr r3,[r7,#4]
 2611 0044 C3ED057A 	 fsts s15,[r3,#20]
 177:../functions.h **** 		pi->buff[3]+=(dq_error[1]+pi->buff[2])*0.5f*Ti;	// q integral component
 2612              	 .loc 5 177 0
 2613 0048 7B68     	 ldr r3,[r7,#4]
 2614 004a 93ED077A 	 flds s14,[r3,#28]
 2615 004e FB68     	 ldr r3,[r7,#12]
 2616 0050 0433     	 adds r3,r3,#4
 2617 0052 D3ED006A 	 flds s13,[r3]
 2618 0056 7B68     	 ldr r3,[r7,#4]
 2619 0058 D3ED067A 	 flds s15,[r3,#24]
 2620 005c 76EEA77A 	 fadds s15,s13,s15
 2621 0060 F6EE006A 	 fconsts s13,#96
 2622 0064 67EEA66A 	 fmuls s13,s15,s13
 2623 0068 D7ED027A 	 flds s15,[r7,#8]
 2624 006c 66EEA77A 	 fmuls s15,s13,s15
 2625 0070 77EE277A 	 fadds s15,s14,s15
 2626 0074 7B68     	 ldr r3,[r7,#4]
 2627 0076 C3ED077A 	 fsts s15,[r3,#28]
 2628              	.L96:
 178:../functions.h **** 	}
 179:../functions.h **** 
 180:../functions.h **** 	u_dq[0]=pi->K[0]*dq_error[0]+pi->K[1]*pi->buff[1];	// d component
 2629              	 .loc 5 180 0
 2630 007a 7B68     	 ldr r3,[r7,#4]
 2631 007c 93ED007A 	 flds s14,[r3]
 2632 0080 FB68     	 ldr r3,[r7,#12]
 2633 0082 D3ED007A 	 flds s15,[r3]
 2634 0086 27EE277A 	 fmuls s14,s14,s15
 2635 008a 7B68     	 ldr r3,[r7,#4]
 2636 008c D3ED016A 	 flds s13,[r3,#4]
 2637 0090 7B68     	 ldr r3,[r7,#4]
 2638 0092 D3ED057A 	 flds s15,[r3,#20]
 2639 0096 66EEA77A 	 fmuls s15,s13,s15
 2640 009a 77EE277A 	 fadds s15,s14,s15
 2641 009e 3B68     	 ldr r3,[r7]
 2642 00a0 C3ED007A 	 fsts s15,[r3]
 181:../functions.h **** 	u_dq[1]=pi->K[0]*dq_error[1]+pi->K[1]*pi->buff[3];	// q component
 2643              	 .loc 5 181 0
 2644 00a4 3B68     	 ldr r3,[r7]
 2645 00a6 0433     	 adds r3,r3,#4
 2646 00a8 7A68     	 ldr r2,[r7,#4]
 2647 00aa 92ED007A 	 flds s14,[r2]
 2648 00ae FA68     	 ldr r2,[r7,#12]
 2649 00b0 0432     	 adds r2,r2,#4
 2650 00b2 D2ED007A 	 flds s15,[r2]
 2651 00b6 27EE277A 	 fmuls s14,s14,s15
 2652 00ba 7A68     	 ldr r2,[r7,#4]
 2653 00bc D2ED016A 	 flds s13,[r2,#4]
 2654 00c0 7A68     	 ldr r2,[r7,#4]
 2655 00c2 D2ED077A 	 flds s15,[r2,#28]
 2656 00c6 66EEA77A 	 fmuls s15,s13,s15
 2657 00ca 77EE277A 	 fadds s15,s14,s15
 2658 00ce C3ED007A 	 fsts s15,[r3]
 182:../functions.h **** 
 183:../functions.h **** 	// saturations d
 184:../functions.h **** 	if(u_dq[0]>pi->sat[0]){
 2659              	 .loc 5 184 0
 2660 00d2 3B68     	 ldr r3,[r7]
 2661 00d4 93ED007A 	 flds s14,[r3]
 2662 00d8 7B68     	 ldr r3,[r7,#4]
 2663 00da D3ED027A 	 flds s15,[r3,#8]
 2664 00de B4EEE77A 	 fcmpes s14,s15
 2665 00e2 F1EE10FA 	 fmstat
 2666 00e6 0DDD     	 ble .L111
 185:../functions.h **** 		// pi->buff[2]=u_dq[0]-pi->sat[0];
 186:../functions.h **** 		u_dq[0]=pi->sat[0];
 2667              	 .loc 5 186 0
 2668 00e8 7B68     	 ldr r3,[r7,#4]
 2669 00ea 9A68     	 ldr r2,[r3,#8]
 2670 00ec 3B68     	 ldr r3,[r7]
 2671 00ee 1A60     	 str r2,[r3]
 187:../functions.h **** 		pi->flag=pi->flag|0b00000010;
 2672              	 .loc 5 187 0
 2673 00f0 7B68     	 ldr r3,[r7,#4]
 2674 00f2 93F82030 	 ldrb r3,[r3,#32]
 2675 00f6 43F00203 	 orr r3,r3,#2
 2676 00fa DAB2     	 uxtb r2,r3
 2677 00fc 7B68     	 ldr r3,[r7,#4]
 2678 00fe 83F82020 	 strb r2,[r3,#32]
 2679 0102 1DE0     	 b .L99
 2680              	.L111:
 188:../functions.h **** 	}
 189:../functions.h **** 	else if(u_dq[0]<pi->sat[1]){
 2681              	 .loc 5 189 0
 2682 0104 3B68     	 ldr r3,[r7]
 2683 0106 93ED007A 	 flds s14,[r3]
 2684 010a 7B68     	 ldr r3,[r7,#4]
 2685 010c D3ED037A 	 flds s15,[r3,#12]
 2686 0110 B4EEE77A 	 fcmpes s14,s15
 2687 0114 F1EE10FA 	 fmstat
 2688 0118 09D5     	 bpl .L112
 190:../functions.h **** 		// pi->buff[2]=u_dq[0]-pi->sat[1];
 191:../functions.h **** 		pi->flag=pi->flag|0b00000010;
 2689              	 .loc 5 191 0
 2690 011a 7B68     	 ldr r3,[r7,#4]
 2691 011c 93F82030 	 ldrb r3,[r3,#32]
 2692 0120 43F00203 	 orr r3,r3,#2
 2693 0124 DAB2     	 uxtb r2,r3
 2694 0126 7B68     	 ldr r3,[r7,#4]
 2695 0128 83F82020 	 strb r2,[r3,#32]
 2696 012c 08E0     	 b .L99
 2697              	.L112:
 192:../functions.h **** 	}
 193:../functions.h **** 	else{
 194:../functions.h **** 		// pi->buff[2]=0;
 195:../functions.h **** 		pi->flag=pi->flag&0b1111101;
 2698              	 .loc 5 195 0
 2699 012e 7B68     	 ldr r3,[r7,#4]
 2700 0130 93F82030 	 ldrb r3,[r3,#32]
 2701 0134 03F07D03 	 and r3,r3,#125
 2702 0138 DAB2     	 uxtb r2,r3
 2703 013a 7B68     	 ldr r3,[r7,#4]
 2704 013c 83F82020 	 strb r2,[r3,#32]
 2705              	.L99:
 196:../functions.h **** 	}
 197:../functions.h **** 
 198:../functions.h **** 	// saturations q
 199:../functions.h **** 	if(u_dq[1]>pi->sat[0]){
 2706              	 .loc 5 199 0
 2707 0140 3B68     	 ldr r3,[r7]
 2708 0142 0433     	 adds r3,r3,#4
 2709 0144 93ED007A 	 flds s14,[r3]
 2710 0148 7B68     	 ldr r3,[r7,#4]
 2711 014a D3ED027A 	 flds s15,[r3,#8]
 2712 014e B4EEE77A 	 fcmpes s14,s15
 2713 0152 F1EE10FA 	 fmstat
 2714 0156 0EDD     	 ble .L113
 200:../functions.h **** 		// pi->buff[5]=u_dq[1]-pi->sat[0];
 201:../functions.h **** 		u_dq[1]=pi->sat[0];
 2715              	 .loc 5 201 0
 2716 0158 3B68     	 ldr r3,[r7]
 2717 015a 0433     	 adds r3,r3,#4
 2718 015c 7A68     	 ldr r2,[r7,#4]
 2719 015e 9268     	 ldr r2,[r2,#8]
 2720 0160 1A60     	 str r2,[r3]
 202:../functions.h **** 		pi->flag=pi->flag|0b00000001;
 2721              	 .loc 5 202 0
 2722 0162 7B68     	 ldr r3,[r7,#4]
 2723 0164 93F82030 	 ldrb r3,[r3,#32]
 2724 0168 43F00103 	 orr r3,r3,#1
 2725 016c DAB2     	 uxtb r2,r3
 2726 016e 7B68     	 ldr r3,[r7,#4]
 2727 0170 83F82020 	 strb r2,[r3,#32]
 2728 0174 23E0     	 b .L104
 2729              	.L113:
 203:../functions.h **** 	}
 204:../functions.h **** 	else if(u_dq[1]<pi->sat[1]){
 2730              	 .loc 5 204 0
 2731 0176 3B68     	 ldr r3,[r7]
 2732 0178 0433     	 adds r3,r3,#4
 2733 017a 93ED007A 	 flds s14,[r3]
 2734 017e 7B68     	 ldr r3,[r7,#4]
 2735 0180 D3ED037A 	 flds s15,[r3,#12]
 2736 0184 B4EEE77A 	 fcmpes s14,s15
 2737 0188 F1EE10FA 	 fmstat
 2738 018c 0ED5     	 bpl .L114
 205:../functions.h **** 		// pi->buff[5]=u_dq[1]-pi->sat[1];
 206:../functions.h **** 		u_dq[1]=pi->sat[1];
 2739              	 .loc 5 206 0
 2740 018e 3B68     	 ldr r3,[r7]
 2741 0190 0433     	 adds r3,r3,#4
 2742 0192 7A68     	 ldr r2,[r7,#4]
 2743 0194 D268     	 ldr r2,[r2,#12]
 2744 0196 1A60     	 str r2,[r3]
 207:../functions.h **** 		pi->flag=pi->flag|0b00000001;
 2745              	 .loc 5 207 0
 2746 0198 7B68     	 ldr r3,[r7,#4]
 2747 019a 93F82030 	 ldrb r3,[r3,#32]
 2748 019e 43F00103 	 orr r3,r3,#1
 2749 01a2 DAB2     	 uxtb r2,r3
 2750 01a4 7B68     	 ldr r3,[r7,#4]
 2751 01a6 83F82020 	 strb r2,[r3,#32]
 2752 01aa 08E0     	 b .L104
 2753              	.L114:
 208:../functions.h **** 	}
 209:../functions.h **** 	else{
 210:../functions.h **** 		// pi->buff[5]=0;
 211:../functions.h **** 		pi->flag=pi->flag&0b1111110;
 2754              	 .loc 5 211 0
 2755 01ac 7B68     	 ldr r3,[r7,#4]
 2756 01ae 93F82030 	 ldrb r3,[r3,#32]
 2757 01b2 03F07E03 	 and r3,r3,#126
 2758 01b6 DAB2     	 uxtb r2,r3
 2759 01b8 7B68     	 ldr r3,[r7,#4]
 2760 01ba 83F82020 	 strb r2,[r3,#32]
 2761              	.L104:
 212:../functions.h **** 	}
 213:../functions.h **** 
 214:../functions.h **** 	/*
 215:../functions.h **** 	PI->buff[0]	// last measured error
 216:../functions.h **** 	PI->buff[1]	// integral error accumulator
 217:../functions.h **** 	PI->buff[2]	// back calculation
 218:../functions.h **** 	*/
 219:../functions.h **** 	pi->buff[0]=dq_error[0]; 	// e[k-1]
 2762              	 .loc 5 219 0
 2763 01be FB68     	 ldr r3,[r7,#12]
 2764 01c0 1A68     	 ldr r2,[r3]
 2765 01c2 7B68     	 ldr r3,[r7,#4]
 2766 01c4 1A61     	 str r2,[r3,#16]
 220:../functions.h **** 	pi->buff[2]=dq_error[1];	// e[k-1]
 2767              	 .loc 5 220 0
 2768 01c6 FB68     	 ldr r3,[r7,#12]
 2769 01c8 5A68     	 ldr r2,[r3,#4]
 2770 01ca 7B68     	 ldr r3,[r7,#4]
 2771 01cc 9A61     	 str r2,[r3,#24]
 221:../functions.h **** }
 2772              	 .loc 5 221 0
 2773 01ce 1437     	 adds r7,r7,#20
 2774              	.LCFI131:
 2775              	 .cfi_def_cfa_offset 4
 2776 01d0 BD46     	 mov sp,r7
 2777              	.LCFI132:
 2778              	 .cfi_def_cfa_register 13
 2779              	 
 2780 01d2 5DF8047B 	 ldr r7,[sp],#4
 2781              	.LCFI133:
 2782              	 .cfi_restore 7
 2783              	 .cfi_def_cfa_offset 0
 2784 01d6 7047     	 bx lr
 2785              	 .cfi_endproc
 2786              	.LFE397:
 2788              	 .section .text.abs_sat,"ax",%progbits
 2789              	 .align 2
 2790              	 .global abs_sat
 2791              	 .thumb
 2792              	 .thumb_func
 2794              	abs_sat:
 2795              	.LFB398:
 222:../functions.h **** 
 223:../functions.h **** uint8_t abs_sat(float *V, float LIM){
 2796              	 .loc 5 223 0
 2797              	 .cfi_startproc
 2798              	 
 2799              	 
 2800 0000 80B5     	 push {r7,lr}
 2801              	.LCFI134:
 2802              	 .cfi_def_cfa_offset 8
 2803              	 .cfi_offset 7,-8
 2804              	 .cfi_offset 14,-4
 2805 0002 84B0     	 sub sp,sp,#16
 2806              	.LCFI135:
 2807              	 .cfi_def_cfa_offset 24
 2808 0004 00AF     	 add r7,sp,#0
 2809              	.LCFI136:
 2810              	 .cfi_def_cfa_register 7
 2811 0006 7860     	 str r0,[r7,#4]
 2812 0008 3960     	 str r1,[r7]
 224:../functions.h **** 	if(*V**V+*(V+1)**(V+1)>LIM*LIM){
 2813              	 .loc 5 224 0
 2814 000a 7B68     	 ldr r3,[r7,#4]
 2815 000c 93ED007A 	 flds s14,[r3]
 2816 0010 7B68     	 ldr r3,[r7,#4]
 2817 0012 D3ED007A 	 flds s15,[r3]
 2818 0016 27EE277A 	 fmuls s14,s14,s15
 2819 001a 7B68     	 ldr r3,[r7,#4]
 2820 001c 0433     	 adds r3,r3,#4
 2821 001e D3ED006A 	 flds s13,[r3]
 2822 0022 7B68     	 ldr r3,[r7,#4]
 2823 0024 0433     	 adds r3,r3,#4
 2824 0026 D3ED007A 	 flds s15,[r3]
 2825 002a 66EEA77A 	 fmuls s15,s13,s15
 2826 002e 37EE277A 	 fadds s14,s14,s15
 2827 0032 D7ED006A 	 flds s13,[r7]
 2828 0036 D7ED007A 	 flds s15,[r7]
 2829 003a 66EEA77A 	 fmuls s15,s13,s15
 2830 003e B4EEE77A 	 fcmpes s14,s15
 2831 0042 F1EE10FA 	 fmstat
 2832 0046 38DD     	 ble .L120
 2833              	.LBB6:
 225:../functions.h **** 		float V_abs=sqrtf(*V**V+*(V+1)**(V+1));
 2834              	 .loc 5 225 0
 2835 0048 7B68     	 ldr r3,[r7,#4]
 2836 004a 93ED007A 	 flds s14,[r3]
 2837 004e 7B68     	 ldr r3,[r7,#4]
 2838 0050 D3ED007A 	 flds s15,[r3]
 2839 0054 27EE277A 	 fmuls s14,s14,s15
 2840 0058 7B68     	 ldr r3,[r7,#4]
 2841 005a 0433     	 adds r3,r3,#4
 2842 005c D3ED006A 	 flds s13,[r3]
 2843 0060 7B68     	 ldr r3,[r7,#4]
 2844 0062 0433     	 adds r3,r3,#4
 2845 0064 D3ED007A 	 flds s15,[r3]
 2846 0068 66EEA77A 	 fmuls s15,s13,s15
 2847 006c 77EE277A 	 fadds s15,s14,s15
 2848 0070 17EE900A 	 fmrs r0,s15
 2849 0074 FFF7FEFF 	 bl sqrtf
 2850 0078 F860     	 str r0,[r7,#12]
 226:../functions.h **** 		*V=*V*LIM/V_abs;
 2851              	 .loc 5 226 0
 2852 007a 7B68     	 ldr r3,[r7,#4]
 2853 007c 93ED007A 	 flds s14,[r3]
 2854 0080 D7ED007A 	 flds s15,[r7]
 2855 0084 27EE277A 	 fmuls s14,s14,s15
 2856 0088 D7ED037A 	 flds s15,[r7,#12]
 2857 008c C7EE277A 	 fdivs s15,s14,s15
 2858 0090 7B68     	 ldr r3,[r7,#4]
 2859 0092 C3ED007A 	 fsts s15,[r3]
 227:../functions.h **** 		*(V+1)=*(V+1)*LIM/V_abs;
 2860              	 .loc 5 227 0
 2861 0096 7B68     	 ldr r3,[r7,#4]
 2862 0098 0433     	 adds r3,r3,#4
 2863 009a 7A68     	 ldr r2,[r7,#4]
 2864 009c 0432     	 adds r2,r2,#4
 2865 009e 92ED007A 	 flds s14,[r2]
 2866 00a2 D7ED007A 	 flds s15,[r7]
 2867 00a6 27EE277A 	 fmuls s14,s14,s15
 2868 00aa D7ED037A 	 flds s15,[r7,#12]
 2869 00ae C7EE277A 	 fdivs s15,s14,s15
 2870 00b2 C3ED007A 	 fsts s15,[r3]
 228:../functions.h **** 		return 1u;
 2871              	 .loc 5 228 0
 2872 00b6 0123     	 movs r3,#1
 2873 00b8 00E0     	 b .L118
 2874              	.L120:
 2875              	.LBE6:
 229:../functions.h **** 	}
 230:../functions.h **** 	else
 231:../functions.h **** 		return 0u;
 2876              	 .loc 5 231 0
 2877 00ba 0023     	 movs r3,#0
 2878              	.L118:
 232:../functions.h **** }
 2879              	 .loc 5 232 0
 2880 00bc 1846     	 mov r0,r3
 2881 00be 1037     	 adds r7,r7,#16
 2882              	.LCFI137:
 2883              	 .cfi_def_cfa_offset 8
 2884 00c0 BD46     	 mov sp,r7
 2885              	.LCFI138:
 2886              	 .cfi_def_cfa_register 13
 2887              	 
 2888 00c2 80BD     	 pop {r7,pc}
 2889              	 .cfi_endproc
 2890              	.LFE398:
 2892              	 .section .text.sat2D,"ax",%progbits
 2893              	 .align 2
 2894              	 .global sat2D
 2895              	 .thumb
 2896              	 .thumb_func
 2898              	sat2D:
 2899              	.LFB399:
 233:../functions.h **** 
 234:../functions.h **** uint8_t sat2D(float* array, float lim){
 2900              	 .loc 5 234 0
 2901              	 .cfi_startproc
 2902              	 
 2903              	 
 2904 0000 80B5     	 push {r7,lr}
 2905              	.LCFI139:
 2906              	 .cfi_def_cfa_offset 8
 2907              	 .cfi_offset 7,-8
 2908              	 .cfi_offset 14,-4
 2909 0002 8CB0     	 sub sp,sp,#48
 2910              	.LCFI140:
 2911              	 .cfi_def_cfa_offset 56
 2912 0004 00AF     	 add r7,sp,#0
 2913              	.LCFI141:
 2914              	 .cfi_def_cfa_register 7
 2915 0006 7860     	 str r0,[r7,#4]
 2916 0008 3960     	 str r1,[r7]
 235:../functions.h **** 	float mag2[2]={array[0]*array[0], array[1]*array[1]};
 2917              	 .loc 5 235 0
 2918 000a 7B68     	 ldr r3,[r7,#4]
 2919 000c 93ED007A 	 flds s14,[r3]
 2920 0010 7B68     	 ldr r3,[r7,#4]
 2921 0012 D3ED007A 	 flds s15,[r3]
 2922 0016 67EE277A 	 fmuls s15,s14,s15
 2923 001a C7ED067A 	 fsts s15,[r7,#24]
 2924 001e 7B68     	 ldr r3,[r7,#4]
 2925 0020 0433     	 adds r3,r3,#4
 2926 0022 93ED007A 	 flds s14,[r3]
 2927 0026 7B68     	 ldr r3,[r7,#4]
 2928 0028 0433     	 adds r3,r3,#4
 2929 002a D3ED007A 	 flds s15,[r3]
 2930 002e 67EE277A 	 fmuls s15,s14,s15
 2931 0032 C7ED077A 	 fsts s15,[r7,#28]
 236:../functions.h **** 	float frac[2];
 237:../functions.h **** 	float sqrt_temp[2];
 238:../functions.h **** 	if ((mag2[0]+mag2[1])>(lim*lim)){
 2932              	 .loc 5 238 0
 2933 0036 97ED067A 	 flds s14,[r7,#24]
 2934 003a D7ED077A 	 flds s15,[r7,#28]
 2935 003e 37EE277A 	 fadds s14,s14,s15
 2936 0042 D7ED006A 	 flds s13,[r7]
 2937 0046 D7ED007A 	 flds s15,[r7]
 2938 004a 66EEA77A 	 fmuls s15,s13,s15
 2939 004e B4EEE77A 	 fcmpes s14,s15
 2940 0052 F1EE10FA 	 fmstat
 2941 0056 40F39A80 	 ble .L137
 239:../functions.h **** 		frac[0]=mag2[0]/(mag2[0]+mag2[1]);
 2942              	 .loc 5 239 0
 2943 005a 97ED067A 	 flds s14,[r7,#24]
 2944 005e D7ED066A 	 flds s13,[r7,#24]
 2945 0062 D7ED077A 	 flds s15,[r7,#28]
 2946 0066 76EEA77A 	 fadds s15,s13,s15
 2947 006a C7EE277A 	 fdivs s15,s14,s15
 2948 006e C7ED047A 	 fsts s15,[r7,#16]
 240:../functions.h **** 		frac[1]=mag2[1]/(mag2[0]+mag2[1]);
 2949              	 .loc 5 240 0
 2950 0072 97ED077A 	 flds s14,[r7,#28]
 2951 0076 D7ED066A 	 flds s13,[r7,#24]
 2952 007a D7ED077A 	 flds s15,[r7,#28]
 2953 007e 76EEA77A 	 fadds s15,s13,s15
 2954 0082 C7EE277A 	 fdivs s15,s14,s15
 2955 0086 C7ED057A 	 fsts s15,[r7,#20]
 241:../functions.h **** 		arm_sqrt_f32((lim*lim*frac[0]), sqrt_temp);
 2956              	 .loc 5 241 0
 2957 008a 97ED007A 	 flds s14,[r7]
 2958 008e D7ED007A 	 flds s15,[r7]
 2959 0092 27EE277A 	 fmuls s14,s14,s15
 2960 0096 D7ED047A 	 flds s15,[r7,#16]
 2961 009a 67EE277A 	 fmuls s15,s14,s15
 2962 009e C7ED0B7A 	 fsts s15,[r7,#44]
 2963 00a2 07F10803 	 add r3,r7,#8
 2964 00a6 BB62     	 str r3,[r7,#40]
 2965              	.LBB7:
 2966              	.LBB8:
 2967              	 .file 6 "C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP/arm_math.h"
   1:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /* ----------------------------------------------------------------------
   2:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * Project:      CMSIS DSP Library
   3:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * Title:        CMSIS_DSP/cmsis_dsp.h
   4:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * Description:  Public header file for CMSIS DSP Library
   5:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  *
   6:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * $Date:        27. January 2017
   7:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * $Revision:    V.1.5.1
   8:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  *
   9:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * Target Processor: Cortex-M cores
  10:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * -------------------------------------------------------------------- */
  11:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /*
  12:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  *
  14:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * SPDX-License-Identifier: Apache-2.0
  15:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  *
  16:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * not use this file except in compliance with the License.
  18:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * You may obtain a copy of the License at
  19:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  *
  20:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * www.apache.org/licenses/LICENSE-2.0
  21:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  *
  22:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * Unless required by applicable law or agreed to in writing, software
  23:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * See the License for the specific language governing permissions and
  26:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * limitations under the License.
  27:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  */
  28:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
  29:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /**
  30:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    \mainpage CMSIS DSP Software Library
  31:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
  32:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Introduction
  33:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * ------------
  34:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
  35:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * This user manual describes the CMSIS DSP software library,
  36:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * a suite of common signal processing functions for use on Cortex-M processor based devices.
  37:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
  38:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The library is divided into a number of functions each covering a specific category:
  39:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - Basic math functions
  40:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - Fast math functions
  41:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - Complex math functions
  42:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - Filters
  43:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - Matrix functions
  44:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - Transforms
  45:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - Motor control functions
  46:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - Statistical functions
  47:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - Support functions
  48:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - Interpolation functions
  49:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
  50:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The library has separate functions for operating on 8-bit integers, 16-bit integers,
  51:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * 32-bit integer and 32-bit floating-point values.
  52:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
  53:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Using the Library
  54:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * ------------
  55:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
  56:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The library installer contains prebuilt versions of the libraries in the <code>Lib</code> fold
  57:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - arm_cortexM7lfdp_math.lib (Cortex-M7, Little endian, Double Precision Floating Point Unit)
  58:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - arm_cortexM7bfdp_math.lib (Cortex-M7, Big endian, Double Precision Floating Point Unit)
  59:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - arm_cortexM7lfsp_math.lib (Cortex-M7, Little endian, Single Precision Floating Point Unit)
  60:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - arm_cortexM7bfsp_math.lib (Cortex-M7, Big endian and Single Precision Floating Point Unit on
  61:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - arm_cortexM7l_math.lib (Cortex-M7, Little endian)
  62:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - arm_cortexM7b_math.lib (Cortex-M7, Big endian)
  63:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - arm_cortexM4lf_math.lib (Cortex-M4, Little endian, Floating Point Unit)
  64:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - arm_cortexM4bf_math.lib (Cortex-M4, Big endian, Floating Point Unit)
  65:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - arm_cortexM4l_math.lib (Cortex-M4, Little endian)
  66:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - arm_cortexM4b_math.lib (Cortex-M4, Big endian)
  67:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - arm_cortexM3l_math.lib (Cortex-M3, Little endian)
  68:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - arm_cortexM3b_math.lib (Cortex-M3, Big endian)
  69:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - arm_cortexM0l_math.lib (Cortex-M0 / Cortex-M0+, Little endian)
  70:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - arm_cortexM0b_math.lib (Cortex-M0 / Cortex-M0+, Big endian)
  71:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - arm_ARMv8MBLl_math.lib (ARMv8M Baseline, Little endian)
  72:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - arm_ARMv8MMLl_math.lib (ARMv8M Mainline, Little endian)
  73:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - arm_ARMv8MMLlfsp_math.lib (ARMv8M Mainline, Little endian, Single Precision Floating Point U
  74:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - arm_ARMv8MMLld_math.lib (ARMv8M Mainline, Little endian, DSP instructions)
  75:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - arm_ARMv8MMLldfsp_math.lib (ARMv8M Mainline, Little endian, DSP instructions, Single Precisi
  76:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
  77:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The library functions are declared in the public file <code>CMSIS_DSP/cmsis_dsp.h</code> which
  78:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Simply include this file and link the appropriate library in the application and begin calling
  79:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * public header file <code> CMSIS_DSP/cmsis_dsp.h</code> for Cortex-M cores with little endian a
  80:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Define the appropriate pre processor MACRO ARM_MATH_CM7 or ARM_MATH_CM4 or  ARM_MATH_CM3 or
  81:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * ARM_MATH_CM0 or ARM_MATH_CM0PLUS depending on the target processor in the application.
  82:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * For ARMv8M cores define pre processor MACRO ARM_MATH_ARMV8MBL or ARM_MATH_ARMV8MML.
  83:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Set Pre processor MACRO __DSP_PRESENT if ARMv8M Mainline core supports DSP instructions.
  84:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * 
  85:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
  86:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Examples
  87:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * --------
  88:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
  89:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The library ships with a number of examples which demonstrate how to use the library functions
  90:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
  91:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Toolchain Support
  92:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * ------------
  93:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
  94:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The library has been developed and tested with MDK-ARM version 5.14.0.0
  95:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The library is being tested in GCC and IAR toolchains and updates on this activity will be mad
  96:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
  97:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Building the Library
  98:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * ------------
  99:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 100:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The library installer contains a project file to re build libraries on MDK-ARM Tool chain in t
 101:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - arm_cortexM_math.uvprojx
 102:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 103:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 104:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The libraries can be built by opening the arm_cortexM_math.uvprojx project in MDK-ARM, selecti
 105:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 106:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Pre-processor Macros
 107:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * ------------
 108:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 109:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Each library project have differant pre-processor macros.
 110:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 111:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - UNALIGNED_SUPPORT_DISABLE:
 112:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 113:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Define macro UNALIGNED_SUPPORT_DISABLE, If the silicon does not support unaligned memory acces
 114:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 115:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - ARM_MATH_BIG_ENDIAN:
 116:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 117:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Define macro ARM_MATH_BIG_ENDIAN to build the library for big endian targets. By default libra
 118:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 119:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - ARM_MATH_MATRIX_CHECK:
 120:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 121:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Define macro ARM_MATH_MATRIX_CHECK for checking on the input and output sizes of matrices
 122:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 123:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - ARM_MATH_ROUNDING:
 124:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 125:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Define macro ARM_MATH_ROUNDING for rounding on support functions
 126:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 127:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - ARM_MATH_CMx:
 128:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 129:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Define macro ARM_MATH_CM4 for building the library on Cortex-M4 target, ARM_MATH_CM3 for build
 130:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * and ARM_MATH_CM0 for building library on Cortex-M0 target, ARM_MATH_CM0PLUS for building libra
 131:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * ARM_MATH_CM7 for building the library on cortex-M7.
 132:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 133:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - ARM_MATH_ARMV8MxL:
 134:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 135:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Define macro ARM_MATH_ARMV8MBL for building the library on ARMv8M Baseline target, ARM_MATH_AR
 136:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * on ARMv8M Mainline target.
 137:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 138:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - __FPU_PRESENT:
 139:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 140:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Initialize macro __FPU_PRESENT = 1 when building on FPU supported Targets. Enable this macro f
 141:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 142:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - __DSP_PRESENT:
 143:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 144:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Initialize macro __DSP_PRESENT = 1 when ARMv8M Mainline core supports DSP instructions.
 145:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 146:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * <hr>
 147:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * CMSIS-DSP in ARM::CMSIS Pack
 148:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * -----------------------------
 149:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 150:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The following files relevant to CMSIS-DSP are present in the <b>ARM::CMSIS</b> Pack directorie
 151:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * |File/Folder                   |Content                                                       
 152:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * |------------------------------|--------------------------------------------------------------
 153:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * |\b CMSIS\\Documentation\\DSP  | This documentation                                           
 154:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * |\b CMSIS\\DSP_Lib             | Software license agreement (license.txt)                     
 155:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Examples   | Example projects demonstrating the usage of the library funct
 156:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Source     | Source files for rebuilding the library                      
 157:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 158:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * <hr>
 159:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Revision History of CMSIS-DSP
 160:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * ------------
 161:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Please refer to \ref ChangeLog_pg.
 162:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 163:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Copyright Notice
 164:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * ------------
 165:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 166:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Copyright (C) 2010-2015 ARM Limited. All rights reserved.
 167:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 168:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 169:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 170:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /**
 171:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * @defgroup groupMath Basic Math Functions
 172:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  */
 173:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 174:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /**
 175:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * @defgroup groupFastMath Fast Math Functions
 176:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * This set of functions provides a fast approximation to sine, cosine, and square root.
 177:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * As compared to most of the other functions in the CMSIS math library, the fast math functions
 178:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * operate on individual values and not arrays.
 179:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * There are separate functions for Q15, Q31, and floating-point data.
 180:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  *
 181:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  */
 182:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 183:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /**
 184:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * @defgroup groupCmplxMath Complex Math Functions
 185:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * This set of functions operates on complex data vectors.
 186:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * The data in the complex arrays is stored in an interleaved fashion
 187:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * (real, imag, real, imag, ...).
 188:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * In the API functions, the number of samples in a complex array refers
 189:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * to the number of complex values; the array contains twice this number of
 190:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * real values.
 191:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  */
 192:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 193:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /**
 194:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * @defgroup groupFilters Filtering Functions
 195:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  */
 196:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 197:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /**
 198:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * @defgroup groupMatrix Matrix Functions
 199:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  *
 200:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * This set of functions provides basic matrix math operations.
 201:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * The functions operate on matrix data structures.  For example,
 202:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * the type
 203:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * definition for the floating-point matrix structure is shown
 204:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * below:
 205:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * <pre>
 206:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  *     typedef struct
 207:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  *     {
 208:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  *       uint16_t numRows;     // number of rows of the matrix.
 209:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  *       uint16_t numCols;     // number of columns of the matrix.
 210:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  *       float32_t *pData;     // points to the data of the matrix.
 211:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  *     } arm_matrix_instance_f32;
 212:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * </pre>
 213:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * There are similar definitions for Q15 and Q31 data types.
 214:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  *
 215:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * The structure specifies the size of the matrix and then points to
 216:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * an array of data.  The array is of size <code>numRows X numCols</code>
 217:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * and the values are arranged in row order.  That is, the
 218:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * matrix element (i, j) is stored at:
 219:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * <pre>
 220:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  *     pData[i*numCols + j]
 221:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * </pre>
 222:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  *
 223:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * \par Init Functions
 224:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * There is an associated initialization function for each type of matrix
 225:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * data structure.
 226:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * The initialization function sets the values of the internal structure fields.
 227:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * Refer to the function <code>arm_mat_init_f32()</code>, <code>arm_mat_init_q31()</code>
 228:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * and <code>arm_mat_init_q15()</code> for floating-point, Q31 and Q15 types,  respectively.
 229:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  *
 230:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * \par
 231:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * Use of the initialization function is optional. However, if initialization function is used
 232:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * then the instance structure cannot be placed into a const data section.
 233:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * To place the instance structure in a const data
 234:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * section, manually initialize the data structure.  For example:
 235:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * <pre>
 236:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * <code>arm_matrix_instance_f32 S = {nRows, nColumns, pData};</code>
 237:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * <code>arm_matrix_instance_q31 S = {nRows, nColumns, pData};</code>
 238:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * <code>arm_matrix_instance_q15 S = {nRows, nColumns, pData};</code>
 239:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * </pre>
 240:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * where <code>nRows</code> specifies the number of rows, <code>nColumns</code>
 241:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * specifies the number of columns, and <code>pData</code> points to the
 242:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * data array.
 243:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  *
 244:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * \par Size Checking
 245:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * By default all of the matrix functions perform size checking on the input and
 246:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * output matrices.  For example, the matrix addition function verifies that the
 247:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * two input matrices and the output matrix all have the same number of rows and
 248:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * columns.  If the size check fails the functions return:
 249:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * <pre>
 250:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  *     ARM_MATH_SIZE_MISMATCH
 251:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * </pre>
 252:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * Otherwise the functions return
 253:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * <pre>
 254:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  *     ARM_MATH_SUCCESS
 255:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * </pre>
 256:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * There is some overhead associated with this matrix size checking.
 257:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * The matrix size checking is enabled via the \#define
 258:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * <pre>
 259:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  *     ARM_MATH_MATRIX_CHECK
 260:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * </pre>
 261:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * within the library project settings.  By default this macro is defined
 262:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * and size checking is enabled.  By changing the project settings and
 263:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * undefining this macro size checking is eliminated and the functions
 264:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * run a bit faster.  With size checking disabled the functions always
 265:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * return <code>ARM_MATH_SUCCESS</code>.
 266:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  */
 267:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 268:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /**
 269:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * @defgroup groupTransforms Transform Functions
 270:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  */
 271:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 272:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /**
 273:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * @defgroup groupController Controller Functions
 274:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  */
 275:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 276:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /**
 277:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * @defgroup groupStats Statistics Functions
 278:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  */
 279:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /**
 280:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * @defgroup groupSupport Support Functions
 281:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  */
 282:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 283:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /**
 284:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * @defgroup groupInterpolation Interpolation Functions
 285:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * These functions perform 1- and 2-dimensional interpolation of data.
 286:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * Linear interpolation is used for 1-dimensional data and
 287:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * bilinear interpolation is used for 2-dimensional data.
 288:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  */
 289:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 290:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /**
 291:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * @defgroup groupExamples Examples
 292:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  */
 293:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #ifndef _ARM_MATH_H
 294:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #define _ARM_MATH_H
 295:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 296:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /* ignore some GCC warnings */
 297:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #if defined ( __GNUC__ )
 298:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #pragma GCC diagnostic push
 299:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
 300:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #pragma GCC diagnostic ignored "-Wconversion"
 301:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
 302:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #endif
 303:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 304:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #define __CMSIS_GENERIC         /* disable NVIC and Systick functions */
 305:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 306:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #if defined(ARM_MATH_CM7)
 307:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #include "core_cm7.h"
 308:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define ARM_MATH_DSP
 309:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #elif defined (ARM_MATH_CM4)
 310:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #include "core_cm4.h"
 311:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define ARM_MATH_DSP
 312:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #elif defined (ARM_MATH_CM3)
 313:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #include "core_cm3.h"
 314:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #elif defined (ARM_MATH_CM0)
 315:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #include "core_cm0.h"
 316:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 317:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #elif defined (ARM_MATH_CM0PLUS)
 318:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #include "core_cm0plus.h"
 319:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 320:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #elif defined (ARM_MATH_ARMV8MBL)
 321:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #include "core_armv8mbl.h"
 322:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 323:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #elif defined (ARM_MATH_ARMV8MML)
 324:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #include "core_armv8mml.h"
 325:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #if (defined (__DSP_PRESENT) && (__DSP_PRESENT == 1))
 326:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     #define ARM_MATH_DSP
 327:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #endif
 328:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #else
 329:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #error "Define according the used Cortex core ARM_MATH_CM7, ARM_MATH_CM4, ARM_MATH_CM3, ARM_MATH_
 330:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #endif
 331:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 332:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #undef  __CMSIS_GENERIC         /* enable NVIC and Systick functions */
 333:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #include "string.h"
 334:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #include "math.h"
 335:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #ifdef   __cplusplus
 336:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** extern "C"
 337:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** {
 338:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #endif
 339:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 340:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 341:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
 342:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Macros required for reciprocal calculation in Normalized LMS
 343:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 344:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 345:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #define DELTA_Q31          (0x100)
 346:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #define DELTA_Q15          0x5
 347:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #define INDEX_MASK         0x0000003F
 348:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #ifndef PI
 349:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define PI               3.14159265358979f
 350:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #endif
 351:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 352:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
 353:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Macros required for SINE and COSINE Fast math approximations
 354:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 355:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 356:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #define FAST_MATH_TABLE_SIZE  512
 357:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #define FAST_MATH_Q31_SHIFT   (32 - 10)
 358:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #define FAST_MATH_Q15_SHIFT   (16 - 10)
 359:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #define CONTROLLER_Q31_SHIFT  (32 - 9)
 360:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #define TABLE_SPACING_Q31     0x400000
 361:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #define TABLE_SPACING_Q15     0x80
 362:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 363:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
 364:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Macros required for SINE and COSINE Controller functions
 365:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 366:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /* 1.31(q31) Fixed value of 2/360 */
 367:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /* -1 to +1 is divided into 360 values so total spacing is (2/360) */
 368:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #define INPUT_SPACING         0xB60B61
 369:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 370:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
 371:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Macro for Unaligned Support
 372:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 373:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #ifndef UNALIGNED_SUPPORT_DISABLE
 374:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     #define ALIGN4
 375:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #else
 376:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #if defined  (__GNUC__)
 377:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     #define ALIGN4 __attribute__((aligned(4)))
 378:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #else
 379:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     #define ALIGN4 __align(4)
 380:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #endif
 381:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #endif   /* #ifndef UNALIGNED_SUPPORT_DISABLE */
 382:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 383:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
 384:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Error status returned by some functions in the library.
 385:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 386:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 387:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef enum
 388:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
 389:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     ARM_MATH_SUCCESS = 0,                /**< No error */
 390:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     ARM_MATH_ARGUMENT_ERROR = -1,        /**< One or more arguments are incorrect */
 391:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     ARM_MATH_LENGTH_ERROR = -2,          /**< Length of data buffer is incorrect */
 392:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     ARM_MATH_SIZE_MISMATCH = -3,         /**< Size of matrices is not compatible with the operation
 393:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     ARM_MATH_NANINF = -4,                /**< Not-a-number (NaN) or infinity is generated */
 394:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     ARM_MATH_SINGULAR = -5,              /**< Generated by matrix inversion if the input matrix is 
 395:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     ARM_MATH_TEST_FAILURE = -6           /**< Test Failed  */
 396:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_status;
 397:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 398:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
 399:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief 8-bit fractional data type in 1.7 format.
 400:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 401:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef int8_t q7_t;
 402:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 403:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
 404:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief 16-bit fractional data type in 1.15 format.
 405:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 406:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef int16_t q15_t;
 407:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 408:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
 409:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief 32-bit fractional data type in 1.31 format.
 410:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 411:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef int32_t q31_t;
 412:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 413:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
 414:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief 64-bit fractional data type in 1.63 format.
 415:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 416:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef int64_t q63_t;
 417:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 418:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
 419:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief 32-bit floating-point type definition.
 420:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 421:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef float float32_t;
 422:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 423:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
 424:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief 64-bit floating-point type definition.
 425:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 426:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef double float64_t;
 427:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 428:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
 429:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief definition to read/write two 16 bit values.
 430:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 431:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #if   defined ( __CC_ARM )
 432:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 433:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 434:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 435:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 436:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #elif defined ( __ARMCC_VERSION ) && ( __ARMCC_VERSION >= 6010050 )
 437:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define __SIMD32_TYPE int32_t
 438:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 439:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 440:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 441:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #elif defined ( __GNUC__ )
 442:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define __SIMD32_TYPE int32_t
 443:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 444:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 445:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 446:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #elif defined ( __ICCARM__ )
 447:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 448:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define CMSIS_UNUSED
 449:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define CMSIS_INLINE
 450:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 451:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #elif defined ( __TI_ARM__ )
 452:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define __SIMD32_TYPE int32_t
 453:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 454:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define CMSIS_INLINE
 455:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 456:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #elif defined ( __CSMC__ )
 457:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define __SIMD32_TYPE int32_t
 458:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define CMSIS_UNUSED
 459:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define CMSIS_INLINE
 460:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 461:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #elif defined ( __TASKING__ )
 462:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define __SIMD32_TYPE __unaligned int32_t
 463:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define CMSIS_UNUSED
 464:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define CMSIS_INLINE
 465:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 466:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #else
 467:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #error Unknown compiler
 468:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #endif
 469:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 470:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #define __SIMD32(addr)        (*(__SIMD32_TYPE **) & (addr))
 471:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #define __SIMD32_CONST(addr)  ((__SIMD32_TYPE *)(addr))
 472:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #define _SIMD32_OFFSET(addr)  (*(__SIMD32_TYPE *)  (addr))
 473:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #define __SIMD64(addr)        (*(int64_t **) & (addr))
 474:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 475:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /* #if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 476:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #if !defined (ARM_MATH_DSP)
 477:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
 478:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief definition to pack two 16 bit values.
 479:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 480:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #define __PKHBT(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0x0000FFFF) | \
 481:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****                                     (((int32_t)(ARG2) << ARG3) & (int32_t)0xFFFF0000)  )
 482:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #define __PKHTB(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0xFFFF0000) | \
 483:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****                                     (((int32_t)(ARG2) >> ARG3) & (int32_t)0x0000FFFF)  )
 484:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 485:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /* #endif // defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 486:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #endif /* !defined (ARM_MATH_DSP) */
 487:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 488:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    /**
 489:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief definition to pack four 8 bit values.
 490:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 491:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #ifndef ARM_MATH_BIG_ENDIAN
 492:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 493:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v0) <<  0) & (int32_t)0x000000FF) | \
 494:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****                                 (((int32_t)(v1) <<  8) & (int32_t)0x0000FF00) | \
 495:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****                                 (((int32_t)(v2) << 16) & (int32_t)0x00FF0000) | \
 496:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****                                 (((int32_t)(v3) << 24) & (int32_t)0xFF000000)  )
 497:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #else
 498:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 499:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v3) <<  0) & (int32_t)0x000000FF) | \
 500:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****                                 (((int32_t)(v2) <<  8) & (int32_t)0x0000FF00) | \
 501:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****                                 (((int32_t)(v1) << 16) & (int32_t)0x00FF0000) | \
 502:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****                                 (((int32_t)(v0) << 24) & (int32_t)0xFF000000)  )
 503:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 504:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #endif
 505:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 506:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 507:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
 508:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Clips Q63 to Q31 values.
 509:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 510:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t clip_q63_to_q31(
 511:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q63_t x)
 512:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
 513:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 514:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 515:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
 516:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 517:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
 518:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Clips Q63 to Q15 values.
 519:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 520:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q63_to_q15(
 521:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q63_t x)
 522:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
 523:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 524:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 63)))) : (q15_t) (x >> 15);
 525:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
 526:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 527:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
 528:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Clips Q31 to Q7 values.
 529:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 530:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q7_t clip_q31_to_q7(
 531:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t x)
 532:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
 533:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     return ((q31_t) (x >> 24) != ((q31_t) x >> 23)) ?
 534:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       ((0x7F ^ ((q7_t) (x >> 31)))) : (q7_t) x;
 535:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
 536:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 537:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
 538:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Clips Q31 to Q15 values.
 539:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 540:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q31_to_q15(
 541:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t x)
 542:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
 543:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     return ((q31_t) (x >> 16) != ((q31_t) x >> 15)) ?
 544:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 31)))) : (q15_t) x;
 545:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
 546:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 547:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
 548:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Multiplies 32 X 64 and returns 32 bit result in 2.30 format.
 549:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 550:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 551:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q63_t mult32x64(
 552:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q63_t x,
 553:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t y)
 554:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
 555:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     return ((((q63_t) (x & 0x00000000FFFFFFFF) * y) >> 32) +
 556:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****             (((q63_t) (x >> 32) * y)));
 557:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
 558:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 559:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /*
 560:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #if defined (ARM_MATH_CM0_FAMILY) && defined ( __CC_ARM   )
 561:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define __CLZ __clz
 562:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #endif
 563:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  */
 564:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /* note: function can be removed when all toolchain support __CLZ for Cortex-M0 */
 565:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #if defined (ARM_MATH_CM0_FAMILY) && ((defined (__ICCARM__))  )
 566:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 567:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t data);
 568:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 569:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 570:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t data)
 571:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
 572:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint32_t count = 0;
 573:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint32_t mask = 0x80000000;
 574:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 575:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     while ((data & mask) == 0)
 576:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     {
 577:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       count += 1u;
 578:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       mask = mask >> 1u;
 579:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     }
 580:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 581:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     return (count);
 582:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
 583:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #endif
 584:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 585:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
 586:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q31 Data type.
 587:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 588:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 589:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q31(
 590:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t in,
 591:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * dst,
 592:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pRecipTable)
 593:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
 594:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t out;
 595:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint32_t tempVal;
 596:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint32_t index, i;
 597:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint32_t signBits;
 598:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 599:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     if (in > 0)
 600:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     {
 601:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       signBits = ((uint32_t) (__CLZ( in) - 1));
 602:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     }
 603:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     else
 604:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     {
 605:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       signBits = ((uint32_t) (__CLZ(-in) - 1));
 606:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     }
 607:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 608:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* Convert input sample to 1.31 format */
 609:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     in = (in << signBits);
 610:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 611:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* calculation of index for initial approximated Val */
 612:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     index = (uint32_t)(in >> 24);
 613:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     index = (index & INDEX_MASK);
 614:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 615:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* 1.31 with exp 1 */
 616:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     out = pRecipTable[index];
 617:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 618:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* calculation of reciprocal value */
 619:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* running approximation for two iterations */
 620:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     for (i = 0u; i < 2u; i++)
 621:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     {
 622:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       tempVal = (uint32_t) (((q63_t) in * out) >> 31);
 623:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       tempVal = 0x7FFFFFFFu - tempVal;
 624:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       /*      1.31 with exp 1 */
 625:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       /* out = (q31_t) (((q63_t) out * tempVal) >> 30); */
 626:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       out = clip_q63_to_q31(((q63_t) out * tempVal) >> 30);
 627:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     }
 628:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 629:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* write output */
 630:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     *dst = out;
 631:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 632:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* return num of signbits of out = 1/in value */
 633:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     return (signBits + 1u);
 634:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
 635:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 636:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 637:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
 638:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q15 Data type.
 639:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 640:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q15(
 641:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t in,
 642:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * dst,
 643:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pRecipTable)
 644:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
 645:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q15_t out = 0;
 646:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint32_t tempVal = 0;
 647:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint32_t index = 0, i = 0;
 648:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint32_t signBits = 0;
 649:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 650:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     if (in > 0)
 651:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     {
 652:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       signBits = ((uint32_t)(__CLZ( in) - 17));
 653:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     }
 654:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     else
 655:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     {
 656:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       signBits = ((uint32_t)(__CLZ(-in) - 17));
 657:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     }
 658:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 659:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* Convert input sample to 1.15 format */
 660:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     in = (in << signBits);
 661:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 662:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* calculation of index for initial approximated Val */
 663:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     index = (uint32_t)(in >>  8);
 664:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     index = (index & INDEX_MASK);
 665:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 666:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /*      1.15 with exp 1  */
 667:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     out = pRecipTable[index];
 668:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 669:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* calculation of reciprocal value */
 670:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* running approximation for two iterations */
 671:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     for (i = 0u; i < 2u; i++)
 672:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     {
 673:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       tempVal = (uint32_t) (((q31_t) in * out) >> 15);
 674:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       tempVal = 0x7FFFu - tempVal;
 675:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       /*      1.15 with exp 1 */
 676:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       out = (q15_t) (((q31_t) out * tempVal) >> 14);
 677:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       /* out = clip_q31_to_q15(((q31_t) out * tempVal) >> 14); */
 678:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     }
 679:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 680:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* write output */
 681:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     *dst = out;
 682:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 683:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* return num of signbits of out = 1/in value */
 684:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     return (signBits + 1);
 685:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
 686:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 687:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 688:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /*
 689:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief C custom defined intrinisic function for only M0 processors
 690:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 691:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #if defined(ARM_MATH_CM0_FAMILY)
 692:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t __SSAT(
 693:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t x,
 694:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t y)
 695:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
 696:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     int32_t posMax, negMin;
 697:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint32_t i;
 698:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 699:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     posMax = 1;
 700:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     for (i = 0; i < (y - 1); i++)
 701:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     {
 702:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       posMax = posMax * 2;
 703:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     }
 704:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 705:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     if (x > 0)
 706:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     {
 707:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       posMax = (posMax - 1);
 708:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 709:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       if (x > posMax)
 710:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       {
 711:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****         x = posMax;
 712:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       }
 713:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     }
 714:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     else
 715:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     {
 716:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       negMin = -posMax;
 717:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 718:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       if (x < negMin)
 719:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       {
 720:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****         x = negMin;
 721:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       }
 722:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     }
 723:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     return (x);
 724:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
 725:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #endif /* end of ARM_MATH_CM0_FAMILY */
 726:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 727:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 728:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /*
 729:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief C custom defined intrinsic function for M3 and M0 processors
 730:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 731:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /* #if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 732:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #if !defined (ARM_MATH_DSP)
 733:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 734:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /*
 735:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief C custom defined QADD8 for M3 and M0 processors
 736:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 737:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QADD8(
 738:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t x,
 739:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t y)
 740:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
 741:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t r, s, t, u;
 742:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 743:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     r = __SSAT(((((q31_t)x << 24) >> 24) + (((q31_t)y << 24) >> 24)), 8) & (int32_t)0x000000FF;
 744:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     s = __SSAT(((((q31_t)x << 16) >> 24) + (((q31_t)y << 16) >> 24)), 8) & (int32_t)0x000000FF;
 745:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     t = __SSAT(((((q31_t)x <<  8) >> 24) + (((q31_t)y <<  8) >> 24)), 8) & (int32_t)0x000000FF;
 746:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     u = __SSAT(((((q31_t)x      ) >> 24) + (((q31_t)y      ) >> 24)), 8) & (int32_t)0x000000FF;
 747:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 748:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     return ((uint32_t)((u << 24) | (t << 16) | (s <<  8) | (r      )));
 749:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
 750:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 751:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 752:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /*
 753:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief C custom defined QSUB8 for M3 and M0 processors
 754:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 755:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QSUB8(
 756:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t x,
 757:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t y)
 758:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
 759:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t r, s, t, u;
 760:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 761:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     r = __SSAT(((((q31_t)x << 24) >> 24) - (((q31_t)y << 24) >> 24)), 8) & (int32_t)0x000000FF;
 762:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     s = __SSAT(((((q31_t)x << 16) >> 24) - (((q31_t)y << 16) >> 24)), 8) & (int32_t)0x000000FF;
 763:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     t = __SSAT(((((q31_t)x <<  8) >> 24) - (((q31_t)y <<  8) >> 24)), 8) & (int32_t)0x000000FF;
 764:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     u = __SSAT(((((q31_t)x      ) >> 24) - (((q31_t)y      ) >> 24)), 8) & (int32_t)0x000000FF;
 765:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 766:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     return ((uint32_t)((u << 24) | (t << 16) | (s <<  8) | (r      )));
 767:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
 768:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 769:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 770:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /*
 771:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief C custom defined QADD16 for M3 and M0 processors
 772:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 773:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QADD16(
 774:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t x,
 775:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t y)
 776:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
 777:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /*  q31_t r,     s;  without initialisation 'arm_offset_q15 test' fails  but 'intrinsic' tests pass
 778:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t r = 0, s = 0;
 779:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 780:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     r = __SSAT(((((q31_t)x << 16) >> 16) + (((q31_t)y << 16) >> 16)), 16) & (int32_t)0x0000FFFF;
 781:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     s = __SSAT(((((q31_t)x      ) >> 16) + (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 782:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 783:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 784:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
 785:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 786:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 787:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /*
 788:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief C custom defined SHADD16 for M3 and M0 processors
 789:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 790:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SHADD16(
 791:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t x,
 792:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t y)
 793:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
 794:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t r, s;
 795:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 796:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     r = (((((q31_t)x << 16) >> 16) + (((q31_t)y << 16) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 797:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     s = (((((q31_t)x      ) >> 16) + (((q31_t)y      ) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 798:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 799:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 800:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
 801:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 802:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 803:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /*
 804:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief C custom defined QSUB16 for M3 and M0 processors
 805:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 806:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QSUB16(
 807:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t x,
 808:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t y)
 809:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
 810:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t r, s;
 811:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 812:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     r = __SSAT(((((q31_t)x << 16) >> 16) - (((q31_t)y << 16) >> 16)), 16) & (int32_t)0x0000FFFF;
 813:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     s = __SSAT(((((q31_t)x      ) >> 16) - (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 814:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 815:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 816:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
 817:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 818:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 819:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /*
 820:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief C custom defined SHSUB16 for M3 and M0 processors
 821:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 822:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SHSUB16(
 823:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t x,
 824:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t y)
 825:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
 826:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t r, s;
 827:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 828:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     r = (((((q31_t)x << 16) >> 16) - (((q31_t)y << 16) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 829:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     s = (((((q31_t)x      ) >> 16) - (((q31_t)y      ) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 830:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 831:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 832:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
 833:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 834:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 835:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /*
 836:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief C custom defined QASX for M3 and M0 processors
 837:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 838:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QASX(
 839:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t x,
 840:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t y)
 841:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
 842:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t r, s;
 843:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 844:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     r = __SSAT(((((q31_t)x << 16) >> 16) - (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 845:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     s = __SSAT(((((q31_t)x      ) >> 16) + (((q31_t)y << 16) >> 16)), 16) & (int32_t)0x0000FFFF;
 846:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 847:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 848:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
 849:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 850:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 851:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /*
 852:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief C custom defined SHASX for M3 and M0 processors
 853:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 854:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SHASX(
 855:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t x,
 856:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t y)
 857:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
 858:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t r, s;
 859:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 860:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     r = (((((q31_t)x << 16) >> 16) - (((q31_t)y      ) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 861:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     s = (((((q31_t)x      ) >> 16) + (((q31_t)y << 16) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 862:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 863:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 864:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
 865:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 866:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 867:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /*
 868:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief C custom defined QSAX for M3 and M0 processors
 869:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 870:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QSAX(
 871:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t x,
 872:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t y)
 873:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
 874:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t r, s;
 875:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 876:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     r = __SSAT(((((q31_t)x << 16) >> 16) + (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 877:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     s = __SSAT(((((q31_t)x      ) >> 16) - (((q31_t)y << 16) >> 16)), 16) & (int32_t)0x0000FFFF;
 878:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 879:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 880:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
 881:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 882:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 883:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /*
 884:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief C custom defined SHSAX for M3 and M0 processors
 885:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 886:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SHSAX(
 887:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t x,
 888:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t y)
 889:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
 890:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t r, s;
 891:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 892:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     r = (((((q31_t)x << 16) >> 16) + (((q31_t)y      ) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 893:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     s = (((((q31_t)x      ) >> 16) - (((q31_t)y << 16) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 894:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 895:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 896:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
 897:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 898:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 899:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /*
 900:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief C custom defined SMUSDX for M3 and M0 processors
 901:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 902:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SMUSDX(
 903:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t x,
 904:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t y)
 905:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
 906:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y      ) >> 16)) -
 907:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16))   ));
 908:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
 909:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 910:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /*
 911:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief C custom defined SMUADX for M3 and M0 processors
 912:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 913:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SMUADX(
 914:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t x,
 915:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t y)
 916:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
 917:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y      ) >> 16)) +
 918:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16))   ));
 919:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
 920:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 921:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 922:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /*
 923:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief C custom defined QADD for M3 and M0 processors
 924:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 925:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE int32_t __QADD(
 926:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   int32_t x,
 927:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   int32_t y)
 928:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
 929:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     return ((int32_t)(clip_q63_to_q31((q63_t)x + (q31_t)y)));
 930:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
 931:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 932:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 933:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /*
 934:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief C custom defined QSUB for M3 and M0 processors
 935:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 936:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE int32_t __QSUB(
 937:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   int32_t x,
 938:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   int32_t y)
 939:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
 940:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     return ((int32_t)(clip_q63_to_q31((q63_t)x - (q31_t)y)));
 941:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
 942:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 943:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 944:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /*
 945:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief C custom defined SMLAD for M3 and M0 processors
 946:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 947:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SMLAD(
 948:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t x,
 949:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t y,
 950:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t sum)
 951:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
 952:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y << 16) >> 16)) +
 953:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 954:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 955:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
 956:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 957:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 958:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /*
 959:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief C custom defined SMLADX for M3 and M0 processors
 960:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 961:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SMLADX(
 962:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t x,
 963:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t y,
 964:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t sum)
 965:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
 966:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y      ) >> 16)) +
 967:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 968:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 969:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
 970:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 971:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 972:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /*
 973:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief C custom defined SMLSDX for M3 and M0 processors
 974:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 975:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SMLSDX(
 976:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t x,
 977:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t y,
 978:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t sum)
 979:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
 980:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y      ) >> 16)) -
 981:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 982:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 983:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
 984:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 985:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 986:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /*
 987:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief C custom defined SMLALD for M3 and M0 processors
 988:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 989:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint64_t __SMLALD(
 990:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t x,
 991:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t y,
 992:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint64_t sum)
 993:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
 994:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /*  return (sum + ((q15_t) (x >> 16) * (q15_t) (y >> 16)) + ((q15_t) x * (q15_t) y)); */
 995:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     return ((uint64_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y << 16) >> 16)) +
 996:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 997:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****                        ( ((q63_t)sum    )                                  )   ));
 998:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
 999:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1000:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1001:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /*
1002:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief C custom defined SMLALDX for M3 and M0 processors
1003:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1004:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint64_t __SMLALDX(
1005:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t x,
1006:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t y,
1007:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint64_t sum)
1008:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
1009:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /*  return (sum + ((q15_t) (x >> 16) * (q15_t) y)) + ((q15_t) x * (q15_t) (y >> 16)); */
1010:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     return ((uint64_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y      ) >> 16)) +
1011:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
1012:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****                        ( ((q63_t)sum    )                                  )   ));
1013:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
1014:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1015:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1016:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /*
1017:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief C custom defined SMUAD for M3 and M0 processors
1018:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1019:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SMUAD(
1020:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t x,
1021:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t y)
1022:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
1023:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y << 16) >> 16)) +
1024:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16))   ));
1025:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
1026:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1027:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1028:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /*
1029:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief C custom defined SMUSD for M3 and M0 processors
1030:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1031:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SMUSD(
1032:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t x,
1033:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t y)
1034:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
1035:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y << 16) >> 16)) -
1036:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16))   ));
1037:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
1038:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1039:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1040:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /*
1041:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief C custom defined SXTB16 for M3 and M0 processors
1042:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1043:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SXTB16(
1044:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t x)
1045:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
1046:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     return ((uint32_t)(((((q31_t)x << 24) >> 24) & (q31_t)0x0000FFFF) |
1047:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****                        ((((q31_t)x <<  8) >>  8) & (q31_t)0xFFFF0000)  ));
1048:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
1049:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1050:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /*
1051:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief C custom defined SMMLA for M3 and M0 processors
1052:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1053:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE int32_t __SMMLA(
1054:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   int32_t x,
1055:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   int32_t y,
1056:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   int32_t sum)
1057:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
1058:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     return (sum + (int32_t) (((int64_t) x * y) >> 32));
1059:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
1060:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1061:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #if 0
1062:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /*
1063:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief C custom defined PKHBT for unavailable DSP extension
1064:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1065:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __PKHBT(
1066:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t x,
1067:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t y,
1068:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t leftshift)
1069:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
1070:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     return ( ((x             ) & 0x0000FFFFUL) |
1071:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****              ((y << leftshift) & 0xFFFF0000UL)  );
1072:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
1073:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1074:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /*
1075:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief C custom defined PKHTB for unavailable DSP extension
1076:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1077:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __PKHTB(
1078:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t x,
1079:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t y,
1080:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t rightshift)
1081:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
1082:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     return ( ((x              ) & 0xFFFF0000UL) |
1083:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****              ((y >> rightshift) & 0x0000FFFFUL)  );
1084:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
1085:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #endif
1086:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1087:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /* #endif // defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
1088:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #endif /* !defined (ARM_MATH_DSP) */
1089:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1090:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1091:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1092:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the Q7 FIR filter.
1093:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1094:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
1095:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
1096:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t numTaps;        /**< number of filter coefficients in the filter. */
1097:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q7_t *pState;            /**< points to the state variable array. The array is of length numTap
1098:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q7_t *pCoeffs;           /**< points to the coefficient array. The array is of length numTaps.*
1099:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_fir_instance_q7;
1100:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1101:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1102:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the Q15 FIR filter.
1103:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1104:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
1105:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
1106:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t numTaps;         /**< number of filter coefficients in the filter. */
1107:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q15_t *pState;            /**< points to the state variable array. The array is of length numTa
1108:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q15_t *pCoeffs;           /**< points to the coefficient array. The array is of length numTaps.
1109:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_fir_instance_q15;
1110:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1111:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1112:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the Q31 FIR filter.
1113:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1114:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
1115:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
1116:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t numTaps;         /**< number of filter coefficients in the filter. */
1117:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t *pState;            /**< points to the state variable array. The array is of length numTa
1118:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t *pCoeffs;           /**< points to the coefficient array. The array is of length numTaps.
1119:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_fir_instance_q31;
1120:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1121:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1122:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the floating-point FIR filter.
1123:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1124:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
1125:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
1126:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t numTaps;     /**< number of filter coefficients in the filter. */
1127:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t *pState;    /**< points to the state variable array. The array is of length numTaps+b
1128:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t *pCoeffs;   /**< points to the coefficient array. The array is of length numTaps. */
1129:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_fir_instance_f32;
1130:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1131:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1132:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1133:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Processing function for the Q7 FIR filter.
1134:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  S          points to an instance of the Q7 FIR filter structure.
1135:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
1136:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the block of output data.
1137:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples to process.
1138:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1139:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_fir_q7(
1140:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_fir_instance_q7 * S,
1141:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pSrc,
1142:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pDst,
1143:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
1144:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1145:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1146:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1147:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Initialization function for the Q7 FIR filter.
1148:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in,out] S          points to an instance of the Q7 FIR structure.
1149:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     numTaps    Number of filter coefficients in the filter.
1150:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pCoeffs    points to the filter coefficients.
1151:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pState     points to the state buffer.
1152:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     blockSize  number of samples that are processed.
1153:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1154:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_fir_init_q7(
1155:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_fir_instance_q7 * S,
1156:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t numTaps,
1157:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pCoeffs,
1158:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pState,
1159:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
1160:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1161:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1162:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1163:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Processing function for the Q15 FIR filter.
1164:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  S          points to an instance of the Q15 FIR structure.
1165:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
1166:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the block of output data.
1167:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples to process.
1168:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1169:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_fir_q15(
1170:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_fir_instance_q15 * S,
1171:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrc,
1172:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pDst,
1173:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
1174:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1175:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1176:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1177:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Processing function for the fast Q15 FIR filter for Cortex-M3 and Cortex-M4.
1178:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  S          points to an instance of the Q15 FIR filter structure.
1179:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
1180:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the block of output data.
1181:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples to process.
1182:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1183:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_fir_fast_q15(
1184:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_fir_instance_q15 * S,
1185:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrc,
1186:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pDst,
1187:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
1188:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1189:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1190:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1191:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Initialization function for the Q15 FIR filter.
1192:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in,out] S          points to an instance of the Q15 FIR filter structure.
1193:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     numTaps    Number of filter coefficients in the filter. Must be even and greate
1194:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pCoeffs    points to the filter coefficients.
1195:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pState     points to the state buffer.
1196:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     blockSize  number of samples that are processed at a time.
1197:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return The function returns ARM_MATH_SUCCESS if initialization was successful or ARM_MATH_ARG
1198:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * <code>numTaps</code> is not a supported value.
1199:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1200:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_fir_init_q15(
1201:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_fir_instance_q15 * S,
1202:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t numTaps,
1203:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pCoeffs,
1204:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pState,
1205:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
1206:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1207:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1208:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1209:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Processing function for the Q31 FIR filter.
1210:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  S          points to an instance of the Q31 FIR filter structure.
1211:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
1212:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the block of output data.
1213:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples to process.
1214:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1215:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_fir_q31(
1216:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_fir_instance_q31 * S,
1217:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pSrc,
1218:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pDst,
1219:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
1220:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1221:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1222:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1223:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Processing function for the fast Q31 FIR filter for Cortex-M3 and Cortex-M4.
1224:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  S          points to an instance of the Q31 FIR structure.
1225:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
1226:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the block of output data.
1227:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples to process.
1228:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1229:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_fir_fast_q31(
1230:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_fir_instance_q31 * S,
1231:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pSrc,
1232:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pDst,
1233:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
1234:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1235:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1236:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1237:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Initialization function for the Q31 FIR filter.
1238:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in,out] S          points to an instance of the Q31 FIR structure.
1239:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     numTaps    Number of filter coefficients in the filter.
1240:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pCoeffs    points to the filter coefficients.
1241:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pState     points to the state buffer.
1242:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     blockSize  number of samples that are processed at a time.
1243:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1244:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_fir_init_q31(
1245:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_fir_instance_q31 * S,
1246:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t numTaps,
1247:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pCoeffs,
1248:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pState,
1249:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
1250:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1251:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1252:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1253:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Processing function for the floating-point FIR filter.
1254:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  S          points to an instance of the floating-point FIR structure.
1255:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
1256:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the block of output data.
1257:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples to process.
1258:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1259:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_fir_f32(
1260:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_fir_instance_f32 * S,
1261:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pSrc,
1262:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pDst,
1263:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
1264:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1265:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1266:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1267:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Initialization function for the floating-point FIR filter.
1268:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in,out] S          points to an instance of the floating-point FIR filter structure.
1269:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     numTaps    Number of filter coefficients in the filter.
1270:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pCoeffs    points to the filter coefficients.
1271:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pState     points to the state buffer.
1272:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     blockSize  number of samples that are processed at a time.
1273:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1274:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_fir_init_f32(
1275:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_fir_instance_f32 * S,
1276:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t numTaps,
1277:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pCoeffs,
1278:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pState,
1279:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
1280:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1281:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1282:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1283:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the Q15 Biquad cascade filter.
1284:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1285:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
1286:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
1287:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     int8_t numStages;        /**< number of 2nd order stages in the filter.  Overall order is 2*num
1288:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q15_t *pState;           /**< Points to the array of state coefficients.  The array is of lengt
1289:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q15_t *pCoeffs;          /**< Points to the array of coefficients.  The array is of length 5*nu
1290:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     int8_t postShift;        /**< Additional shift, in bits, applied to each output sample. */
1291:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_biquad_casd_df1_inst_q15;
1292:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1293:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1294:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the Q31 Biquad cascade filter.
1295:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1296:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
1297:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
1298:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint32_t numStages;      /**< number of 2nd order stages in the filter.  Overall order is 2*num
1299:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t *pState;           /**< Points to the array of state coefficients.  The array is of lengt
1300:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t *pCoeffs;          /**< Points to the array of coefficients.  The array is of length 5*nu
1301:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint8_t postShift;       /**< Additional shift, in bits, applied to each output sample. */
1302:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_biquad_casd_df1_inst_q31;
1303:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1304:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1305:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the floating-point Biquad cascade filter.
1306:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1307:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
1308:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
1309:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint32_t numStages;      /**< number of 2nd order stages in the filter.  Overall order is 2*num
1310:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t *pState;       /**< Points to the array of state coefficients.  The array is of lengt
1311:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t *pCoeffs;      /**< Points to the array of coefficients.  The array is of length 5*nu
1312:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_biquad_casd_df1_inst_f32;
1313:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1314:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1315:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1316:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Processing function for the Q15 Biquad cascade filter.
1317:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  S          points to an instance of the Q15 Biquad cascade structure.
1318:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
1319:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the block of output data.
1320:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples to process.
1321:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1322:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_biquad_cascade_df1_q15(
1323:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_biquad_casd_df1_inst_q15 * S,
1324:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrc,
1325:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pDst,
1326:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
1327:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1328:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1329:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1330:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Initialization function for the Q15 Biquad cascade filter.
1331:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in,out] S          points to an instance of the Q15 Biquad cascade structure.
1332:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     numStages  number of 2nd order stages in the filter.
1333:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pCoeffs    points to the filter coefficients.
1334:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pState     points to the state buffer.
1335:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     postShift  Shift to be applied to the output. Varies according to the coefficie
1336:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1337:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_biquad_cascade_df1_init_q15(
1338:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_biquad_casd_df1_inst_q15 * S,
1339:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint8_t numStages,
1340:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pCoeffs,
1341:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pState,
1342:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   int8_t postShift);
1343:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1344:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1345:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1346:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Fast but less precise processing function for the Q15 Biquad cascade filter for Cortex-
1347:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  S          points to an instance of the Q15 Biquad cascade structure.
1348:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
1349:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the block of output data.
1350:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples to process.
1351:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1352:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_biquad_cascade_df1_fast_q15(
1353:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_biquad_casd_df1_inst_q15 * S,
1354:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrc,
1355:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pDst,
1356:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
1357:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1358:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1359:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1360:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Processing function for the Q31 Biquad cascade filter
1361:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  S          points to an instance of the Q31 Biquad cascade structure.
1362:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
1363:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the block of output data.
1364:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples to process.
1365:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1366:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_biquad_cascade_df1_q31(
1367:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_biquad_casd_df1_inst_q31 * S,
1368:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pSrc,
1369:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pDst,
1370:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
1371:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1372:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1373:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1374:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Fast but less precise processing function for the Q31 Biquad cascade filter for Cortex-
1375:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  S          points to an instance of the Q31 Biquad cascade structure.
1376:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
1377:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the block of output data.
1378:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples to process.
1379:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1380:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_biquad_cascade_df1_fast_q31(
1381:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_biquad_casd_df1_inst_q31 * S,
1382:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pSrc,
1383:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pDst,
1384:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
1385:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1386:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1387:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1388:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Initialization function for the Q31 Biquad cascade filter.
1389:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in,out] S          points to an instance of the Q31 Biquad cascade structure.
1390:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     numStages  number of 2nd order stages in the filter.
1391:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pCoeffs    points to the filter coefficients.
1392:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pState     points to the state buffer.
1393:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     postShift  Shift to be applied to the output. Varies according to the coefficie
1394:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1395:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_biquad_cascade_df1_init_q31(
1396:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_biquad_casd_df1_inst_q31 * S,
1397:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint8_t numStages,
1398:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pCoeffs,
1399:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pState,
1400:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   int8_t postShift);
1401:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1402:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1403:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1404:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Processing function for the floating-point Biquad cascade filter.
1405:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  S          points to an instance of the floating-point Biquad cascade structure.
1406:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
1407:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the block of output data.
1408:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples to process.
1409:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1410:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_biquad_cascade_df1_f32(
1411:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_biquad_casd_df1_inst_f32 * S,
1412:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pSrc,
1413:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pDst,
1414:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
1415:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1416:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1417:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1418:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Initialization function for the floating-point Biquad cascade filter.
1419:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in,out] S          points to an instance of the floating-point Biquad cascade structure
1420:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     numStages  number of 2nd order stages in the filter.
1421:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pCoeffs    points to the filter coefficients.
1422:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pState     points to the state buffer.
1423:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1424:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_biquad_cascade_df1_init_f32(
1425:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_biquad_casd_df1_inst_f32 * S,
1426:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint8_t numStages,
1427:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pCoeffs,
1428:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pState);
1429:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1430:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1431:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1432:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the floating-point matrix structure.
1433:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1434:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
1435:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
1436:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t numRows;     /**< number of rows of the matrix.     */
1437:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t numCols;     /**< number of columns of the matrix.  */
1438:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t *pData;     /**< points to the data of the matrix. */
1439:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_matrix_instance_f32;
1440:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1441:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1442:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1443:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the floating-point matrix structure.
1444:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1445:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
1446:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
1447:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t numRows;     /**< number of rows of the matrix.     */
1448:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t numCols;     /**< number of columns of the matrix.  */
1449:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float64_t *pData;     /**< points to the data of the matrix. */
1450:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_matrix_instance_f64;
1451:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1452:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1453:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the Q15 matrix structure.
1454:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1455:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
1456:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
1457:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t numRows;     /**< number of rows of the matrix.     */
1458:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t numCols;     /**< number of columns of the matrix.  */
1459:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q15_t *pData;         /**< points to the data of the matrix. */
1460:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_matrix_instance_q15;
1461:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1462:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1463:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the Q31 matrix structure.
1464:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1465:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
1466:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
1467:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t numRows;     /**< number of rows of the matrix.     */
1468:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t numCols;     /**< number of columns of the matrix.  */
1469:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t *pData;         /**< points to the data of the matrix. */
1470:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_matrix_instance_q31;
1471:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1472:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1473:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1474:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Floating-point matrix addition.
1475:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA  points to the first input matrix structure
1476:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB  points to the second input matrix structure
1477:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst   points to output matrix structure
1478:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return     The function returns either
1479:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of s
1480:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1481:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_mat_add_f32(
1482:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_matrix_instance_f32 * pSrcA,
1483:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_matrix_instance_f32 * pSrcB,
1484:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_matrix_instance_f32 * pDst);
1485:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1486:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1487:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1488:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Q15 matrix addition.
1489:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]   pSrcA  points to the first input matrix structure
1490:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]   pSrcB  points to the second input matrix structure
1491:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out]  pDst   points to output matrix structure
1492:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return     The function returns either
1493:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of s
1494:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1495:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_mat_add_q15(
1496:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_matrix_instance_q15 * pSrcA,
1497:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_matrix_instance_q15 * pSrcB,
1498:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_matrix_instance_q15 * pDst);
1499:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1500:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1501:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1502:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Q31 matrix addition.
1503:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA  points to the first input matrix structure
1504:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB  points to the second input matrix structure
1505:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst   points to output matrix structure
1506:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return     The function returns either
1507:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of s
1508:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1509:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_mat_add_q31(
1510:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_matrix_instance_q31 * pSrcA,
1511:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_matrix_instance_q31 * pSrcB,
1512:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_matrix_instance_q31 * pDst);
1513:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1514:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1515:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1516:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Floating-point, complex, matrix multiplication.
1517:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA  points to the first input matrix structure
1518:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB  points to the second input matrix structure
1519:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst   points to output matrix structure
1520:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return     The function returns either
1521:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of s
1522:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1523:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_mat_cmplx_mult_f32(
1524:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_matrix_instance_f32 * pSrcA,
1525:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_matrix_instance_f32 * pSrcB,
1526:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_matrix_instance_f32 * pDst);
1527:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1528:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1529:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1530:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Q15, complex,  matrix multiplication.
1531:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA  points to the first input matrix structure
1532:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB  points to the second input matrix structure
1533:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst   points to output matrix structure
1534:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return     The function returns either
1535:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of s
1536:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1537:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_mat_cmplx_mult_q15(
1538:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_matrix_instance_q15 * pSrcA,
1539:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_matrix_instance_q15 * pSrcB,
1540:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_matrix_instance_q15 * pDst,
1541:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pScratch);
1542:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1543:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1544:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1545:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Q31, complex, matrix multiplication.
1546:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA  points to the first input matrix structure
1547:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB  points to the second input matrix structure
1548:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst   points to output matrix structure
1549:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return     The function returns either
1550:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of s
1551:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1552:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_mat_cmplx_mult_q31(
1553:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_matrix_instance_q31 * pSrcA,
1554:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_matrix_instance_q31 * pSrcB,
1555:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_matrix_instance_q31 * pDst);
1556:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1557:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1558:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1559:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Floating-point matrix transpose.
1560:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc  points to the input matrix
1561:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst  points to the output matrix
1562:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return    The function returns either  <code>ARM_MATH_SIZE_MISMATCH</code>
1563:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * or <code>ARM_MATH_SUCCESS</code> based on the outcome of size checking.
1564:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1565:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_mat_trans_f32(
1566:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_matrix_instance_f32 * pSrc,
1567:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_matrix_instance_f32 * pDst);
1568:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1569:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1570:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1571:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Q15 matrix transpose.
1572:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc  points to the input matrix
1573:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst  points to the output matrix
1574:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return    The function returns either  <code>ARM_MATH_SIZE_MISMATCH</code>
1575:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * or <code>ARM_MATH_SUCCESS</code> based on the outcome of size checking.
1576:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1577:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_mat_trans_q15(
1578:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_matrix_instance_q15 * pSrc,
1579:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_matrix_instance_q15 * pDst);
1580:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1581:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1582:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1583:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Q31 matrix transpose.
1584:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc  points to the input matrix
1585:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst  points to the output matrix
1586:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return    The function returns either  <code>ARM_MATH_SIZE_MISMATCH</code>
1587:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * or <code>ARM_MATH_SUCCESS</code> based on the outcome of size checking.
1588:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1589:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_mat_trans_q31(
1590:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_matrix_instance_q31 * pSrc,
1591:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_matrix_instance_q31 * pDst);
1592:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1593:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1594:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1595:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Floating-point matrix multiplication
1596:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA  points to the first input matrix structure
1597:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB  points to the second input matrix structure
1598:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst   points to output matrix structure
1599:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return     The function returns either
1600:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of s
1601:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1602:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_mat_mult_f32(
1603:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_matrix_instance_f32 * pSrcA,
1604:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_matrix_instance_f32 * pSrcB,
1605:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_matrix_instance_f32 * pDst);
1606:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1607:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1608:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1609:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Q15 matrix multiplication
1610:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA   points to the first input matrix structure
1611:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB   points to the second input matrix structure
1612:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst    points to output matrix structure
1613:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pState  points to the array for storing intermediate results
1614:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return     The function returns either
1615:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of s
1616:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1617:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_mat_mult_q15(
1618:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_matrix_instance_q15 * pSrcA,
1619:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_matrix_instance_q15 * pSrcB,
1620:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_matrix_instance_q15 * pDst,
1621:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pState);
1622:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1623:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1624:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1625:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Q15 matrix multiplication (fast variant) for Cortex-M3 and Cortex-M4
1626:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA   points to the first input matrix structure
1627:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB   points to the second input matrix structure
1628:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst    points to output matrix structure
1629:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pState  points to the array for storing intermediate results
1630:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return     The function returns either
1631:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of s
1632:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1633:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_mat_mult_fast_q15(
1634:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_matrix_instance_q15 * pSrcA,
1635:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_matrix_instance_q15 * pSrcB,
1636:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_matrix_instance_q15 * pDst,
1637:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pState);
1638:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1639:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1640:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1641:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Q31 matrix multiplication
1642:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA  points to the first input matrix structure
1643:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB  points to the second input matrix structure
1644:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst   points to output matrix structure
1645:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return     The function returns either
1646:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of s
1647:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1648:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_mat_mult_q31(
1649:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_matrix_instance_q31 * pSrcA,
1650:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_matrix_instance_q31 * pSrcB,
1651:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_matrix_instance_q31 * pDst);
1652:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1653:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1654:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1655:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Q31 matrix multiplication (fast variant) for Cortex-M3 and Cortex-M4
1656:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA  points to the first input matrix structure
1657:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB  points to the second input matrix structure
1658:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst   points to output matrix structure
1659:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return     The function returns either
1660:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of s
1661:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1662:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_mat_mult_fast_q31(
1663:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_matrix_instance_q31 * pSrcA,
1664:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_matrix_instance_q31 * pSrcB,
1665:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_matrix_instance_q31 * pDst);
1666:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1667:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1668:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1669:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Floating-point matrix subtraction
1670:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA  points to the first input matrix structure
1671:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB  points to the second input matrix structure
1672:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst   points to output matrix structure
1673:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return     The function returns either
1674:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of s
1675:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1676:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_mat_sub_f32(
1677:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_matrix_instance_f32 * pSrcA,
1678:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_matrix_instance_f32 * pSrcB,
1679:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_matrix_instance_f32 * pDst);
1680:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1681:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1682:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1683:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Q15 matrix subtraction
1684:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA  points to the first input matrix structure
1685:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB  points to the second input matrix structure
1686:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst   points to output matrix structure
1687:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return     The function returns either
1688:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of s
1689:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1690:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_mat_sub_q15(
1691:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_matrix_instance_q15 * pSrcA,
1692:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_matrix_instance_q15 * pSrcB,
1693:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_matrix_instance_q15 * pDst);
1694:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1695:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1696:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1697:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Q31 matrix subtraction
1698:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA  points to the first input matrix structure
1699:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB  points to the second input matrix structure
1700:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst   points to output matrix structure
1701:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return     The function returns either
1702:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of s
1703:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1704:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_mat_sub_q31(
1705:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_matrix_instance_q31 * pSrcA,
1706:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_matrix_instance_q31 * pSrcB,
1707:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_matrix_instance_q31 * pDst);
1708:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1709:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1710:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1711:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Floating-point matrix scaling.
1712:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc   points to the input matrix
1713:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  scale  scale factor
1714:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst   points to the output matrix
1715:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return     The function returns either
1716:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of s
1717:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1718:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_mat_scale_f32(
1719:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_matrix_instance_f32 * pSrc,
1720:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t scale,
1721:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_matrix_instance_f32 * pDst);
1722:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1723:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1724:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1725:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Q15 matrix scaling.
1726:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc        points to input matrix
1727:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  scaleFract  fractional portion of the scale factor
1728:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  shift       number of bits to shift the result by
1729:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst        points to output matrix
1730:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return     The function returns either
1731:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of s
1732:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1733:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_mat_scale_q15(
1734:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_matrix_instance_q15 * pSrc,
1735:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t scaleFract,
1736:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   int32_t shift,
1737:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_matrix_instance_q15 * pDst);
1738:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1739:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1740:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1741:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Q31 matrix scaling.
1742:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc        points to input matrix
1743:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  scaleFract  fractional portion of the scale factor
1744:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  shift       number of bits to shift the result by
1745:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst        points to output matrix structure
1746:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return     The function returns either
1747:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of s
1748:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1749:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_mat_scale_q31(
1750:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_matrix_instance_q31 * pSrc,
1751:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t scaleFract,
1752:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   int32_t shift,
1753:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_matrix_instance_q31 * pDst);
1754:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1755:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1756:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1757:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Q31 matrix initialization.
1758:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in,out] S         points to an instance of the floating-point matrix structure.
1759:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     nRows     number of rows in the matrix.
1760:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     nColumns  number of columns in the matrix.
1761:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pData     points to the matrix data array.
1762:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1763:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_mat_init_q31(
1764:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_matrix_instance_q31 * S,
1765:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t nRows,
1766:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t nColumns,
1767:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pData);
1768:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1769:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1770:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1771:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Q15 matrix initialization.
1772:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in,out] S         points to an instance of the floating-point matrix structure.
1773:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     nRows     number of rows in the matrix.
1774:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     nColumns  number of columns in the matrix.
1775:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pData     points to the matrix data array.
1776:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1777:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_mat_init_q15(
1778:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_matrix_instance_q15 * S,
1779:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t nRows,
1780:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t nColumns,
1781:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pData);
1782:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1783:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1784:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1785:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Floating-point matrix initialization.
1786:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in,out] S         points to an instance of the floating-point matrix structure.
1787:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     nRows     number of rows in the matrix.
1788:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     nColumns  number of columns in the matrix.
1789:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pData     points to the matrix data array.
1790:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1791:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_mat_init_f32(
1792:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_matrix_instance_f32 * S,
1793:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t nRows,
1794:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t nColumns,
1795:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pData);
1796:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1797:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1798:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1799:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1800:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the Q15 PID Control.
1801:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1802:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
1803:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
1804:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q15_t A0;           /**< The derived gain, A0 = Kp + Ki + Kd . */
1805:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #if !defined (ARM_MATH_DSP)
1806:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q15_t A1;
1807:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q15_t A2;
1808:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #else
1809:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t A1;           /**< The derived gain A1 = -Kp - 2Kd | Kd.*/
1810:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #endif
1811:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q15_t state[3];     /**< The state array of length 3. */
1812:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q15_t Kp;           /**< The proportional gain. */
1813:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q15_t Ki;           /**< The integral gain. */
1814:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q15_t Kd;           /**< The derivative gain. */
1815:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_pid_instance_q15;
1816:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1817:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1818:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the Q31 PID Control.
1819:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1820:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
1821:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
1822:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t A0;            /**< The derived gain, A0 = Kp + Ki + Kd . */
1823:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t A1;            /**< The derived gain, A1 = -Kp - 2Kd. */
1824:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t A2;            /**< The derived gain, A2 = Kd . */
1825:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t state[3];      /**< The state array of length 3. */
1826:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t Kp;            /**< The proportional gain. */
1827:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t Ki;            /**< The integral gain. */
1828:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t Kd;            /**< The derivative gain. */
1829:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_pid_instance_q31;
1830:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1831:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1832:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the floating-point PID Control.
1833:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1834:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
1835:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
1836:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t A0;          /**< The derived gain, A0 = Kp + Ki + Kd . */
1837:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t A1;          /**< The derived gain, A1 = -Kp - 2Kd. */
1838:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t A2;          /**< The derived gain, A2 = Kd . */
1839:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t state[3];    /**< The state array of length 3. */
1840:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t Kp;          /**< The proportional gain. */
1841:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t Ki;          /**< The integral gain. */
1842:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t Kd;          /**< The derivative gain. */
1843:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_pid_instance_f32;
1844:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1845:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1846:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1847:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1848:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Initialization function for the floating-point PID Control.
1849:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in,out] S               points to an instance of the PID structure.
1850:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     resetStateFlag  flag to reset the state. 0 = no change in state 1 = reset the s
1851:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1852:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_pid_init_f32(
1853:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_pid_instance_f32 * S,
1854:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   int32_t resetStateFlag);
1855:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1856:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1857:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1858:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Reset function for the floating-point PID Control.
1859:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in,out] S  is an instance of the floating-point PID Control structure
1860:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1861:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_pid_reset_f32(
1862:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_pid_instance_f32 * S);
1863:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1864:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1865:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1866:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Initialization function for the Q31 PID Control.
1867:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in,out] S               points to an instance of the Q15 PID structure.
1868:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     resetStateFlag  flag to reset the state. 0 = no change in state 1 = reset the s
1869:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1870:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_pid_init_q31(
1871:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_pid_instance_q31 * S,
1872:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   int32_t resetStateFlag);
1873:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1874:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1875:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1876:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Reset function for the Q31 PID Control.
1877:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in,out] S   points to an instance of the Q31 PID Control structure
1878:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1879:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1880:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_pid_reset_q31(
1881:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_pid_instance_q31 * S);
1882:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1883:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1884:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1885:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Initialization function for the Q15 PID Control.
1886:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in,out] S               points to an instance of the Q15 PID structure.
1887:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     resetStateFlag  flag to reset the state. 0 = no change in state 1 = reset the s
1888:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1889:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_pid_init_q15(
1890:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_pid_instance_q15 * S,
1891:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   int32_t resetStateFlag);
1892:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1893:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1894:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1895:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Reset function for the Q15 PID Control.
1896:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in,out] S  points to an instance of the q15 PID Control structure
1897:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1898:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_pid_reset_q15(
1899:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_pid_instance_q15 * S);
1900:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1901:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1902:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1903:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the floating-point Linear Interpolate function.
1904:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1905:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
1906:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
1907:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint32_t nValues;           /**< nValues */
1908:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t x1;               /**< x1 */
1909:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t xSpacing;         /**< xSpacing */
1910:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t *pYData;          /**< pointer to the table of Y values */
1911:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_linear_interp_instance_f32;
1912:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1913:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1914:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the floating-point bilinear interpolation function.
1915:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1916:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
1917:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
1918:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t numRows;   /**< number of rows in the data table. */
1919:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t numCols;   /**< number of columns in the data table. */
1920:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t *pData;   /**< points to the data table. */
1921:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_bilinear_interp_instance_f32;
1922:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1923:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    /**
1924:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the Q31 bilinear interpolation function.
1925:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1926:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
1927:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
1928:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t numRows;   /**< number of rows in the data table. */
1929:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t numCols;   /**< number of columns in the data table. */
1930:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t *pData;       /**< points to the data table. */
1931:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_bilinear_interp_instance_q31;
1932:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1933:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    /**
1934:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the Q15 bilinear interpolation function.
1935:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1936:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
1937:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
1938:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t numRows;   /**< number of rows in the data table. */
1939:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t numCols;   /**< number of columns in the data table. */
1940:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q15_t *pData;       /**< points to the data table. */
1941:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_bilinear_interp_instance_q15;
1942:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1943:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    /**
1944:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the Q15 bilinear interpolation function.
1945:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1946:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
1947:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
1948:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t numRows;   /**< number of rows in the data table. */
1949:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t numCols;   /**< number of columns in the data table. */
1950:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q7_t *pData;        /**< points to the data table. */
1951:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_bilinear_interp_instance_q7;
1952:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1953:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1954:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1955:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Q7 vector multiplication.
1956:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA      points to the first input vector
1957:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB      points to the second input vector
1958:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the output vector
1959:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples in each vector
1960:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1961:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_mult_q7(
1962:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pSrcA,
1963:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pSrcB,
1964:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pDst,
1965:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
1966:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1967:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1968:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1969:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Q15 vector multiplication.
1970:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA      points to the first input vector
1971:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB      points to the second input vector
1972:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the output vector
1973:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples in each vector
1974:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1975:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_mult_q15(
1976:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrcA,
1977:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrcB,
1978:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pDst,
1979:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
1980:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1981:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1982:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1983:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Q31 vector multiplication.
1984:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA      points to the first input vector
1985:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB      points to the second input vector
1986:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the output vector
1987:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples in each vector
1988:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
1989:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_mult_q31(
1990:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pSrcA,
1991:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pSrcB,
1992:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pDst,
1993:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
1994:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1995:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
1996:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
1997:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Floating-point vector multiplication.
1998:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA      points to the first input vector
1999:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB      points to the second input vector
2000:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the output vector
2001:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples in each vector
2002:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2003:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_mult_f32(
2004:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pSrcA,
2005:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pSrcB,
2006:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pDst,
2007:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
2008:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2009:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2010:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2011:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the Q15 CFFT/CIFFT function.
2012:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2013:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
2014:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
2015:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t fftLen;                 /**< length of the FFT. */
2016:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint8_t ifftFlag;                /**< flag that selects forward (ifftFlag=0) or inverse (ifftFl
2017:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint8_t bitReverseFlag;          /**< flag that enables (bitReverseFlag=1) or disables (bitReve
2018:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q15_t *pTwiddle;                 /**< points to the Sin twiddle factor table. */
2019:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t *pBitRevTable;          /**< points to the bit reversal table. */
2020:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t twidCoefModifier;       /**< twiddle coefficient modifier that supports different size
2021:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t bitRevFactor;           /**< bit reversal modifier that supports different size FFTs w
2022:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_cfft_radix2_instance_q15;
2023:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2024:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /* Deprecated */
2025:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_cfft_radix2_init_q15(
2026:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_cfft_radix2_instance_q15 * S,
2027:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t fftLen,
2028:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint8_t ifftFlag,
2029:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint8_t bitReverseFlag);
2030:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2031:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /* Deprecated */
2032:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_cfft_radix2_q15(
2033:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_cfft_radix2_instance_q15 * S,
2034:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrc);
2035:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2036:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2037:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2038:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the Q15 CFFT/CIFFT function.
2039:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2040:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
2041:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
2042:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t fftLen;                 /**< length of the FFT. */
2043:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint8_t ifftFlag;                /**< flag that selects forward (ifftFlag=0) or inverse (ifftFl
2044:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint8_t bitReverseFlag;          /**< flag that enables (bitReverseFlag=1) or disables (bitReve
2045:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q15_t *pTwiddle;                 /**< points to the twiddle factor table. */
2046:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t *pBitRevTable;          /**< points to the bit reversal table. */
2047:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t twidCoefModifier;       /**< twiddle coefficient modifier that supports different size
2048:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t bitRevFactor;           /**< bit reversal modifier that supports different size FFTs w
2049:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_cfft_radix4_instance_q15;
2050:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2051:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /* Deprecated */
2052:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_cfft_radix4_init_q15(
2053:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_cfft_radix4_instance_q15 * S,
2054:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t fftLen,
2055:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint8_t ifftFlag,
2056:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint8_t bitReverseFlag);
2057:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2058:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /* Deprecated */
2059:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_cfft_radix4_q15(
2060:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_cfft_radix4_instance_q15 * S,
2061:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrc);
2062:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2063:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2064:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the Radix-2 Q31 CFFT/CIFFT function.
2065:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2066:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
2067:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
2068:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t fftLen;                 /**< length of the FFT. */
2069:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint8_t ifftFlag;                /**< flag that selects forward (ifftFlag=0) or inverse (ifftFl
2070:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint8_t bitReverseFlag;          /**< flag that enables (bitReverseFlag=1) or disables (bitReve
2071:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t *pTwiddle;                 /**< points to the Twiddle factor table. */
2072:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t *pBitRevTable;          /**< points to the bit reversal table. */
2073:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t twidCoefModifier;       /**< twiddle coefficient modifier that supports different size
2074:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t bitRevFactor;           /**< bit reversal modifier that supports different size FFTs w
2075:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_cfft_radix2_instance_q31;
2076:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2077:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /* Deprecated */
2078:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_cfft_radix2_init_q31(
2079:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_cfft_radix2_instance_q31 * S,
2080:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t fftLen,
2081:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint8_t ifftFlag,
2082:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint8_t bitReverseFlag);
2083:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2084:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /* Deprecated */
2085:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_cfft_radix2_q31(
2086:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_cfft_radix2_instance_q31 * S,
2087:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pSrc);
2088:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2089:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2090:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the Q31 CFFT/CIFFT function.
2091:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2092:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
2093:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
2094:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t fftLen;                 /**< length of the FFT. */
2095:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint8_t ifftFlag;                /**< flag that selects forward (ifftFlag=0) or inverse (ifftFl
2096:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint8_t bitReverseFlag;          /**< flag that enables (bitReverseFlag=1) or disables (bitReve
2097:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t *pTwiddle;                 /**< points to the twiddle factor table. */
2098:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t *pBitRevTable;          /**< points to the bit reversal table. */
2099:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t twidCoefModifier;       /**< twiddle coefficient modifier that supports different size
2100:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t bitRevFactor;           /**< bit reversal modifier that supports different size FFTs w
2101:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_cfft_radix4_instance_q31;
2102:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2103:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /* Deprecated */
2104:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_cfft_radix4_q31(
2105:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_cfft_radix4_instance_q31 * S,
2106:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pSrc);
2107:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2108:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /* Deprecated */
2109:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_cfft_radix4_init_q31(
2110:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_cfft_radix4_instance_q31 * S,
2111:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t fftLen,
2112:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint8_t ifftFlag,
2113:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint8_t bitReverseFlag);
2114:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2115:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2116:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the floating-point CFFT/CIFFT function.
2117:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2118:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
2119:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
2120:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t fftLen;                   /**< length of the FFT. */
2121:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint8_t ifftFlag;                  /**< flag that selects forward (ifftFlag=0) or inverse (ifft
2122:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint8_t bitReverseFlag;            /**< flag that enables (bitReverseFlag=1) or disables (bitRe
2123:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t *pTwiddle;               /**< points to the Twiddle factor table. */
2124:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t *pBitRevTable;            /**< points to the bit reversal table. */
2125:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t twidCoefModifier;         /**< twiddle coefficient modifier that supports different si
2126:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t bitRevFactor;             /**< bit reversal modifier that supports different size FFTs
2127:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t onebyfftLen;             /**< value of 1/fftLen. */
2128:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_cfft_radix2_instance_f32;
2129:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2130:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /* Deprecated */
2131:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_cfft_radix2_init_f32(
2132:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_cfft_radix2_instance_f32 * S,
2133:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t fftLen,
2134:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint8_t ifftFlag,
2135:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint8_t bitReverseFlag);
2136:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2137:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /* Deprecated */
2138:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_cfft_radix2_f32(
2139:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_cfft_radix2_instance_f32 * S,
2140:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pSrc);
2141:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2142:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2143:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the floating-point CFFT/CIFFT function.
2144:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2145:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
2146:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
2147:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t fftLen;                   /**< length of the FFT. */
2148:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint8_t ifftFlag;                  /**< flag that selects forward (ifftFlag=0) or inverse (ifft
2149:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint8_t bitReverseFlag;            /**< flag that enables (bitReverseFlag=1) or disables (bitRe
2150:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t *pTwiddle;               /**< points to the Twiddle factor table. */
2151:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t *pBitRevTable;            /**< points to the bit reversal table. */
2152:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t twidCoefModifier;         /**< twiddle coefficient modifier that supports different si
2153:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t bitRevFactor;             /**< bit reversal modifier that supports different size FFTs
2154:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t onebyfftLen;             /**< value of 1/fftLen. */
2155:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_cfft_radix4_instance_f32;
2156:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2157:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /* Deprecated */
2158:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_cfft_radix4_init_f32(
2159:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_cfft_radix4_instance_f32 * S,
2160:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t fftLen,
2161:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint8_t ifftFlag,
2162:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint8_t bitReverseFlag);
2163:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2164:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /* Deprecated */
2165:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_cfft_radix4_f32(
2166:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_cfft_radix4_instance_f32 * S,
2167:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pSrc);
2168:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2169:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2170:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the fixed-point CFFT/CIFFT function.
2171:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2172:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
2173:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
2174:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t fftLen;                   /**< length of the FFT. */
2175:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     const q15_t *pTwiddle;             /**< points to the Twiddle factor table. */
2176:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     const uint16_t *pBitRevTable;      /**< points to the bit reversal table. */
2177:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t bitRevLength;             /**< bit reversal table length. */
2178:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_cfft_instance_q15;
2179:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2180:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** void arm_cfft_q15(
2181:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     const arm_cfft_instance_q15 * S,
2182:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q15_t * p1,
2183:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint8_t ifftFlag,
2184:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint8_t bitReverseFlag);
2185:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2186:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2187:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the fixed-point CFFT/CIFFT function.
2188:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2189:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
2190:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
2191:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t fftLen;                   /**< length of the FFT. */
2192:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     const q31_t *pTwiddle;             /**< points to the Twiddle factor table. */
2193:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     const uint16_t *pBitRevTable;      /**< points to the bit reversal table. */
2194:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t bitRevLength;             /**< bit reversal table length. */
2195:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_cfft_instance_q31;
2196:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2197:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** void arm_cfft_q31(
2198:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     const arm_cfft_instance_q31 * S,
2199:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t * p1,
2200:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint8_t ifftFlag,
2201:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint8_t bitReverseFlag);
2202:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2203:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2204:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the floating-point CFFT/CIFFT function.
2205:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2206:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
2207:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
2208:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t fftLen;                   /**< length of the FFT. */
2209:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     const float32_t *pTwiddle;         /**< points to the Twiddle factor table. */
2210:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     const uint16_t *pBitRevTable;      /**< points to the bit reversal table. */
2211:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t bitRevLength;             /**< bit reversal table length. */
2212:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_cfft_instance_f32;
2213:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2214:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_cfft_f32(
2215:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_cfft_instance_f32 * S,
2216:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * p1,
2217:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint8_t ifftFlag,
2218:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint8_t bitReverseFlag);
2219:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2220:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2221:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the Q15 RFFT/RIFFT function.
2222:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2223:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
2224:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
2225:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint32_t fftLenReal;                      /**< length of the real FFT. */
2226:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint8_t ifftFlagR;                        /**< flag that selects forward (ifftFlagR=0) or inver
2227:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint8_t bitReverseFlagR;                  /**< flag that enables (bitReverseFlagR=1) or disable
2228:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint32_t twidCoefRModifier;               /**< twiddle coefficient modifier that supports diffe
2229:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q15_t *pTwiddleAReal;                     /**< points to the real twiddle factor table. */
2230:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q15_t *pTwiddleBReal;                     /**< points to the imag twiddle factor table. */
2231:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     const arm_cfft_instance_q15 *pCfft;       /**< points to the complex FFT instance. */
2232:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_rfft_instance_q15;
2233:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2234:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_rfft_init_q15(
2235:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_rfft_instance_q15 * S,
2236:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t fftLenReal,
2237:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t ifftFlagR,
2238:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t bitReverseFlag);
2239:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2240:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_rfft_q15(
2241:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_rfft_instance_q15 * S,
2242:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrc,
2243:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pDst);
2244:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2245:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2246:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the Q31 RFFT/RIFFT function.
2247:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2248:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
2249:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
2250:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint32_t fftLenReal;                        /**< length of the real FFT. */
2251:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint8_t ifftFlagR;                          /**< flag that selects forward (ifftFlagR=0) or inv
2252:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint8_t bitReverseFlagR;                    /**< flag that enables (bitReverseFlagR=1) or disab
2253:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint32_t twidCoefRModifier;                 /**< twiddle coefficient modifier that supports dif
2254:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t *pTwiddleAReal;                       /**< points to the real twiddle factor table. */
2255:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t *pTwiddleBReal;                       /**< points to the imag twiddle factor table. */
2256:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     const arm_cfft_instance_q31 *pCfft;         /**< points to the complex FFT instance. */
2257:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_rfft_instance_q31;
2258:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2259:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_rfft_init_q31(
2260:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_rfft_instance_q31 * S,
2261:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t fftLenReal,
2262:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t ifftFlagR,
2263:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t bitReverseFlag);
2264:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2265:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_rfft_q31(
2266:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_rfft_instance_q31 * S,
2267:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pSrc,
2268:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pDst);
2269:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2270:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2271:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the floating-point RFFT/RIFFT function.
2272:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2273:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
2274:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
2275:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint32_t fftLenReal;                        /**< length of the real FFT. */
2276:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t fftLenBy2;                         /**< length of the complex FFT. */
2277:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint8_t ifftFlagR;                          /**< flag that selects forward (ifftFlagR=0) or inv
2278:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint8_t bitReverseFlagR;                    /**< flag that enables (bitReverseFlagR=1) or disab
2279:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint32_t twidCoefRModifier;                     /**< twiddle coefficient modifier that supports
2280:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t *pTwiddleAReal;                   /**< points to the real twiddle factor table. */
2281:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t *pTwiddleBReal;                   /**< points to the imag twiddle factor table. */
2282:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     arm_cfft_radix4_instance_f32 *pCfft;        /**< points to the complex FFT instance. */
2283:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_rfft_instance_f32;
2284:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2285:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_rfft_init_f32(
2286:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_rfft_instance_f32 * S,
2287:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_cfft_radix4_instance_f32 * S_CFFT,
2288:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t fftLenReal,
2289:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t ifftFlagR,
2290:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t bitReverseFlag);
2291:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2292:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_rfft_f32(
2293:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_rfft_instance_f32 * S,
2294:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pSrc,
2295:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pDst);
2296:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2297:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2298:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the floating-point RFFT/RIFFT function.
2299:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2300:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** typedef struct
2301:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
2302:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     arm_cfft_instance_f32 Sint;      /**< Internal CFFT structure. */
2303:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t fftLenRFFT;             /**< length of the real sequence */
2304:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t * pTwiddleRFFT;        /**< Twiddle factors real stage  */
2305:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_rfft_fast_instance_f32 ;
2306:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2307:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** arm_status arm_rfft_fast_init_f32 (
2308:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    arm_rfft_fast_instance_f32 * S,
2309:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    uint16_t fftLen);
2310:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2311:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** void arm_rfft_fast_f32(
2312:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_rfft_fast_instance_f32 * S,
2313:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * p, float32_t * pOut,
2314:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint8_t ifftFlag);
2315:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2316:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2317:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the floating-point DCT4/IDCT4 function.
2318:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2319:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
2320:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
2321:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t N;                          /**< length of the DCT4. */
2322:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t Nby2;                       /**< half of the length of the DCT4. */
2323:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t normalize;                 /**< normalizing factor. */
2324:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t *pTwiddle;                 /**< points to the twiddle factor table. */
2325:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t *pCosFactor;               /**< points to the cosFactor table. */
2326:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     arm_rfft_instance_f32 *pRfft;        /**< points to the real FFT instance. */
2327:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     arm_cfft_radix4_instance_f32 *pCfft; /**< points to the complex FFT instance. */
2328:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_dct4_instance_f32;
2329:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2330:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2331:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2332:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Initialization function for the floating-point DCT4/IDCT4.
2333:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in,out] S          points to an instance of floating-point DCT4/IDCT4 structure.
2334:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     S_RFFT     points to an instance of floating-point RFFT/RIFFT structure.
2335:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     S_CFFT     points to an instance of floating-point CFFT/CIFFT structure.
2336:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     N          length of the DCT4.
2337:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     Nby2       half of the length of the DCT4.
2338:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     normalize  normalizing factor.
2339:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return      arm_status function returns ARM_MATH_SUCCESS if initialization is successful or A
2340:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2341:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_dct4_init_f32(
2342:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_dct4_instance_f32 * S,
2343:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_rfft_instance_f32 * S_RFFT,
2344:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_cfft_radix4_instance_f32 * S_CFFT,
2345:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t N,
2346:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t Nby2,
2347:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t normalize);
2348:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2349:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2350:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2351:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Processing function for the floating-point DCT4/IDCT4.
2352:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     S              points to an instance of the floating-point DCT4/IDCT4 structure
2353:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pState         points to state buffer.
2354:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in,out] pInlineBuffer  points to the in-place input and output buffer.
2355:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2356:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_dct4_f32(
2357:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_dct4_instance_f32 * S,
2358:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pState,
2359:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pInlineBuffer);
2360:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2361:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2362:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2363:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the Q31 DCT4/IDCT4 function.
2364:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2365:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
2366:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
2367:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t N;                          /**< length of the DCT4. */
2368:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t Nby2;                       /**< half of the length of the DCT4. */
2369:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t normalize;                     /**< normalizing factor. */
2370:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t *pTwiddle;                     /**< points to the twiddle factor table. */
2371:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t *pCosFactor;                   /**< points to the cosFactor table. */
2372:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     arm_rfft_instance_q31 *pRfft;        /**< points to the real FFT instance. */
2373:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     arm_cfft_radix4_instance_q31 *pCfft; /**< points to the complex FFT instance. */
2374:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_dct4_instance_q31;
2375:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2376:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2377:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2378:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Initialization function for the Q31 DCT4/IDCT4.
2379:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in,out] S          points to an instance of Q31 DCT4/IDCT4 structure.
2380:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     S_RFFT     points to an instance of Q31 RFFT/RIFFT structure
2381:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     S_CFFT     points to an instance of Q31 CFFT/CIFFT structure
2382:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     N          length of the DCT4.
2383:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     Nby2       half of the length of the DCT4.
2384:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     normalize  normalizing factor.
2385:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return      arm_status function returns ARM_MATH_SUCCESS if initialization is successful or A
2386:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2387:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_dct4_init_q31(
2388:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_dct4_instance_q31 * S,
2389:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_rfft_instance_q31 * S_RFFT,
2390:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_cfft_radix4_instance_q31 * S_CFFT,
2391:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t N,
2392:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t Nby2,
2393:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t normalize);
2394:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2395:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2396:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2397:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Processing function for the Q31 DCT4/IDCT4.
2398:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     S              points to an instance of the Q31 DCT4 structure.
2399:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pState         points to state buffer.
2400:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in,out] pInlineBuffer  points to the in-place input and output buffer.
2401:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2402:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_dct4_q31(
2403:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_dct4_instance_q31 * S,
2404:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pState,
2405:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pInlineBuffer);
2406:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2407:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2408:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2409:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the Q15 DCT4/IDCT4 function.
2410:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2411:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
2412:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
2413:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t N;                          /**< length of the DCT4. */
2414:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t Nby2;                       /**< half of the length of the DCT4. */
2415:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q15_t normalize;                     /**< normalizing factor. */
2416:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q15_t *pTwiddle;                     /**< points to the twiddle factor table. */
2417:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q15_t *pCosFactor;                   /**< points to the cosFactor table. */
2418:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     arm_rfft_instance_q15 *pRfft;        /**< points to the real FFT instance. */
2419:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     arm_cfft_radix4_instance_q15 *pCfft; /**< points to the complex FFT instance. */
2420:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_dct4_instance_q15;
2421:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2422:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2423:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2424:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Initialization function for the Q15 DCT4/IDCT4.
2425:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in,out] S          points to an instance of Q15 DCT4/IDCT4 structure.
2426:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     S_RFFT     points to an instance of Q15 RFFT/RIFFT structure.
2427:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     S_CFFT     points to an instance of Q15 CFFT/CIFFT structure.
2428:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     N          length of the DCT4.
2429:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     Nby2       half of the length of the DCT4.
2430:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     normalize  normalizing factor.
2431:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return      arm_status function returns ARM_MATH_SUCCESS if initialization is successful or A
2432:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2433:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_dct4_init_q15(
2434:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_dct4_instance_q15 * S,
2435:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_rfft_instance_q15 * S_RFFT,
2436:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_cfft_radix4_instance_q15 * S_CFFT,
2437:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t N,
2438:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t Nby2,
2439:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t normalize);
2440:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2441:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2442:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2443:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Processing function for the Q15 DCT4/IDCT4.
2444:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     S              points to an instance of the Q15 DCT4 structure.
2445:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pState         points to state buffer.
2446:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in,out] pInlineBuffer  points to the in-place input and output buffer.
2447:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2448:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_dct4_q15(
2449:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_dct4_instance_q15 * S,
2450:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pState,
2451:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pInlineBuffer);
2452:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2453:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2454:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2455:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Floating-point vector addition.
2456:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA      points to the first input vector
2457:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB      points to the second input vector
2458:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the output vector
2459:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples in each vector
2460:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2461:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_add_f32(
2462:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pSrcA,
2463:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pSrcB,
2464:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pDst,
2465:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
2466:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2467:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2468:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2469:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Q7 vector addition.
2470:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA      points to the first input vector
2471:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB      points to the second input vector
2472:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the output vector
2473:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples in each vector
2474:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2475:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_add_q7(
2476:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pSrcA,
2477:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pSrcB,
2478:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pDst,
2479:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
2480:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2481:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2482:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2483:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Q15 vector addition.
2484:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA      points to the first input vector
2485:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB      points to the second input vector
2486:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the output vector
2487:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples in each vector
2488:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2489:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_add_q15(
2490:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrcA,
2491:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrcB,
2492:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pDst,
2493:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
2494:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2495:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2496:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2497:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Q31 vector addition.
2498:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA      points to the first input vector
2499:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB      points to the second input vector
2500:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the output vector
2501:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples in each vector
2502:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2503:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_add_q31(
2504:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pSrcA,
2505:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pSrcB,
2506:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pDst,
2507:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
2508:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2509:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2510:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2511:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Floating-point vector subtraction.
2512:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA      points to the first input vector
2513:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB      points to the second input vector
2514:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the output vector
2515:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples in each vector
2516:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2517:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_sub_f32(
2518:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pSrcA,
2519:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pSrcB,
2520:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pDst,
2521:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
2522:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2523:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2524:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2525:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Q7 vector subtraction.
2526:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA      points to the first input vector
2527:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB      points to the second input vector
2528:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the output vector
2529:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples in each vector
2530:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2531:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_sub_q7(
2532:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pSrcA,
2533:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pSrcB,
2534:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pDst,
2535:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
2536:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2537:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2538:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2539:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Q15 vector subtraction.
2540:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA      points to the first input vector
2541:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB      points to the second input vector
2542:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the output vector
2543:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples in each vector
2544:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2545:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_sub_q15(
2546:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrcA,
2547:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrcB,
2548:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pDst,
2549:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
2550:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2551:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2552:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2553:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Q31 vector subtraction.
2554:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA      points to the first input vector
2555:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB      points to the second input vector
2556:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the output vector
2557:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples in each vector
2558:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2559:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_sub_q31(
2560:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pSrcA,
2561:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pSrcB,
2562:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pDst,
2563:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
2564:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2565:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2566:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2567:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Multiplies a floating-point vector by a scalar.
2568:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the input vector
2569:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  scale      scale factor to be applied
2570:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the output vector
2571:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples in the vector
2572:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2573:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_scale_f32(
2574:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pSrc,
2575:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t scale,
2576:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pDst,
2577:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
2578:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2579:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2580:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2581:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Multiplies a Q7 vector by a scalar.
2582:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc        points to the input vector
2583:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  scaleFract  fractional portion of the scale value
2584:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  shift       number of bits to shift the result by
2585:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst        points to the output vector
2586:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize   number of samples in the vector
2587:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2588:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_scale_q7(
2589:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pSrc,
2590:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t scaleFract,
2591:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   int8_t shift,
2592:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pDst,
2593:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
2594:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2595:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2596:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2597:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Multiplies a Q15 vector by a scalar.
2598:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc        points to the input vector
2599:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  scaleFract  fractional portion of the scale value
2600:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  shift       number of bits to shift the result by
2601:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst        points to the output vector
2602:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize   number of samples in the vector
2603:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2604:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_scale_q15(
2605:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrc,
2606:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t scaleFract,
2607:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   int8_t shift,
2608:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pDst,
2609:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
2610:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2611:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2612:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2613:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Multiplies a Q31 vector by a scalar.
2614:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc        points to the input vector
2615:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  scaleFract  fractional portion of the scale value
2616:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  shift       number of bits to shift the result by
2617:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst        points to the output vector
2618:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize   number of samples in the vector
2619:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2620:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_scale_q31(
2621:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pSrc,
2622:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t scaleFract,
2623:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   int8_t shift,
2624:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pDst,
2625:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
2626:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2627:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2628:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2629:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Q7 vector absolute value.
2630:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the input buffer
2631:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the output buffer
2632:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples in each vector
2633:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2634:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_abs_q7(
2635:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pSrc,
2636:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pDst,
2637:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
2638:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2639:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2640:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2641:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Floating-point vector absolute value.
2642:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the input buffer
2643:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the output buffer
2644:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples in each vector
2645:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2646:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_abs_f32(
2647:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pSrc,
2648:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pDst,
2649:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
2650:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2651:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2652:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2653:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Q15 vector absolute value.
2654:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the input buffer
2655:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the output buffer
2656:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples in each vector
2657:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2658:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_abs_q15(
2659:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrc,
2660:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pDst,
2661:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
2662:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2663:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2664:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2665:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Q31 vector absolute value.
2666:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the input buffer
2667:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the output buffer
2668:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples in each vector
2669:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2670:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_abs_q31(
2671:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pSrc,
2672:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pDst,
2673:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
2674:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2675:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2676:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2677:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Dot product of floating-point vectors.
2678:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA      points to the first input vector
2679:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB      points to the second input vector
2680:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples in each vector
2681:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] result     output result returned here
2682:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2683:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_dot_prod_f32(
2684:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pSrcA,
2685:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pSrcB,
2686:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize,
2687:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * result);
2688:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2689:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2690:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2691:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Dot product of Q7 vectors.
2692:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA      points to the first input vector
2693:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB      points to the second input vector
2694:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples in each vector
2695:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] result     output result returned here
2696:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2697:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_dot_prod_q7(
2698:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pSrcA,
2699:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pSrcB,
2700:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize,
2701:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * result);
2702:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2703:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2704:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2705:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Dot product of Q15 vectors.
2706:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA      points to the first input vector
2707:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB      points to the second input vector
2708:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples in each vector
2709:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] result     output result returned here
2710:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2711:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_dot_prod_q15(
2712:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrcA,
2713:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrcB,
2714:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize,
2715:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q63_t * result);
2716:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2717:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2718:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2719:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Dot product of Q31 vectors.
2720:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA      points to the first input vector
2721:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB      points to the second input vector
2722:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples in each vector
2723:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] result     output result returned here
2724:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2725:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_dot_prod_q31(
2726:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pSrcA,
2727:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pSrcB,
2728:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize,
2729:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q63_t * result);
2730:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2731:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2732:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2733:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Shifts the elements of a Q7 vector a specified number of bits.
2734:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the input vector
2735:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  shiftBits  number of bits to shift.  A positive value shifts left; a negative valu
2736:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the output vector
2737:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples in the vector
2738:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2739:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_shift_q7(
2740:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pSrc,
2741:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   int8_t shiftBits,
2742:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pDst,
2743:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
2744:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2745:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2746:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2747:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Shifts the elements of a Q15 vector a specified number of bits.
2748:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the input vector
2749:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  shiftBits  number of bits to shift.  A positive value shifts left; a negative valu
2750:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the output vector
2751:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples in the vector
2752:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2753:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_shift_q15(
2754:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrc,
2755:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   int8_t shiftBits,
2756:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pDst,
2757:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
2758:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2759:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2760:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2761:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Shifts the elements of a Q31 vector a specified number of bits.
2762:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the input vector
2763:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  shiftBits  number of bits to shift.  A positive value shifts left; a negative valu
2764:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the output vector
2765:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples in the vector
2766:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2767:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_shift_q31(
2768:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pSrc,
2769:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   int8_t shiftBits,
2770:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pDst,
2771:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
2772:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2773:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2774:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2775:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Adds a constant offset to a floating-point vector.
2776:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the input vector
2777:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  offset     is the offset to be added
2778:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the output vector
2779:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples in the vector
2780:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2781:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_offset_f32(
2782:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pSrc,
2783:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t offset,
2784:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pDst,
2785:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
2786:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2787:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2788:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2789:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Adds a constant offset to a Q7 vector.
2790:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the input vector
2791:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  offset     is the offset to be added
2792:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the output vector
2793:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples in the vector
2794:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2795:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_offset_q7(
2796:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pSrc,
2797:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t offset,
2798:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pDst,
2799:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
2800:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2801:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2802:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2803:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Adds a constant offset to a Q15 vector.
2804:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the input vector
2805:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  offset     is the offset to be added
2806:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the output vector
2807:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples in the vector
2808:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2809:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_offset_q15(
2810:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrc,
2811:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t offset,
2812:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pDst,
2813:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
2814:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2815:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2816:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2817:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Adds a constant offset to a Q31 vector.
2818:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the input vector
2819:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  offset     is the offset to be added
2820:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the output vector
2821:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples in the vector
2822:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2823:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_offset_q31(
2824:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pSrc,
2825:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t offset,
2826:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pDst,
2827:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
2828:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2829:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2830:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2831:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Negates the elements of a floating-point vector.
2832:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the input vector
2833:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the output vector
2834:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples in the vector
2835:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2836:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_negate_f32(
2837:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pSrc,
2838:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pDst,
2839:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
2840:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2841:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2842:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2843:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Negates the elements of a Q7 vector.
2844:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the input vector
2845:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the output vector
2846:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples in the vector
2847:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2848:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_negate_q7(
2849:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pSrc,
2850:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pDst,
2851:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
2852:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2853:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2854:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2855:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Negates the elements of a Q15 vector.
2856:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the input vector
2857:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the output vector
2858:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples in the vector
2859:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2860:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_negate_q15(
2861:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrc,
2862:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pDst,
2863:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
2864:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2865:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2866:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2867:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Negates the elements of a Q31 vector.
2868:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the input vector
2869:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the output vector
2870:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples in the vector
2871:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2872:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_negate_q31(
2873:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pSrc,
2874:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pDst,
2875:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
2876:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2877:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2878:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2879:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Copies the elements of a floating-point vector.
2880:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       input pointer
2881:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       output pointer
2882:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples to process
2883:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2884:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_copy_f32(
2885:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pSrc,
2886:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pDst,
2887:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
2888:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2889:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2890:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2891:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Copies the elements of a Q7 vector.
2892:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       input pointer
2893:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       output pointer
2894:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples to process
2895:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2896:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_copy_q7(
2897:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pSrc,
2898:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pDst,
2899:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
2900:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2901:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2902:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2903:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Copies the elements of a Q15 vector.
2904:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       input pointer
2905:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       output pointer
2906:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples to process
2907:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2908:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_copy_q15(
2909:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrc,
2910:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pDst,
2911:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
2912:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2913:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2914:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2915:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Copies the elements of a Q31 vector.
2916:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       input pointer
2917:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       output pointer
2918:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples to process
2919:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2920:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_copy_q31(
2921:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pSrc,
2922:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pDst,
2923:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
2924:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2925:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2926:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2927:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Fills a constant value into a floating-point vector.
2928:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  value      input value to be filled
2929:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       output pointer
2930:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples to process
2931:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2932:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_fill_f32(
2933:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t value,
2934:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pDst,
2935:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
2936:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2937:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2938:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2939:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Fills a constant value into a Q7 vector.
2940:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  value      input value to be filled
2941:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       output pointer
2942:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples to process
2943:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2944:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_fill_q7(
2945:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t value,
2946:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pDst,
2947:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
2948:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2949:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2950:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2951:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Fills a constant value into a Q15 vector.
2952:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  value      input value to be filled
2953:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       output pointer
2954:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples to process
2955:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2956:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_fill_q15(
2957:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t value,
2958:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pDst,
2959:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
2960:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2961:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2962:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2963:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Fills a constant value into a Q31 vector.
2964:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  value      input value to be filled
2965:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       output pointer
2966:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples to process
2967:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
2968:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_fill_q31(
2969:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t value,
2970:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pDst,
2971:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
2972:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2973:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2974:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /**
2975:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * @brief Convolution of floating-point sequences.
2976:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * @param[in]  pSrcA    points to the first input sequence.
2977:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * @param[in]  srcALen  length of the first input sequence.
2978:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * @param[in]  pSrcB    points to the second input sequence.
2979:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * @param[in]  srcBLen  length of the second input sequence.
2980:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * @param[out] pDst     points to the location where the output result is written.  Length srcALen+
2981:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  */
2982:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_conv_f32(
2983:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pSrcA,
2984:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcALen,
2985:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pSrcB,
2986:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcBLen,
2987:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pDst);
2988:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2989:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
2990:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
2991:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Convolution of Q15 sequences.
2992:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA      points to the first input sequence.
2993:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcALen    length of the first input sequence.
2994:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB      points to the second input sequence.
2995:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcBLen    length of the second input sequence.
2996:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the block of output data  Length srcALen+srcBLen-1.
2997:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pScratch1  points to scratch buffer of size max(srcALen, srcBLen) + 2*min(srcALen,
2998:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pScratch2  points to scratch buffer of size min(srcALen, srcBLen).
2999:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3000:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_conv_opt_q15(
3001:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrcA,
3002:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcALen,
3003:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrcB,
3004:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcBLen,
3005:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pDst,
3006:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pScratch1,
3007:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pScratch2);
3008:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3009:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3010:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /**
3011:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * @brief Convolution of Q15 sequences.
3012:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * @param[in]  pSrcA    points to the first input sequence.
3013:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * @param[in]  srcALen  length of the first input sequence.
3014:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * @param[in]  pSrcB    points to the second input sequence.
3015:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * @param[in]  srcBLen  length of the second input sequence.
3016:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * @param[out] pDst     points to the location where the output result is written.  Length srcALen+
3017:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  */
3018:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_conv_q15(
3019:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrcA,
3020:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcALen,
3021:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrcB,
3022:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcBLen,
3023:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pDst);
3024:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3025:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3026:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3027:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Convolution of Q15 sequences (fast version) for Cortex-M3 and Cortex-M4
3028:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA    points to the first input sequence.
3029:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcALen  length of the first input sequence.
3030:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB    points to the second input sequence.
3031:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcBLen  length of the second input sequence.
3032:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst     points to the block of output data  Length srcALen+srcBLen-1.
3033:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3034:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_conv_fast_q15(
3035:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****           q15_t * pSrcA,
3036:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****           uint32_t srcALen,
3037:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****           q15_t * pSrcB,
3038:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****           uint32_t srcBLen,
3039:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****           q15_t * pDst);
3040:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3041:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3042:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3043:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Convolution of Q15 sequences (fast version) for Cortex-M3 and Cortex-M4
3044:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA      points to the first input sequence.
3045:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcALen    length of the first input sequence.
3046:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB      points to the second input sequence.
3047:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcBLen    length of the second input sequence.
3048:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the block of output data  Length srcALen+srcBLen-1.
3049:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pScratch1  points to scratch buffer of size max(srcALen, srcBLen) + 2*min(srcALen,
3050:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pScratch2  points to scratch buffer of size min(srcALen, srcBLen).
3051:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3052:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_conv_fast_opt_q15(
3053:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrcA,
3054:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcALen,
3055:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrcB,
3056:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcBLen,
3057:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pDst,
3058:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pScratch1,
3059:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pScratch2);
3060:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3061:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3062:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3063:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Convolution of Q31 sequences.
3064:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA    points to the first input sequence.
3065:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcALen  length of the first input sequence.
3066:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB    points to the second input sequence.
3067:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcBLen  length of the second input sequence.
3068:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst     points to the block of output data  Length srcALen+srcBLen-1.
3069:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3070:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_conv_q31(
3071:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pSrcA,
3072:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcALen,
3073:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pSrcB,
3074:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcBLen,
3075:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pDst);
3076:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3077:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3078:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3079:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Convolution of Q31 sequences (fast version) for Cortex-M3 and Cortex-M4
3080:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA    points to the first input sequence.
3081:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcALen  length of the first input sequence.
3082:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB    points to the second input sequence.
3083:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcBLen  length of the second input sequence.
3084:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst     points to the block of output data  Length srcALen+srcBLen-1.
3085:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3086:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_conv_fast_q31(
3087:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pSrcA,
3088:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcALen,
3089:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pSrcB,
3090:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcBLen,
3091:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pDst);
3092:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3093:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3094:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /**
3095:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Convolution of Q7 sequences.
3096:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA      points to the first input sequence.
3097:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcALen    length of the first input sequence.
3098:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB      points to the second input sequence.
3099:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcBLen    length of the second input sequence.
3100:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the block of output data  Length srcALen+srcBLen-1.
3101:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pScratch1  points to scratch buffer(of type q15_t) of size max(srcALen, srcBLen) +
3102:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pScratch2  points to scratch buffer (of type q15_t) of size min(srcALen, srcBLen).
3103:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3104:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_conv_opt_q7(
3105:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pSrcA,
3106:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcALen,
3107:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pSrcB,
3108:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcBLen,
3109:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pDst,
3110:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pScratch1,
3111:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pScratch2);
3112:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3113:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3114:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3115:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Convolution of Q7 sequences.
3116:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA    points to the first input sequence.
3117:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcALen  length of the first input sequence.
3118:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB    points to the second input sequence.
3119:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcBLen  length of the second input sequence.
3120:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst     points to the block of output data  Length srcALen+srcBLen-1.
3121:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3122:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_conv_q7(
3123:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pSrcA,
3124:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcALen,
3125:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pSrcB,
3126:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcBLen,
3127:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pDst);
3128:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3129:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3130:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3131:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Partial convolution of floating-point sequences.
3132:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA       points to the first input sequence.
3133:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcALen     length of the first input sequence.
3134:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB       points to the second input sequence.
3135:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcBLen     length of the second input sequence.
3136:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst        points to the block of output data
3137:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  firstIndex  is the first output sample to start with.
3138:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  numPoints   is the number of output points to be computed.
3139:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return  Returns either ARM_MATH_SUCCESS if the function completed correctly or ARM_MATH_ARGUM
3140:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3141:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_conv_partial_f32(
3142:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pSrcA,
3143:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcALen,
3144:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pSrcB,
3145:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcBLen,
3146:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pDst,
3147:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t firstIndex,
3148:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t numPoints);
3149:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3150:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3151:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3152:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Partial convolution of Q15 sequences.
3153:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA       points to the first input sequence.
3154:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcALen     length of the first input sequence.
3155:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB       points to the second input sequence.
3156:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcBLen     length of the second input sequence.
3157:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst        points to the block of output data
3158:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  firstIndex  is the first output sample to start with.
3159:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  numPoints   is the number of output points to be computed.
3160:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pScratch1   points to scratch buffer of size max(srcALen, srcBLen) + 2*min(srcALen
3161:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pScratch2   points to scratch buffer of size min(srcALen, srcBLen).
3162:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return  Returns either ARM_MATH_SUCCESS if the function completed correctly or ARM_MATH_ARGUM
3163:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3164:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_conv_partial_opt_q15(
3165:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrcA,
3166:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcALen,
3167:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrcB,
3168:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcBLen,
3169:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pDst,
3170:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t firstIndex,
3171:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t numPoints,
3172:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pScratch1,
3173:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pScratch2);
3174:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3175:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3176:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3177:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Partial convolution of Q15 sequences.
3178:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA       points to the first input sequence.
3179:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcALen     length of the first input sequence.
3180:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB       points to the second input sequence.
3181:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcBLen     length of the second input sequence.
3182:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst        points to the block of output data
3183:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  firstIndex  is the first output sample to start with.
3184:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  numPoints   is the number of output points to be computed.
3185:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return  Returns either ARM_MATH_SUCCESS if the function completed correctly or ARM_MATH_ARGUM
3186:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3187:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_conv_partial_q15(
3188:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrcA,
3189:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcALen,
3190:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrcB,
3191:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcBLen,
3192:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pDst,
3193:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t firstIndex,
3194:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t numPoints);
3195:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3196:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3197:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3198:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Partial convolution of Q15 sequences (fast version) for Cortex-M3 and Cortex-M4
3199:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA       points to the first input sequence.
3200:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcALen     length of the first input sequence.
3201:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB       points to the second input sequence.
3202:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcBLen     length of the second input sequence.
3203:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst        points to the block of output data
3204:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  firstIndex  is the first output sample to start with.
3205:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  numPoints   is the number of output points to be computed.
3206:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return  Returns either ARM_MATH_SUCCESS if the function completed correctly or ARM_MATH_ARGUM
3207:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3208:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_conv_partial_fast_q15(
3209:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrcA,
3210:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcALen,
3211:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrcB,
3212:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcBLen,
3213:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pDst,
3214:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t firstIndex,
3215:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t numPoints);
3216:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3217:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3218:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3219:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Partial convolution of Q15 sequences (fast version) for Cortex-M3 and Cortex-M4
3220:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA       points to the first input sequence.
3221:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcALen     length of the first input sequence.
3222:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB       points to the second input sequence.
3223:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcBLen     length of the second input sequence.
3224:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst        points to the block of output data
3225:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  firstIndex  is the first output sample to start with.
3226:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  numPoints   is the number of output points to be computed.
3227:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pScratch1   points to scratch buffer of size max(srcALen, srcBLen) + 2*min(srcALen
3228:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pScratch2   points to scratch buffer of size min(srcALen, srcBLen).
3229:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return  Returns either ARM_MATH_SUCCESS if the function completed correctly or ARM_MATH_ARGUM
3230:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3231:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_conv_partial_fast_opt_q15(
3232:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrcA,
3233:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcALen,
3234:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrcB,
3235:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcBLen,
3236:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pDst,
3237:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t firstIndex,
3238:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t numPoints,
3239:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pScratch1,
3240:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pScratch2);
3241:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3242:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3243:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3244:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Partial convolution of Q31 sequences.
3245:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA       points to the first input sequence.
3246:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcALen     length of the first input sequence.
3247:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB       points to the second input sequence.
3248:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcBLen     length of the second input sequence.
3249:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst        points to the block of output data
3250:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  firstIndex  is the first output sample to start with.
3251:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  numPoints   is the number of output points to be computed.
3252:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return  Returns either ARM_MATH_SUCCESS if the function completed correctly or ARM_MATH_ARGUM
3253:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3254:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_conv_partial_q31(
3255:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pSrcA,
3256:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcALen,
3257:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pSrcB,
3258:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcBLen,
3259:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pDst,
3260:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t firstIndex,
3261:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t numPoints);
3262:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3263:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3264:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3265:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Partial convolution of Q31 sequences (fast version) for Cortex-M3 and Cortex-M4
3266:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA       points to the first input sequence.
3267:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcALen     length of the first input sequence.
3268:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB       points to the second input sequence.
3269:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcBLen     length of the second input sequence.
3270:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst        points to the block of output data
3271:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  firstIndex  is the first output sample to start with.
3272:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  numPoints   is the number of output points to be computed.
3273:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return  Returns either ARM_MATH_SUCCESS if the function completed correctly or ARM_MATH_ARGUM
3274:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3275:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_conv_partial_fast_q31(
3276:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pSrcA,
3277:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcALen,
3278:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pSrcB,
3279:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcBLen,
3280:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pDst,
3281:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t firstIndex,
3282:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t numPoints);
3283:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3284:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3285:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3286:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Partial convolution of Q7 sequences
3287:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA       points to the first input sequence.
3288:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcALen     length of the first input sequence.
3289:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB       points to the second input sequence.
3290:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcBLen     length of the second input sequence.
3291:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst        points to the block of output data
3292:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  firstIndex  is the first output sample to start with.
3293:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  numPoints   is the number of output points to be computed.
3294:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pScratch1   points to scratch buffer(of type q15_t) of size max(srcALen, srcBLen) 
3295:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pScratch2   points to scratch buffer (of type q15_t) of size min(srcALen, srcBLen)
3296:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return  Returns either ARM_MATH_SUCCESS if the function completed correctly or ARM_MATH_ARGUM
3297:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3298:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_conv_partial_opt_q7(
3299:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pSrcA,
3300:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcALen,
3301:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pSrcB,
3302:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcBLen,
3303:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pDst,
3304:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t firstIndex,
3305:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t numPoints,
3306:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pScratch1,
3307:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pScratch2);
3308:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3309:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3310:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /**
3311:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Partial convolution of Q7 sequences.
3312:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA       points to the first input sequence.
3313:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcALen     length of the first input sequence.
3314:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB       points to the second input sequence.
3315:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcBLen     length of the second input sequence.
3316:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst        points to the block of output data
3317:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  firstIndex  is the first output sample to start with.
3318:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  numPoints   is the number of output points to be computed.
3319:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return  Returns either ARM_MATH_SUCCESS if the function completed correctly or ARM_MATH_ARGUM
3320:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3321:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_conv_partial_q7(
3322:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pSrcA,
3323:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcALen,
3324:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pSrcB,
3325:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcBLen,
3326:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pDst,
3327:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t firstIndex,
3328:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t numPoints);
3329:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3330:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3331:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3332:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the Q15 FIR decimator.
3333:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3334:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
3335:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
3336:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint8_t M;                  /**< decimation factor. */
3337:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t numTaps;           /**< number of coefficients in the filter. */
3338:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q15_t *pCoeffs;             /**< points to the coefficient array. The array is of length numTap
3339:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q15_t *pState;              /**< points to the state variable array. The array is of length num
3340:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_fir_decimate_instance_q15;
3341:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3342:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3343:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the Q31 FIR decimator.
3344:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3345:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
3346:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
3347:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint8_t M;                  /**< decimation factor. */
3348:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t numTaps;           /**< number of coefficients in the filter. */
3349:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t *pCoeffs;             /**< points to the coefficient array. The array is of length numTap
3350:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t *pState;              /**< points to the state variable array. The array is of length num
3351:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_fir_decimate_instance_q31;
3352:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3353:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3354:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the floating-point FIR decimator.
3355:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3356:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
3357:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
3358:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint8_t M;                  /**< decimation factor. */
3359:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t numTaps;           /**< number of coefficients in the filter. */
3360:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t *pCoeffs;         /**< points to the coefficient array. The array is of length numTap
3361:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t *pState;          /**< points to the state variable array. The array is of length num
3362:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_fir_decimate_instance_f32;
3363:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3364:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3365:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3366:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Processing function for the floating-point FIR decimator.
3367:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  S          points to an instance of the floating-point FIR decimator structure.
3368:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
3369:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the block of output data
3370:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of input samples to process per call.
3371:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3372:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_fir_decimate_f32(
3373:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_fir_decimate_instance_f32 * S,
3374:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pSrc,
3375:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pDst,
3376:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
3377:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3378:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3379:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3380:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Initialization function for the floating-point FIR decimator.
3381:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in,out] S          points to an instance of the floating-point FIR decimator structure.
3382:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     numTaps    number of coefficients in the filter.
3383:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     M          decimation factor.
3384:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pCoeffs    points to the filter coefficients.
3385:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pState     points to the state buffer.
3386:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     blockSize  number of input samples to process per call.
3387:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return    The function returns ARM_MATH_SUCCESS if initialization is successful or ARM_MATH_L
3388:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * <code>blockSize</code> is not a multiple of <code>M</code>.
3389:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3390:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_fir_decimate_init_f32(
3391:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_fir_decimate_instance_f32 * S,
3392:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t numTaps,
3393:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint8_t M,
3394:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pCoeffs,
3395:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pState,
3396:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
3397:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3398:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3399:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3400:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Processing function for the Q15 FIR decimator.
3401:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  S          points to an instance of the Q15 FIR decimator structure.
3402:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
3403:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the block of output data
3404:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of input samples to process per call.
3405:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3406:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_fir_decimate_q15(
3407:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_fir_decimate_instance_q15 * S,
3408:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrc,
3409:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pDst,
3410:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
3411:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3412:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3413:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3414:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Processing function for the Q15 FIR decimator (fast variant) for Cortex-M3 and Cortex-M
3415:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  S          points to an instance of the Q15 FIR decimator structure.
3416:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
3417:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the block of output data
3418:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of input samples to process per call.
3419:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3420:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_fir_decimate_fast_q15(
3421:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_fir_decimate_instance_q15 * S,
3422:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrc,
3423:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pDst,
3424:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
3425:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3426:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3427:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3428:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Initialization function for the Q15 FIR decimator.
3429:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in,out] S          points to an instance of the Q15 FIR decimator structure.
3430:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     numTaps    number of coefficients in the filter.
3431:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     M          decimation factor.
3432:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pCoeffs    points to the filter coefficients.
3433:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pState     points to the state buffer.
3434:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     blockSize  number of input samples to process per call.
3435:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return    The function returns ARM_MATH_SUCCESS if initialization is successful or ARM_MATH_L
3436:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * <code>blockSize</code> is not a multiple of <code>M</code>.
3437:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3438:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_fir_decimate_init_q15(
3439:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_fir_decimate_instance_q15 * S,
3440:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t numTaps,
3441:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint8_t M,
3442:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pCoeffs,
3443:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pState,
3444:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
3445:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3446:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3447:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3448:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Processing function for the Q31 FIR decimator.
3449:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  S     points to an instance of the Q31 FIR decimator structure.
3450:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc  points to the block of input data.
3451:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst  points to the block of output data
3452:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] blockSize number of input samples to process per call.
3453:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3454:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_fir_decimate_q31(
3455:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_fir_decimate_instance_q31 * S,
3456:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pSrc,
3457:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pDst,
3458:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
3459:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3460:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3461:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Processing function for the Q31 FIR decimator (fast variant) for Cortex-M3 and Cortex-M
3462:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  S          points to an instance of the Q31 FIR decimator structure.
3463:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
3464:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the block of output data
3465:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of input samples to process per call.
3466:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3467:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_fir_decimate_fast_q31(
3468:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_fir_decimate_instance_q31 * S,
3469:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pSrc,
3470:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pDst,
3471:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
3472:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3473:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3474:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3475:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Initialization function for the Q31 FIR decimator.
3476:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in,out] S          points to an instance of the Q31 FIR decimator structure.
3477:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     numTaps    number of coefficients in the filter.
3478:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     M          decimation factor.
3479:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pCoeffs    points to the filter coefficients.
3480:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pState     points to the state buffer.
3481:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     blockSize  number of input samples to process per call.
3482:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return    The function returns ARM_MATH_SUCCESS if initialization is successful or ARM_MATH_L
3483:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * <code>blockSize</code> is not a multiple of <code>M</code>.
3484:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3485:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_fir_decimate_init_q31(
3486:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_fir_decimate_instance_q31 * S,
3487:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t numTaps,
3488:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint8_t M,
3489:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pCoeffs,
3490:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pState,
3491:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
3492:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3493:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3494:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3495:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the Q15 FIR interpolator.
3496:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3497:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
3498:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
3499:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint8_t L;                      /**< upsample factor. */
3500:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t phaseLength;           /**< length of each polyphase filter component. */
3501:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q15_t *pCoeffs;                 /**< points to the coefficient array. The array is of length L*
3502:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q15_t *pState;                  /**< points to the state variable array. The array is of length
3503:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_fir_interpolate_instance_q15;
3504:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3505:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3506:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the Q31 FIR interpolator.
3507:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3508:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
3509:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
3510:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint8_t L;                      /**< upsample factor. */
3511:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t phaseLength;           /**< length of each polyphase filter component. */
3512:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t *pCoeffs;                 /**< points to the coefficient array. The array is of length L*
3513:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t *pState;                  /**< points to the state variable array. The array is of length
3514:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_fir_interpolate_instance_q31;
3515:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3516:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3517:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the floating-point FIR interpolator.
3518:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3519:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
3520:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
3521:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint8_t L;                     /**< upsample factor. */
3522:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t phaseLength;          /**< length of each polyphase filter component. */
3523:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t *pCoeffs;            /**< points to the coefficient array. The array is of length L*p
3524:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t *pState;             /**< points to the state variable array. The array is of length 
3525:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_fir_interpolate_instance_f32;
3526:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3527:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3528:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3529:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Processing function for the Q15 FIR interpolator.
3530:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  S          points to an instance of the Q15 FIR interpolator structure.
3531:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
3532:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the block of output data.
3533:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of input samples to process per call.
3534:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3535:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_fir_interpolate_q15(
3536:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_fir_interpolate_instance_q15 * S,
3537:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrc,
3538:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pDst,
3539:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
3540:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3541:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3542:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3543:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Initialization function for the Q15 FIR interpolator.
3544:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in,out] S          points to an instance of the Q15 FIR interpolator structure.
3545:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     L          upsample factor.
3546:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     numTaps    number of filter coefficients in the filter.
3547:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pCoeffs    points to the filter coefficient buffer.
3548:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pState     points to the state buffer.
3549:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     blockSize  number of input samples to process per call.
3550:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return        The function returns ARM_MATH_SUCCESS if initialization is successful or ARM_MA
3551:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * the filter length <code>numTaps</code> is not a multiple of the interpolation factor <code>L</
3552:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3553:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_fir_interpolate_init_q15(
3554:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_fir_interpolate_instance_q15 * S,
3555:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint8_t L,
3556:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t numTaps,
3557:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pCoeffs,
3558:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pState,
3559:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
3560:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3561:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3562:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3563:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Processing function for the Q31 FIR interpolator.
3564:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  S          points to an instance of the Q15 FIR interpolator structure.
3565:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
3566:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the block of output data.
3567:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of input samples to process per call.
3568:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3569:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_fir_interpolate_q31(
3570:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_fir_interpolate_instance_q31 * S,
3571:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pSrc,
3572:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pDst,
3573:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
3574:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3575:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3576:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3577:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Initialization function for the Q31 FIR interpolator.
3578:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in,out] S          points to an instance of the Q31 FIR interpolator structure.
3579:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     L          upsample factor.
3580:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     numTaps    number of filter coefficients in the filter.
3581:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pCoeffs    points to the filter coefficient buffer.
3582:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pState     points to the state buffer.
3583:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     blockSize  number of input samples to process per call.
3584:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return        The function returns ARM_MATH_SUCCESS if initialization is successful or ARM_MA
3585:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * the filter length <code>numTaps</code> is not a multiple of the interpolation factor <code>L</
3586:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3587:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_fir_interpolate_init_q31(
3588:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_fir_interpolate_instance_q31 * S,
3589:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint8_t L,
3590:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t numTaps,
3591:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pCoeffs,
3592:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pState,
3593:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
3594:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3595:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3596:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3597:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Processing function for the floating-point FIR interpolator.
3598:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  S          points to an instance of the floating-point FIR interpolator structure.
3599:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
3600:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the block of output data.
3601:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of input samples to process per call.
3602:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3603:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_fir_interpolate_f32(
3604:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_fir_interpolate_instance_f32 * S,
3605:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pSrc,
3606:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pDst,
3607:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
3608:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3609:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3610:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3611:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Initialization function for the floating-point FIR interpolator.
3612:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in,out] S          points to an instance of the floating-point FIR interpolator structu
3613:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     L          upsample factor.
3614:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     numTaps    number of filter coefficients in the filter.
3615:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pCoeffs    points to the filter coefficient buffer.
3616:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pState     points to the state buffer.
3617:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     blockSize  number of input samples to process per call.
3618:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return        The function returns ARM_MATH_SUCCESS if initialization is successful or ARM_MA
3619:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * the filter length <code>numTaps</code> is not a multiple of the interpolation factor <code>L</
3620:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3621:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_fir_interpolate_init_f32(
3622:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_fir_interpolate_instance_f32 * S,
3623:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint8_t L,
3624:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t numTaps,
3625:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pCoeffs,
3626:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pState,
3627:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
3628:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3629:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3630:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3631:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the high precision Q31 Biquad cascade filter.
3632:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3633:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
3634:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
3635:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint8_t numStages;       /**< number of 2nd order stages in the filter.  Overall order is 2*num
3636:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q63_t *pState;           /**< points to the array of state coefficients.  The array is of lengt
3637:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t *pCoeffs;          /**< points to the array of coefficients.  The array is of length 5*nu
3638:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint8_t postShift;       /**< additional shift, in bits, applied to each output sample. */
3639:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_biquad_cas_df1_32x64_ins_q31;
3640:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3641:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3642:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3643:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  S          points to an instance of the high precision Q31 Biquad cascade filter s
3644:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
3645:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the block of output data
3646:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples to process.
3647:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3648:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_biquad_cas_df1_32x64_q31(
3649:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_biquad_cas_df1_32x64_ins_q31 * S,
3650:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pSrc,
3651:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pDst,
3652:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
3653:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3654:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3655:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3656:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in,out] S          points to an instance of the high precision Q31 Biquad cascade filte
3657:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     numStages  number of 2nd order stages in the filter.
3658:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pCoeffs    points to the filter coefficients.
3659:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pState     points to the state buffer.
3660:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     postShift  shift to be applied to the output. Varies according to the coefficie
3661:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3662:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_biquad_cas_df1_32x64_init_q31(
3663:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_biquad_cas_df1_32x64_ins_q31 * S,
3664:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint8_t numStages,
3665:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pCoeffs,
3666:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q63_t * pState,
3667:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint8_t postShift);
3668:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3669:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3670:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3671:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the floating-point transposed direct form II Biquad cascade filt
3672:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3673:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
3674:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
3675:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint8_t numStages;         /**< number of 2nd order stages in the filter.  Overall order is 2*n
3676:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t *pState;         /**< points to the array of state coefficients.  The array is of len
3677:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t *pCoeffs;        /**< points to the array of coefficients.  The array is of length 5*
3678:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_biquad_cascade_df2T_instance_f32;
3679:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3680:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3681:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the floating-point transposed direct form II Biquad cascade filt
3682:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3683:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
3684:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
3685:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint8_t numStages;         /**< number of 2nd order stages in the filter.  Overall order is 2*n
3686:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t *pState;         /**< points to the array of state coefficients.  The array is of len
3687:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t *pCoeffs;        /**< points to the array of coefficients.  The array is of length 5*
3688:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_biquad_cascade_stereo_df2T_instance_f32;
3689:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3690:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3691:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the floating-point transposed direct form II Biquad cascade filt
3692:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3693:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
3694:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
3695:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint8_t numStages;         /**< number of 2nd order stages in the filter.  Overall order is 2*n
3696:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float64_t *pState;         /**< points to the array of state coefficients.  The array is of len
3697:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float64_t *pCoeffs;        /**< points to the array of coefficients.  The array is of length 5*
3698:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_biquad_cascade_df2T_instance_f64;
3699:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3700:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3701:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3702:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Processing function for the floating-point transposed direct form II Biquad cascade fil
3703:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  S          points to an instance of the filter data structure.
3704:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
3705:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the block of output data
3706:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples to process.
3707:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3708:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_biquad_cascade_df2T_f32(
3709:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_biquad_cascade_df2T_instance_f32 * S,
3710:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pSrc,
3711:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pDst,
3712:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
3713:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3714:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3715:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3716:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Processing function for the floating-point transposed direct form II Biquad cascade fil
3717:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  S          points to an instance of the filter data structure.
3718:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
3719:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the block of output data
3720:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples to process.
3721:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3722:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_biquad_cascade_stereo_df2T_f32(
3723:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_biquad_cascade_stereo_df2T_instance_f32 * S,
3724:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pSrc,
3725:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pDst,
3726:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
3727:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3728:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3729:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3730:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Processing function for the floating-point transposed direct form II Biquad cascade fil
3731:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  S          points to an instance of the filter data structure.
3732:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
3733:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the block of output data
3734:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples to process.
3735:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3736:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_biquad_cascade_df2T_f64(
3737:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_biquad_cascade_df2T_instance_f64 * S,
3738:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float64_t * pSrc,
3739:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float64_t * pDst,
3740:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
3741:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3742:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3743:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3744:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Initialization function for the floating-point transposed direct form II Biquad cascad
3745:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in,out] S          points to an instance of the filter data structure.
3746:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     numStages  number of 2nd order stages in the filter.
3747:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pCoeffs    points to the filter coefficients.
3748:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pState     points to the state buffer.
3749:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3750:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_biquad_cascade_df2T_init_f32(
3751:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_biquad_cascade_df2T_instance_f32 * S,
3752:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint8_t numStages,
3753:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pCoeffs,
3754:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pState);
3755:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3756:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3757:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3758:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Initialization function for the floating-point transposed direct form II Biquad cascad
3759:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in,out] S          points to an instance of the filter data structure.
3760:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     numStages  number of 2nd order stages in the filter.
3761:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pCoeffs    points to the filter coefficients.
3762:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pState     points to the state buffer.
3763:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3764:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_biquad_cascade_stereo_df2T_init_f32(
3765:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_biquad_cascade_stereo_df2T_instance_f32 * S,
3766:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint8_t numStages,
3767:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pCoeffs,
3768:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pState);
3769:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3770:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3771:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3772:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Initialization function for the floating-point transposed direct form II Biquad cascad
3773:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in,out] S          points to an instance of the filter data structure.
3774:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     numStages  number of 2nd order stages in the filter.
3775:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pCoeffs    points to the filter coefficients.
3776:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pState     points to the state buffer.
3777:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3778:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_biquad_cascade_df2T_init_f64(
3779:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_biquad_cascade_df2T_instance_f64 * S,
3780:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint8_t numStages,
3781:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float64_t * pCoeffs,
3782:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float64_t * pState);
3783:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3784:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3785:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3786:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the Q15 FIR lattice filter.
3787:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3788:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
3789:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
3790:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t numStages;                  /**< number of filter stages. */
3791:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q15_t *pState;                       /**< points to the state variable array. The array is of l
3792:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q15_t *pCoeffs;                      /**< points to the coefficient array. The array is of leng
3793:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_fir_lattice_instance_q15;
3794:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3795:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3796:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the Q31 FIR lattice filter.
3797:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3798:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
3799:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
3800:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t numStages;                  /**< number of filter stages. */
3801:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t *pState;                       /**< points to the state variable array. The array is of l
3802:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t *pCoeffs;                      /**< points to the coefficient array. The array is of leng
3803:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_fir_lattice_instance_q31;
3804:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3805:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3806:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the floating-point FIR lattice filter.
3807:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3808:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
3809:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
3810:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t numStages;                  /**< number of filter stages. */
3811:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t *pState;                   /**< points to the state variable array. The array is of l
3812:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t *pCoeffs;                  /**< points to the coefficient array. The array is of leng
3813:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_fir_lattice_instance_f32;
3814:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3815:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3816:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3817:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Initialization function for the Q15 FIR lattice filter.
3818:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] S          points to an instance of the Q15 FIR lattice structure.
3819:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] numStages  number of filter stages.
3820:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] pCoeffs    points to the coefficient buffer.  The array is of length numStages.
3821:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] pState     points to the state buffer.  The array is of length numStages.
3822:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3823:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_fir_lattice_init_q15(
3824:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_fir_lattice_instance_q15 * S,
3825:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t numStages,
3826:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pCoeffs,
3827:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pState);
3828:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3829:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3830:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3831:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Processing function for the Q15 FIR lattice filter.
3832:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  S          points to an instance of the Q15 FIR lattice structure.
3833:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
3834:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the block of output data.
3835:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples to process.
3836:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3837:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_fir_lattice_q15(
3838:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_fir_lattice_instance_q15 * S,
3839:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrc,
3840:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pDst,
3841:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
3842:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3843:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3844:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3845:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Initialization function for the Q31 FIR lattice filter.
3846:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] S          points to an instance of the Q31 FIR lattice structure.
3847:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] numStages  number of filter stages.
3848:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] pCoeffs    points to the coefficient buffer.  The array is of length numStages.
3849:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] pState     points to the state buffer.   The array is of length numStages.
3850:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3851:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_fir_lattice_init_q31(
3852:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_fir_lattice_instance_q31 * S,
3853:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t numStages,
3854:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pCoeffs,
3855:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pState);
3856:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3857:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3858:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3859:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Processing function for the Q31 FIR lattice filter.
3860:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  S          points to an instance of the Q31 FIR lattice structure.
3861:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
3862:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the block of output data
3863:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples to process.
3864:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3865:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_fir_lattice_q31(
3866:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_fir_lattice_instance_q31 * S,
3867:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pSrc,
3868:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pDst,
3869:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
3870:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3871:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3872:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /**
3873:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * @brief Initialization function for the floating-point FIR lattice filter.
3874:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * @param[in] S          points to an instance of the floating-point FIR lattice structure.
3875:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * @param[in] numStages  number of filter stages.
3876:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * @param[in] pCoeffs    points to the coefficient buffer.  The array is of length numStages.
3877:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * @param[in] pState     points to the state buffer.  The array is of length numStages.
3878:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  */
3879:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_fir_lattice_init_f32(
3880:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_fir_lattice_instance_f32 * S,
3881:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t numStages,
3882:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pCoeffs,
3883:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pState);
3884:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3885:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3886:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3887:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Processing function for the floating-point FIR lattice filter.
3888:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  S          points to an instance of the floating-point FIR lattice structure.
3889:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
3890:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the block of output data
3891:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples to process.
3892:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3893:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_fir_lattice_f32(
3894:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_fir_lattice_instance_f32 * S,
3895:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pSrc,
3896:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pDst,
3897:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
3898:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3899:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3900:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3901:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the Q15 IIR lattice filter.
3902:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3903:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
3904:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
3905:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t numStages;                  /**< number of stages in the filter. */
3906:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q15_t *pState;                       /**< points to the state variable array. The array is of l
3907:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q15_t *pkCoeffs;                     /**< points to the reflection coefficient array. The array
3908:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q15_t *pvCoeffs;                     /**< points to the ladder coefficient array. The array is 
3909:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_iir_lattice_instance_q15;
3910:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3911:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3912:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the Q31 IIR lattice filter.
3913:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3914:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
3915:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
3916:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t numStages;                  /**< number of stages in the filter. */
3917:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t *pState;                       /**< points to the state variable array. The array is of l
3918:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t *pkCoeffs;                     /**< points to the reflection coefficient array. The array
3919:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t *pvCoeffs;                     /**< points to the ladder coefficient array. The array is 
3920:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_iir_lattice_instance_q31;
3921:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3922:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3923:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the floating-point IIR lattice filter.
3924:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3925:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
3926:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
3927:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t numStages;                  /**< number of stages in the filter. */
3928:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t *pState;                   /**< points to the state variable array. The array is of l
3929:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t *pkCoeffs;                 /**< points to the reflection coefficient array. The array
3930:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t *pvCoeffs;                 /**< points to the ladder coefficient array. The array is 
3931:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_iir_lattice_instance_f32;
3932:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3933:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3934:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3935:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Processing function for the floating-point IIR lattice filter.
3936:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  S          points to an instance of the floating-point IIR lattice structure.
3937:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
3938:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the block of output data.
3939:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples to process.
3940:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3941:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_iir_lattice_f32(
3942:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_iir_lattice_instance_f32 * S,
3943:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pSrc,
3944:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pDst,
3945:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
3946:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3947:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3948:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3949:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Initialization function for the floating-point IIR lattice filter.
3950:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] S          points to an instance of the floating-point IIR lattice structure.
3951:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] numStages  number of stages in the filter.
3952:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] pkCoeffs   points to the reflection coefficient buffer.  The array is of length num
3953:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] pvCoeffs   points to the ladder coefficient buffer.  The array is of length numStag
3954:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] pState     points to the state buffer.  The array is of length numStages+blockSize-
3955:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] blockSize  number of samples to process.
3956:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3957:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_iir_lattice_init_f32(
3958:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_iir_lattice_instance_f32 * S,
3959:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t numStages,
3960:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pkCoeffs,
3961:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pvCoeffs,
3962:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pState,
3963:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
3964:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3965:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3966:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3967:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Processing function for the Q31 IIR lattice filter.
3968:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  S          points to an instance of the Q31 IIR lattice structure.
3969:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
3970:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the block of output data.
3971:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples to process.
3972:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3973:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_iir_lattice_q31(
3974:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_iir_lattice_instance_q31 * S,
3975:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pSrc,
3976:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pDst,
3977:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
3978:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3979:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3980:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3981:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Initialization function for the Q31 IIR lattice filter.
3982:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] S          points to an instance of the Q31 IIR lattice structure.
3983:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] numStages  number of stages in the filter.
3984:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] pkCoeffs   points to the reflection coefficient buffer.  The array is of length num
3985:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] pvCoeffs   points to the ladder coefficient buffer.  The array is of length numStag
3986:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] pState     points to the state buffer.  The array is of length numStages+blockSize.
3987:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] blockSize  number of samples to process.
3988:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
3989:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_iir_lattice_init_q31(
3990:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_iir_lattice_instance_q31 * S,
3991:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t numStages,
3992:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pkCoeffs,
3993:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pvCoeffs,
3994:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pState,
3995:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
3996:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3997:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
3998:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
3999:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Processing function for the Q15 IIR lattice filter.
4000:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  S          points to an instance of the Q15 IIR lattice structure.
4001:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
4002:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the block of output data.
4003:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples to process.
4004:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4005:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_iir_lattice_q15(
4006:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_iir_lattice_instance_q15 * S,
4007:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrc,
4008:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pDst,
4009:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
4010:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4011:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4012:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /**
4013:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * @brief Initialization function for the Q15 IIR lattice filter.
4014:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * @param[in] S          points to an instance of the fixed-point Q15 IIR lattice structure.
4015:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * @param[in] numStages  number of stages in the filter.
4016:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * @param[in] pkCoeffs   points to reflection coefficient buffer.  The array is of length numStages
4017:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * @param[in] pvCoeffs   points to ladder coefficient buffer.  The array is of length numStages+1.
4018:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * @param[in] pState     points to state buffer.  The array is of length numStages+blockSize.
4019:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * @param[in] blockSize  number of samples to process per call.
4020:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  */
4021:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_iir_lattice_init_q15(
4022:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_iir_lattice_instance_q15 * S,
4023:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t numStages,
4024:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pkCoeffs,
4025:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pvCoeffs,
4026:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pState,
4027:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
4028:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4029:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4030:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4031:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the floating-point LMS filter.
4032:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4033:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
4034:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
4035:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t numTaps;    /**< number of coefficients in the filter. */
4036:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t *pState;   /**< points to the state variable array. The array is of length numTaps+bl
4037:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t *pCoeffs;  /**< points to the coefficient array. The array is of length numTaps. */
4038:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t mu;        /**< step size that controls filter coefficient updates. */
4039:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_lms_instance_f32;
4040:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4041:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4042:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4043:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Processing function for floating-point LMS filter.
4044:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  S          points to an instance of the floating-point LMS filter structure.
4045:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
4046:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pRef       points to the block of reference data.
4047:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pOut       points to the block of output data.
4048:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pErr       points to the block of error data.
4049:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples to process.
4050:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4051:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_lms_f32(
4052:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_lms_instance_f32 * S,
4053:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pSrc,
4054:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pRef,
4055:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pOut,
4056:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pErr,
4057:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
4058:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4059:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4060:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4061:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Initialization function for floating-point LMS filter.
4062:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] S          points to an instance of the floating-point LMS filter structure.
4063:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] numTaps    number of filter coefficients.
4064:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] pCoeffs    points to the coefficient buffer.
4065:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] pState     points to state buffer.
4066:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] mu         step size that controls filter coefficient updates.
4067:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] blockSize  number of samples to process.
4068:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4069:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_lms_init_f32(
4070:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_lms_instance_f32 * S,
4071:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t numTaps,
4072:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pCoeffs,
4073:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pState,
4074:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t mu,
4075:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
4076:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4077:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4078:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4079:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the Q15 LMS filter.
4080:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4081:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
4082:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
4083:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t numTaps;    /**< number of coefficients in the filter. */
4084:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q15_t *pState;       /**< points to the state variable array. The array is of length numTaps+bl
4085:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q15_t *pCoeffs;      /**< points to the coefficient array. The array is of length numTaps. */
4086:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q15_t mu;            /**< step size that controls filter coefficient updates. */
4087:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint32_t postShift;  /**< bit shift applied to coefficients. */
4088:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_lms_instance_q15;
4089:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4090:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4091:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4092:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Initialization function for the Q15 LMS filter.
4093:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] S          points to an instance of the Q15 LMS filter structure.
4094:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] numTaps    number of filter coefficients.
4095:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] pCoeffs    points to the coefficient buffer.
4096:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] pState     points to the state buffer.
4097:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] mu         step size that controls filter coefficient updates.
4098:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] blockSize  number of samples to process.
4099:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] postShift  bit shift applied to coefficients.
4100:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4101:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_lms_init_q15(
4102:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_lms_instance_q15 * S,
4103:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t numTaps,
4104:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pCoeffs,
4105:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pState,
4106:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t mu,
4107:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize,
4108:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t postShift);
4109:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4110:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4111:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4112:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Processing function for Q15 LMS filter.
4113:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  S          points to an instance of the Q15 LMS filter structure.
4114:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
4115:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pRef       points to the block of reference data.
4116:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pOut       points to the block of output data.
4117:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pErr       points to the block of error data.
4118:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples to process.
4119:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4120:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_lms_q15(
4121:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_lms_instance_q15 * S,
4122:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrc,
4123:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pRef,
4124:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pOut,
4125:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pErr,
4126:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
4127:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4128:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4129:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4130:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the Q31 LMS filter.
4131:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4132:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
4133:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
4134:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t numTaps;    /**< number of coefficients in the filter. */
4135:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t *pState;       /**< points to the state variable array. The array is of length numTaps+bl
4136:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t *pCoeffs;      /**< points to the coefficient array. The array is of length numTaps. */
4137:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t mu;            /**< step size that controls filter coefficient updates. */
4138:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint32_t postShift;  /**< bit shift applied to coefficients. */
4139:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_lms_instance_q31;
4140:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4141:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4142:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4143:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Processing function for Q31 LMS filter.
4144:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  S          points to an instance of the Q15 LMS filter structure.
4145:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
4146:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pRef       points to the block of reference data.
4147:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pOut       points to the block of output data.
4148:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pErr       points to the block of error data.
4149:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples to process.
4150:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4151:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_lms_q31(
4152:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_lms_instance_q31 * S,
4153:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pSrc,
4154:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pRef,
4155:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pOut,
4156:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pErr,
4157:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
4158:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4159:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4160:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4161:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Initialization function for Q31 LMS filter.
4162:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] S          points to an instance of the Q31 LMS filter structure.
4163:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] numTaps    number of filter coefficients.
4164:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] pCoeffs    points to coefficient buffer.
4165:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] pState     points to state buffer.
4166:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] mu         step size that controls filter coefficient updates.
4167:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] blockSize  number of samples to process.
4168:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] postShift  bit shift applied to coefficients.
4169:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4170:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_lms_init_q31(
4171:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_lms_instance_q31 * S,
4172:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t numTaps,
4173:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pCoeffs,
4174:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pState,
4175:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t mu,
4176:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize,
4177:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t postShift);
4178:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4179:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4180:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4181:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the floating-point normalized LMS filter.
4182:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4183:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
4184:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
4185:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t numTaps;     /**< number of coefficients in the filter. */
4186:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t *pState;    /**< points to the state variable array. The array is of length numTaps+b
4187:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t *pCoeffs;   /**< points to the coefficient array. The array is of length numTaps. */
4188:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t mu;         /**< step size that control filter coefficient updates. */
4189:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t energy;     /**< saves previous frame energy. */
4190:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t x0;         /**< saves previous input sample. */
4191:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_lms_norm_instance_f32;
4192:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4193:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4194:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4195:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Processing function for floating-point normalized LMS filter.
4196:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  S          points to an instance of the floating-point normalized LMS filter struc
4197:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
4198:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pRef       points to the block of reference data.
4199:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pOut       points to the block of output data.
4200:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pErr       points to the block of error data.
4201:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples to process.
4202:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4203:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_lms_norm_f32(
4204:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_lms_norm_instance_f32 * S,
4205:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pSrc,
4206:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pRef,
4207:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pOut,
4208:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pErr,
4209:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
4210:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4211:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4212:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4213:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Initialization function for floating-point normalized LMS filter.
4214:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] S          points to an instance of the floating-point LMS filter structure.
4215:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] numTaps    number of filter coefficients.
4216:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] pCoeffs    points to coefficient buffer.
4217:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] pState     points to state buffer.
4218:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] mu         step size that controls filter coefficient updates.
4219:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] blockSize  number of samples to process.
4220:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4221:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_lms_norm_init_f32(
4222:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_lms_norm_instance_f32 * S,
4223:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t numTaps,
4224:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pCoeffs,
4225:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pState,
4226:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t mu,
4227:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
4228:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4229:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4230:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4231:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the Q31 normalized LMS filter.
4232:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4233:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
4234:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
4235:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t numTaps;     /**< number of coefficients in the filter. */
4236:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t *pState;        /**< points to the state variable array. The array is of length numTaps+b
4237:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t *pCoeffs;       /**< points to the coefficient array. The array is of length numTaps. */
4238:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t mu;             /**< step size that controls filter coefficient updates. */
4239:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint8_t postShift;    /**< bit shift applied to coefficients. */
4240:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t *recipTable;    /**< points to the reciprocal initial value table. */
4241:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t energy;         /**< saves previous frame energy. */
4242:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t x0;             /**< saves previous input sample. */
4243:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_lms_norm_instance_q31;
4244:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4245:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4246:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4247:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Processing function for Q31 normalized LMS filter.
4248:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  S          points to an instance of the Q31 normalized LMS filter structure.
4249:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
4250:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pRef       points to the block of reference data.
4251:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pOut       points to the block of output data.
4252:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pErr       points to the block of error data.
4253:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples to process.
4254:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4255:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_lms_norm_q31(
4256:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_lms_norm_instance_q31 * S,
4257:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pSrc,
4258:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pRef,
4259:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pOut,
4260:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pErr,
4261:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
4262:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4263:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4264:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4265:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Initialization function for Q31 normalized LMS filter.
4266:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] S          points to an instance of the Q31 normalized LMS filter structure.
4267:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] numTaps    number of filter coefficients.
4268:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] pCoeffs    points to coefficient buffer.
4269:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] pState     points to state buffer.
4270:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] mu         step size that controls filter coefficient updates.
4271:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] blockSize  number of samples to process.
4272:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] postShift  bit shift applied to coefficients.
4273:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4274:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_lms_norm_init_q31(
4275:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_lms_norm_instance_q31 * S,
4276:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t numTaps,
4277:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pCoeffs,
4278:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pState,
4279:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t mu,
4280:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize,
4281:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint8_t postShift);
4282:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4283:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4284:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4285:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the Q15 normalized LMS filter.
4286:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4287:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
4288:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
4289:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t numTaps;     /**< Number of coefficients in the filter. */
4290:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q15_t *pState;        /**< points to the state variable array. The array is of length numTaps+b
4291:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q15_t *pCoeffs;       /**< points to the coefficient array. The array is of length numTaps. */
4292:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q15_t mu;             /**< step size that controls filter coefficient updates. */
4293:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint8_t postShift;    /**< bit shift applied to coefficients. */
4294:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q15_t *recipTable;    /**< Points to the reciprocal initial value table. */
4295:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q15_t energy;         /**< saves previous frame energy. */
4296:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q15_t x0;             /**< saves previous input sample. */
4297:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_lms_norm_instance_q15;
4298:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4299:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4300:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4301:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Processing function for Q15 normalized LMS filter.
4302:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  S          points to an instance of the Q15 normalized LMS filter structure.
4303:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
4304:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pRef       points to the block of reference data.
4305:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pOut       points to the block of output data.
4306:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pErr       points to the block of error data.
4307:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples to process.
4308:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4309:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_lms_norm_q15(
4310:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_lms_norm_instance_q15 * S,
4311:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrc,
4312:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pRef,
4313:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pOut,
4314:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pErr,
4315:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
4316:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4317:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4318:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4319:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Initialization function for Q15 normalized LMS filter.
4320:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] S          points to an instance of the Q15 normalized LMS filter structure.
4321:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] numTaps    number of filter coefficients.
4322:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] pCoeffs    points to coefficient buffer.
4323:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] pState     points to state buffer.
4324:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] mu         step size that controls filter coefficient updates.
4325:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] blockSize  number of samples to process.
4326:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] postShift  bit shift applied to coefficients.
4327:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4328:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_lms_norm_init_q15(
4329:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_lms_norm_instance_q15 * S,
4330:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t numTaps,
4331:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pCoeffs,
4332:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pState,
4333:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t mu,
4334:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize,
4335:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint8_t postShift);
4336:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4337:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4338:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4339:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Correlation of floating-point sequences.
4340:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA    points to the first input sequence.
4341:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcALen  length of the first input sequence.
4342:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB    points to the second input sequence.
4343:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcBLen  length of the second input sequence.
4344:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst     points to the block of output data  Length 2 * max(srcALen, srcBLen) - 1.
4345:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4346:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_correlate_f32(
4347:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pSrcA,
4348:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcALen,
4349:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pSrcB,
4350:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcBLen,
4351:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pDst);
4352:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4353:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4354:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    /**
4355:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Correlation of Q15 sequences
4356:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA     points to the first input sequence.
4357:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcALen   length of the first input sequence.
4358:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB     points to the second input sequence.
4359:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcBLen   length of the second input sequence.
4360:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst      points to the block of output data  Length 2 * max(srcALen, srcBLen) - 1
4361:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pScratch  points to scratch buffer of size max(srcALen, srcBLen) + 2*min(srcALen, 
4362:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4363:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_correlate_opt_q15(
4364:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrcA,
4365:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcALen,
4366:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrcB,
4367:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcBLen,
4368:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pDst,
4369:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pScratch);
4370:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4371:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4372:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4373:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Correlation of Q15 sequences.
4374:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA    points to the first input sequence.
4375:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcALen  length of the first input sequence.
4376:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB    points to the second input sequence.
4377:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcBLen  length of the second input sequence.
4378:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst     points to the block of output data  Length 2 * max(srcALen, srcBLen) - 1.
4379:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4380:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4381:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_correlate_q15(
4382:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrcA,
4383:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcALen,
4384:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrcB,
4385:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcBLen,
4386:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pDst);
4387:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4388:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4389:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4390:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Correlation of Q15 sequences (fast version) for Cortex-M3 and Cortex-M4.
4391:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA    points to the first input sequence.
4392:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcALen  length of the first input sequence.
4393:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB    points to the second input sequence.
4394:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcBLen  length of the second input sequence.
4395:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst     points to the block of output data  Length 2 * max(srcALen, srcBLen) - 1.
4396:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4397:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4398:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_correlate_fast_q15(
4399:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrcA,
4400:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcALen,
4401:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrcB,
4402:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcBLen,
4403:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pDst);
4404:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4405:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4406:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4407:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Correlation of Q15 sequences (fast version) for Cortex-M3 and Cortex-M4.
4408:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA     points to the first input sequence.
4409:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcALen   length of the first input sequence.
4410:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB     points to the second input sequence.
4411:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcBLen   length of the second input sequence.
4412:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst      points to the block of output data  Length 2 * max(srcALen, srcBLen) - 1
4413:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pScratch  points to scratch buffer of size max(srcALen, srcBLen) + 2*min(srcALen, 
4414:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4415:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_correlate_fast_opt_q15(
4416:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrcA,
4417:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcALen,
4418:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrcB,
4419:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcBLen,
4420:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pDst,
4421:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pScratch);
4422:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4423:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4424:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4425:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Correlation of Q31 sequences.
4426:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA    points to the first input sequence.
4427:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcALen  length of the first input sequence.
4428:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB    points to the second input sequence.
4429:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcBLen  length of the second input sequence.
4430:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst     points to the block of output data  Length 2 * max(srcALen, srcBLen) - 1.
4431:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4432:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_correlate_q31(
4433:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pSrcA,
4434:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcALen,
4435:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pSrcB,
4436:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcBLen,
4437:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pDst);
4438:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4439:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4440:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4441:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Correlation of Q31 sequences (fast version) for Cortex-M3 and Cortex-M4
4442:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA    points to the first input sequence.
4443:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcALen  length of the first input sequence.
4444:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB    points to the second input sequence.
4445:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcBLen  length of the second input sequence.
4446:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst     points to the block of output data  Length 2 * max(srcALen, srcBLen) - 1.
4447:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4448:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_correlate_fast_q31(
4449:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pSrcA,
4450:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcALen,
4451:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pSrcB,
4452:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcBLen,
4453:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pDst);
4454:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4455:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4456:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  /**
4457:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Correlation of Q7 sequences.
4458:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA      points to the first input sequence.
4459:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcALen    length of the first input sequence.
4460:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB      points to the second input sequence.
4461:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcBLen    length of the second input sequence.
4462:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       points to the block of output data  Length 2 * max(srcALen, srcBLen) - 
4463:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pScratch1  points to scratch buffer(of type q15_t) of size max(srcALen, srcBLen) +
4464:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pScratch2  points to scratch buffer (of type q15_t) of size min(srcALen, srcBLen).
4465:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4466:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_correlate_opt_q7(
4467:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pSrcA,
4468:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcALen,
4469:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pSrcB,
4470:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcBLen,
4471:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pDst,
4472:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pScratch1,
4473:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pScratch2);
4474:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4475:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4476:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4477:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Correlation of Q7 sequences.
4478:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcA    points to the first input sequence.
4479:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcALen  length of the first input sequence.
4480:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrcB    points to the second input sequence.
4481:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  srcBLen  length of the second input sequence.
4482:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst     points to the block of output data  Length 2 * max(srcALen, srcBLen) - 1.
4483:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4484:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_correlate_q7(
4485:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pSrcA,
4486:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcALen,
4487:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pSrcB,
4488:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t srcBLen,
4489:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pDst);
4490:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4491:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4492:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4493:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the floating-point sparse FIR filter.
4494:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4495:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
4496:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
4497:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t numTaps;             /**< number of coefficients in the filter. */
4498:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t stateIndex;          /**< state buffer index.  Points to the oldest sample in the stat
4499:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t *pState;            /**< points to the state buffer array. The array is of length max
4500:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t *pCoeffs;           /**< points to the coefficient array. The array is of length numT
4501:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t maxDelay;            /**< maximum offset specified by the pTapDelay array. */
4502:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     int32_t *pTapDelay;           /**< points to the array of delay values.  The array is of length
4503:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_fir_sparse_instance_f32;
4504:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4505:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4506:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the Q31 sparse FIR filter.
4507:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4508:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
4509:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
4510:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t numTaps;             /**< number of coefficients in the filter. */
4511:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t stateIndex;          /**< state buffer index.  Points to the oldest sample in the stat
4512:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t *pState;                /**< points to the state buffer array. The array is of length max
4513:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t *pCoeffs;               /**< points to the coefficient array. The array is of length numT
4514:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t maxDelay;            /**< maximum offset specified by the pTapDelay array. */
4515:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     int32_t *pTapDelay;           /**< points to the array of delay values.  The array is of length
4516:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_fir_sparse_instance_q31;
4517:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4518:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4519:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the Q15 sparse FIR filter.
4520:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4521:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
4522:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
4523:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t numTaps;             /**< number of coefficients in the filter. */
4524:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t stateIndex;          /**< state buffer index.  Points to the oldest sample in the stat
4525:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q15_t *pState;                /**< points to the state buffer array. The array is of length max
4526:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q15_t *pCoeffs;               /**< points to the coefficient array. The array is of length numT
4527:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t maxDelay;            /**< maximum offset specified by the pTapDelay array. */
4528:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     int32_t *pTapDelay;           /**< points to the array of delay values.  The array is of length
4529:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_fir_sparse_instance_q15;
4530:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4531:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4532:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Instance structure for the Q7 sparse FIR filter.
4533:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4534:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef struct
4535:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
4536:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t numTaps;             /**< number of coefficients in the filter. */
4537:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t stateIndex;          /**< state buffer index.  Points to the oldest sample in the stat
4538:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q7_t *pState;                 /**< points to the state buffer array. The array is of length max
4539:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q7_t *pCoeffs;                /**< points to the coefficient array. The array is of length numT
4540:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint16_t maxDelay;            /**< maximum offset specified by the pTapDelay array. */
4541:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     int32_t *pTapDelay;           /**< points to the array of delay values.  The array is of length
4542:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_fir_sparse_instance_q7;
4543:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4544:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4545:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4546:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Processing function for the floating-point sparse FIR filter.
4547:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  S           points to an instance of the floating-point sparse FIR structure.
4548:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc        points to the block of input data.
4549:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst        points to the block of output data
4550:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pScratchIn  points to a temporary buffer of size blockSize.
4551:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize   number of input samples to process per call.
4552:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4553:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_fir_sparse_f32(
4554:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_fir_sparse_instance_f32 * S,
4555:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pSrc,
4556:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pDst,
4557:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pScratchIn,
4558:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
4559:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4560:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4561:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4562:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Initialization function for the floating-point sparse FIR filter.
4563:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in,out] S          points to an instance of the floating-point sparse FIR structure.
4564:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     numTaps    number of nonzero coefficients in the filter.
4565:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pCoeffs    points to the array of filter coefficients.
4566:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pState     points to the state buffer.
4567:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pTapDelay  points to the array of offset times.
4568:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     maxDelay   maximum offset time supported.
4569:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     blockSize  number of samples that will be processed per block.
4570:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4571:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_fir_sparse_init_f32(
4572:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_fir_sparse_instance_f32 * S,
4573:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t numTaps,
4574:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pCoeffs,
4575:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pState,
4576:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   int32_t * pTapDelay,
4577:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t maxDelay,
4578:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
4579:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4580:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4581:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4582:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Processing function for the Q31 sparse FIR filter.
4583:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  S           points to an instance of the Q31 sparse FIR structure.
4584:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc        points to the block of input data.
4585:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst        points to the block of output data
4586:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pScratchIn  points to a temporary buffer of size blockSize.
4587:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize   number of input samples to process per call.
4588:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4589:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_fir_sparse_q31(
4590:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_fir_sparse_instance_q31 * S,
4591:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pSrc,
4592:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pDst,
4593:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pScratchIn,
4594:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
4595:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4596:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4597:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4598:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Initialization function for the Q31 sparse FIR filter.
4599:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in,out] S          points to an instance of the Q31 sparse FIR structure.
4600:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     numTaps    number of nonzero coefficients in the filter.
4601:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pCoeffs    points to the array of filter coefficients.
4602:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pState     points to the state buffer.
4603:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pTapDelay  points to the array of offset times.
4604:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     maxDelay   maximum offset time supported.
4605:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     blockSize  number of samples that will be processed per block.
4606:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4607:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_fir_sparse_init_q31(
4608:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_fir_sparse_instance_q31 * S,
4609:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t numTaps,
4610:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pCoeffs,
4611:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pState,
4612:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   int32_t * pTapDelay,
4613:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t maxDelay,
4614:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
4615:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4616:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4617:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4618:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Processing function for the Q15 sparse FIR filter.
4619:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  S            points to an instance of the Q15 sparse FIR structure.
4620:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc         points to the block of input data.
4621:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst         points to the block of output data
4622:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pScratchIn   points to a temporary buffer of size blockSize.
4623:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pScratchOut  points to a temporary buffer of size blockSize.
4624:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize    number of input samples to process per call.
4625:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4626:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_fir_sparse_q15(
4627:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_fir_sparse_instance_q15 * S,
4628:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrc,
4629:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pDst,
4630:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pScratchIn,
4631:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pScratchOut,
4632:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
4633:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4634:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4635:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4636:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Initialization function for the Q15 sparse FIR filter.
4637:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in,out] S          points to an instance of the Q15 sparse FIR structure.
4638:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     numTaps    number of nonzero coefficients in the filter.
4639:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pCoeffs    points to the array of filter coefficients.
4640:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pState     points to the state buffer.
4641:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pTapDelay  points to the array of offset times.
4642:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     maxDelay   maximum offset time supported.
4643:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     blockSize  number of samples that will be processed per block.
4644:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4645:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_fir_sparse_init_q15(
4646:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_fir_sparse_instance_q15 * S,
4647:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t numTaps,
4648:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pCoeffs,
4649:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pState,
4650:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   int32_t * pTapDelay,
4651:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t maxDelay,
4652:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
4653:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4654:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4655:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4656:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Processing function for the Q7 sparse FIR filter.
4657:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  S            points to an instance of the Q7 sparse FIR structure.
4658:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc         points to the block of input data.
4659:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst         points to the block of output data
4660:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pScratchIn   points to a temporary buffer of size blockSize.
4661:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pScratchOut  points to a temporary buffer of size blockSize.
4662:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize    number of input samples to process per call.
4663:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4664:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_fir_sparse_q7(
4665:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_fir_sparse_instance_q7 * S,
4666:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pSrc,
4667:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pDst,
4668:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pScratchIn,
4669:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pScratchOut,
4670:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
4671:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4672:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4673:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4674:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Initialization function for the Q7 sparse FIR filter.
4675:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in,out] S          points to an instance of the Q7 sparse FIR structure.
4676:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     numTaps    number of nonzero coefficients in the filter.
4677:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pCoeffs    points to the array of filter coefficients.
4678:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pState     points to the state buffer.
4679:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     pTapDelay  points to the array of offset times.
4680:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     maxDelay   maximum offset time supported.
4681:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     blockSize  number of samples that will be processed per block.
4682:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4683:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_fir_sparse_init_q7(
4684:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_fir_sparse_instance_q7 * S,
4685:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t numTaps,
4686:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pCoeffs,
4687:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pState,
4688:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   int32_t * pTapDelay,
4689:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint16_t maxDelay,
4690:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
4691:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4692:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4693:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4694:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Floating-point sin_cos function.
4695:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  theta   input value in degrees
4696:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pSinVal  points to the processed sine output.
4697:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pCosVal  points to the processed cos output.
4698:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4699:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_sin_cos_f32(
4700:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t theta,
4701:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pSinVal,
4702:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pCosVal);
4703:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4704:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4705:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4706:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Q31 sin_cos function.
4707:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  theta    scaled input value in degrees
4708:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pSinVal  points to the processed sine output.
4709:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pCosVal  points to the processed cosine output.
4710:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4711:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_sin_cos_q31(
4712:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t theta,
4713:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pSinVal,
4714:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pCosVal);
4715:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4716:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4717:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4718:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Floating-point complex conjugate.
4719:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc        points to the input vector
4720:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst        points to the output vector
4721:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  numSamples  number of complex samples in each vector
4722:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4723:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_cmplx_conj_f32(
4724:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pSrc,
4725:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pDst,
4726:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t numSamples);
4727:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4728:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4729:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Q31 complex conjugate.
4730:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc        points to the input vector
4731:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst        points to the output vector
4732:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  numSamples  number of complex samples in each vector
4733:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4734:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_cmplx_conj_q31(
4735:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pSrc,
4736:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pDst,
4737:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t numSamples);
4738:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4739:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4740:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4741:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Q15 complex conjugate.
4742:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc        points to the input vector
4743:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst        points to the output vector
4744:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  numSamples  number of complex samples in each vector
4745:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4746:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_cmplx_conj_q15(
4747:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrc,
4748:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pDst,
4749:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t numSamples);
4750:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4751:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4752:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4753:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Floating-point complex magnitude squared
4754:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc        points to the complex input vector
4755:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst        points to the real output vector
4756:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  numSamples  number of complex samples in the input vector
4757:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4758:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_cmplx_mag_squared_f32(
4759:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pSrc,
4760:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pDst,
4761:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t numSamples);
4762:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4763:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4764:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4765:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Q31 complex magnitude squared
4766:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc        points to the complex input vector
4767:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst        points to the real output vector
4768:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  numSamples  number of complex samples in the input vector
4769:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4770:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_cmplx_mag_squared_q31(
4771:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pSrc,
4772:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pDst,
4773:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t numSamples);
4774:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4775:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4776:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4777:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Q15 complex magnitude squared
4778:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc        points to the complex input vector
4779:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst        points to the real output vector
4780:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  numSamples  number of complex samples in the input vector
4781:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4782:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_cmplx_mag_squared_q15(
4783:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pSrc,
4784:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pDst,
4785:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t numSamples);
4786:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4787:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4788:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  /**
4789:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @ingroup groupController
4790:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4791:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4792:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4793:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @defgroup PID PID Motor Control
4794:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
4795:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * A Proportional Integral Derivative (PID) controller is a generic feedback control
4796:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * loop mechanism widely used in industrial control systems.
4797:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * A PID controller is the most commonly used type of feedback controller.
4798:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
4799:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * This set of functions implements (PID) controllers
4800:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * for Q15, Q31, and floating-point data types.  The functions operate on a single sample
4801:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * of data and each call to the function returns a single processed value.
4802:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * <code>S</code> points to an instance of the PID control data structure.  <code>in</code>
4803:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * is the input sample value. The functions return the output value.
4804:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
4805:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * \par Algorithm:
4806:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * <pre>
4807:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *    y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]
4808:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *    A0 = Kp + Ki + Kd
4809:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *    A1 = (-Kp ) - (2 * Kd )
4810:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *    A2 = Kd  </pre>
4811:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
4812:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * \par
4813:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * where \c Kp is proportional constant, \c Ki is Integral constant and \c Kd is Derivative const
4814:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
4815:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * \par
4816:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * \image html PID.gif "Proportional Integral Derivative Controller"
4817:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
4818:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * \par
4819:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The PID controller calculates an "error" value as the difference between
4820:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * the measured output and the reference input.
4821:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The controller attempts to minimize the error by adjusting the process control inputs.
4822:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The proportional value determines the reaction to the current error,
4823:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * the integral value determines the reaction based on the sum of recent errors,
4824:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * and the derivative value determines the reaction based on the rate at which the error has been
4825:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
4826:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * \par Instance Structure
4827:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The Gains A0, A1, A2 and state variables for a PID controller are stored together in an instan
4828:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * A separate instance structure must be defined for each PID Controller.
4829:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * There are separate instance structure declarations for each of the 3 supported data types.
4830:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
4831:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * \par Reset Functions
4832:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * There is also an associated reset function for each data type which clears the state array.
4833:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
4834:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * \par Initialization Functions
4835:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * There is also an associated initialization function for each data type.
4836:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The initialization function performs the following operations:
4837:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - Initializes the Gains A0, A1, A2 from Kp,Ki, Kd gains.
4838:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - Zeros out the values in the state buffer.
4839:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
4840:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * \par
4841:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Instance structure cannot be placed into a const data section and it is recommended to use the
4842:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
4843:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * \par Fixed-Point Behavior
4844:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Care must be taken when using the fixed-point versions of the PID Controller functions.
4845:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * In particular, the overflow and saturation behavior of the accumulator used in each function m
4846:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Refer to the function specific documentation below for usage guidelines.
4847:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4848:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4849:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4850:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @addtogroup PID
4851:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @{
4852:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4853:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4854:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4855:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Process function for the floating-point PID Control.
4856:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in,out] S   is an instance of the floating-point PID Control structure
4857:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     in  input sample to process
4858:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return out processed output sample.
4859:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4860:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE float32_t arm_pid_f32(
4861:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_pid_instance_f32 * S,
4862:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t in)
4863:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
4864:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t out;
4865:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4866:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
4867:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     out = (S->A0 * in) +
4868:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
4869:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4870:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* Update state */
4871:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     S->state[1] = S->state[0];
4872:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     S->state[0] = in;
4873:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     S->state[2] = out;
4874:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4875:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* return to application */
4876:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     return (out);
4877:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4878:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
4879:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4880:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4881:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Process function for the Q31 PID Control.
4882:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in,out] S  points to an instance of the Q31 PID Control structure
4883:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     in  input sample to process
4884:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return out processed output sample.
4885:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
4886:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * <b>Scaling and Overflow Behavior:</b>
4887:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * \par
4888:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The function is implemented using an internal 64-bit accumulator.
4889:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The accumulator has a 2.62 format and maintains full precision of the intermediate multiplicat
4890:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Thus, if the accumulator result overflows it wraps around rather than clip.
4891:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * In order to avoid overflows completely the input signal must be scaled down by 2 bits as there
4892:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * After all multiply-accumulates are performed, the 2.62 accumulator is truncated to 1.32 format
4893:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4894:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t arm_pid_q31(
4895:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_pid_instance_q31 * S,
4896:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t in)
4897:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
4898:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q63_t acc;
4899:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t out;
4900:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4901:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* acc = A0 * x[n]  */
4902:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     acc = (q63_t) S->A0 * in;
4903:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4904:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* acc += A1 * x[n-1] */
4905:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     acc += (q63_t) S->A1 * S->state[0];
4906:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4907:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* acc += A2 * x[n-2]  */
4908:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     acc += (q63_t) S->A2 * S->state[1];
4909:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4910:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* convert output to 1.31 format to add y[n-1] */
4911:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     out = (q31_t) (acc >> 31u);
4912:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4913:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* out += y[n-1] */
4914:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     out += S->state[2];
4915:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4916:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* Update state */
4917:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     S->state[1] = S->state[0];
4918:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     S->state[0] = in;
4919:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     S->state[2] = out;
4920:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4921:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* return to application */
4922:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     return (out);
4923:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
4924:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4925:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4926:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4927:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Process function for the Q15 PID Control.
4928:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in,out] S   points to an instance of the Q15 PID Control structure
4929:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     in  input sample to process
4930:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return out processed output sample.
4931:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
4932:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * <b>Scaling and Overflow Behavior:</b>
4933:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * \par
4934:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The function is implemented using a 64-bit internal accumulator.
4935:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Both Gains and state variables are represented in 1.15 format and multiplications yield a 2.30
4936:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The 2.30 intermediate results are accumulated in a 64-bit accumulator in 34.30 format.
4937:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * There is no risk of internal overflow with this approach and the full precision of intermediat
4938:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * After all additions have been performed, the accumulator is truncated to 34.15 format by disca
4939:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Lastly, the accumulator is saturated to yield a result in 1.15 format.
4940:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4941:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t arm_pid_q15(
4942:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_pid_instance_q15 * S,
4943:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t in)
4944:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
4945:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q63_t acc;
4946:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q15_t out;
4947:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4948:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #if defined (ARM_MATH_DSP)
4949:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     __SIMD32_TYPE *vstate;
4950:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4951:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* Implementation of PID controller */
4952:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4953:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* acc = A0 * x[n]  */
4954:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     acc = (q31_t) __SMUAD((uint32_t)S->A0, (uint32_t)in);
4955:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4956:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* acc += A1 * x[n-1] + A2 * x[n-2]  */
4957:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     vstate = __SIMD32_CONST(S->state);
4958:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     acc = (q63_t)__SMLALD((uint32_t)S->A1, (uint32_t)*vstate, (uint64_t)acc);
4959:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #else
4960:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* acc = A0 * x[n]  */
4961:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     acc = ((q31_t) S->A0) * in;
4962:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4963:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* acc += A1 * x[n-1] + A2 * x[n-2]  */
4964:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     acc += (q31_t) S->A1 * S->state[0];
4965:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     acc += (q31_t) S->A2 * S->state[1];
4966:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #endif
4967:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4968:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* acc += y[n-1] */
4969:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     acc += (q31_t) S->state[2] << 15;
4970:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4971:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* saturate the output */
4972:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     out = (q15_t) (__SSAT((acc >> 15), 16));
4973:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4974:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* Update state */
4975:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     S->state[1] = S->state[0];
4976:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     S->state[0] = in;
4977:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     S->state[2] = out;
4978:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4979:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* return to application */
4980:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     return (out);
4981:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
4982:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4983:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4984:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @} end of PID group
4985:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4986:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4987:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4988:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
4989:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Floating-point matrix inverse.
4990:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  src   points to the instance of the input floating-point matrix structure.
4991:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] dst   points to the instance of the output floating-point matrix structure.
4992:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return The function returns ARM_MATH_SIZE_MISMATCH, if the dimensions do not match.
4993:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * If the input matrix is singular (does not have an inverse), then the algorithm terminates and 
4994:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
4995:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_mat_inverse_f32(
4996:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_matrix_instance_f32 * src,
4997:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_matrix_instance_f32 * dst);
4998:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
4999:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5000:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
5001:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Floating-point matrix inverse.
5002:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  src   points to the instance of the input floating-point matrix structure.
5003:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] dst   points to the instance of the output floating-point matrix structure.
5004:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return The function returns ARM_MATH_SIZE_MISMATCH, if the dimensions do not match.
5005:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * If the input matrix is singular (does not have an inverse), then the algorithm terminates and 
5006:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
5007:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_status arm_mat_inverse_f64(
5008:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   const arm_matrix_instance_f64 * src,
5009:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_matrix_instance_f64 * dst);
5010:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5011:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5012:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5013:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
5014:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @ingroup groupController
5015:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
5016:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5017:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
5018:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @defgroup clarke Vector Clarke Transform
5019:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Forward Clarke transform converts the instantaneous stator phases into a two-coordinate time i
5020:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Generally the Clarke transform uses three-phase currents <code>Ia, Ib and Ic</code> to calcula
5021:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * in the two-phase orthogonal stator axis <code>Ialpha</code> and <code>Ibeta</code>.
5022:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * When <code>Ialpha</code> is superposed with <code>Ia</code> as shown in the figure below
5023:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * \image html clarke.gif Stator current space vector and its components in (a,b).
5024:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * and <code>Ia + Ib + Ic = 0</code>, in this condition <code>Ialpha</code> and <code>Ibeta</code
5025:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * can be calculated using only <code>Ia</code> and <code>Ib</code>.
5026:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
5027:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The function operates on a single sample of data and each call to the function returns the pro
5028:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The library provides separate functions for Q31 and floating-point data types.
5029:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * \par Algorithm
5030:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * \image html clarkeFormula.gif
5031:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * where <code>Ia</code> and <code>Ib</code> are the instantaneous stator phases and
5032:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * <code>pIalpha</code> and <code>pIbeta</code> are the two coordinates of time invariant vector.
5033:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * \par Fixed-Point Behavior
5034:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Care must be taken when using the Q31 version of the Clarke transform.
5035:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * In particular, the overflow and saturation behavior of the accumulator used must be considered
5036:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Refer to the function specific documentation below for usage guidelines.
5037:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
5038:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5039:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
5040:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @addtogroup clarke
5041:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @{
5042:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
5043:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5044:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
5045:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
5046:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Floating-point Clarke transform
5047:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  Ia       input three-phase coordinate <code>a</code>
5048:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  Ib       input three-phase coordinate <code>b</code>
5049:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pIalpha  points to output two-phase orthogonal vector axis alpha
5050:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pIbeta   points to output two-phase orthogonal vector axis beta
5051:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
5052:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE void arm_clarke_f32(
5053:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t Ia,
5054:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t Ib,
5055:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pIalpha,
5056:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pIbeta)
5057:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
5058:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* Calculate pIalpha using the equation, pIalpha = Ia */
5059:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     *pIalpha = Ia;
5060:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5061:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* Calculate pIbeta using the equation, pIbeta = (1/sqrt(3)) * Ia + (2/sqrt(3)) * Ib */
5062:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     *pIbeta = ((float32_t) 0.57735026919 * Ia + (float32_t) 1.15470053838 * Ib);
5063:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
5064:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5065:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5066:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
5067:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Clarke transform for Q31 version
5068:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  Ia       input three-phase coordinate <code>a</code>
5069:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  Ib       input three-phase coordinate <code>b</code>
5070:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pIalpha  points to output two-phase orthogonal vector axis alpha
5071:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pIbeta   points to output two-phase orthogonal vector axis beta
5072:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
5073:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * <b>Scaling and Overflow Behavior:</b>
5074:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * \par
5075:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The function is implemented using an internal 32-bit accumulator.
5076:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The accumulator maintains 1.31 format by truncating lower 31 bits of the intermediate multipli
5077:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * There is saturation on the addition, hence there is no risk of overflow.
5078:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
5079:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE void arm_clarke_q31(
5080:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t Ia,
5081:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t Ib,
5082:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pIalpha,
5083:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pIbeta)
5084:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
5085:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t product1, product2;                    /* Temporary variables used to store intermediate 
5086:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5087:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* Calculating pIalpha from Ia by equation pIalpha = Ia */
5088:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     *pIalpha = Ia;
5089:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5090:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* Intermediate product is calculated by (1/(sqrt(3)) * Ia) */
5091:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     product1 = (q31_t) (((q63_t) Ia * 0x24F34E8B) >> 30);
5092:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5093:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* Intermediate product is calculated by (2/sqrt(3) * Ib) */
5094:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     product2 = (q31_t) (((q63_t) Ib * 0x49E69D16) >> 30);
5095:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5096:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* pIbeta is calculated by adding the intermediate products */
5097:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     *pIbeta = __QADD(product1, product2);
5098:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
5099:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5100:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
5101:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @} end of clarke group
5102:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
5103:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5104:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
5105:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Converts the elements of the Q7 vector to Q31 vector.
5106:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       input pointer
5107:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       output pointer
5108:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples to process
5109:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
5110:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_q7_to_q31(
5111:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pSrc,
5112:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pDst,
5113:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
5114:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5115:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5116:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5117:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
5118:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @ingroup groupController
5119:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
5120:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5121:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
5122:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @defgroup inv_clarke Vector Inverse Clarke Transform
5123:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Inverse Clarke transform converts the two-coordinate time invariant vector into instantaneous 
5124:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
5125:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The function operates on a single sample of data and each call to the function returns the pro
5126:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The library provides separate functions for Q31 and floating-point data types.
5127:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * \par Algorithm
5128:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * \image html clarkeInvFormula.gif
5129:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * where <code>pIa</code> and <code>pIb</code> are the instantaneous stator phases and
5130:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * <code>Ialpha</code> and <code>Ibeta</code> are the two coordinates of time invariant vector.
5131:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * \par Fixed-Point Behavior
5132:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Care must be taken when using the Q31 version of the Clarke transform.
5133:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * In particular, the overflow and saturation behavior of the accumulator used must be considered
5134:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Refer to the function specific documentation below for usage guidelines.
5135:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
5136:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5137:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
5138:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @addtogroup inv_clarke
5139:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @{
5140:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
5141:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5142:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    /**
5143:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Floating-point Inverse Clarke transform
5144:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  Ialpha  input two-phase orthogonal vector axis alpha
5145:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  Ibeta   input two-phase orthogonal vector axis beta
5146:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pIa     points to output three-phase coordinate <code>a</code>
5147:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pIb     points to output three-phase coordinate <code>b</code>
5148:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
5149:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE void arm_inv_clarke_f32(
5150:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t Ialpha,
5151:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t Ibeta,
5152:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pIa,
5153:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pIb)
5154:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
5155:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* Calculating pIa from Ialpha by equation pIa = Ialpha */
5156:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     *pIa = Ialpha;
5157:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5158:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* Calculating pIb from Ialpha and Ibeta by equation pIb = -(1/2) * Ialpha + (sqrt(3)/2) * Ibet
5159:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     *pIb = -0.5f * Ialpha + 0.8660254039f * Ibeta;
5160:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
5161:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5162:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5163:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
5164:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Inverse Clarke transform for Q31 version
5165:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  Ialpha  input two-phase orthogonal vector axis alpha
5166:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  Ibeta   input two-phase orthogonal vector axis beta
5167:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pIa     points to output three-phase coordinate <code>a</code>
5168:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pIb     points to output three-phase coordinate <code>b</code>
5169:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
5170:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * <b>Scaling and Overflow Behavior:</b>
5171:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * \par
5172:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The function is implemented using an internal 32-bit accumulator.
5173:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The accumulator maintains 1.31 format by truncating lower 31 bits of the intermediate multipli
5174:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * There is saturation on the subtraction, hence there is no risk of overflow.
5175:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
5176:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE void arm_inv_clarke_q31(
5177:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t Ialpha,
5178:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t Ibeta,
5179:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pIa,
5180:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pIb)
5181:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
5182:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t product1, product2;                    /* Temporary variables used to store intermediate 
5183:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5184:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* Calculating pIa from Ialpha by equation pIa = Ialpha */
5185:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     *pIa = Ialpha;
5186:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5187:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* Intermediate product is calculated by (1/(2*sqrt(3)) * Ia) */
5188:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     product1 = (q31_t) (((q63_t) (Ialpha) * (0x40000000)) >> 31);
5189:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5190:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* Intermediate product is calculated by (1/sqrt(3) * pIb) */
5191:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     product2 = (q31_t) (((q63_t) (Ibeta) * (0x6ED9EBA1)) >> 31);
5192:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5193:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* pIb is calculated by subtracting the products */
5194:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     *pIb = __QSUB(product2, product1);
5195:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
5196:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5197:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
5198:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @} end of inv_clarke group
5199:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
5200:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5201:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
5202:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Converts the elements of the Q7 vector to Q15 vector.
5203:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       input pointer
5204:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       output pointer
5205:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  number of samples to process
5206:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
5207:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_q7_to_q15(
5208:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pSrc,
5209:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pDst,
5210:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
5211:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5212:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5213:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5214:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
5215:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @ingroup groupController
5216:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
5217:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5218:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
5219:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @defgroup park Vector Park Transform
5220:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
5221:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Forward Park transform converts the input two-coordinate vector to flux and torque components.
5222:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The Park transform can be used to realize the transformation of the <code>Ialpha</code> and th
5223:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * from the stationary to the moving reference frame and control the spatial relationship between
5224:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * the stator vector current and rotor flux vector.
5225:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * If we consider the d axis aligned with the rotor flux, the diagram below shows the
5226:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * current vector and the relationship from the two reference frames:
5227:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * \image html park.gif "Stator current space vector and its component in (a,b) and in the d,q ro
5228:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
5229:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The function operates on a single sample of data and each call to the function returns the pro
5230:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The library provides separate functions for Q31 and floating-point data types.
5231:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * \par Algorithm
5232:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * \image html parkFormula.gif
5233:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * where <code>Ialpha</code> and <code>Ibeta</code> are the stator vector components,
5234:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * <code>pId</code> and <code>pIq</code> are rotor vector components and <code>cosVal</code> and 
5235:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * cosine and sine values of theta (rotor flux position).
5236:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * \par Fixed-Point Behavior
5237:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Care must be taken when using the Q31 version of the Park transform.
5238:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * In particular, the overflow and saturation behavior of the accumulator used must be considered
5239:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Refer to the function specific documentation below for usage guidelines.
5240:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
5241:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5242:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
5243:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @addtogroup park
5244:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @{
5245:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
5246:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5247:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
5248:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Floating-point Park transform
5249:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  Ialpha  input two-phase vector coordinate alpha
5250:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  Ibeta   input two-phase vector coordinate beta
5251:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pId     points to output   rotor reference frame d
5252:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pIq     points to output   rotor reference frame q
5253:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  sinVal  sine value of rotation angle theta
5254:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  cosVal  cosine value of rotation angle theta
5255:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
5256:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The function implements the forward Park transform.
5257:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
5258:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
5259:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE void arm_park_f32(
5260:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t Ialpha,
5261:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t Ibeta,
5262:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pId,
5263:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pIq,
5264:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t sinVal,
5265:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t cosVal)
5266:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
5267:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* Calculate pId using the equation, pId = Ialpha * cosVal + Ibeta * sinVal */
5268:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     *pId = Ialpha * cosVal + Ibeta * sinVal;
5269:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5270:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* Calculate pIq using the equation, pIq = - Ialpha * sinVal + Ibeta * cosVal */
5271:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     *pIq = -Ialpha * sinVal + Ibeta * cosVal;
5272:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
5273:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5274:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5275:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
5276:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Park transform for Q31 version
5277:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  Ialpha  input two-phase vector coordinate alpha
5278:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  Ibeta   input two-phase vector coordinate beta
5279:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pId     points to output rotor reference frame d
5280:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pIq     points to output rotor reference frame q
5281:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  sinVal  sine value of rotation angle theta
5282:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  cosVal  cosine value of rotation angle theta
5283:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
5284:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * <b>Scaling and Overflow Behavior:</b>
5285:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * \par
5286:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The function is implemented using an internal 32-bit accumulator.
5287:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The accumulator maintains 1.31 format by truncating lower 31 bits of the intermediate multipli
5288:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * There is saturation on the addition and subtraction, hence there is no risk of overflow.
5289:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
5290:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE void arm_park_q31(
5291:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t Ialpha,
5292:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t Ibeta,
5293:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pId,
5294:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pIq,
5295:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t sinVal,
5296:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t cosVal)
5297:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
5298:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t product1, product2;                    /* Temporary variables used to store intermediate 
5299:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t product3, product4;                    /* Temporary variables used to store intermediate 
5300:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5301:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* Intermediate product is calculated by (Ialpha * cosVal) */
5302:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     product1 = (q31_t) (((q63_t) (Ialpha) * (cosVal)) >> 31);
5303:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5304:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* Intermediate product is calculated by (Ibeta * sinVal) */
5305:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     product2 = (q31_t) (((q63_t) (Ibeta) * (sinVal)) >> 31);
5306:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5307:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5308:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* Intermediate product is calculated by (Ialpha * sinVal) */
5309:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     product3 = (q31_t) (((q63_t) (Ialpha) * (sinVal)) >> 31);
5310:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5311:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* Intermediate product is calculated by (Ibeta * cosVal) */
5312:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     product4 = (q31_t) (((q63_t) (Ibeta) * (cosVal)) >> 31);
5313:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5314:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* Calculate pId by adding the two intermediate products 1 and 2 */
5315:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     *pId = __QADD(product1, product2);
5316:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5317:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* Calculate pIq by subtracting the two intermediate products 3 from 4 */
5318:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     *pIq = __QSUB(product4, product3);
5319:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
5320:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5321:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
5322:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @} end of park group
5323:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
5324:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5325:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
5326:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Converts the elements of the Q7 vector to floating-point vector.
5327:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       is input pointer
5328:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       is output pointer
5329:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  is the number of samples to process
5330:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
5331:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_q7_to_float(
5332:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pSrc,
5333:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pDst,
5334:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
5335:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5336:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5337:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
5338:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @ingroup groupController
5339:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
5340:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5341:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
5342:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @defgroup inv_park Vector Inverse Park transform
5343:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Inverse Park transform converts the input flux and torque components to two-coordinate vector.
5344:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
5345:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The function operates on a single sample of data and each call to the function returns the pro
5346:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The library provides separate functions for Q31 and floating-point data types.
5347:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * \par Algorithm
5348:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * \image html parkInvFormula.gif
5349:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * where <code>pIalpha</code> and <code>pIbeta</code> are the stator vector components,
5350:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * <code>Id</code> and <code>Iq</code> are rotor vector components and <code>cosVal</code> and <c
5351:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * cosine and sine values of theta (rotor flux position).
5352:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * \par Fixed-Point Behavior
5353:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Care must be taken when using the Q31 version of the Park transform.
5354:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * In particular, the overflow and saturation behavior of the accumulator used must be considered
5355:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Refer to the function specific documentation below for usage guidelines.
5356:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
5357:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5358:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
5359:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @addtogroup inv_park
5360:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @{
5361:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
5362:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5363:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    /**
5364:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Floating-point Inverse Park transform
5365:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  Id       input coordinate of rotor reference frame d
5366:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  Iq       input coordinate of rotor reference frame q
5367:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pIalpha  points to output two-phase orthogonal vector axis alpha
5368:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pIbeta   points to output two-phase orthogonal vector axis beta
5369:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  sinVal   sine value of rotation angle theta
5370:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  cosVal   cosine value of rotation angle theta
5371:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
5372:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE void arm_inv_park_f32(
5373:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t Id,
5374:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t Iq,
5375:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pIalpha,
5376:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pIbeta,
5377:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t sinVal,
5378:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t cosVal)
5379:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
5380:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* Calculate pIalpha using the equation, pIalpha = Id * cosVal - Iq * sinVal */
5381:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     *pIalpha = Id * cosVal - Iq * sinVal;
5382:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5383:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* Calculate pIbeta using the equation, pIbeta = Id * sinVal + Iq * cosVal */
5384:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     *pIbeta = Id * sinVal + Iq * cosVal;
5385:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
5386:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5387:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5388:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
5389:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Inverse Park transform for   Q31 version
5390:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  Id       input coordinate of rotor reference frame d
5391:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  Iq       input coordinate of rotor reference frame q
5392:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pIalpha  points to output two-phase orthogonal vector axis alpha
5393:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pIbeta   points to output two-phase orthogonal vector axis beta
5394:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  sinVal   sine value of rotation angle theta
5395:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  cosVal   cosine value of rotation angle theta
5396:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
5397:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * <b>Scaling and Overflow Behavior:</b>
5398:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * \par
5399:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The function is implemented using an internal 32-bit accumulator.
5400:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The accumulator maintains 1.31 format by truncating lower 31 bits of the intermediate multipli
5401:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * There is saturation on the addition, hence there is no risk of overflow.
5402:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
5403:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE void arm_inv_park_q31(
5404:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t Id,
5405:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t Iq,
5406:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pIalpha,
5407:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pIbeta,
5408:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t sinVal,
5409:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t cosVal)
5410:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
5411:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t product1, product2;                    /* Temporary variables used to store intermediate 
5412:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t product3, product4;                    /* Temporary variables used to store intermediate 
5413:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5414:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* Intermediate product is calculated by (Id * cosVal) */
5415:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     product1 = (q31_t) (((q63_t) (Id) * (cosVal)) >> 31);
5416:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5417:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* Intermediate product is calculated by (Iq * sinVal) */
5418:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     product2 = (q31_t) (((q63_t) (Iq) * (sinVal)) >> 31);
5419:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5420:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5421:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* Intermediate product is calculated by (Id * sinVal) */
5422:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     product3 = (q31_t) (((q63_t) (Id) * (sinVal)) >> 31);
5423:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5424:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* Intermediate product is calculated by (Iq * cosVal) */
5425:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     product4 = (q31_t) (((q63_t) (Iq) * (cosVal)) >> 31);
5426:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5427:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* Calculate pIalpha by using the two intermediate products 1 and 2 */
5428:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     *pIalpha = __QSUB(product1, product2);
5429:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5430:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* Calculate pIbeta by using the two intermediate products 3 and 4 */
5431:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     *pIbeta = __QADD(product4, product3);
5432:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
5433:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5434:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
5435:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @} end of Inverse park group
5436:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
5437:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5438:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5439:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
5440:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Converts the elements of the Q31 vector to floating-point vector.
5441:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  pSrc       is input pointer
5442:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pDst       is output pointer
5443:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  blockSize  is the number of samples to process
5444:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
5445:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   void arm_q31_to_float(
5446:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pSrc,
5447:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pDst,
5448:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t blockSize);
5449:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5450:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
5451:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @ingroup groupInterpolation
5452:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
5453:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5454:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
5455:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @defgroup LinearInterpolate Linear Interpolation
5456:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
5457:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Linear interpolation is a method of curve fitting using linear polynomials.
5458:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Linear interpolation works by effectively drawing a straight line between two neighboring samp
5459:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
5460:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * \par
5461:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * \image html LinearInterp.gif "Linear interpolation"
5462:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
5463:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * \par
5464:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * A  Linear Interpolate function calculates an output value(y), for the input(x)
5465:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * using linear interpolation of the input values x0, x1( nearest input values) and the output va
5466:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
5467:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * \par Algorithm:
5468:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * <pre>
5469:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *       y = y0 + (x - x0) * ((y1 - y0)/(x1-x0))
5470:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *       where x0, x1 are nearest values of input x
5471:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *             y0, y1 are nearest values to output y
5472:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * </pre>
5473:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
5474:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * \par
5475:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * This set of functions implements Linear interpolation process
5476:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * for Q7, Q15, Q31, and floating-point data types.  The functions operate on a single
5477:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * sample of data and each call to the function returns a single processed value.
5478:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * <code>S</code> points to an instance of the Linear Interpolate function data structure.
5479:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * <code>x</code> is the input sample value. The functions returns the output value.
5480:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
5481:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * \par
5482:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * if x is outside of the table boundary, Linear interpolation returns first value of the table
5483:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * if x is below input range and returns last value of table if x is above range.
5484:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
5485:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5486:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
5487:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @addtogroup LinearInterpolate
5488:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @{
5489:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
5490:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5491:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
5492:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Process function for the floating-point Linear Interpolation Function.
5493:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in,out] S  is an instance of the floating-point Linear Interpolation structure
5494:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]     x  input sample to process
5495:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return y processed output sample.
5496:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
5497:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
5498:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE float32_t arm_linear_interp_f32(
5499:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   arm_linear_interp_instance_f32 * S,
5500:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t x)
5501:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
5502:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t y;
5503:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t x0, x1;                            /* Nearest input values */
5504:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t y0, y1;                            /* Nearest output values */
5505:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t xSpacing = S->xSpacing;            /* spacing between input values */
5506:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     int32_t i;                                   /* Index variable */
5507:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     float32_t *pYData = S->pYData;               /* pointer to output table */
5508:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5509:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* Calculation of index */
5510:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     i = (int32_t) ((x - S->x1) / xSpacing);
5511:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5512:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     if (i < 0)
5513:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     {
5514:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       /* Iniatilize output for below specified range as least output value of table */
5515:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       y = pYData[0];
5516:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     }
5517:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     else if ((uint32_t)i >= S->nValues)
5518:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     {
5519:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       /* Iniatilize output for above specified range as last output value of table */
5520:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       y = pYData[S->nValues - 1];
5521:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     }
5522:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     else
5523:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     {
5524:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       /* Calculation of nearest input values */
5525:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       x0 = S->x1 +  i      * xSpacing;
5526:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       x1 = S->x1 + (i + 1) * xSpacing;
5527:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5528:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       /* Read of nearest output values */
5529:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       y0 = pYData[i];
5530:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       y1 = pYData[i + 1];
5531:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5532:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       /* Calculation of output */
5533:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       y = y0 + (x - x0) * ((y1 - y0) / (x1 - x0));
5534:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5535:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     }
5536:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5537:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* returns output value */
5538:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     return (y);
5539:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
5540:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5541:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5542:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    /**
5543:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
5544:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Process function for the Q31 Linear Interpolation Function.
5545:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] pYData   pointer to Q31 Linear Interpolation table
5546:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] x        input sample to process
5547:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] nValues  number of table values
5548:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return y processed output sample.
5549:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
5550:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * \par
5551:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Input sample <code>x</code> is in 12.20 format which contains 12 bits for table index and 20 b
5552:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * This function can support maximum of table size 2^12.
5553:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
5554:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
5555:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t arm_linear_interp_q31(
5556:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t * pYData,
5557:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t x,
5558:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t nValues)
5559:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
5560:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t y;                                     /* output */
5561:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t y0, y1;                                /* Nearest output values */
5562:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t fract;                                 /* fractional part */
5563:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     int32_t index;                               /* Index to read nearest output values */
5564:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5565:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* Input is in 12.20 format */
5566:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* 12 bits for the table index */
5567:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* Index value calculation */
5568:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     index = ((x & (q31_t)0xFFF00000) >> 20);
5569:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5570:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     if (index >= (int32_t)(nValues - 1))
5571:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     {
5572:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       return (pYData[nValues - 1]);
5573:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     }
5574:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     else if (index < 0)
5575:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     {
5576:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       return (pYData[0]);
5577:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     }
5578:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     else
5579:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     {
5580:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       /* 20 bits for the fractional part */
5581:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       /* shift left by 11 to keep fract in 1.31 format */
5582:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       fract = (x & 0x000FFFFF) << 11;
5583:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5584:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       /* Read two nearest output values from the index in 1.31(q31) format */
5585:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       y0 = pYData[index];
5586:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       y1 = pYData[index + 1];
5587:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5588:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       /* Calculation of y0 * (1-fract) and y is in 2.30 format */
5589:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       y = ((q31_t) ((q63_t) y0 * (0x7FFFFFFF - fract) >> 32));
5590:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5591:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       /* Calculation of y0 * (1-fract) + y1 *fract and y is in 2.30 format */
5592:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       y += ((q31_t) (((q63_t) y1 * fract) >> 32));
5593:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5594:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       /* Convert y to 1.31 format */
5595:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       return (y << 1u);
5596:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     }
5597:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
5598:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5599:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5600:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
5601:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
5602:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Process function for the Q15 Linear Interpolation Function.
5603:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] pYData   pointer to Q15 Linear Interpolation table
5604:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] x        input sample to process
5605:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] nValues  number of table values
5606:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return y processed output sample.
5607:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
5608:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * \par
5609:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Input sample <code>x</code> is in 12.20 format which contains 12 bits for table index and 20 b
5610:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * This function can support maximum of table size 2^12.
5611:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
5612:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
5613:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t arm_linear_interp_q15(
5614:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t * pYData,
5615:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t x,
5616:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t nValues)
5617:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
5618:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q63_t y;                                     /* output */
5619:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q15_t y0, y1;                                /* Nearest output values */
5620:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t fract;                                 /* fractional part */
5621:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     int32_t index;                               /* Index to read nearest output values */
5622:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5623:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* Input is in 12.20 format */
5624:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* 12 bits for the table index */
5625:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* Index value calculation */
5626:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     index = ((x & (int32_t)0xFFF00000) >> 20);
5627:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5628:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     if (index >= (int32_t)(nValues - 1))
5629:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     {
5630:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       return (pYData[nValues - 1]);
5631:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     }
5632:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     else if (index < 0)
5633:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     {
5634:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       return (pYData[0]);
5635:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     }
5636:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     else
5637:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     {
5638:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       /* 20 bits for the fractional part */
5639:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       /* fract is in 12.20 format */
5640:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       fract = (x & 0x000FFFFF);
5641:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5642:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       /* Read two nearest output values from the index */
5643:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       y0 = pYData[index];
5644:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       y1 = pYData[index + 1];
5645:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5646:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       /* Calculation of y0 * (1-fract) and y is in 13.35 format */
5647:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       y = ((q63_t) y0 * (0xFFFFF - fract));
5648:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5649:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       /* Calculation of (y0 * (1-fract) + y1 * fract) and y is in 13.35 format */
5650:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       y += ((q63_t) y1 * (fract));
5651:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5652:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       /* convert y to 1.15 format */
5653:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       return (q15_t) (y >> 20);
5654:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     }
5655:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
5656:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5657:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5658:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
5659:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
5660:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Process function for the Q7 Linear Interpolation Function.
5661:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] pYData   pointer to Q7 Linear Interpolation table
5662:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] x        input sample to process
5663:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] nValues  number of table values
5664:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return y processed output sample.
5665:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
5666:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * \par
5667:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Input sample <code>x</code> is in 12.20 format which contains 12 bits for table index and 20 b
5668:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * This function can support maximum of table size 2^12.
5669:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
5670:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q7_t arm_linear_interp_q7(
5671:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q7_t * pYData,
5672:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t x,
5673:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   uint32_t nValues)
5674:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
5675:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t y;                                     /* output */
5676:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q7_t y0, y1;                                 /* Nearest output values */
5677:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     q31_t fract;                                 /* fractional part */
5678:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     uint32_t index;                              /* Index to read nearest output values */
5679:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5680:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* Input is in 12.20 format */
5681:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* 12 bits for the table index */
5682:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     /* Index value calculation */
5683:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     if (x < 0)
5684:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     {
5685:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       return (pYData[0]);
5686:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     }
5687:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     index = (x >> 20) & 0xfff;
5688:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5689:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     if (index >= (nValues - 1))
5690:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     {
5691:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       return (pYData[nValues - 1]);
5692:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     }
5693:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     else
5694:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     {
5695:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       /* 20 bits for the fractional part */
5696:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       /* fract is in 12.20 format */
5697:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       fract = (x & 0x000FFFFF);
5698:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5699:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       /* Read two nearest output values from the index and are in 1.7(q7) format */
5700:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       y0 = pYData[index];
5701:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       y1 = pYData[index + 1];
5702:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5703:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       /* Calculation of y0 * (1-fract ) and y is in 13.27(q27) format */
5704:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       y = ((y0 * (0xFFFFF - fract)));
5705:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5706:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       /* Calculation of y1 * fract + y0 * (1-fract) and y is in 13.27(q27) format */
5707:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       y += (y1 * fract);
5708:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5709:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       /* convert y to 1.7(q7) format */
5710:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       return (q7_t) (y >> 20);
5711:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****      }
5712:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   }
5713:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5714:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
5715:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @} end of LinearInterpolate group
5716:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
5717:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5718:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
5719:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Fast approximation to the trigonometric sine function for floating-point data.
5720:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] x  input value in radians.
5721:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return  sin(x).
5722:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
5723:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t arm_sin_f32(
5724:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t x);
5725:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5726:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5727:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
5728:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Fast approximation to the trigonometric sine function for Q31 data.
5729:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] x  Scaled input value in radians.
5730:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return  sin(x).
5731:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
5732:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t arm_sin_q31(
5733:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t x);
5734:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5735:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5736:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
5737:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Fast approximation to the trigonometric sine function for Q15 data.
5738:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] x  Scaled input value in radians.
5739:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return  sin(x).
5740:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
5741:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t arm_sin_q15(
5742:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t x);
5743:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5744:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5745:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
5746:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Fast approximation to the trigonometric cosine function for floating-point data.
5747:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] x  input value in radians.
5748:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return  cos(x).
5749:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
5750:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t arm_cos_f32(
5751:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t x);
5752:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5753:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5754:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
5755:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Fast approximation to the trigonometric cosine function for Q31 data.
5756:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] x  Scaled input value in radians.
5757:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return  cos(x).
5758:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
5759:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t arm_cos_q31(
5760:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q31_t x);
5761:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5762:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5763:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
5764:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Fast approximation to the trigonometric cosine function for Q15 data.
5765:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in] x  Scaled input value in radians.
5766:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return  cos(x).
5767:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
5768:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t arm_cos_q15(
5769:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q15_t x);
5770:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5771:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5772:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
5773:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @ingroup groupFastMath
5774:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
5775:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5776:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5777:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
5778:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @defgroup SQRT Square Root
5779:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
5780:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Computes the square root of a number.
5781:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * There are separate functions for Q15, Q31, and floating-point data types.
5782:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The square root function is computed using the Newton-Raphson algorithm.
5783:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * This is an iterative algorithm of the form:
5784:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * <pre>
5785:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *      x1 = x0 - f(x0)/f'(x0)
5786:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * </pre>
5787:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * where <code>x1</code> is the current estimate,
5788:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * <code>x0</code> is the previous estimate, and
5789:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * <code>f'(x0)</code> is the derivative of <code>f()</code> evaluated at <code>x0</code>.
5790:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * For the square root function, the algorithm reduces to:
5791:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * <pre>
5792:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *     x0 = in/2                         [initial guess]
5793:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *     x1 = 1/2 * ( x0 + in / x0)        [each iteration]
5794:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * </pre>
5795:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
5796:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5797:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5798:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
5799:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @addtogroup SQRT
5800:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @{
5801:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
5802:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5803:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
5804:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief  Floating-point square root function.
5805:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[in]  in    input value.
5806:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @param[out] pOut  square root of input value.
5807:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @return The function returns ARM_MATH_SUCCESS if input value is positive value or ARM_MATH_ARG
5808:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * <code>in</code> is negative value and returns zero output for negative values.
5809:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
5810:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
5811:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t in,
5812:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   float32_t * pOut)
5813:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
5814:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     if (in >= 0.0f)
 2968              	 .loc 6 5814 0
 2969 00a8 D7ED0B7A 	 flds s15,[r7,#44]
 2970 00ac F5EEC07A 	 fcmpezs s15
 2971 00b0 F1EE10FA 	 fmstat
 2972 00b4 12DB     	 blt .L138
5815:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     {
5816:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5817:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #if   (__FPU_USED == 1) && defined ( __CC_ARM   )
5818:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       *pOut = __sqrtf(in);
5819:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
5820:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       *pOut = __builtin_sqrtf(in);
5821:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #elif (__FPU_USED == 1) && defined(__GNUC__)
5822:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       *pOut = __builtin_sqrtf(in);
 2973              	 .loc 6 5822 0
 2974 00b6 D7ED0B7A 	 flds s15,[r7,#44]
 2975 00ba F1EEE77A 	 fsqrts s15,s15
 2976 00be F4EE677A 	 fcmps s15,s15
 2977 00c2 F1EE10FA 	 fmstat
 2978 00c6 04D0     	 beq .L126
 2979 00c8 F86A     	 ldr r0,[r7,#44]
 2980 00ca FFF7FEFF 	 bl sqrtf
 2981 00ce 07EE900A 	 fmsr s15,r0
 2982              	.L126:
 2983 00d2 17EE902A 	 fmrs r2,s15
 2984 00d6 BB6A     	 ldr r3,[r7,#40]
 2985 00d8 1A60     	 str r2,[r3]
 2986 00da 03E0     	 b .L127
 2987              	.L138:
5823:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #elif (__FPU_USED == 1) && defined ( __ICCARM__ ) && (__VER__ >= 6040000)
5824:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
5825:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #else
5826:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       *pOut = sqrtf(in);
5827:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #endif
5828:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
5829:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       return (ARM_MATH_SUCCESS);
5830:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     }
5831:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     else
5832:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     {
5833:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       *pOut = 0.0f;
 2988              	 .loc 6 5833 0
 2989 00dc BB6A     	 ldr r3,[r7,#40]
 2990 00de 4FF00002 	 mov r2,#0
 2991 00e2 1A60     	 str r2,[r3]
 2992              	.L127:
 2993              	.LBE8:
 2994              	.LBE7:
 242:../functions.h **** 		arm_sqrt_f32((lim*lim*frac[1]), &sqrt_temp[1]);
 2995              	 .loc 5 242 0
 2996 00e4 97ED007A 	 flds s14,[r7]
 2997 00e8 D7ED007A 	 flds s15,[r7]
 2998 00ec 27EE277A 	 fmuls s14,s14,s15
 2999 00f0 D7ED057A 	 flds s15,[r7,#20]
 3000 00f4 67EE277A 	 fmuls s15,s14,s15
 3001 00f8 C7ED097A 	 fsts s15,[r7,#36]
 3002 00fc 07F10803 	 add r3,r7,#8
 3003 0100 0433     	 adds r3,r3,#4
 3004 0102 3B62     	 str r3,[r7,#32]
 3005              	.LBB9:
 3006              	.LBB10:
5814:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     {
 3007              	 .loc 6 5814 0
 3008 0104 D7ED097A 	 flds s15,[r7,#36]
 3009 0108 F5EEC07A 	 fcmpezs s15
 3010 010c F1EE10FA 	 fmstat
 3011 0110 12DB     	 blt .L139
5822:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #elif (__FPU_USED == 1) && defined ( __ICCARM__ ) && (__VER__ >= 6040000)
 3012              	 .loc 6 5822 0
 3013 0112 D7ED097A 	 flds s15,[r7,#36]
 3014 0116 F1EEE77A 	 fsqrts s15,s15
 3015 011a F4EE677A 	 fcmps s15,s15
 3016 011e F1EE10FA 	 fmstat
 3017 0122 04D0     	 beq .L130
 3018 0124 786A     	 ldr r0,[r7,#36]
 3019 0126 FFF7FEFF 	 bl sqrtf
 3020 012a 07EE900A 	 fmsr s15,r0
 3021              	.L130:
 3022 012e 17EE902A 	 fmrs r2,s15
 3023 0132 3B6A     	 ldr r3,[r7,#32]
 3024 0134 1A60     	 str r2,[r3]
 3025 0136 03E0     	 b .L131
 3026              	.L139:
 3027              	 .loc 6 5833 0
 3028 0138 3B6A     	 ldr r3,[r7,#32]
 3029 013a 4FF00002 	 mov r2,#0
 3030 013e 1A60     	 str r2,[r3]
 3031              	.L131:
 3032              	.LBE10:
 3033              	.LBE9:
 243:../functions.h **** 		array[0]=sqrt_temp[0]*array[0]/fabs(array[0]);
 3034              	 .loc 5 243 0
 3035 0140 97ED027A 	 flds s14,[r7,#8]
 3036 0144 7B68     	 ldr r3,[r7,#4]
 3037 0146 D3ED007A 	 flds s15,[r3]
 3038 014a 27EE277A 	 fmuls s14,s14,s15
 3039 014e 7B68     	 ldr r3,[r7,#4]
 3040 0150 D3ED007A 	 flds s15,[r3]
 3041 0154 F0EEE77A 	 fabss s15,s15
 3042 0158 C7EE277A 	 fdivs s15,s14,s15
 3043 015c 7B68     	 ldr r3,[r7,#4]
 3044 015e C3ED007A 	 fsts s15,[r3]
 244:../functions.h **** 		array[1]=sqrt_temp[1]*array[1]/fabs(array[1]);
 3045              	 .loc 5 244 0
 3046 0162 7B68     	 ldr r3,[r7,#4]
 3047 0164 0433     	 adds r3,r3,#4
 3048 0166 97ED037A 	 flds s14,[r7,#12]
 3049 016a 7A68     	 ldr r2,[r7,#4]
 3050 016c 0432     	 adds r2,r2,#4
 3051 016e D2ED007A 	 flds s15,[r2]
 3052 0172 27EE277A 	 fmuls s14,s14,s15
 3053 0176 7A68     	 ldr r2,[r7,#4]
 3054 0178 0432     	 adds r2,r2,#4
 3055 017a D2ED007A 	 flds s15,[r2]
 3056 017e F0EEE77A 	 fabss s15,s15
 3057 0182 C7EE277A 	 fdivs s15,s14,s15
 3058 0186 C3ED007A 	 fsts s15,[r3]
 245:../functions.h **** 		return 1u;
 3059              	 .loc 5 245 0
 3060 018a 0123     	 movs r3,#1
 3061 018c 00E0     	 b .L133
 3062              	.L137:
 246:../functions.h **** 	}
 247:../functions.h **** 	else
 248:../functions.h **** 		return 0u;
 3063              	 .loc 5 248 0
 3064 018e 0023     	 movs r3,#0
 3065              	.L133:
 249:../functions.h **** }
 3066              	 .loc 5 249 0 discriminator 1
 3067 0190 1846     	 mov r0,r3
 3068 0192 3037     	 adds r7,r7,#48
 3069              	.LCFI142:
 3070              	 .cfi_def_cfa_offset 8
 3071 0194 BD46     	 mov sp,r7
 3072              	.LCFI143:
 3073              	 .cfi_def_cfa_register 13
 3074              	 
 3075 0196 80BD     	 pop {r7,pc}
 3076              	 .cfi_endproc
 3077              	.LFE399:
 3079              	 .section .text.QSG,"ax",%progbits
 3080              	 .align 2
 3081              	 .global QSG
 3082              	 .thumb
 3083              	 .thumb_func
 3085              	QSG:
 3086              	.LFB400:
 250:../functions.h **** 
 251:../functions.h **** void QSG(float v_in, float w, struct sogi *s){
 3087              	 .loc 5 251 0
 3088              	 .cfi_startproc
 3089              	 
 3090              	 
 3091 0000 80B5     	 push {r7,lr}
 3092              	.LCFI144:
 3093              	 .cfi_def_cfa_offset 8
 3094              	 .cfi_offset 7,-8
 3095              	 .cfi_offset 14,-4
 3096 0002 84B0     	 sub sp,sp,#16
 3097              	.LCFI145:
 3098              	 .cfi_def_cfa_offset 24
 3099 0004 00AF     	 add r7,sp,#0
 3100              	.LCFI146:
 3101              	 .cfi_def_cfa_register 7
 3102 0006 F860     	 str r0,[r7,#12]
 3103 0008 B960     	 str r1,[r7,#8]
 3104 000a 7A60     	 str r2,[r7,#4]
 252:../functions.h **** 	s->v_AB[0]=fw_integ(((v_in-s->v_AB[0])*s->K-s->v_AB[1])*w, &(s->dbuff), s->Ti, 0.0f);
 3105              	 .loc 5 252 0
 3106 000c 7B68     	 ldr r3,[r7,#4]
 3107 000e D3ED007A 	 flds s15,[r3]
 3108 0012 97ED037A 	 flds s14,[r7,#12]
 3109 0016 37EE677A 	 fsubs s14,s14,s15
 3110 001a 7B68     	 ldr r3,[r7,#4]
 3111 001c D3ED027A 	 flds s15,[r3,#8]
 3112 0020 27EE277A 	 fmuls s14,s14,s15
 3113 0024 7B68     	 ldr r3,[r7,#4]
 3114 0026 D3ED017A 	 flds s15,[r3,#4]
 3115 002a 37EE677A 	 fsubs s14,s14,s15
 3116 002e D7ED027A 	 flds s15,[r7,#8]
 3117 0032 67EE277A 	 fmuls s15,s14,s15
 3118 0036 7B68     	 ldr r3,[r7,#4]
 3119 0038 03F10C02 	 add r2,r3,#12
 3120 003c 7B68     	 ldr r3,[r7,#4]
 3121 003e 5B69     	 ldr r3,[r3,#20]
 3122 0040 17EE900A 	 fmrs r0,s15
 3123 0044 1146     	 mov r1,r2
 3124 0046 1A46     	 mov r2,r3
 3125 0048 4FF00003 	 mov r3,#0
 3126 004c FFF7FEFF 	 bl fw_integ
 3127 0050 0246     	 mov r2,r0
 3128 0052 7B68     	 ldr r3,[r7,#4]
 3129 0054 1A60     	 str r2,[r3]
 253:../functions.h **** 	s->v_AB[1]=w*fw_integ(s->v_AB[0], &(s->qbuff), s->Ti, 0.0f);
 3130              	 .loc 5 253 0
 3131 0056 7B68     	 ldr r3,[r7,#4]
 3132 0058 1968     	 ldr r1,[r3]
 3133 005a 7B68     	 ldr r3,[r7,#4]
 3134 005c 03F11002 	 add r2,r3,#16
 3135 0060 7B68     	 ldr r3,[r7,#4]
 3136 0062 5B69     	 ldr r3,[r3,#20]
 3137 0064 0846     	 mov r0,r1
 3138 0066 1146     	 mov r1,r2
 3139 0068 1A46     	 mov r2,r3
 3140 006a 4FF00003 	 mov r3,#0
 3141 006e FFF7FEFF 	 bl fw_integ
 3142 0072 07EE100A 	 fmsr s14,r0
 3143 0076 D7ED027A 	 flds s15,[r7,#8]
 3144 007a 67EE277A 	 fmuls s15,s14,s15
 3145 007e 7B68     	 ldr r3,[r7,#4]
 3146 0080 C3ED017A 	 fsts s15,[r3,#4]
 254:../functions.h **** }
 3147              	 .loc 5 254 0
 3148 0084 1037     	 adds r7,r7,#16
 3149              	.LCFI147:
 3150              	 .cfi_def_cfa_offset 8
 3151 0086 BD46     	 mov sp,r7
 3152              	.LCFI148:
 3153              	 .cfi_def_cfa_register 13
 3154              	 
 3155 0088 80BD     	 pop {r7,pc}
 3156              	 .cfi_endproc
 3157              	.LFE400:
 3159 008a 00BF     	 .section .text.DSOGI_filter,"ax",%progbits
 3160              	 .align 2
 3161              	 .global DSOGI_filter
 3162              	 .thumb
 3163              	 .thumb_func
 3165              	DSOGI_filter:
 3166              	.LFB401:
 255:../functions.h **** 
 256:../functions.h **** void DSOGI_filter(float *v_AB, struct dsogi *s, float *v_ABp){
 3167              	 .loc 5 256 0
 3168              	 .cfi_startproc
 3169              	 
 3170              	 
 3171 0000 80B5     	 push {r7,lr}
 3172              	.LCFI149:
 3173              	 .cfi_def_cfa_offset 8
 3174              	 .cfi_offset 7,-8
 3175              	 .cfi_offset 14,-4
 3176 0002 84B0     	 sub sp,sp,#16
 3177              	.LCFI150:
 3178              	 .cfi_def_cfa_offset 24
 3179 0004 00AF     	 add r7,sp,#0
 3180              	.LCFI151:
 3181              	 .cfi_def_cfa_register 7
 3182 0006 F860     	 str r0,[r7,#12]
 3183 0008 B960     	 str r1,[r7,#8]
 3184 000a 7A60     	 str r2,[r7,#4]
 257:../functions.h **** 	QSG(v_AB[0], s->w, &(s->QSG_d));
 3185              	 .loc 5 257 0
 3186 000c FB68     	 ldr r3,[r7,#12]
 3187 000e 1968     	 ldr r1,[r3]
 3188 0010 BB68     	 ldr r3,[r7,#8]
 3189 0012 1A68     	 ldr r2,[r3]
 3190 0014 BB68     	 ldr r3,[r7,#8]
 3191 0016 0433     	 adds r3,r3,#4
 3192 0018 0846     	 mov r0,r1
 3193 001a 1146     	 mov r1,r2
 3194 001c 1A46     	 mov r2,r3
 3195 001e FFF7FEFF 	 bl QSG
 258:../functions.h **** 	QSG(v_AB[1], s->w, &(s->QSG_q));
 3196              	 .loc 5 258 0
 3197 0022 FB68     	 ldr r3,[r7,#12]
 3198 0024 0433     	 adds r3,r3,#4
 3199 0026 1968     	 ldr r1,[r3]
 3200 0028 BB68     	 ldr r3,[r7,#8]
 3201 002a 1A68     	 ldr r2,[r3]
 3202 002c BB68     	 ldr r3,[r7,#8]
 3203 002e 1C33     	 adds r3,r3,#28
 3204 0030 0846     	 mov r0,r1
 3205 0032 1146     	 mov r1,r2
 3206 0034 1A46     	 mov r2,r3
 3207 0036 FFF7FEFF 	 bl QSG
 259:../functions.h **** 	v_ABp[0]=0.5f*(s->QSG_d.v_AB[0]-s->QSG_q.v_AB[1]);
 3208              	 .loc 5 259 0
 3209 003a BB68     	 ldr r3,[r7,#8]
 3210 003c 93ED017A 	 flds s14,[r3,#4]
 3211 0040 BB68     	 ldr r3,[r7,#8]
 3212 0042 D3ED087A 	 flds s15,[r3,#32]
 3213 0046 77EE677A 	 fsubs s15,s14,s15
 3214 004a B6EE007A 	 fconsts s14,#96
 3215 004e 67EE877A 	 fmuls s15,s15,s14
 3216 0052 7B68     	 ldr r3,[r7,#4]
 3217 0054 C3ED007A 	 fsts s15,[r3]
 260:../functions.h **** 	v_ABp[1]=0.5f*(s->QSG_d.v_AB[1]+s->QSG_q.v_AB[0]);
 3218              	 .loc 5 260 0
 3219 0058 7B68     	 ldr r3,[r7,#4]
 3220 005a 0433     	 adds r3,r3,#4
 3221 005c BA68     	 ldr r2,[r7,#8]
 3222 005e 92ED027A 	 flds s14,[r2,#8]
 3223 0062 BA68     	 ldr r2,[r7,#8]
 3224 0064 D2ED077A 	 flds s15,[r2,#28]
 3225 0068 77EE277A 	 fadds s15,s14,s15
 3226 006c B6EE007A 	 fconsts s14,#96
 3227 0070 67EE877A 	 fmuls s15,s15,s14
 3228 0074 C3ED007A 	 fsts s15,[r3]
 261:../functions.h **** }
 3229              	 .loc 5 261 0
 3230 0078 1037     	 adds r7,r7,#16
 3231              	.LCFI152:
 3232              	 .cfi_def_cfa_offset 8
 3233 007a BD46     	 mov sp,r7
 3234              	.LCFI153:
 3235              	 .cfi_def_cfa_register 13
 3236              	 
 3237 007c 80BD     	 pop {r7,pc}
 3238              	 .cfi_endproc
 3239              	.LFE401:
 3241 007e 00BF     	 .section .text.FFDSOGI_filter,"ax",%progbits
 3242              	 .align 2
 3243              	 .global FFDSOGI_filter
 3244              	 .thumb
 3245              	 .thumb_func
 3247              	FFDSOGI_filter:
 3248              	.LFB402:
 262:../functions.h **** 
 263:../functions.h **** void FFDSOGI_filter(float *v_AB, struct dsogi *s, float w, float *v_ABp){
 3249              	 .loc 5 263 0
 3250              	 .cfi_startproc
 3251              	 
 3252              	 
 3253 0000 80B5     	 push {r7,lr}
 3254              	.LCFI154:
 3255              	 .cfi_def_cfa_offset 8
 3256              	 .cfi_offset 7,-8
 3257              	 .cfi_offset 14,-4
 3258 0002 84B0     	 sub sp,sp,#16
 3259              	.LCFI155:
 3260              	 .cfi_def_cfa_offset 24
 3261 0004 00AF     	 add r7,sp,#0
 3262              	.LCFI156:
 3263              	 .cfi_def_cfa_register 7
 3264 0006 F860     	 str r0,[r7,#12]
 3265 0008 B960     	 str r1,[r7,#8]
 3266 000a 7A60     	 str r2,[r7,#4]
 3267 000c 3B60     	 str r3,[r7]
 264:../functions.h **** 	QSG(v_AB[0], s->w, &(s->QSG_d));
 3268              	 .loc 5 264 0
 3269 000e FB68     	 ldr r3,[r7,#12]
 3270 0010 1968     	 ldr r1,[r3]
 3271 0012 BB68     	 ldr r3,[r7,#8]
 3272 0014 1A68     	 ldr r2,[r3]
 3273 0016 BB68     	 ldr r3,[r7,#8]
 3274 0018 0433     	 adds r3,r3,#4
 3275 001a 0846     	 mov r0,r1
 3276 001c 1146     	 mov r1,r2
 3277 001e 1A46     	 mov r2,r3
 3278 0020 FFF7FEFF 	 bl QSG
 265:../functions.h **** 	QSG(v_AB[1], s->w, &(s->QSG_q));
 3279              	 .loc 5 265 0
 3280 0024 FB68     	 ldr r3,[r7,#12]
 3281 0026 0433     	 adds r3,r3,#4
 3282 0028 1968     	 ldr r1,[r3]
 3283 002a BB68     	 ldr r3,[r7,#8]
 3284 002c 1A68     	 ldr r2,[r3]
 3285 002e BB68     	 ldr r3,[r7,#8]
 3286 0030 1C33     	 adds r3,r3,#28
 3287 0032 0846     	 mov r0,r1
 3288 0034 1146     	 mov r1,r2
 3289 0036 1A46     	 mov r2,r3
 3290 0038 FFF7FEFF 	 bl QSG
 266:../functions.h **** 	v_ABp[0]=0.5f*(s->QSG_d.v_AB[0]-s->QSG_q.v_AB[1]*(w/s->w));
 3291              	 .loc 5 266 0
 3292 003c BB68     	 ldr r3,[r7,#8]
 3293 003e 93ED017A 	 flds s14,[r3,#4]
 3294 0042 BB68     	 ldr r3,[r7,#8]
 3295 0044 D3ED086A 	 flds s13,[r3,#32]
 3296 0048 BB68     	 ldr r3,[r7,#8]
 3297 004a D3ED007A 	 flds s15,[r3]
 3298 004e 97ED016A 	 flds s12,[r7,#4]
 3299 0052 C6EE277A 	 fdivs s15,s12,s15
 3300 0056 66EEA77A 	 fmuls s15,s13,s15
 3301 005a 77EE677A 	 fsubs s15,s14,s15
 3302 005e B6EE007A 	 fconsts s14,#96
 3303 0062 67EE877A 	 fmuls s15,s15,s14
 3304 0066 3B68     	 ldr r3,[r7]
 3305 0068 C3ED007A 	 fsts s15,[r3]
 267:../functions.h **** 	v_ABp[1]=0.5f*(s->QSG_d.v_AB[1]*(w/s->w)+s->QSG_q.v_AB[0]);
 3306              	 .loc 5 267 0
 3307 006c 3B68     	 ldr r3,[r7]
 3308 006e 0433     	 adds r3,r3,#4
 3309 0070 BA68     	 ldr r2,[r7,#8]
 3310 0072 92ED027A 	 flds s14,[r2,#8]
 3311 0076 BA68     	 ldr r2,[r7,#8]
 3312 0078 D2ED007A 	 flds s15,[r2]
 3313 007c D7ED016A 	 flds s13,[r7,#4]
 3314 0080 C6EEA77A 	 fdivs s15,s13,s15
 3315 0084 27EE277A 	 fmuls s14,s14,s15
 3316 0088 BA68     	 ldr r2,[r7,#8]
 3317 008a D2ED077A 	 flds s15,[r2,#28]
 3318 008e 77EE277A 	 fadds s15,s14,s15
 3319 0092 B6EE007A 	 fconsts s14,#96
 3320 0096 67EE877A 	 fmuls s15,s15,s14
 3321 009a C3ED007A 	 fsts s15,[r3]
 268:../functions.h **** }
 3322              	 .loc 5 268 0
 3323 009e 1037     	 adds r7,r7,#16
 3324              	.LCFI157:
 3325              	 .cfi_def_cfa_offset 8
 3326 00a0 BD46     	 mov sp,r7
 3327              	.LCFI158:
 3328              	 .cfi_def_cfa_register 13
 3329              	 
 3330 00a2 80BD     	 pop {r7,pc}
 3331              	 .cfi_endproc
 3332              	.LFE402:
 3334              	 .section .text.update_config,"ax",%progbits
 3335              	 .align 2
 3336              	 .global update_config
 3337              	 .thumb
 3338              	 .thumb_func
 3340              	update_config:
 3341              	.LFB403:
 269:../functions.h **** 
 270:../functions.h **** 
 271:../functions.h **** 
 272:../functions.h **** /*
 273:../functions.h **** void check_errors(void){
 274:../functions.h **** 	if (DIGITAL_IO_GetInput(&FAULT_IN)==1u){
 275:../functions.h **** 		error_code||ACDC_HARDWARE_ERROR;
 276:../functions.h **** 	}
 277:../functions.h **** 	if (V_DCf > conf.Vdc_max){
 278:../functions.h **** 		error_code||ACDC_BUS_OVERVOLTAGE;
 279:../functions.h **** 	}
 280:../functions.h **** 	else if (V_DCf < conf.Vdc_min){
 281:../functions.h **** 		error_code||ACDC_BUS_UNDERVOLTAGE;
 282:../functions.h **** 	}
 283:../functions.h **** 	if (V_dq[0] > conf.Vd_max){
 284:../functions.h **** 		error_code||ACDC_GRID_OVERVOLTAGE;
 285:../functions.h **** 	}
 286:../functions.h **** 	else if (V_dq[0] < conf.Vd_min){
 287:../functions.h **** 		error_code||ACDC_GRID_UNDERVOLTAGE;
 288:../functions.h **** 	}
 289:../functions.h **** 	if (wf > conf.w_max){
 290:../functions.h **** 		error_code||ACDC_GRID_OVERFREQ;
 291:../functions.h **** 	}
 292:../functions.h **** 	else if (wf < conf.w_min){
 293:../functions.h **** 		error_code||ACDC_GRID_UNDERFREQ;
 294:../functions.h **** 	}
 295:../functions.h **** 	if (sync==0u){
 296:../functions.h **** 		error_code||ACDC_GRID_SYNC_LOST;
 297:../functions.h **** 	}
 298:../functions.h **** 	if (PI_cc.flag==1u){
 299:../functions.h **** 		error_code||ACDC_CURRENT_CONTR_SAT;
 300:../functions.h **** 	}
 301:../functions.h **** 	if (PI_Vdc.flag==1u){
 302:../functions.h **** 		error_code||ACDC_VDC_CONTR_SAT;
 303:../functions.h **** 	}
 304:../functions.h **** }
 305:../functions.h **** */
 306:../functions.h **** void update_config(){
 3342              	 .loc 5 306 0
 3343              	 .cfi_startproc
 3344              	 
 3345              	 
 3346              	 
 3347 0000 80B4     	 push {r7}
 3348              	.LCFI159:
 3349              	 .cfi_def_cfa_offset 4
 3350              	 .cfi_offset 7,-4
 3351 0002 00AF     	 add r7,sp,#0
 3352              	.LCFI160:
 3353              	 .cfi_def_cfa_register 7
 307:../functions.h **** 	PI_Vdc.sat[0]=conf.I_max;
 3354              	 .loc 5 307 0
 3355 0004 054B     	 ldr r3,.L144
 3356 0006 9B69     	 ldr r3,[r3,#24]
 3357 0008 054A     	 ldr r2,.L144+4
 3358 000a 9360     	 str r3,[r2,#8]
 308:../functions.h **** 	PI_Vdc.sat[1]=conf.I_min;
 3359              	 .loc 5 308 0
 3360 000c 034B     	 ldr r3,.L144
 3361 000e DB69     	 ldr r3,[r3,#28]
 3362 0010 034A     	 ldr r2,.L144+4
 3363 0012 D360     	 str r3,[r2,#12]
 309:../functions.h **** }
 3364              	 .loc 5 309 0
 3365 0014 BD46     	 mov sp,r7
 3366              	.LCFI161:
 3367              	 .cfi_def_cfa_register 13
 3368              	 
 3369 0016 5DF8047B 	 ldr r7,[sp],#4
 3370              	.LCFI162:
 3371              	 .cfi_restore 7
 3372              	 .cfi_def_cfa_offset 0
 3373 001a 7047     	 bx lr
 3374              	.L145:
 3375              	 .align 2
 3376              	.L144:
 3377 001c 00000000 	 .word conf
 3378 0020 00000000 	 .word PI_Vdc
 3379              	 .cfi_endproc
 3380              	.LFE403:
 3382              	 .comm PR_Test,32,4
 3383              	 .global CTRL_Vab
 3384              	 .section .bss.CTRL_Vab,"aw",%nobits
 3385              	 .align 2
 3388              	CTRL_Vab:
 3389 0000 00000000 	 .space 8
 3389      00000000 
 3390              	 .global PR_output
 3391              	 .section .bss.PR_output,"aw",%nobits
 3392              	 .align 2
 3395              	PR_output:
 3396 0000 00000000 	 .space 4
 3397              	 .comm VDC_BUS_REF,4,4
 3398              	 .comm vdc_bus_error,4,4
 3399              	 .comm vdc_bus_piout,4,4
 3400              	 .comm vdc_division,4,4
 3401              	 .comm m_u,4,4
 3402              	 .comm m_v,4,4
 3403              	 .global SOGI_v_AB
 3404              	 .section .bss.SOGI_v_AB,"aw",%nobits
 3405              	 .align 2
 3408              	SOGI_v_AB:
 3409 0000 00000000 	 .space 8
 3409      00000000 
 3410              	 .global PLL_w
 3411              	 .section .data.PLL_w,"aw",%progbits
 3412              	 .align 2
 3415              	PLL_w:
 3416 0000 63149D43 	 .word 1134367843
 3417              	 .global PLL_w0
 3418              	 .section .data.PLL_w0,"aw",%progbits
 3419              	 .align 2
 3422              	PLL_w0:
 3423 0000 63149D43 	 .word 1134367843
 3424              	 .global PLL_wt
 3425              	 .section .bss.PLL_wt,"aw",%nobits
 3426              	 .align 2
 3429              	PLL_wt:
 3430 0000 00000000 	 .space 4
 3431              	 .global PLL_Vdq
 3432              	 .section .bss.PLL_Vdq,"aw",%nobits
 3433              	 .align 2
 3436              	PLL_Vdq:
 3437 0000 00000000 	 .space 8
 3437      00000000 
 3438              	 .global PLL_LPFbuff_d
 3439              	 .section .bss.PLL_LPFbuff_d,"aw",%nobits
 3440              	 .align 2
 3443              	PLL_LPFbuff_d:
 3444 0000 00000000 	 .space 8
 3444      00000000 
 3445              	 .global PLL_LPFbuff_q
 3446              	 .section .bss.PLL_LPFbuff_q,"aw",%nobits
 3447              	 .align 2
 3450              	PLL_LPFbuff_q:
 3451 0000 00000000 	 .space 8
 3451      00000000 
 3452              	 .global PLL_wt_buff
 3453              	 .section .bss.PLL_wt_buff,"aw",%nobits
 3454              	 .align 2
 3457              	PLL_wt_buff:
 3458 0000 00000000 	 .space 4
 3459              	 .global PLL_LPFbuff_w
 3460              	 .section .bss.PLL_LPFbuff_w,"aw",%nobits
 3461              	 .align 2
 3464              	PLL_LPFbuff_w:
 3465 0000 00000000 	 .space 8
 3465      00000000 
 3466              	 .global PR_LPFbuff_Iu
 3467              	 .section .bss.PR_LPFbuff_Iu,"aw",%nobits
 3468              	 .align 2
 3471              	PR_LPFbuff_Iu:
 3472 0000 00000000 	 .space 8
 3472      00000000 
 3473              	 .global Iu_filt
 3474              	 .section .bss.Iu_filt,"aw",%nobits
 3475              	 .align 2
 3478              	Iu_filt:
 3479 0000 00000000 	 .space 4
 3480              	 .global SOGI_i_AB
 3481              	 .section .bss.SOGI_i_AB,"aw",%nobits
 3482              	 .align 2
 3485              	SOGI_i_AB:
 3486 0000 00000000 	 .space 8
 3486      00000000 
 3487              	 .global CTRL_idq
 3488              	 .section .bss.CTRL_idq,"aw",%nobits
 3489              	 .align 2
 3492              	CTRL_idq:
 3493 0000 00000000 	 .space 8
 3493      00000000 
 3494              	 .global CTRL_idq_ref
 3495              	 .section .bss.CTRL_idq_ref,"aw",%nobits
 3496              	 .align 2
 3499              	CTRL_idq_ref:
 3500 0000 00000000 	 .space 8
 3500      00000000 
 3501              	 .section .text.run_DC_ctrl,"ax",%progbits
 3502              	 .align 2
 3503              	 .global run_DC_ctrl
 3504              	 .thumb
 3505              	 .thumb_func
 3507              	run_DC_ctrl:
 3508              	.LFB404:
 3509              	 .file 7 "../CTRL_functions.h"
   1:../CTRL_functions.h **** #define TS_Control 1e-4 // 100us control period
   2:../CTRL_functions.h **** #define PR_Kp 1.5f
   3:../CTRL_functions.h **** #define PR_Kr 6.0f
   4:../CTRL_functions.h **** #define PR_Wi 15.0f*PI
   5:../CTRL_functions.h **** #define PR_W0 100.0f*PI
   6:../CTRL_functions.h **** 
   7:../CTRL_functions.h **** typedef struct{
   8:../CTRL_functions.h **** 	float kp ;
   9:../CTRL_functions.h ****     float kr ;
  10:../CTRL_functions.h ****     float wi ;
  11:../CTRL_functions.h ****     float reference ;
  12:../CTRL_functions.h ****     float output_of_backward_integrator ;
  13:../CTRL_functions.h ****     float output_of_feedback ;
  14:../CTRL_functions.h ****     float output_of_forward_integrator ;
  15:../CTRL_functions.h ****     float last_input_of_forward_integrator ;
  16:../CTRL_functions.h **** }prStruct;
  17:../CTRL_functions.h **** 
  18:../CTRL_functions.h **** prStruct PR_Test ;
  19:../CTRL_functions.h **** 
  20:../CTRL_functions.h **** 
  21:../CTRL_functions.h **** 
  22:../CTRL_functions.h **** 
  23:../CTRL_functions.h **** 
  24:../CTRL_functions.h **** //float I_dq_ref[2]={0.0f, 0.0f};
  25:../CTRL_functions.h **** //float I_AB[2]={0.0f, 0.0f};
  26:../CTRL_functions.h **** float CTRL_Vab[2]={0.0f, 0.0f};
  27:../CTRL_functions.h **** float PR_output = 0.0f;
  28:../CTRL_functions.h **** float VDC_BUS_REF;
  29:../CTRL_functions.h **** float vdc_bus_error;
  30:../CTRL_functions.h **** float vdc_bus_piout;
  31:../CTRL_functions.h **** float vdc_division;
  32:../CTRL_functions.h **** float m_u;
  33:../CTRL_functions.h **** float m_v;
  34:../CTRL_functions.h **** 
  35:../CTRL_functions.h **** float SOGI_v_AB[2] = {0.0f, 0.0f};
  36:../CTRL_functions.h **** 
  37:../CTRL_functions.h **** float PLL_w = 100.0f*PI;
  38:../CTRL_functions.h **** float PLL_w0 = 100.0f*PI;
  39:../CTRL_functions.h **** float PLL_wt = 0.0f;
  40:../CTRL_functions.h **** float PLL_Vdq[2] = {0.0f, 0.0f};
  41:../CTRL_functions.h **** float PLL_LPFbuff_d[2] = {0.0f, 0.0f};
  42:../CTRL_functions.h **** float PLL_LPFbuff_q[2] = {0.0f, 0.0f};
  43:../CTRL_functions.h **** float PLL_wt_buff = 0.0f;
  44:../CTRL_functions.h **** float PLL_LPFbuff_w[2] = {0.0f, 0.0f};
  45:../CTRL_functions.h **** 
  46:../CTRL_functions.h **** float PR_LPFbuff_Iu[2] = {0.0f, 0.0f};
  47:../CTRL_functions.h **** float Iu_filt = 0.0f;
  48:../CTRL_functions.h **** 
  49:../CTRL_functions.h **** float SOGI_i_AB[2] = {0.0f, 0.0f};
  50:../CTRL_functions.h **** float CTRL_idq[2] = {0.0f, 0.0f};
  51:../CTRL_functions.h **** float CTRL_idq_ref[2] = {0.0f, 0.0f};
  52:../CTRL_functions.h **** 
  53:../CTRL_functions.h **** 
  54:../CTRL_functions.h **** 
  55:../CTRL_functions.h **** 
  56:../CTRL_functions.h **** ///////////  prototypes
  57:../CTRL_functions.h **** void run_DC_ctrl(void);
  58:../CTRL_functions.h **** //void dq_AB(float *dq, float *AB, float wt);
  59:../CTRL_functions.h **** void Init_prStruct(prStruct * s, float, float, float) ;
  60:../CTRL_functions.h **** void set_PR_ref(prStruct * s, float reference);
  61:../CTRL_functions.h **** float Calc_prStruct(prStruct * s, float, float );
  62:../CTRL_functions.h **** 
  63:../CTRL_functions.h **** //////////  functions
  64:../CTRL_functions.h **** 
  65:../CTRL_functions.h **** void run_DC_ctrl(void) {
 3510              	 .loc 7 65 0
 3511              	 .cfi_startproc
 3512              	 
 3513              	 
 3514              	 
 3515 0000 80B4     	 push {r7}
 3516              	.LCFI163:
 3517              	 .cfi_def_cfa_offset 4
 3518              	 .cfi_offset 7,-4
 3519 0002 00AF     	 add r7,sp,#0
 3520              	.LCFI164:
 3521              	 .cfi_def_cfa_register 7
  66:../CTRL_functions.h **** 
  67:../CTRL_functions.h ****   
  68:../CTRL_functions.h **** }
 3522              	 .loc 7 68 0
 3523 0004 BD46     	 mov sp,r7
 3524              	.LCFI165:
 3525              	 .cfi_def_cfa_register 13
 3526              	 
 3527 0006 5DF8047B 	 ldr r7,[sp],#4
 3528              	.LCFI166:
 3529              	 .cfi_restore 7
 3530              	 .cfi_def_cfa_offset 0
 3531 000a 7047     	 bx lr
 3532              	 .cfi_endproc
 3533              	.LFE404:
 3535              	 .section .text.Init_prStruct,"ax",%progbits
 3536              	 .align 2
 3537              	 .global Init_prStruct
 3538              	 .thumb
 3539              	 .thumb_func
 3541              	Init_prStruct:
 3542              	.LFB405:
  69:../CTRL_functions.h **** 
  70:../CTRL_functions.h **** 
  71:../CTRL_functions.h **** //void dq_AB(float *dq, float *AB, float wt){
  72:../CTRL_functions.h **** //    // Conventional conversion into orthogonal components
  73:../CTRL_functions.h **** //    float C=cos(wt);
  74:../CTRL_functions.h **** //    float S=sin(wt);
  75:../CTRL_functions.h **** //    *AB=C**dq-S**(dq+1);
  76:../CTRL_functions.h **** //    *(AB+1)=S**dq+C**(dq+1);
  77:../CTRL_functions.h **** //}
  78:../CTRL_functions.h **** 
  79:../CTRL_functions.h **** 
  80:../CTRL_functions.h **** void Init_prStruct(prStruct * s, float kp_set, float kr_set, float wi_set){
 3543              	 .loc 7 80 0
 3544              	 .cfi_startproc
 3545              	 
 3546              	 
 3547              	 
 3548 0000 80B4     	 push {r7}
 3549              	.LCFI167:
 3550              	 .cfi_def_cfa_offset 4
 3551              	 .cfi_offset 7,-4
 3552 0002 85B0     	 sub sp,sp,#20
 3553              	.LCFI168:
 3554              	 .cfi_def_cfa_offset 24
 3555 0004 00AF     	 add r7,sp,#0
 3556              	.LCFI169:
 3557              	 .cfi_def_cfa_register 7
 3558 0006 F860     	 str r0,[r7,#12]
 3559 0008 B960     	 str r1,[r7,#8]
 3560 000a 7A60     	 str r2,[r7,#4]
 3561 000c 3B60     	 str r3,[r7]
  81:../CTRL_functions.h ****     s->kp = kp_set ;
 3562              	 .loc 7 81 0
 3563 000e FB68     	 ldr r3,[r7,#12]
 3564 0010 BA68     	 ldr r2,[r7,#8]
 3565 0012 1A60     	 str r2,[r3]
  82:../CTRL_functions.h ****     s->kr = kr_set ;
 3566              	 .loc 7 82 0
 3567 0014 FB68     	 ldr r3,[r7,#12]
 3568 0016 7A68     	 ldr r2,[r7,#4]
 3569 0018 5A60     	 str r2,[r3,#4]
  83:../CTRL_functions.h ****     s->wi = wi_set ;
 3570              	 .loc 7 83 0
 3571 001a FB68     	 ldr r3,[r7,#12]
 3572 001c 3A68     	 ldr r2,[r7]
 3573 001e 9A60     	 str r2,[r3,#8]
  84:../CTRL_functions.h ****     s->output_of_feedback = 0.0f ;
 3574              	 .loc 7 84 0
 3575 0020 FB68     	 ldr r3,[r7,#12]
 3576 0022 4FF00002 	 mov r2,#0
 3577 0026 5A61     	 str r2,[r3,#20]
  85:../CTRL_functions.h ****     s->output_of_backward_integrator = 0.0f ;
 3578              	 .loc 7 85 0
 3579 0028 FB68     	 ldr r3,[r7,#12]
 3580 002a 4FF00002 	 mov r2,#0
 3581 002e 1A61     	 str r2,[r3,#16]
  86:../CTRL_functions.h ****     s->output_of_forward_integrator = 0.0f ;
 3582              	 .loc 7 86 0
 3583 0030 FB68     	 ldr r3,[r7,#12]
 3584 0032 4FF00002 	 mov r2,#0
 3585 0036 9A61     	 str r2,[r3,#24]
  87:../CTRL_functions.h ****     s->reference = 0 ;
 3586              	 .loc 7 87 0
 3587 0038 FB68     	 ldr r3,[r7,#12]
 3588 003a 4FF00002 	 mov r2,#0
 3589 003e DA60     	 str r2,[r3,#12]
  88:../CTRL_functions.h **** }
 3590              	 .loc 7 88 0
 3591 0040 1437     	 adds r7,r7,#20
 3592              	.LCFI170:
 3593              	 .cfi_def_cfa_offset 4
 3594 0042 BD46     	 mov sp,r7
 3595              	.LCFI171:
 3596              	 .cfi_def_cfa_register 13
 3597              	 
 3598 0044 5DF8047B 	 ldr r7,[sp],#4
 3599              	.LCFI172:
 3600              	 .cfi_restore 7
 3601              	 .cfi_def_cfa_offset 0
 3602 0048 7047     	 bx lr
 3603              	 .cfi_endproc
 3604              	.LFE405:
 3606 004a 00BF     	 .section .text.set_PR_ref,"ax",%progbits
 3607              	 .align 2
 3608              	 .global set_PR_ref
 3609              	 .thumb
 3610              	 .thumb_func
 3612              	set_PR_ref:
 3613              	.LFB406:
  89:../CTRL_functions.h **** void set_PR_ref(prStruct * s, float reference) {
 3614              	 .loc 7 89 0
 3615              	 .cfi_startproc
 3616              	 
 3617              	 
 3618              	 
 3619 0000 80B4     	 push {r7}
 3620              	.LCFI173:
 3621              	 .cfi_def_cfa_offset 4
 3622              	 .cfi_offset 7,-4
 3623 0002 83B0     	 sub sp,sp,#12
 3624              	.LCFI174:
 3625              	 .cfi_def_cfa_offset 16
 3626 0004 00AF     	 add r7,sp,#0
 3627              	.LCFI175:
 3628              	 .cfi_def_cfa_register 7
 3629 0006 7860     	 str r0,[r7,#4]
 3630 0008 3960     	 str r1,[r7]
  90:../CTRL_functions.h ****     s->reference = reference;
 3631              	 .loc 7 90 0
 3632 000a 7B68     	 ldr r3,[r7,#4]
 3633 000c 3A68     	 ldr r2,[r7]
 3634 000e DA60     	 str r2,[r3,#12]
  91:../CTRL_functions.h **** }
 3635              	 .loc 7 91 0
 3636 0010 0C37     	 adds r7,r7,#12
 3637              	.LCFI176:
 3638              	 .cfi_def_cfa_offset 4
 3639 0012 BD46     	 mov sp,r7
 3640              	.LCFI177:
 3641              	 .cfi_def_cfa_register 13
 3642              	 
 3643 0014 5DF8047B 	 ldr r7,[sp],#4
 3644              	.LCFI178:
 3645              	 .cfi_restore 7
 3646              	 .cfi_def_cfa_offset 0
 3647 0018 7047     	 bx lr
 3648              	 .cfi_endproc
 3649              	.LFE406:
 3651              	 .global __aeabi_f2d
 3652              	 .global __aeabi_dmul
 3653              	 .global __aeabi_dadd
 3654              	 .global __aeabi_d2f
 3655 001a 00BF     	 .section .text.Calc_prStruct,"ax",%progbits
 3656              	 .align 2
 3657              	 .global Calc_prStruct
 3658              	 .thumb
 3659              	 .thumb_func
 3661              	Calc_prStruct:
 3662              	.LFB407:
  92:../CTRL_functions.h **** float Calc_prStruct(prStruct * s, float feedback, float wg){
 3663              	 .loc 7 92 0
 3664              	 .cfi_startproc
 3665              	 
 3666              	 
 3667 0000 2DE9B043 	 push {r4,r5,r7,r8,r9,lr}
 3668              	.LCFI179:
 3669              	 .cfi_def_cfa_offset 24
 3670              	 .cfi_offset 4,-24
 3671              	 .cfi_offset 5,-20
 3672              	 .cfi_offset 7,-16
 3673              	 .cfi_offset 8,-12
 3674              	 .cfi_offset 9,-8
 3675              	 .cfi_offset 14,-4
 3676 0004 86B0     	 sub sp,sp,#24
 3677              	.LCFI180:
 3678              	 .cfi_def_cfa_offset 48
 3679 0006 00AF     	 add r7,sp,#0
 3680              	.LCFI181:
 3681              	 .cfi_def_cfa_register 7
 3682 0008 F860     	 str r0,[r7,#12]
 3683 000a B960     	 str r1,[r7,#8]
 3684 000c 7A60     	 str r2,[r7,#4]
  93:../CTRL_functions.h ****     float error = s->reference - feedback ;
 3685              	 .loc 7 93 0
 3686 000e FB68     	 ldr r3,[r7,#12]
 3687 0010 93ED037A 	 flds s14,[r3,#12]
 3688 0014 D7ED027A 	 flds s15,[r7,#8]
 3689 0018 77EE677A 	 fsubs s15,s14,s15
 3690 001c C7ED057A 	 fsts s15,[r7,#20]
  94:../CTRL_functions.h **** 
  95:../CTRL_functions.h ****     float input_of_forward_integrator = 2 * s->wi * s->kr * error - s->output_of_feedback;
 3691              	 .loc 7 95 0
 3692 0020 FB68     	 ldr r3,[r7,#12]
 3693 0022 D3ED027A 	 flds s15,[r3,#8]
 3694 0026 37EEA77A 	 fadds s14,s15,s15
 3695 002a FB68     	 ldr r3,[r7,#12]
 3696 002c D3ED017A 	 flds s15,[r3,#4]
 3697 0030 27EE277A 	 fmuls s14,s14,s15
 3698 0034 D7ED057A 	 flds s15,[r7,#20]
 3699 0038 27EE277A 	 fmuls s14,s14,s15
 3700 003c FB68     	 ldr r3,[r7,#12]
 3701 003e D3ED057A 	 flds s15,[r3,#20]
 3702 0042 77EE677A 	 fsubs s15,s14,s15
 3703 0046 C7ED047A 	 fsts s15,[r7,#16]
  96:../CTRL_functions.h ****     // Forward integrator :
  97:../CTRL_functions.h ****     s->output_of_forward_integrator += TS_Control *  input_of_forward_integrator;
 3704              	 .loc 7 97 0
 3705 004a FB68     	 ldr r3,[r7,#12]
 3706 004c 9B69     	 ldr r3,[r3,#24]
 3707 004e 1846     	 mov r0,r3
 3708 0050 FFF7FEFF 	 bl __aeabi_f2d
 3709 0054 0446     	 mov r4,r0
 3710 0056 0D46     	 mov r5,r1
 3711 0058 3869     	 ldr r0,[r7,#16]
 3712 005a FFF7FEFF 	 bl __aeabi_f2d
 3713 005e 0246     	 mov r2,r0
 3714 0060 0B46     	 mov r3,r1
 3715 0062 1046     	 mov r0,r2
 3716 0064 1946     	 mov r1,r3
 3717 0066 3CA3     	 adr r3,.L151
 3718 0068 D3E90023 	 ldrd r2,[r3]
 3719 006c FFF7FEFF 	 bl __aeabi_dmul
 3720 0070 0246     	 mov r2,r0
 3721 0072 0B46     	 mov r3,r1
 3722 0074 2046     	 mov r0,r4
 3723 0076 2946     	 mov r1,r5
 3724 0078 FFF7FEFF 	 bl __aeabi_dadd
 3725 007c 0246     	 mov r2,r0
 3726 007e 0B46     	 mov r3,r1
 3727 0080 1046     	 mov r0,r2
 3728 0082 1946     	 mov r1,r3
 3729 0084 FFF7FEFF 	 bl __aeabi_d2f
 3730 0088 0246     	 mov r2,r0
 3731 008a FB68     	 ldr r3,[r7,#12]
 3732 008c 9A61     	 str r2,[r3,#24]
  98:../CTRL_functions.h **** 
  99:../CTRL_functions.h ****     // Backward integrator:
 100:../CTRL_functions.h ****     s->output_of_backward_integrator += TS_Control * s->output_of_forward_integrator * wg * wg ;
 3733              	 .loc 7 100 0
 3734 008e FB68     	 ldr r3,[r7,#12]
 3735 0090 1B69     	 ldr r3,[r3,#16]
 3736 0092 1846     	 mov r0,r3
 3737 0094 FFF7FEFF 	 bl __aeabi_f2d
 3738 0098 0446     	 mov r4,r0
 3739 009a 0D46     	 mov r5,r1
 3740 009c FB68     	 ldr r3,[r7,#12]
 3741 009e 9B69     	 ldr r3,[r3,#24]
 3742 00a0 1846     	 mov r0,r3
 3743 00a2 FFF7FEFF 	 bl __aeabi_f2d
 3744 00a6 0246     	 mov r2,r0
 3745 00a8 0B46     	 mov r3,r1
 3746 00aa 1046     	 mov r0,r2
 3747 00ac 1946     	 mov r1,r3
 3748 00ae 2AA3     	 adr r3,.L151
 3749 00b0 D3E90023 	 ldrd r2,[r3]
 3750 00b4 FFF7FEFF 	 bl __aeabi_dmul
 3751 00b8 0246     	 mov r2,r0
 3752 00ba 0B46     	 mov r3,r1
 3753 00bc 9046     	 mov r8,r2
 3754 00be 9946     	 mov r9,r3
 3755 00c0 7868     	 ldr r0,[r7,#4]
 3756 00c2 FFF7FEFF 	 bl __aeabi_f2d
 3757 00c6 0246     	 mov r2,r0
 3758 00c8 0B46     	 mov r3,r1
 3759 00ca 4046     	 mov r0,r8
 3760 00cc 4946     	 mov r1,r9
 3761 00ce FFF7FEFF 	 bl __aeabi_dmul
 3762 00d2 0246     	 mov r2,r0
 3763 00d4 0B46     	 mov r3,r1
 3764 00d6 9046     	 mov r8,r2
 3765 00d8 9946     	 mov r9,r3
 3766 00da 7868     	 ldr r0,[r7,#4]
 3767 00dc FFF7FEFF 	 bl __aeabi_f2d
 3768 00e0 0246     	 mov r2,r0
 3769 00e2 0B46     	 mov r3,r1
 3770 00e4 4046     	 mov r0,r8
 3771 00e6 4946     	 mov r1,r9
 3772 00e8 FFF7FEFF 	 bl __aeabi_dmul
 3773 00ec 0246     	 mov r2,r0
 3774 00ee 0B46     	 mov r3,r1
 3775 00f0 2046     	 mov r0,r4
 3776 00f2 2946     	 mov r1,r5
 3777 00f4 FFF7FEFF 	 bl __aeabi_dadd
 3778 00f8 0246     	 mov r2,r0
 3779 00fa 0B46     	 mov r3,r1
 3780 00fc 1046     	 mov r0,r2
 3781 00fe 1946     	 mov r1,r3
 3782 0100 FFF7FEFF 	 bl __aeabi_d2f
 3783 0104 0246     	 mov r2,r0
 3784 0106 FB68     	 ldr r3,[r7,#12]
 3785 0108 1A61     	 str r2,[r3,#16]
 101:../CTRL_functions.h **** 
 102:../CTRL_functions.h ****     s->output_of_feedback = s->output_of_backward_integrator + 2 * s->wi * s->output_of_forward_int
 3786              	 .loc 7 102 0
 3787 010a FB68     	 ldr r3,[r7,#12]
 3788 010c 93ED047A 	 flds s14,[r3,#16]
 3789 0110 FB68     	 ldr r3,[r7,#12]
 3790 0112 D3ED027A 	 flds s15,[r3,#8]
 3791 0116 77EEA76A 	 fadds s13,s15,s15
 3792 011a FB68     	 ldr r3,[r7,#12]
 3793 011c D3ED067A 	 flds s15,[r3,#24]
 3794 0120 66EEA77A 	 fmuls s15,s13,s15
 3795 0124 77EE277A 	 fadds s15,s14,s15
 3796 0128 FB68     	 ldr r3,[r7,#12]
 3797 012a C3ED057A 	 fsts s15,[r3,#20]
 103:../CTRL_functions.h **** 
 104:../CTRL_functions.h ****     return s->output_of_forward_integrator + s->kp * error;
 3798              	 .loc 7 104 0
 3799 012e FB68     	 ldr r3,[r7,#12]
 3800 0130 93ED067A 	 flds s14,[r3,#24]
 3801 0134 FB68     	 ldr r3,[r7,#12]
 3802 0136 D3ED006A 	 flds s13,[r3]
 3803 013a D7ED057A 	 flds s15,[r7,#20]
 3804 013e 66EEA77A 	 fmuls s15,s13,s15
 3805 0142 77EE277A 	 fadds s15,s14,s15
 3806 0146 17EE903A 	 fmrs r3,s15
 105:../CTRL_functions.h **** }
 3807              	 .loc 7 105 0
 3808 014a 1846     	 mov r0,r3
 3809 014c 1837     	 adds r7,r7,#24
 3810              	.LCFI182:
 3811              	 .cfi_def_cfa_offset 24
 3812 014e BD46     	 mov sp,r7
 3813              	.LCFI183:
 3814              	 .cfi_def_cfa_register 13
 3815              	 
 3816 0150 BDE8B083 	 pop {r4,r5,r7,r8,r9,pc}
 3817              	.L152:
 3818 0154 AFF30080 	 .align 3
 3819              	.L151:
 3820 0158 2D431CEB 	 .word -350469331
 3821 015c E2361A3F 	 .word 1058682594
 3822              	 .cfi_endproc
 3823              	.LFE407:
 3825              	 .comm scope1,4,4
 3826              	 .comm scope2,4,4
 3827              	 .comm scope3,4,4
 3828              	 .comm scopeu1,4,4
 3829              	 .comm scopeu2,4,4
 3830              	 .comm scopeu3,4,4
 3831              	 .global counter
 3832              	 .section .data.counter,"aw",%progbits
 3833              	 .align 2
 3836              	counter:
 3837 0000 01000000 	 .word 1
 3838              	 .global fault
 3839              	 .section .bss.fault,"aw",%nobits
 3840              	 .align 2
 3843              	fault:
 3844 0000 00000000 	 .space 4
 3845              	 .global vDQp_ref
 3846              	 .section .data.vDQp_ref,"aw",%progbits
 3847              	 .align 2
 3850              	vDQp_ref:
 3851 0000 0000803F 	 .word 1065353216
 3852 0004 00000000 	 .word 0
 3853              	 .global vDQp
 3854              	 .section .bss.vDQp,"aw",%nobits
 3855              	 .align 2
 3858              	vDQp:
 3859 0000 00000000 	 .space 8
 3859      00000000 
 3860              	 .global vABp
 3861              	 .section .bss.vABp,"aw",%nobits
 3862              	 .align 2
 3865              	vABp:
 3866 0000 00000000 	 .space 8
 3866      00000000 
 3867              	 .global vDQn_ref
 3868              	 .section .bss.vDQn_ref,"aw",%nobits
 3869              	 .align 2
 3872              	vDQn_ref:
 3873 0000 00000000 	 .space 8
 3873      00000000 
 3874              	 .global vDQn
 3875              	 .section .bss.vDQn,"aw",%nobits
 3876              	 .align 2
 3879              	vDQn:
 3880 0000 00000000 	 .space 8
 3880      00000000 
 3881              	 .global vABn
 3882              	 .section .bss.vABn,"aw",%nobits
 3883              	 .align 2
 3886              	vABn:
 3887 0000 00000000 	 .space 8
 3887      00000000 
 3888              	 .global Vn
 3889              	 .section .data.Vn,"aw",%progbits
 3890              	 .align 2
 3893              	Vn:
 3894 0000 0000003F 	 .word 1056964608
 3895              	 .global V5
 3896              	 .section .bss.V5,"aw",%nobits
 3897              	 .align 2
 3900              	V5:
 3901 0000 00000000 	 .space 4
 3902              	 .global V7
 3903              	 .section .bss.V7,"aw",%nobits
 3904              	 .align 2
 3907              	V7:
 3908 0000 00000000 	 .space 4
 3909              	 .global V11
 3910              	 .section .bss.V11,"aw",%nobits
 3911              	 .align 2
 3914              	V11:
 3915 0000 00000000 	 .space 4
 3916              	 .global V13
 3917              	 .section .bss.V13,"aw",%nobits
 3918              	 .align 2
 3921              	V13:
 3922 0000 00000000 	 .space 4
 3923              	 .global vDQ5
 3924              	 .section .bss.vDQ5,"aw",%nobits
 3925              	 .align 2
 3928              	vDQ5:
 3929 0000 00000000 	 .space 8
 3929      00000000 
 3930              	 .global vAB5
 3931              	 .section .bss.vAB5,"aw",%nobits
 3932              	 .align 2
 3935              	vAB5:
 3936 0000 00000000 	 .space 8
 3936      00000000 
 3937              	 .global vabc5
 3938              	 .section .bss.vabc5,"aw",%nobits
 3939              	 .align 2
 3942              	vabc5:
 3943 0000 00000000 	 .space 12
 3943      00000000 
 3943      00000000 
 3944              	 .global vDQ7
 3945              	 .section .bss.vDQ7,"aw",%nobits
 3946              	 .align 2
 3949              	vDQ7:
 3950 0000 00000000 	 .space 8
 3950      00000000 
 3951              	 .global vAB7
 3952              	 .section .bss.vAB7,"aw",%nobits
 3953              	 .align 2
 3956              	vAB7:
 3957 0000 00000000 	 .space 8
 3957      00000000 
 3958              	 .global vabc7
 3959              	 .section .bss.vabc7,"aw",%nobits
 3960              	 .align 2
 3963              	vabc7:
 3964 0000 00000000 	 .space 12
 3964      00000000 
 3964      00000000 
 3965              	 .global vDQ11
 3966              	 .section .bss.vDQ11,"aw",%nobits
 3967              	 .align 2
 3970              	vDQ11:
 3971 0000 00000000 	 .space 8
 3971      00000000 
 3972              	 .global vAB11
 3973              	 .section .bss.vAB11,"aw",%nobits
 3974              	 .align 2
 3977              	vAB11:
 3978 0000 00000000 	 .space 8
 3978      00000000 
 3979              	 .global vabc11
 3980              	 .section .bss.vabc11,"aw",%nobits
 3981              	 .align 2
 3984              	vabc11:
 3985 0000 00000000 	 .space 12
 3985      00000000 
 3985      00000000 
 3986              	 .global vDQ13
 3987              	 .section .bss.vDQ13,"aw",%nobits
 3988              	 .align 2
 3991              	vDQ13:
 3992 0000 00000000 	 .space 8
 3992      00000000 
 3993              	 .global vAB13
 3994              	 .section .bss.vAB13,"aw",%nobits
 3995              	 .align 2
 3998              	vAB13:
 3999 0000 00000000 	 .space 8
 3999      00000000 
 4000              	 .global vabc13
 4001              	 .section .bss.vabc13,"aw",%nobits
 4002              	 .align 2
 4005              	vabc13:
 4006 0000 00000000 	 .space 12
 4006      00000000 
 4006      00000000 
 4007              	 .global vmAB
 4008              	 .section .bss.vmAB,"aw",%nobits
 4009              	 .align 2
 4012              	vmAB:
 4013 0000 00000000 	 .space 8
 4013      00000000 
 4014              	 .global vmabc
 4015              	 .section .bss.vmabc,"aw",%nobits
 4016              	 .align 2
 4019              	vmabc:
 4020 0000 00000000 	 .space 12
 4020      00000000 
 4020      00000000 
 4021              	 .global wt_buff5
 4022              	 .section .bss.wt_buff5,"aw",%nobits
 4023              	 .align 2
 4026              	wt_buff5:
 4027 0000 00000000 	 .space 4
 4028              	 .global wt_buff7
 4029              	 .section .bss.wt_buff7,"aw",%nobits
 4030              	 .align 2
 4033              	wt_buff7:
 4034 0000 00000000 	 .space 4
 4035              	 .global wt_buff11
 4036              	 .section .bss.wt_buff11,"aw",%nobits
 4037              	 .align 2
 4040              	wt_buff11:
 4041 0000 00000000 	 .space 4
 4042              	 .global wt_buff13
 4043              	 .section .bss.wt_buff13,"aw",%nobits
 4044              	 .align 2
 4047              	wt_buff13:
 4048 0000 00000000 	 .space 4
 4049              	 .global wt5
 4050              	 .section .bss.wt5,"aw",%nobits
 4051              	 .align 2
 4054              	wt5:
 4055 0000 00000000 	 .space 4
 4056              	 .global wt7
 4057              	 .section .bss.wt7,"aw",%nobits
 4058              	 .align 2
 4061              	wt7:
 4062 0000 00000000 	 .space 4
 4063              	 .global wt11
 4064              	 .section .bss.wt11,"aw",%nobits
 4065              	 .align 2
 4068              	wt11:
 4069 0000 00000000 	 .space 4
 4070              	 .global wt13
 4071              	 .section .bss.wt13,"aw",%nobits
 4072              	 .align 2
 4075              	wt13:
 4076 0000 00000000 	 .space 4
 4077              	 .global wt_jump
 4078              	 .section .bss.wt_jump,"aw",%nobits
 4079              	 .align 2
 4082              	wt_jump:
 4083 0000 00000000 	 .space 4
 4084              	 .comm scope_adc1,4,4
 4085              	 .comm scope_adc2,4,4
 4086              	 .comm scope_adc3,4,4
 4087              	 .comm scope_adc4,4,4
 4088              	 .comm scope_adc5,4,4
 4089              	 .comm scope_adc6,4,4
 4090              	 .comm scope_adc7,4,4
 4091              	 .comm aux_var1,4,4
 4092              	 .comm aux_var2,4,4
 4093              	 .comm aux_var3,4,4
 4094              	 .comm aux_var4,4,4
 4095              	 .comm aux_var5,4,4
 4096              	 .comm aux_var6,4,4
 4097              	 .comm aux_var7,4,4
 4098              	 .global LPFbuff_vdc
 4099              	 .section .bss.LPFbuff_vdc,"aw",%nobits
 4100              	 .align 2
 4103              	LPFbuff_vdc:
 4104 0000 00000000 	 .space 8
 4104      00000000 
 4105              	 .global LPFbuff_temp
 4106              	 .section .bss.LPFbuff_temp,"aw",%nobits
 4107              	 .align 2
 4110              	LPFbuff_temp:
 4111 0000 00000000 	 .space 8
 4111      00000000 
 4112              	 .global LPFbuff_v
 4113              	 .section .bss.LPFbuff_v,"aw",%nobits
 4114              	 .align 2
 4117              	LPFbuff_v:
 4118 0000 00000000 	 .space 8
 4118      00000000 
 4119              	 .global LPFbuff_v2
 4120              	 .section .bss.LPFbuff_v2,"aw",%nobits
 4121              	 .align 2
 4124              	LPFbuff_v2:
 4125 0000 00000000 	 .space 8
 4125      00000000 
 4126              	 .global AB_aux
 4127              	 .section .bss.AB_aux,"aw",%nobits
 4128              	 .align 2
 4131              	AB_aux:
 4132 0000 00000000 	 .space 8
 4132      00000000 
 4133              	 .global dq_aux
 4134              	 .section .bss.dq_aux,"aw",%nobits
 4135              	 .align 2
 4138              	dq_aux:
 4139 0000 00000000 	 .space 8
 4139      00000000 
 4140              	 .global wt_aux
 4141              	 .section .bss.wt_aux,"aw",%nobits
 4142              	 .align 2
 4145              	wt_aux:
 4146 0000 00000000 	 .space 4
 4147              	 .global w_aux
 4148              	 .section .data.w_aux,"aw",%progbits
 4149              	 .align 2
 4152              	w_aux:
 4153 0000 63149D43 	 .word 1134367843
 4154              	 .global LPFbuff_w_aux
 4155              	 .section .bss.LPFbuff_w_aux,"aw",%nobits
 4156              	 .align 2
 4159              	LPFbuff_w_aux:
 4160 0000 00000000 	 .space 8
 4160      00000000 
 4161              	 .global LPFbuff_dq1_aux
 4162              	 .section .bss.LPFbuff_dq1_aux,"aw",%nobits
 4163              	 .align 2
 4166              	LPFbuff_dq1_aux:
 4167 0000 00000000 	 .space 8
 4167      00000000 
 4168              	 .global LPFbuff_dq2_aux
 4169              	 .section .bss.LPFbuff_dq2_aux,"aw",%nobits
 4170              	 .align 2
 4173              	LPFbuff_dq2_aux:
 4174 0000 00000000 	 .space 8
 4174      00000000 
 4175              	 .global ADC_LPFbuff_VA
 4176              	 .section .bss.ADC_LPFbuff_VA,"aw",%nobits
 4177              	 .align 2
 4180              	ADC_LPFbuff_VA:
 4181 0000 00000000 	 .space 8
 4181      00000000 
 4182              	 .global ADC_LPFbuff_VB
 4183              	 .section .bss.ADC_LPFbuff_VB,"aw",%nobits
 4184              	 .align 2
 4187              	ADC_LPFbuff_VB:
 4188 0000 00000000 	 .space 8
 4188      00000000 
 4189              	 .global ADC_LPFbuff_VC
 4190              	 .section .bss.ADC_LPFbuff_VC,"aw",%nobits
 4191              	 .align 2
 4194              	ADC_LPFbuff_VC:
 4195 0000 00000000 	 .space 8
 4195      00000000 
 4196              	 .global ADC_LPFbuff_IA
 4197              	 .section .bss.ADC_LPFbuff_IA,"aw",%nobits
 4198              	 .align 2
 4201              	ADC_LPFbuff_IA:
 4202 0000 00000000 	 .space 8
 4202      00000000 
 4203              	 .global ADC_LPFbuff_IB
 4204              	 .section .bss.ADC_LPFbuff_IB,"aw",%nobits
 4205              	 .align 2
 4208              	ADC_LPFbuff_IB:
 4209 0000 00000000 	 .space 8
 4209      00000000 
 4210              	 .global ADC_LPFbuff_IC
 4211              	 .section .bss.ADC_LPFbuff_IC,"aw",%nobits
 4212              	 .align 2
 4215              	ADC_LPFbuff_IC:
 4216 0000 00000000 	 .space 8
 4216      00000000 
 4217              	 .global SCADA_enable
 4218              	 .section .bss.SCADA_enable,"aw",%nobits
 4219              	 .align 2
 4222              	SCADA_enable:
 4223 0000 00000000 	 .space 4
 4224              	 .global SCADA_disable
 4225              	 .section .bss.SCADA_disable,"aw",%nobits
 4226              	 .align 2
 4229              	SCADA_disable:
 4230 0000 00000000 	 .space 4
 4231              	 .global SCADA_status_button
 4232              	 .section .bss.SCADA_status_button,"aw",%nobits
 4233              	 .align 2
 4236              	SCADA_status_button:
 4237 0000 00000000 	 .space 4
 4238              	 .global SCADA_Imax
 4239              	 .section .data.SCADA_Imax,"aw",%progbits
 4240              	 .align 2
 4243              	SCADA_Imax:
 4244 0000 00007041 	 .word 1097859072
 4245              	 .global SCADA_VDCmax
 4246              	 .section .data.SCADA_VDCmax,"aw",%progbits
 4247              	 .align 2
 4250              	SCADA_VDCmax:
 4251 0000 00003443 	 .word 1127481344
 4252              	 .global SCADA_VDCmin
 4253              	 .section .data.SCADA_VDCmin,"aw",%progbits
 4254              	 .align 2
 4257              	SCADA_VDCmin:
 4258 0000 000020C1 	 .word -1054867456
 4259              	 .global SCADA_Tmax
 4260              	 .section .data.SCADA_Tmax,"aw",%progbits
 4261              	 .align 2
 4264              	SCADA_Tmax:
 4265 0000 00007042 	 .word 1114636288
 4266              	 .global SCADA_error_Ia
 4267              	 .section .bss.SCADA_error_Ia,"aw",%nobits
 4268              	 .align 2
 4271              	SCADA_error_Ia:
 4272 0000 00000000 	 .space 4
 4273              	 .global SCADA_error_Ib
 4274              	 .section .bss.SCADA_error_Ib,"aw",%nobits
 4275              	 .align 2
 4278              	SCADA_error_Ib:
 4279 0000 00000000 	 .space 4
 4280              	 .global SCADA_error_Ic
 4281              	 .section .bss.SCADA_error_Ic,"aw",%nobits
 4282              	 .align 2
 4285              	SCADA_error_Ic:
 4286 0000 00000000 	 .space 4
 4287              	 .global SCADA_error_VDCmax
 4288              	 .section .bss.SCADA_error_VDCmax,"aw",%nobits
 4289              	 .align 2
 4292              	SCADA_error_VDCmax:
 4293 0000 00000000 	 .space 4
 4294              	 .global SCADA_error_VDCmin
 4295              	 .section .bss.SCADA_error_VDCmin,"aw",%nobits
 4296              	 .align 2
 4299              	SCADA_error_VDCmin:
 4300 0000 00000000 	 .space 4
 4301              	 .global SCADA_error_Tmax
 4302              	 .section .bss.SCADA_error_Tmax,"aw",%nobits
 4303              	 .align 2
 4306              	SCADA_error_Tmax:
 4307 0000 00000000 	 .space 4
 4308              	 .global timer_sm
 4309              	 .section .bss.timer_sm,"aw",%nobits
 4310              	 .align 2
 4313              	timer_sm:
 4314 0000 00000000 	 .space 4
 4315              	 .global SCADA_Id_ref
 4316              	 .section .bss.SCADA_Id_ref,"aw",%nobits
 4317              	 .align 2
 4320              	SCADA_Id_ref:
 4321 0000 00000000 	 .space 4
 4322              	 .global SCADA_Iq_ref
 4323              	 .section .bss.SCADA_Iq_ref,"aw",%nobits
 4324              	 .align 2
 4327              	SCADA_Iq_ref:
 4328 0000 00000000 	 .space 4
 4329              	 .global SCADA_Vdc_ref
 4330              	 .section .data.SCADA_Vdc_ref,"aw",%progbits
 4331              	 .align 2
 4334              	SCADA_Vdc_ref:
 4335 0000 00004843 	 .word 1128792064
 4336              	 .section .text.no_fault,"ax",%progbits
 4337              	 .align 2
 4338              	 .global no_fault
 4339              	 .thumb
 4340              	 .thumb_func
 4342              	no_fault:
 4343              	.LFB408:
 4344              	 .file 8 "../main.c"
   1:../main.c     **** /*
   2:../main.c     ****  * main.c
   3:../main.c     ****  *
   4:../main.c     ****  *  Created on: 2019 Nov 21 12
   5:../main.c     ****  *  Author: VMORAIS
   6:../main.c     ****  *	Version 1p_inv
   7:../main.c     ****  */
   8:../main.c     **** 
   9:../main.c     **** #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declaratio
  10:../main.c     **** #include <probe_scope.h>
  11:../main.c     **** #include "init.h"
  12:../main.c     **** #include "functions.h"
  13:../main.c     **** #include "CTRL_functions.h"
  14:../main.c     **** 
  15:../main.c     **** float scope1, scope2, scope3;
  16:../main.c     **** uint32_t scopeu1, scopeu2, scopeu3;
  17:../main.c     **** uint32_t counter=1u;
  18:../main.c     **** uint32_t fault=0u;
  19:../main.c     **** 
  20:../main.c     **** float vDQp_ref[2]={1.0f, 0.0f};
  21:../main.c     **** float vDQp[2]={0.0f, 0.0f};
  22:../main.c     **** float vABp[2]={0.0f, 0.0f};
  23:../main.c     **** 
  24:../main.c     **** float vDQn_ref[2]={0.0f, 0.0f};
  25:../main.c     **** float vDQn[2]={0.0f, 0.0f};
  26:../main.c     **** float vABn[2]={0.0f, 0.0f};
  27:../main.c     **** float Vn=0.5f, V5=0.0f, V7=0.0f, V11=0.0f, V13=0.0f;
  28:../main.c     **** 
  29:../main.c     **** float vDQ5[2]={0.0f, 0.0f};
  30:../main.c     **** float vAB5[2]={0.0f, 0.0f};
  31:../main.c     **** float vabc5[3]={0.0f, 0.0f, 0.0f};
  32:../main.c     **** float vDQ7[2]={0.0f, 0.0f};
  33:../main.c     **** float vAB7[2]={0.0f, 0.0f};
  34:../main.c     **** float vabc7[3]={0.0f, 0.0f, 0.0f};
  35:../main.c     **** float vDQ11[2]={0.0f, 0.0f};
  36:../main.c     **** float vAB11[2]={0.0f, 0.0f};
  37:../main.c     **** float vabc11[3]={0.0f, 0.0f, 0.0f};
  38:../main.c     **** float vDQ13[2]={0.0f, 0.0f};
  39:../main.c     **** float vAB13[2]={0.0f, 0.0f};
  40:../main.c     **** float vabc13[3]={0.0f, 0.0f, 0.0f};
  41:../main.c     **** 
  42:../main.c     **** float vmAB[2]={0.0f, 0.0f};
  43:../main.c     **** 
  44:../main.c     **** float vmabc[3]={0.0f, 0.0f, 0.0f};
  45:../main.c     **** 
  46:../main.c     **** float wt_buff5=0.0f, wt_buff7=0.0f, wt_buff11=0.0f, wt_buff13=0.0f;
  47:../main.c     **** float wt5=0.0f, wt7=0.0f, wt11=0.0f, wt13=0.0f;
  48:../main.c     **** float wt_jump=0.0f;
  49:../main.c     **** 
  50:../main.c     **** ////  vĂ­tor
  51:../main.c     **** float scope_adc1, scope_adc2, scope_adc3, scope_adc4, scope_adc5, scope_adc6, scope_adc7;
  52:../main.c     **** float aux_var1, aux_var2, aux_var3, aux_var4, aux_var5, aux_var6, aux_var7;
  53:../main.c     **** 
  54:../main.c     **** float LPFbuff_vdc[2] = {0.0f, 0.0f};
  55:../main.c     **** float LPFbuff_temp[2] = {0.0f, 0.0f};
  56:../main.c     **** float LPFbuff_v[2] = {0.0f, 0.0f};
  57:../main.c     **** float LPFbuff_v2[2] = {0.0f, 0.0f};
  58:../main.c     **** 
  59:../main.c     **** float AB_aux[2] = {0.0f, 0.0f};
  60:../main.c     **** float dq_aux[2] = {0.0f, 0.0f};
  61:../main.c     **** float wt_aux = 0.0f;
  62:../main.c     **** float w_aux = 100.0f*PI;
  63:../main.c     **** float LPFbuff_w_aux[2] = {0.0f, 0.0f};
  64:../main.c     **** float LPFbuff_dq1_aux[2] = {0.0f, 0.0f};
  65:../main.c     **** float LPFbuff_dq2_aux[2] = {0.0f, 0.0f};
  66:../main.c     **** 
  67:../main.c     **** //// filters ADC AC
  68:../main.c     **** float ADC_LPFbuff_VA[2] = {0.0f, 0.0f}; 
  69:../main.c     **** float ADC_LPFbuff_VB[2] = {0.0f, 0.0f}; 
  70:../main.c     **** float ADC_LPFbuff_VC[2] = {0.0f, 0.0f}; 
  71:../main.c     **** float ADC_LPFbuff_IA[2] = {0.0f, 0.0f}; 
  72:../main.c     **** float ADC_LPFbuff_IB[2] = {0.0f, 0.0f}; 
  73:../main.c     **** float ADC_LPFbuff_IC[2] = {0.0f, 0.0f}; 
  74:../main.c     **** 
  75:../main.c     **** 
  76:../main.c     **** int SCADA_enable = 0;			//ON-OFF micrium button
  77:../main.c     **** int SCADA_disable = 0;			//ON-OFF micrium button
  78:../main.c     **** int SCADA_status_button = 0;    //ON-OFF micrium button
  79:../main.c     **** float SCADA_Imax = 15.0f;		//Maximum current
  80:../main.c     **** float SCADA_VDCmax = 180.0f;	//Maximum Voltage DCBUS
  81:../main.c     **** float SCADA_VDCmin = -10.0f;	//Minimum Voltage DCBUS
  82:../main.c     **** float SCADA_Tmax = 60.0f;		//Maximum converter temperature
  83:../main.c     **** 
  84:../main.c     **** int SCADA_error_Ia = 0;			//Flag
  85:../main.c     **** int SCADA_error_Ib = 0;			//Flag
  86:../main.c     **** int SCADA_error_Ic = 0;			//Flag
  87:../main.c     **** int SCADA_error_VDCmax = 0;		//Flag
  88:../main.c     **** int SCADA_error_VDCmin = 0;		//Flag
  89:../main.c     **** int SCADA_error_Tmax = 0;		//Flag
  90:../main.c     **** int timer_sm = 0;
  91:../main.c     **** 
  92:../main.c     **** float SCADA_Id_ref = 0;
  93:../main.c     **** float SCADA_Iq_ref = 0;
  94:../main.c     **** float SCADA_Vdc_ref = 200;
  95:../main.c     **** 
  96:../main.c     **** 
  97:../main.c     **** uint8_t no_fault(void) {
 4345              	 .loc 8 97 0
 4346              	 .cfi_startproc
 4347              	 
 4348              	 
 4349              	 
 4350 0000 80B4     	 push {r7}
 4351              	.LCFI184:
 4352              	 .cfi_def_cfa_offset 4
 4353              	 .cfi_offset 7,-4
 4354 0002 00AF     	 add r7,sp,#0
 4355              	.LCFI185:
 4356              	 .cfi_def_cfa_register 7
  98:../main.c     **** 	if ( (I_abc[0] > SCADA_Imax) || (I_abc[0] < -SCADA_Imax) ||
 4357              	 .loc 8 98 0
 4358 0004 384B     	 ldr r3,.L159
 4359 0006 93ED007A 	 flds s14,[r3]
 4360 000a 384B     	 ldr r3,.L159+4
 4361 000c D3ED007A 	 flds s15,[r3]
 4362 0010 B4EEE77A 	 fcmpes s14,s15
 4363 0014 F1EE10FA 	 fmstat
 4364 0018 5DDC     	 bgt .L154
 4365              	 .loc 8 98 0 is_stmt 0 discriminator 1
 4366 001a 334B     	 ldr r3,.L159
 4367 001c 93ED007A 	 flds s14,[r3]
 4368 0020 324B     	 ldr r3,.L159+4
 4369 0022 D3ED007A 	 flds s15,[r3]
 4370 0026 F1EE677A 	 fnegs s15,s15
 4371 002a B4EEE77A 	 fcmpes s14,s15
 4372 002e F1EE10FA 	 fmstat
 4373 0032 50D4     	 bmi .L154
  99:../main.c     **** 			(I_abc[1] > SCADA_Imax) || (I_abc[1] < -SCADA_Imax) ||
 4374              	 .loc 8 99 0 is_stmt 1 discriminator 2
 4375 0034 2C4B     	 ldr r3,.L159
 4376 0036 93ED017A 	 flds s14,[r3,#4]
 4377 003a 2C4B     	 ldr r3,.L159+4
 4378 003c D3ED007A 	 flds s15,[r3]
  98:../main.c     **** 	if ( (I_abc[0] > SCADA_Imax) || (I_abc[0] < -SCADA_Imax) ||
 4379              	 .loc 8 98 0 discriminator 2
 4380 0040 B4EEE77A 	 fcmpes s14,s15
 4381 0044 F1EE10FA 	 fmstat
 4382 0048 45DC     	 bgt .L154
 4383              	 .loc 8 99 0
 4384 004a 274B     	 ldr r3,.L159
 4385 004c 93ED017A 	 flds s14,[r3,#4]
 4386 0050 264B     	 ldr r3,.L159+4
 4387 0052 D3ED007A 	 flds s15,[r3]
 4388 0056 F1EE677A 	 fnegs s15,s15
 4389 005a B4EEE77A 	 fcmpes s14,s15
 4390 005e F1EE10FA 	 fmstat
 4391 0062 38D4     	 bmi .L154
 100:../main.c     **** 			(I_abc[2] > SCADA_Imax) || (I_abc[2] < -SCADA_Imax) ||
 4392              	 .loc 8 100 0 discriminator 1
 4393 0064 204B     	 ldr r3,.L159
 4394 0066 93ED027A 	 flds s14,[r3,#8]
 4395 006a 204B     	 ldr r3,.L159+4
 4396 006c D3ED007A 	 flds s15,[r3]
  99:../main.c     **** 			(I_abc[1] > SCADA_Imax) || (I_abc[1] < -SCADA_Imax) ||
 4397              	 .loc 8 99 0 discriminator 1
 4398 0070 B4EEE77A 	 fcmpes s14,s15
 4399 0074 F1EE10FA 	 fmstat
 4400 0078 2DDC     	 bgt .L154
 4401              	 .loc 8 100 0
 4402 007a 1B4B     	 ldr r3,.L159
 4403 007c 93ED027A 	 flds s14,[r3,#8]
 4404 0080 1A4B     	 ldr r3,.L159+4
 4405 0082 D3ED007A 	 flds s15,[r3]
 4406 0086 F1EE677A 	 fnegs s15,s15
 4407 008a B4EEE77A 	 fcmpes s14,s15
 4408 008e F1EE10FA 	 fmstat
 4409 0092 20D4     	 bmi .L154
 101:../main.c     **** 			(conv.Vdc > SCADA_VDCmax) ||
 4410              	 .loc 8 101 0 discriminator 1
 4411 0094 164B     	 ldr r3,.L159+8
 4412 0096 93ED047A 	 flds s14,[r3,#16]
 4413 009a 164B     	 ldr r3,.L159+12
 4414 009c D3ED007A 	 flds s15,[r3]
 100:../main.c     **** 			(I_abc[2] > SCADA_Imax) || (I_abc[2] < -SCADA_Imax) ||
 4415              	 .loc 8 100 0 discriminator 1
 4416 00a0 B4EEE77A 	 fcmpes s14,s15
 4417 00a4 F1EE10FA 	 fmstat
 4418 00a8 15DC     	 bgt .L154
 102:../main.c     **** 			(conv.Vdc < SCADA_VDCmin) ||
 4419              	 .loc 8 102 0
 4420 00aa 114B     	 ldr r3,.L159+8
 4421 00ac 93ED047A 	 flds s14,[r3,#16]
 4422 00b0 114B     	 ldr r3,.L159+16
 4423 00b2 D3ED007A 	 flds s15,[r3]
 101:../main.c     **** 			(conv.Vdc > SCADA_VDCmax) ||
 4424              	 .loc 8 101 0
 4425 00b6 B4EEE77A 	 fcmpes s14,s15
 4426 00ba F1EE10FA 	 fmstat
 4427 00be 0AD4     	 bmi .L154
 103:../main.c     **** 			(conv.temp > SCADA_Tmax)) {
 4428              	 .loc 8 103 0
 4429 00c0 0B4B     	 ldr r3,.L159+8
 4430 00c2 93ED097A 	 flds s14,[r3,#36]
 4431 00c6 0D4B     	 ldr r3,.L159+20
 4432 00c8 D3ED007A 	 flds s15,[r3]
 102:../main.c     **** 			(conv.Vdc < SCADA_VDCmin) ||
 4433              	 .loc 8 102 0
 4434 00cc B4EEE77A 	 fcmpes s14,s15
 4435 00d0 F1EE10FA 	 fmstat
 4436 00d4 01DD     	 ble .L158
 4437              	.L154:
 104:../main.c     **** 		return 1;
 4438              	 .loc 8 104 0
 4439 00d6 0123     	 movs r3,#1
 4440 00d8 00E0     	 b .L157
 4441              	.L158:
 105:../main.c     **** 	}
 106:../main.c     **** 	else {
 107:../main.c     **** 		return 0;
 4442              	 .loc 8 107 0
 4443 00da 0023     	 movs r3,#0
 4444              	.L157:
 108:../main.c     **** 	}
 109:../main.c     **** 
 110:../main.c     **** }
 4445              	 .loc 8 110 0
 4446 00dc 1846     	 mov r0,r3
 4447 00de BD46     	 mov sp,r7
 4448              	.LCFI186:
 4449              	 .cfi_def_cfa_register 13
 4450              	 
 4451 00e0 5DF8047B 	 ldr r7,[sp],#4
 4452              	.LCFI187:
 4453              	 .cfi_restore 7
 4454              	 .cfi_def_cfa_offset 0
 4455 00e4 7047     	 bx lr
 4456              	.L160:
 4457 00e6 00BF     	 .align 2
 4458              	.L159:
 4459 00e8 00000000 	 .word I_abc
 4460 00ec 00000000 	 .word SCADA_Imax
 4461 00f0 00000000 	 .word conv
 4462 00f4 00000000 	 .word SCADA_VDCmax
 4463 00f8 00000000 	 .word SCADA_VDCmin
 4464 00fc 00000000 	 .word SCADA_Tmax
 4465              	 .cfi_endproc
 4466              	.LFE408:
 4468              	 .section .text.ConverterStateMachine,"ax",%progbits
 4469              	 .align 2
 4470              	 .global ConverterStateMachine
 4471              	 .thumb
 4472              	 .thumb_func
 4474              	ConverterStateMachine:
 4475              	.LFB409:
 111:../main.c     **** 
 112:../main.c     **** void ConverterStateMachine(void){
 4476              	 .loc 8 112 0
 4477              	 .cfi_startproc
 4478              	 
 4479              	 
 4480 0000 80B5     	 push {r7,lr}
 4481              	.LCFI188:
 4482              	 .cfi_def_cfa_offset 8
 4483              	 .cfi_offset 7,-8
 4484              	 .cfi_offset 14,-4
 4485 0002 00AF     	 add r7,sp,#0
 4486              	.LCFI189:
 4487              	 .cfi_def_cfa_register 7
 113:../main.c     **** 
 114:../main.c     **** 	timer_sm += 1;
 4488              	 .loc 8 114 0
 4489 0004 A94B     	 ldr r3,.L203
 4490 0006 1B68     	 ldr r3,[r3]
 4491 0008 0133     	 adds r3,r3,#1
 4492 000a A84A     	 ldr r2,.L203
 4493 000c 1360     	 str r3,[r2]
 115:../main.c     **** 	switch(state){
 4494              	 .loc 8 115 0
 4495 000e A84B     	 ldr r3,.L203+4
 4496 0010 1B88     	 ldrh r3,[r3]
 4497 0012 9BB2     	 uxth r3,r3
 4498 0014 042B     	 cmp r3,#4
 4499 0016 00F21981 	 bhi .L162
 4500 001a 01A2     	 adr r2,.L164
 4501 001c 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 4502              	 .p2align 2
 4503              	.L164:
 4504 0020 35000000 	 .word .L163+1
 4505 0024 59000000 	 .word .L165+1
 4506 0028 9D000000 	 .word .L166+1
 4507 002c CD000000 	 .word .L167+1
 4508 0030 21010000 	 .word .L168+1
 4509              	 .p2align 1
 4510              	.L163:
 116:../main.c     **** 	case init:
 117:../main.c     **** 		if ((SCADA_enable==1) && (timer_sm > (500*_1MS))) {
 4511              	 .loc 8 117 0
 4512 0034 9F4B     	 ldr r3,.L203+8
 4513 0036 1B68     	 ldr r3,[r3]
 4514 0038 012B     	 cmp r3,#1
 4515 003a 0CD1     	 bne .L169
 4516              	 .loc 8 117 0 is_stmt 0 discriminator 1
 4517 003c 9B4B     	 ldr r3,.L203
 4518 003e 1B68     	 ldr r3,[r3]
 4519 0040 41F28832 	 movw r2,#5000
 4520 0044 9342     	 cmp r3,r2
 4521 0046 06DD     	 ble .L169
 118:../main.c     **** 			state = pc1;
 4522              	 .loc 8 118 0 is_stmt 1
 4523 0048 994B     	 ldr r3,.L203+4
 4524 004a 0122     	 movs r2,#1
 4525 004c 1A80     	 strh r2,[r3]
 119:../main.c     **** 			timer_sm = 0;
 4526              	 .loc 8 119 0
 4527 004e 974B     	 ldr r3,.L203
 4528 0050 0022     	 movs r2,#0
 4529 0052 1A60     	 str r2,[r3]
 120:../main.c     **** 		}
 121:../main.c     **** 		break;
 4530              	 .loc 8 121 0
 4531 0054 FAE0     	 b .L162
 4532              	.L169:
 4533 0056 F9E0     	 b .L162
 4534              	.L165:
 122:../main.c     **** 	case pc1:
 123:../main.c     **** 		if ((timer_sm > (500*_1MS)) && (conv.Vdc > 120.0f)/**/) {
 4535              	 .loc 8 123 0
 4536 0058 944B     	 ldr r3,.L203
 4537 005a 1B68     	 ldr r3,[r3]
 4538 005c 41F28832 	 movw r2,#5000
 4539 0060 9342     	 cmp r3,r2
 4540 0062 0FDD     	 ble .L170
 4541              	 .loc 8 123 0 is_stmt 0 discriminator 1
 4542 0064 944B     	 ldr r3,.L203+12
 4543 0066 D3ED047A 	 flds s15,[r3,#16]
 4544 006a 9FED947A 	 flds s14,.L203+16
 4545 006e F4EEC77A 	 fcmpes s15,s14
 4546 0072 F1EE10FA 	 fmstat
 4547 0076 05DD     	 ble .L170
 124:../main.c     **** 			state = pc2;
 4548              	 .loc 8 124 0 is_stmt 1
 4549 0078 8D4B     	 ldr r3,.L203+4
 4550 007a 0222     	 movs r2,#2
 4551 007c 1A80     	 strh r2,[r3]
 125:../main.c     **** 			timer_sm = 0;
 4552              	 .loc 8 125 0
 4553 007e 8B4B     	 ldr r3,.L203
 4554 0080 0022     	 movs r2,#0
 4555 0082 1A60     	 str r2,[r3]
 4556              	.L170:
 126:../main.c     **** 		}
 127:../main.c     **** 		if (SCADA_disable==1) {
 4557              	 .loc 8 127 0
 4558 0084 8E4B     	 ldr r3,.L203+20
 4559 0086 1B68     	 ldr r3,[r3]
 4560 0088 012B     	 cmp r3,#1
 4561 008a 06D1     	 bne .L172
 128:../main.c     **** 			//SCADA_enable = 0;
 129:../main.c     **** 			state = init;
 4562              	 .loc 8 129 0
 4563 008c 884B     	 ldr r3,.L203+4
 4564 008e 0022     	 movs r2,#0
 4565 0090 1A80     	 strh r2,[r3]
 130:../main.c     **** 			timer_sm = 0;
 4566              	 .loc 8 130 0
 4567 0092 864B     	 ldr r3,.L203
 4568 0094 0022     	 movs r2,#0
 4569 0096 1A60     	 str r2,[r3]
 131:../main.c     **** 		}
 132:../main.c     **** 		break;
 4570              	 .loc 8 132 0
 4571 0098 D8E0     	 b .L162
 4572              	.L172:
 4573 009a D7E0     	 b .L162
 4574              	.L166:
 133:../main.c     **** 	case pc2:
 134:../main.c     **** 		if (timer_sm > (500*_1MS) ){
 4575              	 .loc 8 134 0
 4576 009c 834B     	 ldr r3,.L203
 4577 009e 1B68     	 ldr r3,[r3]
 4578 00a0 41F28832 	 movw r2,#5000
 4579 00a4 9342     	 cmp r3,r2
 4580 00a6 05DD     	 ble .L173
 135:../main.c     **** 			state = idle;
 4581              	 .loc 8 135 0
 4582 00a8 814B     	 ldr r3,.L203+4
 4583 00aa 0322     	 movs r2,#3
 4584 00ac 1A80     	 strh r2,[r3]
 136:../main.c     **** 			timer_sm = 0;
 4585              	 .loc 8 136 0
 4586 00ae 7F4B     	 ldr r3,.L203
 4587 00b0 0022     	 movs r2,#0
 4588 00b2 1A60     	 str r2,[r3]
 4589              	.L173:
 137:../main.c     **** 		}
 138:../main.c     **** 		if (SCADA_disable==1) {
 4590              	 .loc 8 138 0
 4591 00b4 824B     	 ldr r3,.L203+20
 4592 00b6 1B68     	 ldr r3,[r3]
 4593 00b8 012B     	 cmp r3,#1
 4594 00ba 06D1     	 bne .L174
 139:../main.c     **** 			//SCADA_enable = 0;
 140:../main.c     **** 			state = init;
 4595              	 .loc 8 140 0
 4596 00bc 7C4B     	 ldr r3,.L203+4
 4597 00be 0022     	 movs r2,#0
 4598 00c0 1A80     	 strh r2,[r3]
 141:../main.c     **** 			timer_sm = 0;
 4599              	 .loc 8 141 0
 4600 00c2 7A4B     	 ldr r3,.L203
 4601 00c4 0022     	 movs r2,#0
 4602 00c6 1A60     	 str r2,[r3]
 142:../main.c     **** 		}
 143:../main.c     **** 		break;
 4603              	 .loc 8 143 0
 4604 00c8 C0E0     	 b .L162
 4605              	.L174:
 4606 00ca BFE0     	 b .L162
 4607              	.L167:
 144:../main.c     **** 	case idle:
 145:../main.c     **** 		if (SCADA_enable==1 && no_fault()==0 ) {
 4608              	 .loc 8 145 0
 4609 00cc 794B     	 ldr r3,.L203+8
 4610 00ce 1B68     	 ldr r3,[r3]
 4611 00d0 012B     	 cmp r3,#1
 4612 00d2 19D1     	 bne .L175
 4613              	 .loc 8 145 0 is_stmt 0 discriminator 1
 4614 00d4 FFF7FEFF 	 bl no_fault
 4615 00d8 0346     	 mov r3,r0
 4616 00da 002B     	 cmp r3,#0
 4617 00dc 14D1     	 bne .L175
 146:../main.c     **** 			//SCADA_enable = 0;
 147:../main.c     **** 			SCADA_error_Ia = 0;
 4618              	 .loc 8 147 0 is_stmt 1
 4619 00de 794B     	 ldr r3,.L203+24
 4620 00e0 0022     	 movs r2,#0
 4621 00e2 1A60     	 str r2,[r3]
 148:../main.c     **** 			SCADA_error_Ib = 0;
 4622              	 .loc 8 148 0
 4623 00e4 784B     	 ldr r3,.L203+28
 4624 00e6 0022     	 movs r2,#0
 4625 00e8 1A60     	 str r2,[r3]
 149:../main.c     **** 			SCADA_error_Ic = 0;
 4626              	 .loc 8 149 0
 4627 00ea 784B     	 ldr r3,.L203+32
 4628 00ec 0022     	 movs r2,#0
 4629 00ee 1A60     	 str r2,[r3]
 150:../main.c     **** 			SCADA_error_VDCmax = 0;
 4630              	 .loc 8 150 0
 4631 00f0 774B     	 ldr r3,.L203+36
 4632 00f2 0022     	 movs r2,#0
 4633 00f4 1A60     	 str r2,[r3]
 151:../main.c     **** 			SCADA_error_VDCmin = 0;
 4634              	 .loc 8 151 0
 4635 00f6 774B     	 ldr r3,.L203+40
 4636 00f8 0022     	 movs r2,#0
 4637 00fa 1A60     	 str r2,[r3]
 152:../main.c     **** 			SCADA_error_Tmax = 0;
 4638              	 .loc 8 152 0
 4639 00fc 764B     	 ldr r3,.L203+44
 4640 00fe 0022     	 movs r2,#0
 4641 0100 1A60     	 str r2,[r3]
 153:../main.c     **** 			state = running;
 4642              	 .loc 8 153 0
 4643 0102 6B4B     	 ldr r3,.L203+4
 4644 0104 0422     	 movs r2,#4
 4645 0106 1A80     	 strh r2,[r3]
 4646              	.L175:
 154:../main.c     **** 		}
 155:../main.c     **** 		if (SCADA_disable==1) {
 4647              	 .loc 8 155 0
 4648 0108 6D4B     	 ldr r3,.L203+20
 4649 010a 1B68     	 ldr r3,[r3]
 4650 010c 012B     	 cmp r3,#1
 4651 010e 06D1     	 bne .L176
 156:../main.c     **** 			//SCADA_enable = 0;
 157:../main.c     **** 			state = init;
 4652              	 .loc 8 157 0
 4653 0110 674B     	 ldr r3,.L203+4
 4654 0112 0022     	 movs r2,#0
 4655 0114 1A80     	 strh r2,[r3]
 158:../main.c     **** 			timer_sm = 0;
 4656              	 .loc 8 158 0
 4657 0116 654B     	 ldr r3,.L203
 4658 0118 0022     	 movs r2,#0
 4659 011a 1A60     	 str r2,[r3]
 159:../main.c     **** 		}
 160:../main.c     **** 		break;
 4660              	 .loc 8 160 0
 4661 011c 96E0     	 b .L162
 4662              	.L176:
 4663 011e 95E0     	 b .L162
 4664              	.L168:
 161:../main.c     **** 	case running:
 162:../main.c     **** 		if (SCADA_disable==1) {
 4665              	 .loc 8 162 0
 4666 0120 674B     	 ldr r3,.L203+20
 4667 0122 1B68     	 ldr r3,[r3]
 4668 0124 012B     	 cmp r3,#1
 4669 0126 02D1     	 bne .L177
 163:../main.c     **** 			//SCADA_enable = 0;
 164:../main.c     **** 			state = init;
 4670              	 .loc 8 164 0
 4671 0128 614B     	 ldr r3,.L203+4
 4672 012a 0022     	 movs r2,#0
 4673 012c 1A80     	 strh r2,[r3]
 4674              	.L177:
 165:../main.c     **** 		}
 166:../main.c     **** 		//FALHAS
 167:../main.c     **** 		if ((I_abc[0] > SCADA_Imax) || (I_abc[0] < -SCADA_Imax)) {
 4675              	 .loc 8 167 0
 4676 012e 6B4B     	 ldr r3,.L203+48
 4677 0130 93ED007A 	 flds s14,[r3]
 4678 0134 6A4B     	 ldr r3,.L203+52
 4679 0136 D3ED007A 	 flds s15,[r3]
 4680 013a B4EEE77A 	 fcmpes s14,s15
 4681 013e F1EE10FA 	 fmstat
 4682 0142 0CDC     	 bgt .L178
 4683              	 .loc 8 167 0 is_stmt 0 discriminator 1
 4684 0144 654B     	 ldr r3,.L203+48
 4685 0146 93ED007A 	 flds s14,[r3]
 4686 014a 654B     	 ldr r3,.L203+52
 4687 014c D3ED007A 	 flds s15,[r3]
 4688 0150 F1EE677A 	 fnegs s15,s15
 4689 0154 B4EEE77A 	 fcmpes s14,s15
 4690 0158 F1EE10FA 	 fmstat
 4691 015c 05D5     	 bpl .L179
 4692              	.L178:
 168:../main.c     **** 			state = init;
 4693              	 .loc 8 168 0 is_stmt 1
 4694 015e 544B     	 ldr r3,.L203+4
 4695 0160 0022     	 movs r2,#0
 4696 0162 1A80     	 strh r2,[r3]
 169:../main.c     **** 			SCADA_error_Ia = 1;
 4697              	 .loc 8 169 0
 4698 0164 574B     	 ldr r3,.L203+24
 4699 0166 0122     	 movs r2,#1
 4700 0168 1A60     	 str r2,[r3]
 4701              	.L179:
 170:../main.c     **** 		}
 171:../main.c     **** 		if ((I_abc[1] > SCADA_Imax) || (I_abc[1] < -SCADA_Imax)) {
 4702              	 .loc 8 171 0
 4703 016a 5C4B     	 ldr r3,.L203+48
 4704 016c 93ED017A 	 flds s14,[r3,#4]
 4705 0170 5B4B     	 ldr r3,.L203+52
 4706 0172 D3ED007A 	 flds s15,[r3]
 4707 0176 B4EEE77A 	 fcmpes s14,s15
 4708 017a F1EE10FA 	 fmstat
 4709 017e 0CDC     	 bgt .L181
 4710              	 .loc 8 171 0 is_stmt 0 discriminator 1
 4711 0180 564B     	 ldr r3,.L203+48
 4712 0182 93ED017A 	 flds s14,[r3,#4]
 4713 0186 564B     	 ldr r3,.L203+52
 4714 0188 D3ED007A 	 flds s15,[r3]
 4715 018c F1EE677A 	 fnegs s15,s15
 4716 0190 B4EEE77A 	 fcmpes s14,s15
 4717 0194 F1EE10FA 	 fmstat
 4718 0198 05D5     	 bpl .L182
 4719              	.L181:
 172:../main.c     **** 			state = init;
 4720              	 .loc 8 172 0 is_stmt 1
 4721 019a 454B     	 ldr r3,.L203+4
 4722 019c 0022     	 movs r2,#0
 4723 019e 1A80     	 strh r2,[r3]
 173:../main.c     **** 			SCADA_error_Ib = 1;
 4724              	 .loc 8 173 0
 4725 01a0 494B     	 ldr r3,.L203+28
 4726 01a2 0122     	 movs r2,#1
 4727 01a4 1A60     	 str r2,[r3]
 4728              	.L182:
 174:../main.c     **** 		}
 175:../main.c     **** 		if ((I_abc[2] > SCADA_Imax) || (I_abc[2] < -SCADA_Imax)) {
 4729              	 .loc 8 175 0
 4730 01a6 4D4B     	 ldr r3,.L203+48
 4731 01a8 93ED027A 	 flds s14,[r3,#8]
 4732 01ac 4C4B     	 ldr r3,.L203+52
 4733 01ae D3ED007A 	 flds s15,[r3]
 4734 01b2 B4EEE77A 	 fcmpes s14,s15
 4735 01b6 F1EE10FA 	 fmstat
 4736 01ba 0CDC     	 bgt .L184
 4737              	 .loc 8 175 0 is_stmt 0 discriminator 1
 4738 01bc 474B     	 ldr r3,.L203+48
 4739 01be 93ED027A 	 flds s14,[r3,#8]
 4740 01c2 474B     	 ldr r3,.L203+52
 4741 01c4 D3ED007A 	 flds s15,[r3]
 4742 01c8 F1EE677A 	 fnegs s15,s15
 4743 01cc B4EEE77A 	 fcmpes s14,s15
 4744 01d0 F1EE10FA 	 fmstat
 4745 01d4 05D5     	 bpl .L185
 4746              	.L184:
 176:../main.c     **** 			state = init;
 4747              	 .loc 8 176 0 is_stmt 1
 4748 01d6 364B     	 ldr r3,.L203+4
 4749 01d8 0022     	 movs r2,#0
 4750 01da 1A80     	 strh r2,[r3]
 177:../main.c     **** 			SCADA_error_Ic = 1;
 4751              	 .loc 8 177 0
 4752 01dc 3B4B     	 ldr r3,.L203+32
 4753 01de 0122     	 movs r2,#1
 4754 01e0 1A60     	 str r2,[r3]
 4755              	.L185:
 178:../main.c     **** 		}
 179:../main.c     **** 		if ((conv.Vdc > SCADA_VDCmax)) {
 4756              	 .loc 8 179 0
 4757 01e2 354B     	 ldr r3,.L203+12
 4758 01e4 93ED047A 	 flds s14,[r3,#16]
 4759 01e8 3E4B     	 ldr r3,.L203+56
 4760 01ea D3ED007A 	 flds s15,[r3]
 4761 01ee B4EEE77A 	 fcmpes s14,s15
 4762 01f2 F1EE10FA 	 fmstat
 4763 01f6 05DD     	 ble .L187
 180:../main.c     **** 			state = init;
 4764              	 .loc 8 180 0
 4765 01f8 2D4B     	 ldr r3,.L203+4
 4766 01fa 0022     	 movs r2,#0
 4767 01fc 1A80     	 strh r2,[r3]
 181:../main.c     **** 			SCADA_error_VDCmax = 1;
 4768              	 .loc 8 181 0
 4769 01fe 344B     	 ldr r3,.L203+36
 4770 0200 0122     	 movs r2,#1
 4771 0202 1A60     	 str r2,[r3]
 4772              	.L187:
 182:../main.c     **** 		}
 183:../main.c     **** 		if ((conv.Vdc < SCADA_VDCmin)) {
 4773              	 .loc 8 183 0
 4774 0204 2C4B     	 ldr r3,.L203+12
 4775 0206 93ED047A 	 flds s14,[r3,#16]
 4776 020a 374B     	 ldr r3,.L203+60
 4777 020c D3ED007A 	 flds s15,[r3]
 4778 0210 B4EEE77A 	 fcmpes s14,s15
 4779 0214 F1EE10FA 	 fmstat
 4780 0218 05D5     	 bpl .L189
 184:../main.c     **** 			state = init;
 4781              	 .loc 8 184 0
 4782 021a 254B     	 ldr r3,.L203+4
 4783 021c 0022     	 movs r2,#0
 4784 021e 1A80     	 strh r2,[r3]
 185:../main.c     **** 			SCADA_error_VDCmin = 1;
 4785              	 .loc 8 185 0
 4786 0220 2C4B     	 ldr r3,.L203+40
 4787 0222 0122     	 movs r2,#1
 4788 0224 1A60     	 str r2,[r3]
 4789              	.L189:
 186:../main.c     **** 		}
 187:../main.c     **** 		if ((conv.temp > SCADA_Tmax)) {
 4790              	 .loc 8 187 0
 4791 0226 244B     	 ldr r3,.L203+12
 4792 0228 93ED097A 	 flds s14,[r3,#36]
 4793 022c 2F4B     	 ldr r3,.L203+64
 4794 022e D3ED007A 	 flds s15,[r3]
 4795 0232 B4EEE77A 	 fcmpes s14,s15
 4796 0236 F1EE10FA 	 fmstat
 4797 023a 00DC     	 bgt .L201
 188:../main.c     **** 			state = init;
 189:../main.c     **** 			SCADA_error_Tmax = 1;
 190:../main.c     **** 		}
 191:../main.c     **** 		break;
 4798              	 .loc 8 191 0
 4799 023c 05E0     	 b .L202
 4800              	.L201:
 188:../main.c     **** 			state = init;
 4801              	 .loc 8 188 0
 4802 023e 1C4B     	 ldr r3,.L203+4
 4803 0240 0022     	 movs r2,#0
 4804 0242 1A80     	 strh r2,[r3]
 189:../main.c     **** 		}
 4805              	 .loc 8 189 0
 4806 0244 244B     	 ldr r3,.L203+44
 4807 0246 0122     	 movs r2,#1
 4808 0248 1A60     	 str r2,[r3]
 4809              	.L202:
 4810              	 .loc 8 191 0
 4811 024a 00BF     	 nop
 4812              	.L162:
 192:../main.c     **** 	}
 193:../main.c     **** 
 194:../main.c     **** 
 195:../main.c     **** 	if (state==init){
 4813              	 .loc 8 195 0
 4814 024c 184B     	 ldr r3,.L203+4
 4815 024e 1B88     	 ldrh r3,[r3]
 4816 0250 9BB2     	 uxth r3,r3
 4817 0252 002B     	 cmp r3,#0
 4818 0254 12D1     	 bne .L193
 196:../main.c     **** 		DIGITAL_IO_SetOutputLow(&EN_1);
 4819              	 .loc 8 196 0
 4820 0256 2648     	 ldr r0,.L203+68
 4821 0258 FFF7FEFF 	 bl DIGITAL_IO_SetOutputLow
 197:../main.c     **** 		DIGITAL_IO_SetOutputLow(&EN_2);
 4822              	 .loc 8 197 0
 4823 025c 2548     	 ldr r0,.L203+72
 4824 025e FFF7FEFF 	 bl DIGITAL_IO_SetOutputLow
 198:../main.c     **** 		DIGITAL_IO_SetOutputLow(&EN_3);
 4825              	 .loc 8 198 0
 4826 0262 2548     	 ldr r0,.L203+76
 4827 0264 FFF7FEFF 	 bl DIGITAL_IO_SetOutputLow
 199:../main.c     **** 		DIGITAL_IO_SetOutputLow(&SSR1);//PCR_SW = 0;
 4828              	 .loc 8 199 0
 4829 0268 2448     	 ldr r0,.L203+80
 4830 026a FFF7FEFF 	 bl DIGITAL_IO_SetOutputLow
 200:../main.c     **** 		DIGITAL_IO_SetOutputLow(&SSR2);//PCS_SW = 0;
 4831              	 .loc 8 200 0
 4832 026e 2448     	 ldr r0,.L203+84
 4833 0270 FFF7FEFF 	 bl DIGITAL_IO_SetOutputLow
 201:../main.c     **** 		SCADA_status_button = 0;
 4834              	 .loc 8 201 0
 4835 0274 234B     	 ldr r3,.L203+88
 4836 0276 0022     	 movs r2,#0
 4837 0278 1A60     	 str r2,[r3]
 4838 027a 8CE0     	 b .L161
 4839              	.L193:
 202:../main.c     **** 	}
 203:../main.c     **** 	else if (state==pc1){
 4840              	 .loc 8 203 0
 4841 027c 0C4B     	 ldr r3,.L203+4
 4842 027e 1B88     	 ldrh r3,[r3]
 4843 0280 9BB2     	 uxth r3,r3
 4844 0282 012B     	 cmp r3,#1
 4845 0284 40D1     	 bne .L195
 204:../main.c     **** 		DIGITAL_IO_SetOutputLow(&EN_1);
 4846              	 .loc 8 204 0
 4847 0286 1A48     	 ldr r0,.L203+68
 4848 0288 FFF7FEFF 	 bl DIGITAL_IO_SetOutputLow
 205:../main.c     **** 		DIGITAL_IO_SetOutputLow(&EN_2);
 4849              	 .loc 8 205 0
 4850 028c 1948     	 ldr r0,.L203+72
 4851 028e FFF7FEFF 	 bl DIGITAL_IO_SetOutputLow
 206:../main.c     **** 		DIGITAL_IO_SetOutputLow(&EN_3);
 4852              	 .loc 8 206 0
 4853 0292 1948     	 ldr r0,.L203+76
 4854 0294 FFF7FEFF 	 bl DIGITAL_IO_SetOutputLow
 207:../main.c     **** 		DIGITAL_IO_SetOutputLow(&SSR1);//PCR_SW = 0;
 4855              	 .loc 8 207 0
 4856 0298 1848     	 ldr r0,.L203+80
 4857 029a FFF7FEFF 	 bl DIGITAL_IO_SetOutputLow
 208:../main.c     **** 		DIGITAL_IO_SetOutputHigh(&SSR2);//PCS_SW = 1;
 4858              	 .loc 8 208 0
 4859 029e 1848     	 ldr r0,.L203+84
 4860 02a0 FFF7FEFF 	 bl DIGITAL_IO_SetOutputHigh
 209:../main.c     **** 		SCADA_status_button = 0;
 4861              	 .loc 8 209 0
 4862 02a4 174B     	 ldr r3,.L203+88
 4863 02a6 0022     	 movs r2,#0
 4864 02a8 1A60     	 str r2,[r3]
 4865 02aa 74E0     	 b .L161
 4866              	.L204:
 4867              	 .align 2
 4868              	.L203:
 4869 02ac 00000000 	 .word timer_sm
 4870 02b0 00000000 	 .word state
 4871 02b4 00000000 	 .word SCADA_enable
 4872 02b8 00000000 	 .word conv
 4873 02bc 0000F042 	 .word 1123024896
 4874 02c0 00000000 	 .word SCADA_disable
 4875 02c4 00000000 	 .word SCADA_error_Ia
 4876 02c8 00000000 	 .word SCADA_error_Ib
 4877 02cc 00000000 	 .word SCADA_error_Ic
 4878 02d0 00000000 	 .word SCADA_error_VDCmax
 4879 02d4 00000000 	 .word SCADA_error_VDCmin
 4880 02d8 00000000 	 .word SCADA_error_Tmax
 4881 02dc 00000000 	 .word I_abc
 4882 02e0 00000000 	 .word SCADA_Imax
 4883 02e4 00000000 	 .word SCADA_VDCmax
 4884 02e8 00000000 	 .word SCADA_VDCmin
 4885 02ec 00000000 	 .word SCADA_Tmax
 4886 02f0 00000000 	 .word EN_1
 4887 02f4 00000000 	 .word EN_2
 4888 02f8 00000000 	 .word EN_3
 4889 02fc 00000000 	 .word SSR1
 4890 0300 00000000 	 .word SSR2
 4891 0304 00000000 	 .word SCADA_status_button
 4892              	.L195:
 210:../main.c     **** 	}
 211:../main.c     **** 	else if (state==pc2){
 4893              	 .loc 8 211 0
 4894 0308 234B     	 ldr r3,.L205
 4895 030a 1B88     	 ldrh r3,[r3]
 4896 030c 9BB2     	 uxth r3,r3
 4897 030e 022B     	 cmp r3,#2
 4898 0310 12D1     	 bne .L196
 212:../main.c     **** 		DIGITAL_IO_SetOutputLow(&EN_1);
 4899              	 .loc 8 212 0
 4900 0312 2248     	 ldr r0,.L205+4
 4901 0314 FFF7FEFF 	 bl DIGITAL_IO_SetOutputLow
 213:../main.c     **** 		DIGITAL_IO_SetOutputLow(&EN_2);
 4902              	 .loc 8 213 0
 4903 0318 2148     	 ldr r0,.L205+8
 4904 031a FFF7FEFF 	 bl DIGITAL_IO_SetOutputLow
 214:../main.c     **** 		DIGITAL_IO_SetOutputLow(&EN_3);
 4905              	 .loc 8 214 0
 4906 031e 2148     	 ldr r0,.L205+12
 4907 0320 FFF7FEFF 	 bl DIGITAL_IO_SetOutputLow
 215:../main.c     **** 		DIGITAL_IO_SetOutputHigh(&SSR1);//PCR_SW = 1;
 4908              	 .loc 8 215 0
 4909 0324 2048     	 ldr r0,.L205+16
 4910 0326 FFF7FEFF 	 bl DIGITAL_IO_SetOutputHigh
 216:../main.c     **** 		DIGITAL_IO_SetOutputHigh(&SSR2);//PCS_SW = 1;
 4911              	 .loc 8 216 0
 4912 032a 2048     	 ldr r0,.L205+20
 4913 032c FFF7FEFF 	 bl DIGITAL_IO_SetOutputHigh
 217:../main.c     **** 		SCADA_status_button = 0;
 4914              	 .loc 8 217 0
 4915 0330 1F4B     	 ldr r3,.L205+24
 4916 0332 0022     	 movs r2,#0
 4917 0334 1A60     	 str r2,[r3]
 4918 0336 2EE0     	 b .L161
 4919              	.L196:
 218:../main.c     **** 	}
 219:../main.c     **** 	else if (state==idle){
 4920              	 .loc 8 219 0
 4921 0338 174B     	 ldr r3,.L205
 4922 033a 1B88     	 ldrh r3,[r3]
 4923 033c 9BB2     	 uxth r3,r3
 4924 033e 032B     	 cmp r3,#3
 4925 0340 12D1     	 bne .L197
 220:../main.c     **** 		DIGITAL_IO_SetOutputLow(&EN_1);
 4926              	 .loc 8 220 0
 4927 0342 1648     	 ldr r0,.L205+4
 4928 0344 FFF7FEFF 	 bl DIGITAL_IO_SetOutputLow
 221:../main.c     **** 		DIGITAL_IO_SetOutputLow(&EN_2);
 4929              	 .loc 8 221 0
 4930 0348 1548     	 ldr r0,.L205+8
 4931 034a FFF7FEFF 	 bl DIGITAL_IO_SetOutputLow
 222:../main.c     **** 		DIGITAL_IO_SetOutputLow(&EN_3);
 4932              	 .loc 8 222 0
 4933 034e 1548     	 ldr r0,.L205+12
 4934 0350 FFF7FEFF 	 bl DIGITAL_IO_SetOutputLow
 223:../main.c     **** 		DIGITAL_IO_SetOutputHigh(&SSR1);//PCR_SW = 1;
 4935              	 .loc 8 223 0
 4936 0354 1448     	 ldr r0,.L205+16
 4937 0356 FFF7FEFF 	 bl DIGITAL_IO_SetOutputHigh
 224:../main.c     **** 		DIGITAL_IO_SetOutputHigh(&SSR2);//PCS_SW = 1;
 4938              	 .loc 8 224 0
 4939 035a 1448     	 ldr r0,.L205+20
 4940 035c FFF7FEFF 	 bl DIGITAL_IO_SetOutputHigh
 225:../main.c     **** 		SCADA_status_button = 0;
 4941              	 .loc 8 225 0
 4942 0360 134B     	 ldr r3,.L205+24
 4943 0362 0022     	 movs r2,#0
 4944 0364 1A60     	 str r2,[r3]
 4945 0366 16E0     	 b .L161
 4946              	.L197:
 226:../main.c     **** 	}
 227:../main.c     **** 	else if (state==running){
 4947              	 .loc 8 227 0
 4948 0368 0B4B     	 ldr r3,.L205
 4949 036a 1B88     	 ldrh r3,[r3]
 4950 036c 9BB2     	 uxth r3,r3
 4951 036e 042B     	 cmp r3,#4
 4952 0370 11D1     	 bne .L161
 228:../main.c     **** 		DIGITAL_IO_SetOutputHigh(&EN_1);
 4953              	 .loc 8 228 0
 4954 0372 0A48     	 ldr r0,.L205+4
 4955 0374 FFF7FEFF 	 bl DIGITAL_IO_SetOutputHigh
 229:../main.c     **** 		DIGITAL_IO_SetOutputHigh(&EN_2);
 4956              	 .loc 8 229 0
 4957 0378 0948     	 ldr r0,.L205+8
 4958 037a FFF7FEFF 	 bl DIGITAL_IO_SetOutputHigh
 230:../main.c     **** 		DIGITAL_IO_SetOutputHigh(&EN_3);
 4959              	 .loc 8 230 0
 4960 037e 0948     	 ldr r0,.L205+12
 4961 0380 FFF7FEFF 	 bl DIGITAL_IO_SetOutputHigh
 231:../main.c     **** 		DIGITAL_IO_SetOutputHigh(&SSR1);//PCR_SW = 1;
 4962              	 .loc 8 231 0
 4963 0384 0848     	 ldr r0,.L205+16
 4964 0386 FFF7FEFF 	 bl DIGITAL_IO_SetOutputHigh
 232:../main.c     **** 		DIGITAL_IO_SetOutputHigh(&SSR2);//PCS_SW = 1;
 4965              	 .loc 8 232 0
 4966 038a 0848     	 ldr r0,.L205+20
 4967 038c FFF7FEFF 	 bl DIGITAL_IO_SetOutputHigh
 233:../main.c     **** 		SCADA_status_button = 1;
 4968              	 .loc 8 233 0
 4969 0390 074B     	 ldr r3,.L205+24
 4970 0392 0122     	 movs r2,#1
 4971 0394 1A60     	 str r2,[r3]
 4972              	.L161:
 234:../main.c     **** 	}
 235:../main.c     **** 
 236:../main.c     **** }
 4973              	 .loc 8 236 0
 4974 0396 80BD     	 pop {r7,pc}
 4975              	.L206:
 4976              	 .align 2
 4977              	.L205:
 4978 0398 00000000 	 .word state
 4979 039c 00000000 	 .word EN_1
 4980 03a0 00000000 	 .word EN_2
 4981 03a4 00000000 	 .word EN_3
 4982 03a8 00000000 	 .word SSR1
 4983 03ac 00000000 	 .word SSR2
 4984 03b0 00000000 	 .word SCADA_status_button
 4985              	 .cfi_endproc
 4986              	.LFE409:
 4988              	 .global __aeabi_dsub
 4989              	 .section .text.CCU80_3_IRQHandler,"ax",%progbits
 4990              	 .align 2
 4991              	 .global CCU80_3_IRQHandler
 4992              	 .thumb
 4993              	 .thumb_func
 4995              	CCU80_3_IRQHandler:
 4996              	.LFB410:
 237:../main.c     **** 
 238:../main.c     **** 
 239:../main.c     **** void Update_PWM(void){
 4997              	 .loc 8 239 0
 4998              	 .cfi_startproc
 4999              	 
 5000              	 
 5001 0000 B0B5     	 push {r4,r5,r7,lr}
 5002              	.LCFI190:
 5003              	 .cfi_def_cfa_offset 16
 5004              	 .cfi_offset 4,-16
 5005              	 .cfi_offset 5,-12
 5006              	 .cfi_offset 7,-8
 5007              	 .cfi_offset 14,-4
 5008 0002 82B0     	 sub sp,sp,#8
 5009              	.LCFI191:
 5010              	 .cfi_def_cfa_offset 24
 5011 0004 00AF     	 add r7,sp,#0
 5012              	.LCFI192:
 5013              	 .cfi_def_cfa_register 7
 240:../main.c     **** 	DIGITAL_IO_SetOutputHigh(&P_1_0);
 5014              	 .loc 8 240 0
 5015 0006 B848     	 ldr r0,.L253+24
 5016 0008 FFF7FEFF 	 bl DIGITAL_IO_SetOutputHigh
 241:../main.c     **** 	///////////////////   BEGGINING OF PERIODIC CONTROL INTERRUPTION
 242:../main.c     **** 
 243:../main.c     **** 
 244:../main.c     **** 	/// ADC acquisition  - AC Voltages
 245:../main.c     **** 	V_abc_adc[0]=ADC_MEASUREMENT_ADV_GetResult(&ADC_MEASUREMENT_1_V1_1);
 5017              	 .loc 8 245 0
 5018 000c B748     	 ldr r0,.L253+28
 5019 000e FFF7FEFF 	 bl ADC_MEASUREMENT_ADV_GetResult
 5020 0012 0346     	 mov r3,r0
 5021 0014 1A46     	 mov r2,r3
 5022 0016 B64B     	 ldr r3,.L253+32
 5023 0018 1A80     	 strh r2,[r3]
 246:../main.c     **** 	V_abc_adc[1]=ADC_MEASUREMENT_ADV_GetResult(&ADC_MEASUREMENT_2_V2_1);
 5024              	 .loc 8 246 0
 5025 001a B648     	 ldr r0,.L253+36
 5026 001c FFF7FEFF 	 bl ADC_MEASUREMENT_ADV_GetResult
 5027 0020 0346     	 mov r3,r0
 5028 0022 1A46     	 mov r2,r3
 5029 0024 B24B     	 ldr r3,.L253+32
 5030 0026 5A80     	 strh r2,[r3,#2]
 247:../main.c     **** 	V_abc_adc[2]=ADC_MEASUREMENT_ADV_GetResult(&ADC_MEASUREMENT_2_V2_3);
 5031              	 .loc 8 247 0
 5032 0028 B348     	 ldr r0,.L253+40
 5033 002a FFF7FEFF 	 bl ADC_MEASUREMENT_ADV_GetResult
 5034 002e 0346     	 mov r3,r0
 5035 0030 1A46     	 mov r2,r3
 5036 0032 AF4B     	 ldr r3,.L253+32
 5037 0034 9A80     	 strh r2,[r3,#4]
 248:../main.c     **** 
 249:../main.c     **** 	V_abc[0]=(V_abc_adc[0]-(1800.0f + 12.98f)) * 0.720f;
 5038              	 .loc 8 249 0
 5039 0036 AE4B     	 ldr r3,.L253+32
 5040 0038 1B88     	 ldrh r3,[r3]
 5041 003a 07EE903A 	 fmsr s15,r3
 5042 003e F8EEE77A 	 fsitos s15,s15
 5043 0042 9FEDAE7A 	 flds s14,.L253+44
 5044 0046 77EEC77A 	 fsubs s15,s15,s14
 5045 004a 9FEDAD7A 	 flds s14,.L253+48
 5046 004e 67EE877A 	 fmuls s15,s15,s14
 5047 0052 AC4B     	 ldr r3,.L253+52
 5048 0054 C3ED007A 	 fsts s15,[r3]
 250:../main.c     **** 	V_abc[1]=(V_abc_adc[1]-(1800.0f + 2.69f)) * 0.720f;
 5049              	 .loc 8 250 0
 5050 0058 A54B     	 ldr r3,.L253+32
 5051 005a 5B88     	 ldrh r3,[r3,#2]
 5052 005c 07EE903A 	 fmsr s15,r3
 5053 0060 F8EEE77A 	 fsitos s15,s15
 5054 0064 9FEDA87A 	 flds s14,.L253+56
 5055 0068 77EEC77A 	 fsubs s15,s15,s14
 5056 006c 9FEDA47A 	 flds s14,.L253+48
 5057 0070 67EE877A 	 fmuls s15,s15,s14
 5058 0074 A34B     	 ldr r3,.L253+52
 5059 0076 C3ED017A 	 fsts s15,[r3,#4]
 251:../main.c     **** 	V_abc[2]=(V_abc_adc[2]-(1800.0f + 16.69f)) * 0.720f;
 5060              	 .loc 8 251 0
 5061 007a 9D4B     	 ldr r3,.L253+32
 5062 007c 9B88     	 ldrh r3,[r3,#4]
 5063 007e 07EE903A 	 fmsr s15,r3
 5064 0082 F8EEE77A 	 fsitos s15,s15
 5065 0086 9FEDA17A 	 flds s14,.L253+60
 5066 008a 77EEC77A 	 fsubs s15,s15,s14
 5067 008e 9FED9C7A 	 flds s14,.L253+48
 5068 0092 67EE877A 	 fmuls s15,s15,s14
 5069 0096 9B4B     	 ldr r3,.L253+52
 5070 0098 C3ED027A 	 fsts s15,[r3,#8]
 252:../main.c     **** 
 253:../main.c     **** 	V_abc[0] = LPF1(V_abc[0], ADC_LPFbuff_VA, LPF_K_1500);
 5071              	 .loc 8 253 0
 5072 009c 994B     	 ldr r3,.L253+52
 5073 009e 1B68     	 ldr r3,[r3]
 5074 00a0 1846     	 mov r0,r3
 5075 00a2 9B49     	 ldr r1,.L253+64
 5076 00a4 9B4A     	 ldr r2,.L253+68
 5077 00a6 FFF7FEFF 	 bl LPF1
 5078 00aa 0246     	 mov r2,r0
 5079 00ac 954B     	 ldr r3,.L253+52
 5080 00ae 1A60     	 str r2,[r3]
 254:../main.c     **** 	V_abc[1] = LPF1(V_abc[1], ADC_LPFbuff_VB, LPF_K_1500);
 5081              	 .loc 8 254 0
 5082 00b0 944B     	 ldr r3,.L253+52
 5083 00b2 5B68     	 ldr r3,[r3,#4]
 5084 00b4 1846     	 mov r0,r3
 5085 00b6 9849     	 ldr r1,.L253+72
 5086 00b8 964A     	 ldr r2,.L253+68
 5087 00ba FFF7FEFF 	 bl LPF1
 5088 00be 0246     	 mov r2,r0
 5089 00c0 904B     	 ldr r3,.L253+52
 5090 00c2 5A60     	 str r2,[r3,#4]
 255:../main.c     **** 	V_abc[2] = LPF1(V_abc[2], ADC_LPFbuff_VC, LPF_K_1500);
 5091              	 .loc 8 255 0
 5092 00c4 8F4B     	 ldr r3,.L253+52
 5093 00c6 9B68     	 ldr r3,[r3,#8]
 5094 00c8 1846     	 mov r0,r3
 5095 00ca 9449     	 ldr r1,.L253+76
 5096 00cc 914A     	 ldr r2,.L253+68
 5097 00ce FFF7FEFF 	 bl LPF1
 5098 00d2 0246     	 mov r2,r0
 5099 00d4 8B4B     	 ldr r3,.L253+52
 5100 00d6 9A60     	 str r2,[r3,#8]
 256:../main.c     **** 
 257:../main.c     **** 	/// ADC acquisition  - AC Currents
 258:../main.c     **** 	I_abc_adc[0]=ADC_MEASUREMENT_ADV_GetResult(&ADC_MEASUREMENT_2_V2_2);
 5101              	 .loc 8 258 0
 5102 00d8 9148     	 ldr r0,.L253+80
 5103 00da FFF7FEFF 	 bl ADC_MEASUREMENT_ADV_GetResult
 5104 00de 0346     	 mov r3,r0
 5105 00e0 1A46     	 mov r2,r3
 5106 00e2 904B     	 ldr r3,.L253+84
 5107 00e4 1A80     	 strh r2,[r3]
 259:../main.c     **** 	I_abc_adc[1]=ADC_MEASUREMENT_ADV_GetResult(&ADC_MEASUREMENT_1_V1_4);
 5108              	 .loc 8 259 0
 5109 00e6 9048     	 ldr r0,.L253+88
 5110 00e8 FFF7FEFF 	 bl ADC_MEASUREMENT_ADV_GetResult
 5111 00ec 0346     	 mov r3,r0
 5112 00ee 1A46     	 mov r2,r3
 5113 00f0 8C4B     	 ldr r3,.L253+84
 5114 00f2 5A80     	 strh r2,[r3,#2]
 260:../main.c     **** 	I_abc_adc[2]=ADC_MEASUREMENT_ADV_GetResult(&ADC_MEASUREMENT_1_V1_3);
 5115              	 .loc 8 260 0
 5116 00f4 8D48     	 ldr r0,.L253+92
 5117 00f6 FFF7FEFF 	 bl ADC_MEASUREMENT_ADV_GetResult
 5118 00fa 0346     	 mov r3,r0
 5119 00fc 1A46     	 mov r2,r3
 5120 00fe 894B     	 ldr r3,.L253+84
 5121 0100 9A80     	 strh r2,[r3,#4]
 261:../main.c     **** 
 262:../main.c     **** 	I_abc[0]=(I_abc_adc[0]-(1800.0f - 18.18f)) * 0.022f;
 5122              	 .loc 8 262 0
 5123 0102 884B     	 ldr r3,.L253+84
 5124 0104 1B88     	 ldrh r3,[r3]
 5125 0106 07EE903A 	 fmsr s15,r3
 5126 010a F8EEE77A 	 fsitos s15,s15
 5127 010e 9FED887A 	 flds s14,.L253+96
 5128 0112 77EEC77A 	 fsubs s15,s15,s14
 5129 0116 9FED877A 	 flds s14,.L253+100
 5130 011a 67EE877A 	 fmuls s15,s15,s14
 5131 011e 864B     	 ldr r3,.L253+104
 5132 0120 C3ED007A 	 fsts s15,[r3]
 263:../main.c     **** 	I_abc[1]=(I_abc_adc[1]-(1800.0f - 15.91f)) * 0.022f;
 5133              	 .loc 8 263 0
 5134 0124 7F4B     	 ldr r3,.L253+84
 5135 0126 5B88     	 ldrh r3,[r3,#2]
 5136 0128 07EE903A 	 fmsr s15,r3
 5137 012c F8EEE77A 	 fsitos s15,s15
 5138 0130 9FED827A 	 flds s14,.L253+108
 5139 0134 77EEC77A 	 fsubs s15,s15,s14
 5140 0138 9FED7E7A 	 flds s14,.L253+100
 5141 013c 67EE877A 	 fmuls s15,s15,s14
 5142 0140 7D4B     	 ldr r3,.L253+104
 5143 0142 C3ED017A 	 fsts s15,[r3,#4]
 264:../main.c     **** 	I_abc[2]=(I_abc_adc[2]-(1800.0f - 19.55f)) * 0.022f;
 5144              	 .loc 8 264 0
 5145 0146 774B     	 ldr r3,.L253+84
 5146 0148 9B88     	 ldrh r3,[r3,#4]
 5147 014a 07EE903A 	 fmsr s15,r3
 5148 014e F8EEE77A 	 fsitos s15,s15
 5149 0152 9FED7B7A 	 flds s14,.L253+112
 5150 0156 77EEC77A 	 fsubs s15,s15,s14
 5151 015a 9FED767A 	 flds s14,.L253+100
 5152 015e 67EE877A 	 fmuls s15,s15,s14
 5153 0162 754B     	 ldr r3,.L253+104
 5154 0164 C3ED027A 	 fsts s15,[r3,#8]
 265:../main.c     **** 
 266:../main.c     **** 	I_abc[0] = LPF1(I_abc[0], ADC_LPFbuff_IA, LPF_K_1500);
 5155              	 .loc 8 266 0
 5156 0168 734B     	 ldr r3,.L253+104
 5157 016a 1B68     	 ldr r3,[r3]
 5158 016c 1846     	 mov r0,r3
 5159 016e 7549     	 ldr r1,.L253+116
 5160 0170 684A     	 ldr r2,.L253+68
 5161 0172 FFF7FEFF 	 bl LPF1
 5162 0176 0246     	 mov r2,r0
 5163 0178 6F4B     	 ldr r3,.L253+104
 5164 017a 1A60     	 str r2,[r3]
 267:../main.c     **** 	I_abc[1] = LPF1(I_abc[1], ADC_LPFbuff_IB, LPF_K_1500);
 5165              	 .loc 8 267 0
 5166 017c 6E4B     	 ldr r3,.L253+104
 5167 017e 5B68     	 ldr r3,[r3,#4]
 5168 0180 1846     	 mov r0,r3
 5169 0182 7149     	 ldr r1,.L253+120
 5170 0184 634A     	 ldr r2,.L253+68
 5171 0186 FFF7FEFF 	 bl LPF1
 5172 018a 0246     	 mov r2,r0
 5173 018c 6A4B     	 ldr r3,.L253+104
 5174 018e 5A60     	 str r2,[r3,#4]
 268:../main.c     **** 	I_abc[2] = LPF1(I_abc[2], ADC_LPFbuff_IC, LPF_K_1500);
 5175              	 .loc 8 268 0
 5176 0190 694B     	 ldr r3,.L253+104
 5177 0192 9B68     	 ldr r3,[r3,#8]
 5178 0194 1846     	 mov r0,r3
 5179 0196 6D49     	 ldr r1,.L253+124
 5180 0198 5E4A     	 ldr r2,.L253+68
 5181 019a FFF7FEFF 	 bl LPF1
 5182 019e 0246     	 mov r2,r0
 5183 01a0 654B     	 ldr r3,.L253+104
 5184 01a2 9A60     	 str r2,[r3,#8]
 269:../main.c     **** 
 270:../main.c     **** 	/// ADC acquisition  - DC BUS Voltage
 271:../main.c     **** 	V_DC_adc = ADC_MEASUREMENT_ADV_GetResult(&ADC_MEASUREMENT_1_V1_2);
 5185              	 .loc 8 271 0
 5186 01a4 6A48     	 ldr r0,.L253+128
 5187 01a6 FFF7FEFF 	 bl ADC_MEASUREMENT_ADV_GetResult
 5188 01aa 0346     	 mov r3,r0
 5189 01ac 1A46     	 mov r2,r3
 5190 01ae 694B     	 ldr r3,.L253+132
 5191 01b0 1A80     	 strh r2,[r3]
 272:../main.c     **** 	V_DC = (V_DC_adc-(1800.0f + 9.7f)) * -0.58f;
 5192              	 .loc 8 272 0
 5193 01b2 684B     	 ldr r3,.L253+132
 5194 01b4 1B88     	 ldrh r3,[r3]
 5195 01b6 07EE903A 	 fmsr s15,r3
 5196 01ba F8EEE77A 	 fsitos s15,s15
 5197 01be 9FED667A 	 flds s14,.L253+136
 5198 01c2 77EEC77A 	 fsubs s15,s15,s14
 5199 01c6 9FED657A 	 flds s14,.L253+140
 5200 01ca 67EE877A 	 fmuls s15,s15,s14
 5201 01ce 644B     	 ldr r3,.L253+144
 5202 01d0 C3ED007A 	 fsts s15,[r3]
 273:../main.c     **** 
 274:../main.c     **** 	conv.Vdc = LPF1(V_DC, LPFbuff_vdc, LPF_K_100);
 5203              	 .loc 8 274 0
 5204 01d4 624B     	 ldr r3,.L253+144
 5205 01d6 1B68     	 ldr r3,[r3]
 5206 01d8 1846     	 mov r0,r3
 5207 01da 6249     	 ldr r1,.L253+148
 5208 01dc 624A     	 ldr r2,.L253+152
 5209 01de FFF7FEFF 	 bl LPF1
 5210 01e2 0246     	 mov r2,r0
 5211 01e4 614B     	 ldr r3,.L253+156
 5212 01e6 1A61     	 str r2,[r3,#16]
 275:../main.c     **** 
 276:../main.c     **** 	/// ADC acquisition  - Converter temperature
 277:../main.c     **** 	termistor_temp = ADC_MEASUREMENT_ADV_GetResult(&ADC_MEASUREMENT_3_V3_1);
 5213              	 .loc 8 277 0
 5214 01e8 6148     	 ldr r0,.L253+160
 5215 01ea FFF7FEFF 	 bl ADC_MEASUREMENT_ADV_GetResult
 5216 01ee 0346     	 mov r3,r0
 5217 01f0 1A46     	 mov r2,r3
 5218 01f2 604B     	 ldr r3,.L253+164
 5219 01f4 1A80     	 strh r2,[r3]
 278:../main.c     **** 	float conv_temperature = termistor_temp; //auxiliar variable to avoid multiple
 5220              	 .loc 8 278 0
 5221 01f6 5F4B     	 ldr r3,.L253+164
 5222 01f8 1B88     	 ldrh r3,[r3]
 5223 01fa 07EE903A 	 fmsr s15,r3
 5224 01fe F8EE677A 	 fuitos s15,s15
 5225 0202 C7ED007A 	 fsts s15,[r7]
 279:../main.c     **** 	conv_temp_C =       (conv_temperature*conv_temperature*-0.00016973) +  //x^2
 5226              	 .loc 8 279 0
 5227 0206 97ED007A 	 flds s14,[r7]
 5228 020a D7ED007A 	 flds s15,[r7]
 5229 020e 67EE277A 	 fmuls s15,s14,s15
 5230 0212 17EE900A 	 fmrs r0,s15
 5231 0216 FFF7FEFF 	 bl __aeabi_f2d
 5232 021a 0246     	 mov r2,r0
 5233 021c 0B46     	 mov r3,r1
 5234 021e 1046     	 mov r0,r2
 5235 0220 1946     	 mov r1,r3
 5236 0222 2BA3     	 adr r3,.L253
 5237 0224 D3E90023 	 ldrd r2,[r3]
 5238 0228 FFF7FEFF 	 bl __aeabi_dmul
 5239 022c 0246     	 mov r2,r0
 5240 022e 0B46     	 mov r3,r1
 5241 0230 1446     	 mov r4,r2
 5242 0232 1D46     	 mov r5,r3
 280:../main.c     **** 			(conv_temperature*0.69969095) +  //x^1
 5243              	 .loc 8 280 0
 5244 0234 3868     	 ldr r0,[r7]
 5245 0236 FFF7FEFF 	 bl __aeabi_f2d
 5246 023a 0246     	 mov r2,r0
 5247 023c 0B46     	 mov r3,r1
 5248 023e 1046     	 mov r0,r2
 5249 0240 1946     	 mov r1,r3
 5250 0242 25A3     	 adr r3,.L253+8
 5251 0244 D3E90023 	 ldrd r2,[r3]
 5252 0248 FFF7FEFF 	 bl __aeabi_dmul
 5253 024c 0246     	 mov r2,r0
 5254 024e 0B46     	 mov r3,r1
 279:../main.c     **** 	conv_temp_C =       (conv_temperature*conv_temperature*-0.00016973) +  //x^2
 5255              	 .loc 8 279 0
 5256 0250 2046     	 mov r0,r4
 5257 0252 2946     	 mov r1,r5
 5258 0254 FFF7FEFF 	 bl __aeabi_dadd
 5259 0258 0246     	 mov r2,r0
 5260 025a 0B46     	 mov r3,r1
 5261              	 .loc 8 280 0
 5262 025c 1046     	 mov r0,r2
 5263 025e 1946     	 mov r1,r3
 5264 0260 1FA3     	 adr r3,.L253+16
 5265 0262 D3E90023 	 ldrd r2,[r3]
 5266 0266 FFF7FEFF 	 bl __aeabi_dsub
 5267 026a 0246     	 mov r2,r0
 5268 026c 0B46     	 mov r3,r1
 279:../main.c     **** 	conv_temp_C =       (conv_temperature*conv_temperature*-0.00016973) +  //x^2
 5269              	 .loc 8 279 0
 5270 026e 1046     	 mov r0,r2
 5271 0270 1946     	 mov r1,r3
 5272 0272 FFF7FEFF 	 bl __aeabi_d2f
 5273 0276 0246     	 mov r2,r0
 5274 0278 3F4B     	 ldr r3,.L253+168
 5275 027a 1A60     	 str r2,[r3]
 281:../main.c     **** 			-653.10731030;  //x^0 */
 282:../main.c     **** 	conv_temp_C += 7.0f;  //compensação para temperatura da junção
 5276              	 .loc 8 282 0
 5277 027c 3E4B     	 ldr r3,.L253+168
 5278 027e D3ED007A 	 flds s15,[r3]
 5279 0282 B1EE0C7A 	 fconsts s14,#28
 5280 0286 77EE877A 	 fadds s15,s15,s14
 5281 028a 3B4B     	 ldr r3,.L253+168
 5282 028c C3ED007A 	 fsts s15,[r3]
 283:../main.c     **** 
 284:../main.c     **** 	conv.temp = LPF1(conv_temp_C, LPFbuff_temp, LPF_K_1);
 5283              	 .loc 8 284 0
 5284 0290 394B     	 ldr r3,.L253+168
 5285 0292 1B68     	 ldr r3,[r3]
 5286 0294 1846     	 mov r0,r3
 5287 0296 3949     	 ldr r1,.L253+172
 5288 0298 394A     	 ldr r2,.L253+176
 5289 029a FFF7FEFF 	 bl LPF1
 5290 029e 0246     	 mov r2,r0
 5291 02a0 324B     	 ldr r3,.L253+156
 5292 02a2 5A62     	 str r2,[r3,#36]
 285:../main.c     **** 
 286:../main.c     **** 
 287:../main.c     **** 	///  micrium scope variables
 288:../main.c     **** 	scope_adc7 = V_DC;
 5293              	 .loc 8 288 0
 5294 02a4 2E4B     	 ldr r3,.L253+144
 5295 02a6 1B68     	 ldr r3,[r3]
 5296 02a8 364A     	 ldr r2,.L253+180
 5297 02aa 1360     	 str r3,[r2]
 289:../main.c     **** 	scope_adc1 = I_abc[0]; scope_adc2 = I_abc[1]; scope_adc3 = I_abc[2];
 5298              	 .loc 8 289 0
 5299 02ac 224B     	 ldr r3,.L253+104
 5300 02ae 1B68     	 ldr r3,[r3]
 5301 02b0 354A     	 ldr r2,.L253+184
 5302 02b2 1360     	 str r3,[r2]
 5303 02b4 204B     	 ldr r3,.L253+104
 5304 02b6 5B68     	 ldr r3,[r3,#4]
 5305 02b8 344A     	 ldr r2,.L253+188
 5306 02ba 1360     	 str r3,[r2]
 5307 02bc 1E4B     	 ldr r3,.L253+104
 5308 02be 9B68     	 ldr r3,[r3,#8]
 5309 02c0 334A     	 ldr r2,.L253+192
 5310 02c2 1360     	 str r3,[r2]
 290:../main.c     **** 	scope_adc4 = V_abc[0]; scope_adc5 = V_abc[1]; scope_adc6 = V_abc[2];
 5311              	 .loc 8 290 0
 5312 02c4 0F4B     	 ldr r3,.L253+52
 5313 02c6 1B68     	 ldr r3,[r3]
 5314 02c8 64E0     	 b .L254
 5315              	.L255:
 5316 02ca 00BFAFF3 	 .align 3
 5316      0080
 5317              	.L253:
 5318 02d0 04332A99 	 .word -1725287676
 5319 02d4 313F26BF 	 .word -1088012495
 5320 02d8 59D47146 	 .word 1181865049
 5321 02dc DE63E63F 	 .word 1072063454
 5322 02e0 31A880C5 	 .word -981424079
 5323 02e4 DB688440 	 .word 1082419419
 5324 02e8 00000000 	 .word P_1_0
 5325 02ec 00000000 	 .word ADC_MEASUREMENT_1_V1_1_handle
 5326 02f0 00000000 	 .word V_abc_adc
 5327 02f4 00000000 	 .word ADC_MEASUREMENT_2_V2_1_handle
 5328 02f8 00000000 	 .word ADC_MEASUREMENT_2_V2_3_handle
 5329 02fc 5C9FE244 	 .word 1155702620
 5330 0300 EC51383F 	 .word 1060655596
 5331 0304 00000000 	 .word V_abc
 5332 0308 1456E144 	 .word 1155618324
 5333 030c 1416E344 	 .word 1155733012
 5334 0310 00000000 	 .word ADC_LPFbuff_VA
 5335 0314 00000000 	 .word LPF_K_1500
 5336 0318 00000000 	 .word ADC_LPFbuff_VB
 5337 031c 00000000 	 .word ADC_LPFbuff_VC
 5338 0320 00000000 	 .word ADC_MEASUREMENT_2_V2_2_handle
 5339 0324 00000000 	 .word I_abc_adc
 5340 0328 00000000 	 .word ADC_MEASUREMENT_1_V1_4_handle
 5341 032c 00000000 	 .word ADC_MEASUREMENT_1_V1_3_handle
 5342 0330 3DBADE44 	 .word 1155447357
 5343 0334 5839B43C 	 .word 1018444120
 5344 0338 00000000 	 .word I_abc
 5345 033c E102DF44 	 .word 1155465953
 5346 0340 668EDE44 	 .word 1155436134
 5347 0344 00000000 	 .word ADC_LPFbuff_IA
 5348 0348 00000000 	 .word ADC_LPFbuff_IB
 5349 034c 00000000 	 .word ADC_LPFbuff_IC
 5350 0350 00000000 	 .word ADC_MEASUREMENT_1_V1_2_handle
 5351 0354 00000000 	 .word V_DC_adc
 5352 0358 6636E244 	 .word 1155675750
 5353 035c E17A14BF 	 .word -1089176863
 5354 0360 00000000 	 .word V_DC
 5355 0364 00000000 	 .word LPFbuff_vdc
 5356 0368 00000000 	 .word LPF_K_100
 5357 036c 00000000 	 .word conv
 5358 0370 00000000 	 .word ADC_MEASUREMENT_3_V3_1_handle
 5359 0374 00000000 	 .word termistor_temp
 5360 0378 00000000 	 .word conv_temp_C
 5361 037c 00000000 	 .word LPFbuff_temp
 5362 0380 00000000 	 .word LPF_K_1
 5363 0384 00000000 	 .word scope_adc7
 5364 0388 00000000 	 .word scope_adc1
 5365 038c 00000000 	 .word scope_adc2
 5366 0390 00000000 	 .word scope_adc3
 5367              	.L254:
 5368 0394 854A     	 ldr r2,.L256
 5369 0396 1360     	 str r3,[r2]
 5370 0398 854B     	 ldr r3,.L256+4
 5371 039a 5B68     	 ldr r3,[r3,#4]
 5372 039c 854A     	 ldr r2,.L256+8
 5373 039e 1360     	 str r3,[r2]
 5374 03a0 834B     	 ldr r3,.L256+4
 5375 03a2 9B68     	 ldr r3,[r3,#8]
 5376 03a4 844A     	 ldr r2,.L256+12
 5377 03a6 1360     	 str r3,[r2]
 291:../main.c     **** 
 292:../main.c     **** 	////////////////////////////////////////   PLACE CONVERTER CONTROL HERE
 293:../main.c     **** 
 294:../main.c     **** 
 295:../main.c     **** 	///// begin PLL
 296:../main.c     **** 	QSG(V_abc[2], dqsg.w, &(dqsg.QSG_d));
 5378              	 .loc 8 296 0
 5379 03a8 814B     	 ldr r3,.L256+4
 5380 03aa 9A68     	 ldr r2,[r3,#8]
 5381 03ac 834B     	 ldr r3,.L256+16
 5382 03ae 1B68     	 ldr r3,[r3]
 5383 03b0 1046     	 mov r0,r2
 5384 03b2 1946     	 mov r1,r3
 5385 03b4 824A     	 ldr r2,.L256+20
 5386 03b6 FFF7FEFF 	 bl QSG
 297:../main.c     **** 	SOGI_v_AB[0] = dqsg.QSG_d.v_AB[0];
 5387              	 .loc 8 297 0
 5388 03ba 804B     	 ldr r3,.L256+16
 5389 03bc 5B68     	 ldr r3,[r3,#4]
 5390 03be 814A     	 ldr r2,.L256+24
 5391 03c0 1360     	 str r3,[r2]
 298:../main.c     **** 	SOGI_v_AB[1] = dqsg.QSG_d.v_AB[1];//*(w_aux/(100.0f*PI));
 5392              	 .loc 8 298 0
 5393 03c2 7E4B     	 ldr r3,.L256+16
 5394 03c4 9B68     	 ldr r3,[r3,#8]
 5395 03c6 7F4A     	 ldr r2,.L256+24
 5396 03c8 5360     	 str r3,[r2,#4]
 299:../main.c     **** 	SOGI_v_AB[1] *= (PLL_w / PLL_w0);
 5397              	 .loc 8 299 0
 5398 03ca 7E4B     	 ldr r3,.L256+24
 5399 03cc 93ED017A 	 flds s14,[r3,#4]
 5400 03d0 7D4B     	 ldr r3,.L256+28
 5401 03d2 D3ED006A 	 flds s13,[r3]
 5402 03d6 7D4B     	 ldr r3,.L256+32
 5403 03d8 D3ED007A 	 flds s15,[r3]
 5404 03dc C6EEA77A 	 fdivs s15,s13,s15
 5405 03e0 67EE277A 	 fmuls s15,s14,s15
 5406 03e4 774B     	 ldr r3,.L256+24
 5407 03e6 C3ED017A 	 fsts s15,[r3,#4]
 300:../main.c     **** 
 301:../main.c     **** 	AB_dq(SOGI_v_AB, PLL_Vdq, PLL_wt);
 5408              	 .loc 8 301 0
 5409 03ea 794B     	 ldr r3,.L256+36
 5410 03ec 1B68     	 ldr r3,[r3]
 5411 03ee 7548     	 ldr r0,.L256+24
 5412 03f0 7849     	 ldr r1,.L256+40
 5413 03f2 1A46     	 mov r2,r3
 5414 03f4 FFF7FEFF 	 bl AB_dq
 302:../main.c     **** 	PLL_Vdq[0] = LPF1(PLL_Vdq[0], PLL_LPFbuff_d, LPF_K_500);
 5415              	 .loc 8 302 0
 5416 03f8 764B     	 ldr r3,.L256+40
 5417 03fa 1B68     	 ldr r3,[r3]
 5418 03fc 1846     	 mov r0,r3
 5419 03fe 7649     	 ldr r1,.L256+44
 5420 0400 764A     	 ldr r2,.L256+48
 5421 0402 FFF7FEFF 	 bl LPF1
 5422 0406 0246     	 mov r2,r0
 5423 0408 724B     	 ldr r3,.L256+40
 5424 040a 1A60     	 str r2,[r3]
 303:../main.c     **** 	PLL_Vdq[1] = LPF1(PLL_Vdq[1], PLL_LPFbuff_q, LPF_K_500);
 5425              	 .loc 8 303 0
 5426 040c 714B     	 ldr r3,.L256+40
 5427 040e 5B68     	 ldr r3,[r3,#4]
 5428 0410 1846     	 mov r0,r3
 5429 0412 7349     	 ldr r1,.L256+52
 5430 0414 714A     	 ldr r2,.L256+48
 5431 0416 FFF7FEFF 	 bl LPF1
 5432 041a 0246     	 mov r2,r0
 5433 041c 6D4B     	 ldr r3,.L256+40
 5434 041e 5A60     	 str r2,[r3,#4]
 304:../main.c     **** 	conv.Vdq[0] = PLL_Vdq[0];
 5435              	 .loc 8 304 0
 5436 0420 6C4B     	 ldr r3,.L256+40
 5437 0422 1B68     	 ldr r3,[r3]
 5438 0424 6F4A     	 ldr r2,.L256+56
 5439 0426 5361     	 str r3,[r2,#20]
 305:../main.c     **** 	conv.Vdq[1] = PLL_Vdq[1];
 5440              	 .loc 8 305 0
 5441 0428 6A4B     	 ldr r3,.L256+40
 5442 042a 5B68     	 ldr r3,[r3,#4]
 5443 042c 6D4A     	 ldr r2,.L256+56
 5444 042e 9361     	 str r3,[r2,#24]
 306:../main.c     **** 
 307:../main.c     **** 	PLL_w = PI_TR_p(PLL_Vdq[1], Ts, &PI_PLL) + PLL_w0;
 5445              	 .loc 8 307 0
 5446 0430 684B     	 ldr r3,.L256+40
 5447 0432 5B68     	 ldr r3,[r3,#4]
 5448 0434 1846     	 mov r0,r3
 5449 0436 6C49     	 ldr r1,.L256+60
 5450 0438 6C4A     	 ldr r2,.L256+64
 5451 043a FFF7FEFF 	 bl PI_TR_p
 5452 043e 07EE100A 	 fmsr s14,r0
 5453 0442 624B     	 ldr r3,.L256+32
 5454 0444 D3ED007A 	 flds s15,[r3]
 5455 0448 77EE277A 	 fadds s15,s14,s15
 5456 044c 5E4B     	 ldr r3,.L256+28
 5457 044e C3ED007A 	 fsts s15,[r3]
 308:../main.c     **** 	PLL_wt = fw_integ(PLL_w, &PLL_wt_buff, Ts, PI2);
 5458              	 .loc 8 308 0
 5459 0452 5D4B     	 ldr r3,.L256+28
 5460 0454 1B68     	 ldr r3,[r3]
 5461 0456 1846     	 mov r0,r3
 5462 0458 6549     	 ldr r1,.L256+68
 5463 045a 634A     	 ldr r2,.L256+60
 5464 045c 654B     	 ldr r3,.L256+72
 5465 045e FFF7FEFF 	 bl fw_integ
 5466 0462 0246     	 mov r2,r0
 5467 0464 5A4B     	 ldr r3,.L256+36
 5468 0466 1A60     	 str r2,[r3]
 309:../main.c     **** 	PLL_w = LPF1(PLL_w, PLL_LPFbuff_w, LPF_K_10);
 5469              	 .loc 8 309 0
 5470 0468 574B     	 ldr r3,.L256+28
 5471 046a 1B68     	 ldr r3,[r3]
 5472 046c 1846     	 mov r0,r3
 5473 046e 6249     	 ldr r1,.L256+76
 5474 0470 624A     	 ldr r2,.L256+80
 5475 0472 FFF7FEFF 	 bl LPF1
 5476 0476 0246     	 mov r2,r0
 5477 0478 534B     	 ldr r3,.L256+28
 5478 047a 1A60     	 str r2,[r3]
 310:../main.c     **** 	conv.wt = PLL_wt + ((PLL_w*PLL_w - PLL_w0*PLL_w0)/(1.4142136f*PLL_w0*PLL_w));
 5479              	 .loc 8 310 0
 5480 047c 524B     	 ldr r3,.L256+28
 5481 047e 93ED007A 	 flds s14,[r3]
 5482 0482 514B     	 ldr r3,.L256+28
 5483 0484 D3ED007A 	 flds s15,[r3]
 5484 0488 27EE277A 	 fmuls s14,s14,s15
 5485 048c 4F4B     	 ldr r3,.L256+32
 5486 048e D3ED006A 	 flds s13,[r3]
 5487 0492 4E4B     	 ldr r3,.L256+32
 5488 0494 D3ED007A 	 flds s15,[r3]
 5489 0498 66EEA77A 	 fmuls s15,s13,s15
 5490 049c 37EE677A 	 fsubs s14,s14,s15
 5491 04a0 4A4B     	 ldr r3,.L256+32
 5492 04a2 D3ED007A 	 flds s15,[r3]
 5493 04a6 DFED566A 	 flds s13,.L256+84
 5494 04aa 67EEA66A 	 fmuls s13,s15,s13
 5495 04ae 464B     	 ldr r3,.L256+28
 5496 04b0 D3ED007A 	 flds s15,[r3]
 5497 04b4 66EEA77A 	 fmuls s15,s13,s15
 5498 04b8 87EE277A 	 fdivs s14,s14,s15
 5499 04bc 444B     	 ldr r3,.L256+36
 5500 04be D3ED007A 	 flds s15,[r3]
 5501 04c2 77EE277A 	 fadds s15,s14,s15
 5502 04c6 474B     	 ldr r3,.L256+56
 5503 04c8 C3ED087A 	 fsts s15,[r3,#32]
 311:../main.c     **** 	///// end PLL
 312:../main.c     **** 
 313:../main.c     **** 	///// begin CTRL: Idq transform
 314:../main.c     **** 	i_dqsg.w = dqsg.w;
 5504              	 .loc 8 314 0
 5505 04cc 3B4B     	 ldr r3,.L256+16
 5506 04ce 1B68     	 ldr r3,[r3]
 5507 04d0 4C4A     	 ldr r2,.L256+88
 5508 04d2 1360     	 str r3,[r2]
 315:../main.c     **** 	QSG(I_abc[0], i_dqsg.w, &(i_dqsg.QSG_d));
 5509              	 .loc 8 315 0
 5510 04d4 4C4B     	 ldr r3,.L256+92
 5511 04d6 1A68     	 ldr r2,[r3]
 5512 04d8 4A4B     	 ldr r3,.L256+88
 5513 04da 1B68     	 ldr r3,[r3]
 5514 04dc 1046     	 mov r0,r2
 5515 04de 1946     	 mov r1,r3
 5516 04e0 4A4A     	 ldr r2,.L256+96
 5517 04e2 FFF7FEFF 	 bl QSG
 316:../main.c     **** 	SOGI_i_AB[0] =  i_dqsg.QSG_d.v_AB[0];
 5518              	 .loc 8 316 0
 5519 04e6 474B     	 ldr r3,.L256+88
 5520 04e8 5B68     	 ldr r3,[r3,#4]
 5521 04ea 494A     	 ldr r2,.L256+100
 5522 04ec 1360     	 str r3,[r2]
 317:../main.c     **** 	SOGI_i_AB[1] =  i_dqsg.QSG_d.v_AB[1];
 5523              	 .loc 8 317 0
 5524 04ee 454B     	 ldr r3,.L256+88
 5525 04f0 9B68     	 ldr r3,[r3,#8]
 5526 04f2 474A     	 ldr r2,.L256+100
 5527 04f4 5360     	 str r3,[r2,#4]
 318:../main.c     **** 	AB_dq(SOGI_i_AB, CTRL_idq, PLL_wt);
 5528              	 .loc 8 318 0
 5529 04f6 364B     	 ldr r3,.L256+36
 5530 04f8 1B68     	 ldr r3,[r3]
 5531 04fa 4548     	 ldr r0,.L256+100
 5532 04fc 4549     	 ldr r1,.L256+104
 5533 04fe 1A46     	 mov r2,r3
 5534 0500 FFF7FEFF 	 bl AB_dq
 319:../main.c     **** 	///// end CTRL: Idq transform
 320:../main.c     **** 	
 321:../main.c     **** 	/////////////////////   switch MODO controlo barramento
 322:../main.c     **** /*     VDC_BUS_REF = 200.0f; //SCADA_Vdc_ref; 							//recebe referência do micrium/CAN
 323:../main.c     ****      //vdc_bus_error = ((VDC_BUS_REF)-(conv.Vdc));						//calcula erro para PI: tensão  
 324:../main.c     ****      vdc_bus_error = ((VDC_BUS_REF*VDC_BUS_REF)-(conv.Vdc*conv.Vdc));	//calcula erro para PI: ENERG
 325:../main.c     ****      vdc_bus_error = (state == running) ? vdc_bus_error : 0;			//hold ao erro se não estiver em ru
 326:../main.c     ****      vdc_bus_piout = -PI_TR_p(vdc_bus_error, Ts, &PI_Vdc); 				//PI CTRL tensão barramento DC
 327:../main.c     ****      I_dq_ref[0] = vdc_bus_piout;										//passa referência corrente activa para transf Idq->IAB
 328:../main.c     **** 
 329:../main.c     ****     CTRL_idq_ref[1] = (state == running) ? SCADA_Iq_ref : 0;			//recebe referência do micrium/CAN
 330:../main.c     ****     CTRL_idq_ref[1] = (CTRL_idq_ref[1] < -5) ? -5 : CTRL_idq_ref[1]; 	//saturação
 331:../main.c     ****     CTRL_idq_ref[1] = (CTRL_idq_ref[1] > 5)  ?  5 : CTRL_idq_ref[1]; 	//saturação
 332:../main.c     ****     //CTRL_idq_ref[1] = (state == running) ? 0 : 0;					
 333:../main.c     ****      I_dq_ref[1] = PI_TR_p(CTRL_idq_ref[1] - CTRL_idq[1], Ts, &PI_q);	//PI CTRL corrente reactiva
 334:../main.c     **** */
 335:../main.c     ****     /////////////////////   switch MODO controlo PQ
 336:../main.c     ****     CTRL_idq_ref[0] = (state == running) ? SCADA_Id_ref : 0;   			//recebe referência do micrium/C
 5535              	 .loc 8 336 0
 5536 0504 444B     	 ldr r3,.L256+108
 5537 0506 1B88     	 ldrh r3,[r3]
 5538 0508 9BB2     	 uxth r3,r3
 5539 050a 042B     	 cmp r3,#4
 5540 050c 02D1     	 bne .L208
 5541              	 .loc 8 336 0 is_stmt 0 discriminator 1
 5542 050e 434B     	 ldr r3,.L256+112
 5543 0510 1B68     	 ldr r3,[r3]
 5544 0512 01E0     	 b .L209
 5545              	.L208:
 5546              	 .loc 8 336 0 discriminator 2
 5547 0514 4FF00003 	 mov r3,#0
 5548              	.L209:
 5549              	 .loc 8 336 0 discriminator 4
 5550 0518 414A     	 ldr r2,.L256+116
 5551 051a 1360     	 str r3,[r2]
 337:../main.c     ****     CTRL_idq_ref[0] = (CTRL_idq_ref[0] < 0) ? 0 : CTRL_idq_ref[0];  	//saturação !!!!!!!!!!!!  se
 5552              	 .loc 8 337 0 is_stmt 1 discriminator 4
 5553 051c 404B     	 ldr r3,.L256+116
 5554 051e D3ED007A 	 flds s15,[r3]
 5555 0522 F5EEC07A 	 fcmpezs s15
 5556 0526 F1EE10FA 	 fmstat
 5557 052a 02D5     	 bpl .L246
 5558              	 .loc 8 337 0 is_stmt 0 discriminator 1
 5559 052c 4FF00003 	 mov r3,#0
 5560 0530 01E0     	 b .L212
 5561              	.L246:
 5562              	 .loc 8 337 0 discriminator 2
 5563 0532 3B4B     	 ldr r3,.L256+116
 5564 0534 1B68     	 ldr r3,[r3]
 5565              	.L212:
 5566              	 .loc 8 337 0 discriminator 4
 5567 0536 3A4A     	 ldr r2,.L256+116
 5568 0538 1360     	 str r3,[r2]
 338:../main.c     ****     CTRL_idq_ref[0] = (CTRL_idq_ref[0] > 5) ? 5 : CTRL_idq_ref[0];  	//saturação
 5569              	 .loc 8 338 0 is_stmt 1 discriminator 4
 5570 053a 394B     	 ldr r3,.L256+116
 5571 053c D3ED007A 	 flds s15,[r3]
 5572 0540 B1EE047A 	 fconsts s14,#20
 5573 0544 F4EEC77A 	 fcmpes s15,s14
 5574 0548 F1EE10FA 	 fmstat
 5575 054c 01DD     	 ble .L247
 5576              	 .loc 8 338 0 is_stmt 0 discriminator 1
 5577 054e 354B     	 ldr r3,.L256+120
 5578 0550 01E0     	 b .L215
 5579              	.L247:
 5580              	 .loc 8 338 0 discriminator 2
 5581 0552 334B     	 ldr r3,.L256+116
 5582 0554 1B68     	 ldr r3,[r3]
 5583              	.L215:
 5584              	 .loc 8 338 0 discriminator 4
 5585 0556 324A     	 ldr r2,.L256+116
 5586 0558 1360     	 str r3,[r2]
 339:../main.c     ****     //CTRL_idq_ref[0] = (state == running) ? 0 : 0;
 340:../main.c     **** 
 341:../main.c     ****     CTRL_idq_ref[1] = (state == running) ? SCADA_Iq_ref : 0;			//recebe referência do micrium/CAN
 5587              	 .loc 8 341 0 is_stmt 1 discriminator 4
 5588 055a 2F4B     	 ldr r3,.L256+108
 5589 055c 1B88     	 ldrh r3,[r3]
 5590 055e 9BB2     	 uxth r3,r3
 5591 0560 042B     	 cmp r3,#4
 5592 0562 02D1     	 bne .L216
 5593              	 .loc 8 341 0 is_stmt 0 discriminator 1
 5594 0564 304B     	 ldr r3,.L256+124
 5595 0566 1B68     	 ldr r3,[r3]
 5596 0568 01E0     	 b .L217
 5597              	.L216:
 5598              	 .loc 8 341 0 discriminator 2
 5599 056a 4FF00003 	 mov r3,#0
 5600              	.L217:
 5601              	 .loc 8 341 0 discriminator 4
 5602 056e 2C4A     	 ldr r2,.L256+116
 5603 0570 5360     	 str r3,[r2,#4]
 342:../main.c     ****     CTRL_idq_ref[1] = (CTRL_idq_ref[1] < -5) ? -5 : CTRL_idq_ref[1]; 	//saturação
 5604              	 .loc 8 342 0 is_stmt 1 discriminator 4
 5605 0572 2B4B     	 ldr r3,.L256+116
 5606 0574 D3ED017A 	 flds s15,[r3,#4]
 5607 0578 B9EE047A 	 fconsts s14,#148
 5608 057c F4EEC77A 	 fcmpes s15,s14
 5609 0580 F1EE10FA 	 fmstat
 5610 0584 01D5     	 bpl .L248
 5611              	 .loc 8 342 0 is_stmt 0 discriminator 1
 5612 0586 294B     	 ldr r3,.L256+128
 5613 0588 01E0     	 b .L220
 5614              	.L248:
 5615              	 .loc 8 342 0 discriminator 2
 5616 058a 254B     	 ldr r3,.L256+116
 5617 058c 5B68     	 ldr r3,[r3,#4]
 5618              	.L220:
 5619              	 .loc 8 342 0 discriminator 4
 5620 058e 244A     	 ldr r2,.L256+116
 5621 0590 5360     	 str r3,[r2,#4]
 343:../main.c     ****     CTRL_idq_ref[1] = (CTRL_idq_ref[1] > 5)  ?  5 : CTRL_idq_ref[1]; 	//saturação
 5622              	 .loc 8 343 0 is_stmt 1 discriminator 4
 5623 0592 234B     	 ldr r3,.L256+116
 5624 0594 D3ED017A 	 flds s15,[r3,#4]
 5625 0598 B1EE047A 	 fconsts s14,#20
 5626 059c F4EEC77A 	 fcmpes s15,s14
 5627 05a0 F1EE10FA 	 fmstat
 5628 05a4 44DD     	 ble .L249
 5629              	 .loc 8 343 0 is_stmt 0 discriminator 1
 5630 05a6 1F4B     	 ldr r3,.L256+120
 5631 05a8 44E0     	 b .L223
 5632              	.L257:
 5633 05aa 00BF     	 .align 2
 5634              	.L256:
 5635 05ac 00000000 	 .word scope_adc4
 5636 05b0 00000000 	 .word V_abc
 5637 05b4 00000000 	 .word scope_adc5
 5638 05b8 00000000 	 .word scope_adc6
 5639 05bc 00000000 	 .word dqsg
 5640 05c0 04000000 	 .word dqsg+4
 5641 05c4 00000000 	 .word SOGI_v_AB
 5642 05c8 00000000 	 .word PLL_w
 5643 05cc 00000000 	 .word PLL_w0
 5644 05d0 00000000 	 .word PLL_wt
 5645 05d4 00000000 	 .word PLL_Vdq
 5646 05d8 00000000 	 .word PLL_LPFbuff_d
 5647 05dc 00000000 	 .word LPF_K_500
 5648 05e0 00000000 	 .word PLL_LPFbuff_q
 5649 05e4 00000000 	 .word conv
 5650 05e8 17B7D138 	 .word 953267991
 5651 05ec 00000000 	 .word PI_PLL
 5652 05f0 00000000 	 .word PLL_wt_buff
 5653 05f4 DB0FC940 	 .word 1086918619
 5654 05f8 00000000 	 .word PLL_LPFbuff_w
 5655 05fc 00000000 	 .word LPF_K_10
 5656 0600 F404B53F 	 .word 1068827892
 5657 0604 00000000 	 .word i_dqsg
 5658 0608 00000000 	 .word I_abc
 5659 060c 04000000 	 .word i_dqsg+4
 5660 0610 00000000 	 .word SOGI_i_AB
 5661 0614 00000000 	 .word CTRL_idq
 5662 0618 00000000 	 .word state
 5663 061c 00000000 	 .word SCADA_Id_ref
 5664 0620 00000000 	 .word CTRL_idq_ref
 5665 0624 0000A040 	 .word 1084227584
 5666 0628 00000000 	 .word SCADA_Iq_ref
 5667 062c 0000A0C0 	 .word -1063256064
 5668              	.L249:
 5669              	 .loc 8 343 0 discriminator 2
 5670 0630 8C4B     	 ldr r3,.L258
 5671 0632 5B68     	 ldr r3,[r3,#4]
 5672              	.L223:
 5673              	 .loc 8 343 0 discriminator 4
 5674 0634 8B4A     	 ldr r2,.L258
 5675 0636 5360     	 str r3,[r2,#4]
 344:../main.c     ****     //CTRL_idq_ref[1] = (state == running) ? 0 : 0;
 345:../main.c     **** 	I_dq_ref[0] = PI_TR_p(CTRL_idq_ref[0] - CTRL_idq[0], Ts, &PI_d);	//PI CTRL corrente activa
 5676              	 .loc 8 345 0 is_stmt 1 discriminator 4
 5677 0638 8A4B     	 ldr r3,.L258
 5678 063a 93ED007A 	 flds s14,[r3]
 5679 063e 8A4B     	 ldr r3,.L258+4
 5680 0640 D3ED007A 	 flds s15,[r3]
 5681 0644 77EE677A 	 fsubs s15,s14,s15
 5682 0648 17EE900A 	 fmrs r0,s15
 5683 064c 8749     	 ldr r1,.L258+8
 5684 064e 884A     	 ldr r2,.L258+12
 5685 0650 FFF7FEFF 	 bl PI_TR_p
 5686 0654 0246     	 mov r2,r0
 5687 0656 874B     	 ldr r3,.L258+16
 5688 0658 1A60     	 str r2,[r3]
 346:../main.c     **** 	I_dq_ref[1] = PI_TR_p(CTRL_idq_ref[1] - CTRL_idq[1], Ts, &PI_q);  	//PI CTRL corrente reactiva
 5689              	 .loc 8 346 0 discriminator 4
 5690 065a 824B     	 ldr r3,.L258
 5691 065c 93ED017A 	 flds s14,[r3,#4]
 5692 0660 814B     	 ldr r3,.L258+4
 5693 0662 D3ED017A 	 flds s15,[r3,#4]
 5694 0666 77EE677A 	 fsubs s15,s14,s15
 5695 066a 17EE900A 	 fmrs r0,s15
 5696 066e 7F49     	 ldr r1,.L258+8
 5697 0670 814A     	 ldr r2,.L258+20
 5698 0672 FFF7FEFF 	 bl PI_TR_p
 5699 0676 0246     	 mov r2,r0
 5700 0678 7E4B     	 ldr r3,.L258+16
 5701 067a 5A60     	 str r2,[r3,#4]
 347:../main.c     **** 
 348:../main.c     **** 	/////////////////////   END switch
 349:../main.c     **** 
 350:../main.c     **** 	///// begin Idq to AB references transform
 351:../main.c     **** 	dq_AB(I_dq_ref, I_AB, conv.wt);										//transf Idq->IAB
 5702              	 .loc 8 351 0 discriminator 4
 5703 067c 7F4B     	 ldr r3,.L258+24
 5704 067e 1B6A     	 ldr r3,[r3,#32]
 5705 0680 7C48     	 ldr r0,.L258+16
 5706 0682 7F49     	 ldr r1,.L258+28
 5707 0684 1A46     	 mov r2,r3
 5708 0686 FFF7FEFF 	 bl dq_AB
 352:../main.c     ****     I_AB[0] = (state == running) ? I_AB[0] : 0;							//passa referência para PR
 5709              	 .loc 8 352 0 discriminator 4
 5710 068a 7E4B     	 ldr r3,.L258+32
 5711 068c 1B88     	 ldrh r3,[r3]
 5712 068e 9BB2     	 uxth r3,r3
 5713 0690 042B     	 cmp r3,#4
 5714 0692 02D1     	 bne .L224
 5715              	 .loc 8 352 0 is_stmt 0 discriminator 1
 5716 0694 7A4B     	 ldr r3,.L258+28
 5717 0696 1B68     	 ldr r3,[r3]
 5718 0698 01E0     	 b .L225
 5719              	.L224:
 5720              	 .loc 8 352 0 discriminator 2
 5721 069a 4FF00003 	 mov r3,#0
 5722              	.L225:
 5723              	 .loc 8 352 0 discriminator 4
 5724 069e 784A     	 ldr r2,.L258+28
 5725 06a0 1360     	 str r3,[r2]
 353:../main.c     ****     ///// end Idq to AB references transform
 354:../main.c     **** 
 355:../main.c     **** 	///// begin PR_ctrl
 356:../main.c     **** 	set_PR_ref(&PR_Test, I_AB[0]);										//Atribui Ialfa como referêcia p/ PR
 5726              	 .loc 8 356 0 is_stmt 1 discriminator 4
 5727 06a2 774B     	 ldr r3,.L258+28
 5728 06a4 1B68     	 ldr r3,[r3]
 5729 06a6 7848     	 ldr r0,.L258+36
 5730 06a8 1946     	 mov r1,r3
 5731 06aa FFF7FEFF 	 bl set_PR_ref
 357:../main.c     **** 	Iu_filt = LPF1(I_abc[0], PR_LPFbuff_Iu, LPF_K_500);					//Filtragem !!!!!!!!!  Ja feita acima
 5732              	 .loc 8 357 0 discriminator 4
 5733 06ae 774B     	 ldr r3,.L258+40
 5734 06b0 1B68     	 ldr r3,[r3]
 5735 06b2 1846     	 mov r0,r3
 5736 06b4 7649     	 ldr r1,.L258+44
 5737 06b6 774A     	 ldr r2,.L258+48
 5738 06b8 FFF7FEFF 	 bl LPF1
 5739 06bc 0246     	 mov r2,r0
 5740 06be 764B     	 ldr r3,.L258+52
 5741 06c0 1A60     	 str r2,[r3]
 358:../main.c     **** 	PR_output = Calc_prStruct(&PR_Test, Iu_filt, 100.0f*PI) ;			//Corre PR CTRL
 5742              	 .loc 8 358 0 discriminator 4
 5743 06c2 754B     	 ldr r3,.L258+52
 5744 06c4 1B68     	 ldr r3,[r3]
 5745 06c6 7048     	 ldr r0,.L258+36
 5746 06c8 1946     	 mov r1,r3
 5747 06ca 744A     	 ldr r2,.L258+56
 5748 06cc FFF7FEFF 	 bl Calc_prStruct
 5749 06d0 0246     	 mov r2,r0
 5750 06d2 734B     	 ldr r3,.L258+60
 5751 06d4 1A60     	 str r2,[r3]
 359:../main.c     **** 
 360:../main.c     **** 	PR_output = (state == running) ? PR_output : 0;						//passa referência para modulação
 5752              	 .loc 8 360 0 discriminator 4
 5753 06d6 6B4B     	 ldr r3,.L258+32
 5754 06d8 1B88     	 ldrh r3,[r3]
 5755 06da 9BB2     	 uxth r3,r3
 5756 06dc 042B     	 cmp r3,#4
 5757 06de 02D1     	 bne .L226
 5758              	 .loc 8 360 0 is_stmt 0 discriminator 1
 5759 06e0 6F4B     	 ldr r3,.L258+60
 5760 06e2 1B68     	 ldr r3,[r3]
 5761 06e4 01E0     	 b .L227
 5762              	.L226:
 5763              	 .loc 8 360 0 discriminator 2
 5764 06e6 4FF00003 	 mov r3,#0
 5765              	.L227:
 5766              	 .loc 8 360 0 discriminator 4
 5767 06ea 6D4A     	 ldr r2,.L258+60
 5768 06ec 1360     	 str r3,[r2]
 361:../main.c     **** 	PR_output = (PR_output >  15.0f) ?  15.0f : PR_output;				//satura saída
 5769              	 .loc 8 361 0 is_stmt 1 discriminator 4
 5770 06ee 6C4B     	 ldr r3,.L258+60
 5771 06f0 D3ED007A 	 flds s15,[r3]
 5772 06f4 B2EE0E7A 	 fconsts s14,#46
 5773 06f8 F4EEC77A 	 fcmpes s15,s14
 5774 06fc F1EE10FA 	 fmstat
 5775 0700 01DD     	 ble .L250
 5776              	 .loc 8 361 0 is_stmt 0 discriminator 1
 5777 0702 684B     	 ldr r3,.L258+64
 5778 0704 01E0     	 b .L230
 5779              	.L250:
 5780              	 .loc 8 361 0 discriminator 2
 5781 0706 664B     	 ldr r3,.L258+60
 5782 0708 1B68     	 ldr r3,[r3]
 5783              	.L230:
 5784              	 .loc 8 361 0 discriminator 4
 5785 070a 654A     	 ldr r2,.L258+60
 5786 070c 1360     	 str r3,[r2]
 362:../main.c     **** 	PR_output = (PR_output < -15.0f) ? -15.0f : PR_output;				//satura saída
 5787              	 .loc 8 362 0 is_stmt 1 discriminator 4
 5788 070e 644B     	 ldr r3,.L258+60
 5789 0710 D3ED007A 	 flds s15,[r3]
 5790 0714 BAEE0E7A 	 fconsts s14,#174
 5791 0718 F4EEC77A 	 fcmpes s15,s14
 5792 071c F1EE10FA 	 fmstat
 5793 0720 01D5     	 bpl .L251
 5794              	 .loc 8 362 0 is_stmt 0 discriminator 1
 5795 0722 614B     	 ldr r3,.L258+68
 5796 0724 01E0     	 b .L233
 5797              	.L251:
 5798              	 .loc 8 362 0 discriminator 2
 5799 0726 5E4B     	 ldr r3,.L258+60
 5800 0728 1B68     	 ldr r3,[r3]
 5801              	.L233:
 5802              	 .loc 8 362 0 discriminator 4
 5803 072a 5D4A     	 ldr r2,.L258+60
 5804 072c 1360     	 str r3,[r2]
 363:../main.c     **** 
 364:../main.c     **** 	//PR_output = 0.0f;
 365:../main.c     **** 	vdc_division = (conv.Vdc < 10) ? 10 : conv.Vdc;   					//permitir divisão por 0
 5805              	 .loc 8 365 0 is_stmt 1 discriminator 4
 5806 072e 534B     	 ldr r3,.L258+24
 5807 0730 D3ED047A 	 flds s15,[r3,#16]
 5808 0734 B2EE047A 	 fconsts s14,#36
 5809 0738 F4EEC77A 	 fcmpes s15,s14
 5810 073c F1EE10FA 	 fmstat
 5811 0740 01D5     	 bpl .L252
 5812              	 .loc 8 365 0 is_stmt 0 discriminator 1
 5813 0742 5A4B     	 ldr r3,.L258+72
 5814 0744 01E0     	 b .L236
 5815              	.L252:
 5816              	 .loc 8 365 0 discriminator 2
 5817 0746 4D4B     	 ldr r3,.L258+24
 5818 0748 1B69     	 ldr r3,[r3,#16]
 5819              	.L236:
 5820              	 .loc 8 365 0 discriminator 4
 5821 074a 594A     	 ldr r2,.L258+76
 5822 074c 1360     	 str r3,[r2]
 366:../main.c     **** 	vdc_division *= 2.0f;  // ganho do transformador					//!!!!!!!!!  UMA VEZ QUE MEDIDA Vac É NO PRI
 5823              	 .loc 8 366 0 is_stmt 1 discriminator 4
 5824 074e 584B     	 ldr r3,.L258+76
 5825 0750 D3ED007A 	 flds s15,[r3]
 5826 0754 77EEA77A 	 fadds s15,s15,s15
 5827 0758 554B     	 ldr r3,.L258+76
 5828 075a C3ED007A 	 fsts s15,[r3]
 367:../main.c     **** 
 368:../main.c     **** 	m_u = (PR_output + SOGI_v_AB[0]) / (vdc_division);					//MODULAÇÃO: soma Va_PLL a PR_out
 5829              	 .loc 8 368 0 discriminator 4
 5830 075e 554B     	 ldr r3,.L258+80
 5831 0760 93ED007A 	 flds s14,[r3]
 5832 0764 4E4B     	 ldr r3,.L258+60
 5833 0766 D3ED007A 	 flds s15,[r3]
 5834 076a 37EE277A 	 fadds s14,s14,s15
 5835 076e 504B     	 ldr r3,.L258+76
 5836 0770 D3ED007A 	 flds s15,[r3]
 5837 0774 C7EE277A 	 fdivs s15,s14,s15
 5838 0778 4F4B     	 ldr r3,.L258+84
 5839 077a C3ED007A 	 fsts s15,[r3]
 369:../main.c     **** 	m_v = -m_u;															//Gera a referência p/ segundo braço
 5840              	 .loc 8 369 0 discriminator 4
 5841 077e 4E4B     	 ldr r3,.L258+84
 5842 0780 D3ED007A 	 flds s15,[r3]
 5843 0784 F1EE677A 	 fnegs s15,s15
 5844 0788 4C4B     	 ldr r3,.L258+88
 5845 078a C3ED007A 	 fsts s15,[r3]
 370:../main.c     **** 
 371:../main.c     **** 	vmabc[0] = m_u * 1.0f;												//A RETIRAR
 5846              	 .loc 8 371 0 discriminator 4
 5847 078e 4A4B     	 ldr r3,.L258+84
 5848 0790 1B68     	 ldr r3,[r3]
 5849 0792 4B4A     	 ldr r2,.L258+92
 5850 0794 1360     	 str r3,[r2]
 372:../main.c     **** 	vmabc[1] = m_v * 1.0f;												//A RETIRAR
 5851              	 .loc 8 372 0 discriminator 4
 5852 0796 494B     	 ldr r3,.L258+88
 5853 0798 1B68     	 ldr r3,[r3]
 5854 079a 494A     	 ldr r2,.L258+92
 5855 079c 5360     	 str r3,[r2,#4]
 5856              	.LBB11:
 373:../main.c     **** 
 374:../main.c     **** 
 375:../main.c     **** 	for (int i=0; i<3; i++){
 5857              	 .loc 8 375 0 discriminator 4
 5858 079e 0023     	 movs r3,#0
 5859 07a0 7B60     	 str r3,[r7,#4]
 5860 07a2 36E0     	 b .L237
 5861              	.L238:
 376:../main.c     **** 		vmabc[i]=fminf(vmabc[i],0.97f);
 5862              	 .loc 8 376 0 discriminator 3
 5863 07a4 464A     	 ldr r2,.L258+92
 5864 07a6 7B68     	 ldr r3,[r7,#4]
 5865 07a8 9B00     	 lsls r3,r3,#2
 5866 07aa 1344     	 add r3,r3,r2
 5867 07ac 1B68     	 ldr r3,[r3]
 5868 07ae 1846     	 mov r0,r3
 5869 07b0 4449     	 ldr r1,.L258+96
 5870 07b2 FFF7FEFF 	 bl fminf
 5871 07b6 0146     	 mov r1,r0
 5872 07b8 414A     	 ldr r2,.L258+92
 5873 07ba 7B68     	 ldr r3,[r7,#4]
 5874 07bc 9B00     	 lsls r3,r3,#2
 5875 07be 1344     	 add r3,r3,r2
 5876 07c0 1960     	 str r1,[r3]
 377:../main.c     **** 		vmabc[i]=fmaxf(vmabc[i],-0.97f);
 5877              	 .loc 8 377 0 discriminator 3
 5878 07c2 3F4A     	 ldr r2,.L258+92
 5879 07c4 7B68     	 ldr r3,[r7,#4]
 5880 07c6 9B00     	 lsls r3,r3,#2
 5881 07c8 1344     	 add r3,r3,r2
 5882 07ca 1B68     	 ldr r3,[r3]
 5883 07cc 1846     	 mov r0,r3
 5884 07ce 3E49     	 ldr r1,.L258+100
 5885 07d0 FFF7FEFF 	 bl fmaxf
 5886 07d4 0146     	 mov r1,r0
 5887 07d6 3A4A     	 ldr r2,.L258+92
 5888 07d8 7B68     	 ldr r3,[r7,#4]
 5889 07da 9B00     	 lsls r3,r3,#2
 5890 07dc 1344     	 add r3,r3,r2
 5891 07de 1960     	 str r1,[r3]
 378:../main.c     **** 		// Convert float to uint32 voltage modulator wave
 379:../main.c     **** 		m_abc[i]=((int32_t)(10000.0f*vmabc[i])>>1)+5000u;
 5892              	 .loc 8 379 0 discriminator 3
 5893 07e0 374A     	 ldr r2,.L258+92
 5894 07e2 7B68     	 ldr r3,[r7,#4]
 5895 07e4 9B00     	 lsls r3,r3,#2
 5896 07e6 1344     	 add r3,r3,r2
 5897 07e8 D3ED007A 	 flds s15,[r3]
 5898 07ec 9FED377A 	 flds s14,.L258+104
 5899 07f0 67EE877A 	 fmuls s15,s15,s14
 5900 07f4 FDEEE77A 	 ftosizs s15,s15
 5901 07f8 17EE903A 	 fmrs r3,s15
 5902 07fc 5B10     	 asrs r3,r3,#1
 5903 07fe 03F59C53 	 add r3,r3,#4992
 5904 0802 0833     	 adds r3,r3,#8
 5905 0804 3249     	 ldr r1,.L258+108
 5906 0806 7A68     	 ldr r2,[r7,#4]
 5907 0808 41F82230 	 str r3,[r1,r2,lsl#2]
 375:../main.c     **** 		vmabc[i]=fminf(vmabc[i],0.97f);
 5908              	 .loc 8 375 0 discriminator 3
 5909 080c 7B68     	 ldr r3,[r7,#4]
 5910 080e 0133     	 adds r3,r3,#1
 5911 0810 7B60     	 str r3,[r7,#4]
 5912              	.L237:
 375:../main.c     **** 		vmabc[i]=fminf(vmabc[i],0.97f);
 5913              	 .loc 8 375 0 is_stmt 0 discriminator 1
 5914 0812 7B68     	 ldr r3,[r7,#4]
 5915 0814 022B     	 cmp r3,#2
 5916 0816 C5DD     	 ble .L238
 5917              	.LBE11:
 380:../main.c     **** 	}
 381:../main.c     **** 
 382:../main.c     **** 	///  micrium scope variables
 383:../main.c     **** 	scopeu1=m_abc[0];
 5918              	 .loc 8 383 0 is_stmt 1
 5919 0818 2D4B     	 ldr r3,.L258+108
 5920 081a 1B68     	 ldr r3,[r3]
 5921 081c 2D4A     	 ldr r2,.L258+112
 5922 081e 1360     	 str r3,[r2]
 384:../main.c     **** 	scopeu2=m_abc[1];
 5923              	 .loc 8 384 0
 5924 0820 2B4B     	 ldr r3,.L258+108
 5925 0822 5B68     	 ldr r3,[r3,#4]
 5926 0824 2C4A     	 ldr r2,.L258+116
 5927 0826 1360     	 str r3,[r2]
 385:../main.c     **** 	scopeu3=m_abc[2];
 5928              	 .loc 8 385 0
 5929 0828 294B     	 ldr r3,.L258+108
 5930 082a 9B68     	 ldr r3,[r3,#8]
 5931 082c 2B4A     	 ldr r2,.L258+120
 5932 082e 1360     	 str r3,[r2]
 386:../main.c     **** 
 387:../main.c     **** 	// update PWM duty cycles
 388:../main.c     **** 	PWM_SetDutyCycle(&PWM_a,m_abc[0]);
 5933              	 .loc 8 388 0
 5934 0830 274B     	 ldr r3,.L258+108
 5935 0832 1B68     	 ldr r3,[r3]
 5936 0834 2A48     	 ldr r0,.L258+124
 5937 0836 1946     	 mov r1,r3
 5938 0838 FFF7FEFF 	 bl PWM_SetDutyCycle
 389:../main.c     **** 	PWM_SetDutyCycle(&PWM_b,m_abc[1]);
 5939              	 .loc 8 389 0
 5940 083c 244B     	 ldr r3,.L258+108
 5941 083e 5B68     	 ldr r3,[r3,#4]
 5942 0840 2848     	 ldr r0,.L258+128
 5943 0842 1946     	 mov r1,r3
 5944 0844 FFF7FEFF 	 bl PWM_SetDutyCycle
 390:../main.c     **** 	PWM_SetDutyCycle(&PWM_c,m_abc[2]);
 5945              	 .loc 8 390 0
 5946 0848 214B     	 ldr r3,.L258+108
 5947 084a 9B68     	 ldr r3,[r3,#8]
 5948 084c 2648     	 ldr r0,.L258+132
 5949 084e 1946     	 mov r1,r3
 5950 0850 FFF7FEFF 	 bl PWM_SetDutyCycle
 391:../main.c     **** 
 392:../main.c     **** 	ConverterStateMachine();
 5951              	 .loc 8 392 0
 5952 0854 FFF7FEFF 	 bl ConverterStateMachine
 393:../main.c     **** 
 394:../main.c     **** 	///////////////////   END OF PERIODIC CONTROL INTERRUPTION
 395:../main.c     **** 	DIGITAL_IO_SetOutputLow(&P_1_0);
 5953              	 .loc 8 395 0
 5954 0858 2448     	 ldr r0,.L258+136
 5955 085a FFF7FEFF 	 bl DIGITAL_IO_SetOutputLow
 396:../main.c     **** }
 5956              	 .loc 8 396 0
 5957 085e 0837     	 adds r7,r7,#8
 5958              	.LCFI193:
 5959              	 .cfi_def_cfa_offset 16
 5960 0860 BD46     	 mov sp,r7
 5961              	.LCFI194:
 5962              	 .cfi_def_cfa_register 13
 5963              	 
 5964 0862 B0BD     	 pop {r4,r5,r7,pc}
 5965              	.L259:
 5966              	 .align 2
 5967              	.L258:
 5968 0864 00000000 	 .word CTRL_idq_ref
 5969 0868 00000000 	 .word CTRL_idq
 5970 086c 17B7D138 	 .word 953267991
 5971 0870 00000000 	 .word PI_d
 5972 0874 00000000 	 .word I_dq_ref
 5973 0878 00000000 	 .word PI_q
 5974 087c 00000000 	 .word conv
 5975 0880 00000000 	 .word I_AB
 5976 0884 00000000 	 .word state
 5977 0888 00000000 	 .word PR_Test
 5978 088c 00000000 	 .word I_abc
 5979 0890 00000000 	 .word PR_LPFbuff_Iu
 5980 0894 00000000 	 .word LPF_K_500
 5981 0898 00000000 	 .word Iu_filt
 5982 089c 63149D43 	 .word 1134367843
 5983 08a0 00000000 	 .word PR_output
 5984 08a4 00007041 	 .word 1097859072
 5985 08a8 000070C1 	 .word -1049624576
 5986 08ac 00002041 	 .word 1092616192
 5987 08b0 00000000 	 .word vdc_division
 5988 08b4 00000000 	 .word SOGI_v_AB
 5989 08b8 00000000 	 .word m_u
 5990 08bc 00000000 	 .word m_v
 5991 08c0 00000000 	 .word vmabc
 5992 08c4 EC51783F 	 .word 1064849900
 5993 08c8 EC5178BF 	 .word -1082633748
 5994 08cc 00401C46 	 .word 1176256512
 5995 08d0 00000000 	 .word m_abc
 5996 08d4 00000000 	 .word scopeu1
 5997 08d8 00000000 	 .word scopeu2
 5998 08dc 00000000 	 .word scopeu3
 5999 08e0 00000000 	 .word PWM_a
 6000 08e4 00000000 	 .word PWM_b
 6001 08e8 00000000 	 .word PWM_c
 6002 08ec 00000000 	 .word P_1_0
 6003              	 .cfi_endproc
 6004              	.LFE410:
 6006              	 .section .text.main,"ax",%progbits
 6007              	 .align 2
 6008              	 .global main
 6009              	 .thumb
 6010              	 .thumb_func
 6012              	main:
 6013              	.LFB411:
 397:../main.c     **** 
 398:../main.c     **** int main(void)
 399:../main.c     **** {
 6014              	 .loc 8 399 0
 6015              	 .cfi_startproc
 6016              	 
 6017              	 
 6018 0000 80B5     	 push {r7,lr}
 6019              	.LCFI195:
 6020              	 .cfi_def_cfa_offset 8
 6021              	 .cfi_offset 7,-8
 6022              	 .cfi_offset 14,-4
 6023 0002 82B0     	 sub sp,sp,#8
 6024              	.LCFI196:
 6025              	 .cfi_def_cfa_offset 16
 6026 0004 00AF     	 add r7,sp,#0
 6027              	.LCFI197:
 6028              	 .cfi_def_cfa_register 7
 400:../main.c     **** 	DAVE_STATUS_t status;
 401:../main.c     **** 	status = DAVE_Init();           /* Initialization of DAVE APPs  */
 6029              	 .loc 8 401 0
 6030 0006 FFF7FEFF 	 bl DAVE_Init
 6031 000a 0346     	 mov r3,r0
 6032 000c FB71     	 strb r3,[r7,#7]
 402:../main.c     **** 	if(status != DAVE_STATUS_SUCCESS)
 6033              	 .loc 8 402 0
 6034 000e FB79     	 ldrb r3,[r7,#7]
 6035 0010 002B     	 cmp r3,#0
 6036 0012 00D0     	 beq .L261
 6037              	.L262:
 403:../main.c     **** 	{
 404:../main.c     **** 		/* Placeholder for error handler code. The while loop below can be replaced
 405:../main.c     **** 		 * with an user error handler. */
 406:../main.c     **** 		XMC_DEBUG("DAVE APPs initialisation failed\n");
 407:../main.c     **** 		while(1U){}
 6038              	 .loc 8 407 0 discriminator 1
 6039 0014 FEE7     	 b .L262
 6040              	.L261:
 408:../main.c     **** 	}
 409:../main.c     **** 	ProbeScope_Init(SystemCoreClock/TICKS_PER_SECOND);   /// for micrium uScope
 6041              	 .loc 8 409 0
 6042 0016 1B4B     	 ldr r3,.L264
 6043 0018 1B68     	 ldr r3,[r3]
 6044 001a 1B4A     	 ldr r2,.L264+4
 6045 001c A2FB0323 	 umull r2,r3,r2,r3
 6046 0020 5B0B     	 lsrs r3,r3,#13
 6047 0022 1846     	 mov r0,r3
 6048 0024 FFF7FEFF 	 bl ProbeScope_Init
 410:../main.c     **** 
 411:../main.c     **** 
 412:../main.c     **** 	/////////////   DISABLE OUPUTS
 413:../main.c     **** 	DIGITAL_IO_SetOutputLow(&ENABLE);
 6049              	 .loc 8 413 0
 6050 0028 1848     	 ldr r0,.L264+8
 6051 002a FFF7FEFF 	 bl DIGITAL_IO_SetOutputLow
 414:../main.c     **** 	DIGITAL_IO_SetOutputLow(&FAULT_RST);
 6052              	 .loc 8 414 0
 6053 002e 1848     	 ldr r0,.L264+12
 6054 0030 FFF7FEFF 	 bl DIGITAL_IO_SetOutputLow
 415:../main.c     **** 
 416:../main.c     **** 	DIGITAL_IO_SetOutputLow(&EN_1);
 6055              	 .loc 8 416 0
 6056 0034 1748     	 ldr r0,.L264+16
 6057 0036 FFF7FEFF 	 bl DIGITAL_IO_SetOutputLow
 417:../main.c     **** 	DIGITAL_IO_SetOutputLow(&EN_2);
 6058              	 .loc 8 417 0
 6059 003a 1748     	 ldr r0,.L264+20
 6060 003c FFF7FEFF 	 bl DIGITAL_IO_SetOutputLow
 418:../main.c     **** 	DIGITAL_IO_SetOutputLow(&EN_3);
 6061              	 .loc 8 418 0
 6062 0040 1648     	 ldr r0,.L264+24
 6063 0042 FFF7FEFF 	 bl DIGITAL_IO_SetOutputLow
 419:../main.c     **** 
 420:../main.c     **** 	PWM_Stop(&PWM_a);
 6064              	 .loc 8 420 0
 6065 0046 1648     	 ldr r0,.L264+28
 6066 0048 FFF7FEFF 	 bl PWM_Stop
 421:../main.c     **** 	PWM_Stop(&PWM_b);
 6067              	 .loc 8 421 0
 6068 004c 1548     	 ldr r0,.L264+32
 6069 004e FFF7FEFF 	 bl PWM_Stop
 422:../main.c     **** 	PWM_Stop(&PWM_c);
 6070              	 .loc 8 422 0
 6071 0052 1548     	 ldr r0,.L264+36
 6072 0054 FFF7FEFF 	 bl PWM_Stop
 423:../main.c     **** 
 424:../main.c     **** 	////////////   ENABLE OUTPUTS/TIMERS
 425:../main.c     **** 	PWM_Start(&PWM_update);
 6073              	 .loc 8 425 0
 6074 0058 1448     	 ldr r0,.L264+40
 6075 005a FFF7FEFF 	 bl PWM_Start
 426:../main.c     **** 	PWM_Start(&PWM_a);
 6076              	 .loc 8 426 0
 6077 005e 1048     	 ldr r0,.L264+28
 6078 0060 FFF7FEFF 	 bl PWM_Start
 427:../main.c     **** 	PWM_Start(&PWM_b);
 6079              	 .loc 8 427 0
 6080 0064 0F48     	 ldr r0,.L264+32
 6081 0066 FFF7FEFF 	 bl PWM_Start
 428:../main.c     **** 	PWM_Start(&PWM_c);
 6082              	 .loc 8 428 0
 6083 006a 0F48     	 ldr r0,.L264+36
 6084 006c FFF7FEFF 	 bl PWM_Start
 429:../main.c     **** 
 430:../main.c     **** 
 431:../main.c     **** 
 432:../main.c     **** 	////////////  SET GLOBAL VARS HERE
 433:../main.c     **** 	Init_prStruct(&PR_Test, PR_Kp, PR_Kr, PR_Wi);
 6085              	 .loc 8 433 0
 6086 0070 0F48     	 ldr r0,.L264+44
 6087 0072 4FF07F51 	 mov r1,#1069547520
 6088 0076 0F4A     	 ldr r2,.L264+48
 6089 0078 0F4B     	 ldr r3,.L264+52
 6090 007a FFF7FEFF 	 bl Init_prStruct
 6091              	.L263:
 434:../main.c     **** 
 435:../main.c     **** 	while(1U)
 436:../main.c     **** 	{
 437:../main.c     **** 		///////////   IMPLEMENT STATE MACHINE HERE
 438:../main.c     **** 		//ConverterStateMachine();
 439:../main.c     **** 		//////////   END OF STATE MACHINE
 440:../main.c     **** 		ProbeScope_Sampling();    /// for micrium uScope
 6092              	 .loc 8 440 0 discriminator 1
 6093 007e FFF7FEFF 	 bl ProbeScope_Sampling
 441:../main.c     **** 	}
 6094              	 .loc 8 441 0 discriminator 1
 6095 0082 FCE7     	 b .L263
 6096              	.L265:
 6097              	 .align 2
 6098              	.L264:
 6099 0084 00000000 	 .word SystemCoreClock
 6100 0088 5917B7D1 	 .word -776530087
 6101 008c 00000000 	 .word ENABLE
 6102 0090 00000000 	 .word FAULT_RST
 6103 0094 00000000 	 .word EN_1
 6104 0098 00000000 	 .word EN_2
 6105 009c 00000000 	 .word EN_3
 6106 00a0 00000000 	 .word PWM_a
 6107 00a4 00000000 	 .word PWM_b
 6108 00a8 00000000 	 .word PWM_c
 6109 00ac 00000000 	 .word PWM_update
 6110 00b0 00000000 	 .word PR_Test
 6111 00b4 0000C040 	 .word 1086324736
 6112 00b8 DD7E3C42 	 .word 1111260893
 6113              	 .cfi_endproc
 6114              	.LFE411:
 6116              	 .text
 6117              	.Letext0:
 6118              	 .file 9 "c:\\program files (x86)\\dave\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 6119              	 .file 10 "c:\\program files (x86)\\dave\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 6120              	 .file 11 "C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 6121              	 .file 12 "C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc/xmc4_scu.h"
 6122              	 .file 13 "C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc/xmc4_gpio.h"
 6123              	 .file 14 "C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/XMCLib/inc/xmc_ccu8.h"
 6124              	 .file 15 "C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/GLOBAL_CCU8/global_ccu8.h"
 6125              	 .file 16 "C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/PWM/pwm.h"
 6126              	 .file 17 "C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DAVE.h"
 6127              	 .file 18 "../init.h"
 6128              	 .file 19 "C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/CMSIS/Include/core_cm4.h"
 6129              	 .file 20 "C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
 6130              	 .file 21 "C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/PWM/PWM_Extern.h"
 6131              	 .file 22 "C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/DIGITAL_IO/digital_io_extern.h"
 6132              	 .file 23 "C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/ADC_MEASUREMENT_ADV/adc_measurement_adv_extern.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
    {standard input}:20     .text.XMC_GPIO_SetOutputHigh:00000000 $t
    {standard input}:24     .text.XMC_GPIO_SetOutputHigh:00000000 XMC_GPIO_SetOutputHigh
    {standard input}:68     .text.XMC_GPIO_SetOutputLow:00000000 $t
    {standard input}:72     .text.XMC_GPIO_SetOutputLow:00000000 XMC_GPIO_SetOutputLow
    {standard input}:115    .text.DIGITAL_IO_SetOutputHigh:00000000 $t
    {standard input}:119    .text.DIGITAL_IO_SetOutputHigh:00000000 DIGITAL_IO_SetOutputHigh
    {standard input}:159    .text.DIGITAL_IO_SetOutputLow:00000000 $t
    {standard input}:163    .text.DIGITAL_IO_SetOutputLow:00000000 DIGITAL_IO_SetOutputLow
    {standard input}:202    .text.XMC_VADC_GROUP_GetResult:00000000 $t
    {standard input}:206    .text.XMC_VADC_GROUP_GetResult:00000000 XMC_VADC_GROUP_GetResult
    {standard input}:250    .text.ADC_MEASUREMENT_ADV_GetResult:00000000 $t
    {standard input}:254    .text.ADC_MEASUREMENT_ADV_GetResult:00000000 ADC_MEASUREMENT_ADV_GetResult
    {standard input}:306    .text.ADC_MEASUREMENT_ADV_GetResult:00000038 $d
    {standard input}:315    .bss.Vdc_error:00000000 Vdc_error
    {standard input}:312    .bss.Vdc_error:00000000 $d
    {standard input}:322    .rodata.chargeTime:00000000 chargeTime
    {standard input}:319    .rodata.chargeTime:00000000 $d
    {standard input}:329    .data.ADC:00000000 ADC
    {standard input}:326    .data.ADC:00000000 $d
    {standard input}:340    .rodata.K_sync:00000000 K_sync
    {standard input}:337    .rodata.K_sync:00000000 $d
    {standard input}:350    .rodata.PI_K_CC:00000000 PI_K_CC
    {standard input}:347    .rodata.PI_K_CC:00000000 $d
    {standard input}:358    .rodata.HPF_K:00000000 HPF_K
    {standard input}:355    .rodata.HPF_K:00000000 $d
    {standard input}:368    .rodata.LPF_K_1:00000000 LPF_K_1
    {standard input}:365    .rodata.LPF_K_1:00000000 $d
    {standard input}:377    .rodata.LPF_K_10:00000000 LPF_K_10
    {standard input}:374    .rodata.LPF_K_10:00000000 $d
    {standard input}:386    .rodata.LPF_K_50:00000000 LPF_K_50
    {standard input}:383    .rodata.LPF_K_50:00000000 $d
    {standard input}:395    .rodata.LPF_K_100:00000000 LPF_K_100
    {standard input}:392    .rodata.LPF_K_100:00000000 $d
    {standard input}:404    .rodata.LPF_K_500:00000000 LPF_K_500
    {standard input}:401    .rodata.LPF_K_500:00000000 $d
    {standard input}:413    .rodata.LPF_K_1500:00000000 LPF_K_1500
    {standard input}:410    .rodata.LPF_K_1500:00000000 $d
    {standard input}:422    .data.conf:00000000 conf
    {standard input}:419    .data.conf:00000000 $d
    {standard input}:437    .bss.conv:00000000 conv
    {standard input}:434    .bss.conv:00000000 $d
    {standard input}:444    .data.LPF_idq_ref:00000000 LPF_idq_ref
    {standard input}:441    .data.LPF_idq_ref:00000000 $d
    {standard input}:457    .data.LPF_iAB:00000000 LPF_iAB
    {standard input}:454    .data.LPF_iAB:00000000 $d
    {standard input}:470    .data.LPF_vAB:00000000 LPF_vAB
    {standard input}:467    .data.LPF_vAB:00000000 $d
    {standard input}:483    .data.LPF2_K_10:00000000 LPF2_K_10
    {standard input}:480    .data.LPF2_K_10:00000000 $d
    {standard input}:499    .data.LPF2_K_50:00000000 LPF2_K_50
    {standard input}:496    .data.LPF2_K_50:00000000 $d
    {standard input}:515    .data.LPF2_K_100:00000000 LPF2_K_100
    {standard input}:512    .data.LPF2_K_100:00000000 $d
    {standard input}:531    .data.LPF2_K_500:00000000 LPF2_K_500
    {standard input}:528    .data.LPF2_K_500:00000000 $d
    {standard input}:547    .data.LPF2_K_1500:00000000 LPF2_K_1500
    {standard input}:544    .data.LPF2_K_1500:00000000 $d
    {standard input}:563    .data.PI_PLL:00000000 PI_PLL
    {standard input}:560    .data.PI_PLL:00000000 $d
    {standard input}:577    .data.PI_Vdc:00000000 PI_Vdc
    {standard input}:574    .data.PI_Vdc:00000000 $d
    {standard input}:591    .data.PI_d:00000000 PI_d
    {standard input}:588    .data.PI_d:00000000 $d
    {standard input}:605    .data.PI_q:00000000 PI_q
    {standard input}:602    .data.PI_q:00000000 $d
    {standard input}:619    .data.PI_cc:00000000 PI_cc
    {standard input}:616    .data.PI_cc:00000000 $d
    {standard input}:635    .data.dqsg:00000000 dqsg
    {standard input}:632    .data.dqsg:00000000 $d
    {standard input}:654    .data.i_dqsg:00000000 i_dqsg
    {standard input}:651    .data.i_dqsg:00000000 $d
    {standard input}:673    .data.V_dq_ref:00000000 V_dq_ref
    {standard input}:670    .data.V_dq_ref:00000000 $d
    {standard input}:681    .bss.I_dq_ref:00000000 I_dq_ref
    {standard input}:678    .bss.I_dq_ref:00000000 $d
    {standard input}:688    .bss.PQ_ref:00000000 PQ_ref
    {standard input}:685    .bss.PQ_ref:00000000 $d
    {standard input}:695    .bss.V_DC_ref:00000000 V_DC_ref
    {standard input}:692    .bss.V_DC_ref:00000000 $d
    {standard input}:702    .bss.V_DC_ref_f:00000000 V_DC_ref_f
    {standard input}:699    .bss.V_DC_ref_f:00000000 $d
    {standard input}:709    .bss.state:00000000 state
    {standard input}:706    .bss.state:00000000 $d
    {standard input}:716    .bss.relayTimerFlag:00000000 relayTimerFlag
    {standard input}:713    .bss.relayTimerFlag:00000000 $d
    {standard input}:722    .bss.mode:00000000 mode
    {standard input}:723    .bss.mode:00000000 $d
    {standard input}:728    .data.ramp:00000000 ramp
    {standard input}:735    .bss.sync:00000000 sync
    {standard input}:732    .bss.sync:00000000 $d
    {standard input}:742    .bss.B2command:00000000 B2command
    {standard input}:739    .bss.B2command:00000000 $d
    {standard input}:749    .bss.fault_rst:00000000 fault_rst
    {standard input}:746    .bss.fault_rst:00000000 $d
    {standard input}:756    .bss.SWcommand:00000000 SWcommand
    {standard input}:753    .bss.SWcommand:00000000 $d
    {standard input}:763    .bss.REARMcommand:00000000 REARMcommand
    {standard input}:760    .bss.REARMcommand:00000000 $d
                            *COM*:00000002 relayTimer
    {standard input}:771    .bss.fault_flag:00000000 fault_flag
    {standard input}:768    .bss.fault_flag:00000000 $d
    {standard input}:778    .bss.error_code:00000000 error_code
    {standard input}:775    .bss.error_code:00000000 $d
    {standard input}:785    .bss.fan_pwm:00000000 fan_pwm
    {standard input}:782    .bss.fan_pwm:00000000 $d
    {standard input}:792    .bss.sync_aux3:00000000 sync_aux3
    {standard input}:789    .bss.sync_aux3:00000000 $d
    {standard input}:799    .bss.termistor_temp:00000000 termistor_temp
    {standard input}:796    .bss.termistor_temp:00000000 $d
    {standard input}:806    .bss.V_DC_adc:00000000 V_DC_adc
    {standard input}:803    .bss.V_DC_adc:00000000 $d
    {standard input}:813    .bss.m_abc:00000000 m_abc
    {standard input}:810    .bss.m_abc:00000000 $d
    {standard input}:820    .bss.V_abc_adc:00000000 V_abc_adc
    {standard input}:817    .bss.V_abc_adc:00000000 $d
    {standard input}:827    .bss.I_abc_adc:00000000 I_abc_adc
    {standard input}:824    .bss.I_abc_adc:00000000 $d
    {standard input}:834    .bss.conv_temp_C:00000000 conv_temp_C
    {standard input}:831    .bss.conv_temp_C:00000000 $d
    {standard input}:841    .bss.V_DC:00000000 V_DC
    {standard input}:838    .bss.V_DC:00000000 $d
    {standard input}:848    .bss.V_abc:00000000 V_abc
    {standard input}:845    .bss.V_abc:00000000 $d
    {standard input}:855    .bss.I_abc:00000000 I_abc
    {standard input}:852    .bss.I_abc:00000000 $d
    {standard input}:862    .bss.V_AB:00000000 V_AB
    {standard input}:859    .bss.V_AB:00000000 $d
    {standard input}:869    .bss.I_AB:00000000 I_AB
    {standard input}:866    .bss.I_AB:00000000 $d
    {standard input}:876    .bss.V_DCf:00000000 V_DCf
    {standard input}:873    .bss.V_DCf:00000000 $d
    {standard input}:883    .bss.V_ABf:00000000 V_ABf
    {standard input}:880    .bss.V_ABf:00000000 $d
    {standard input}:890    .bss.I_ABf:00000000 I_ABf
    {standard input}:887    .bss.I_ABf:00000000 $d
    {standard input}:897    .bss.V_dq:00000000 V_dq
    {standard input}:894    .bss.V_dq:00000000 $d
    {standard input}:904    .bss.I_dq:00000000 I_dq
    {standard input}:901    .bss.I_dq:00000000 $d
    {standard input}:911    .bss.I_dq_ref_f:00000000 I_dq_ref_f
    {standard input}:908    .bss.I_dq_ref_f:00000000 $d
    {standard input}:918    .bss.Ie_dq:00000000 Ie_dq
    {standard input}:915    .bss.Ie_dq:00000000 $d
    {standard input}:925    .bss.ID_dq:00000000 ID_dq
    {standard input}:922    .bss.ID_dq:00000000 $d
    {standard input}:932    .data.PI_sat_CC:00000000 PI_sat_CC
    {standard input}:929    .data.PI_sat_CC:00000000 $d
    {standard input}:940    .bss.Vm_abc:00000000 Vm_abc
    {standard input}:937    .bss.Vm_abc:00000000 $d
    {standard input}:947    .bss.Vm_AB:00000000 Vm_AB
    {standard input}:944    .bss.Vm_AB:00000000 $d
    {standard input}:954    .data.Vm_dq:00000000 Vm_dq
    {standard input}:951    .data.Vm_dq:00000000 $d
    {standard input}:962    .bss.Vm_AB2:00000000 Vm_AB2
    {standard input}:959    .bss.Vm_AB2:00000000 $d
    {standard input}:969    .data.w:00000000 w
    {standard input}:966    .data.w:00000000 $d
    {standard input}:976    .bss.dw:00000000 dw
    {standard input}:973    .bss.dw:00000000 $d
    {standard input}:983    .bss.wf:00000000 wf
    {standard input}:980    .bss.wf:00000000 $d
    {standard input}:990    .bss.wt:00000000 wt
    {standard input}:987    .bss.wt:00000000 $d
    {standard input}:997    .bss.sync_aux2:00000000 sync_aux2
    {standard input}:994    .bss.sync_aux2:00000000 $d
    {standard input}:1004   .bss.PI_PLL_buff:00000000 PI_PLL_buff
    {standard input}:1001   .bss.PI_PLL_buff:00000000 $d
    {standard input}:1011   .bss.PI_CCd_buff:00000000 PI_CCd_buff
    {standard input}:1008   .bss.PI_CCd_buff:00000000 $d
    {standard input}:1018   .bss.PI_CCq_buff:00000000 PI_CCq_buff
    {standard input}:1015   .bss.PI_CCq_buff:00000000 $d
    {standard input}:1025   .bss.PI_V_DC_buff:00000000 PI_V_DC_buff
    {standard input}:1022   .bss.PI_V_DC_buff:00000000 $d
    {standard input}:1032   .bss.HPFd_buff:00000000 HPFd_buff
    {standard input}:1029   .bss.HPFd_buff:00000000 $d
    {standard input}:1039   .bss.HPFq_buff:00000000 HPFq_buff
    {standard input}:1036   .bss.HPFq_buff:00000000 $d
    {standard input}:1046   .bss.dw_buff:00000000 dw_buff
    {standard input}:1043   .bss.dw_buff:00000000 $d
    {standard input}:1053   .bss.wt_buff:00000000 wt_buff
    {standard input}:1050   .bss.wt_buff:00000000 $d
    {standard input}:1060   .bss.sync_aux3_buff:00000000 sync_aux3_buff
    {standard input}:1057   .bss.sync_aux3_buff:00000000 $d
    {standard input}:1067   .bss.LPF_buff_w0:00000000 LPF_buff_w0
    {standard input}:1064   .bss.LPF_buff_w0:00000000 $d
    {standard input}:1074   .bss.LPF_buff_w:00000000 LPF_buff_w
    {standard input}:1071   .bss.LPF_buff_w:00000000 $d
    {standard input}:1081   .bss.LPF_buff_conv_w:00000000 LPF_buff_conv_w
    {standard input}:1078   .bss.LPF_buff_conv_w:00000000 $d
    {standard input}:1088   .bss.LPF_buff_conv_wt:00000000 LPF_buff_conv_wt
    {standard input}:1085   .bss.LPF_buff_conv_wt:00000000 $d
    {standard input}:1095   .bss.LPF_buff_sync2:00000000 LPF_buff_sync2
    {standard input}:1092   .bss.LPF_buff_sync2:00000000 $d
    {standard input}:1102   .bss.LPF_buff_VA:00000000 LPF_buff_VA
    {standard input}:1099   .bss.LPF_buff_VA:00000000 $d
    {standard input}:1109   .bss.LPF_buff_VB:00000000 LPF_buff_VB
    {standard input}:1106   .bss.LPF_buff_VB:00000000 $d
    {standard input}:1116   .bss.LPF_buff_IA:00000000 LPF_buff_IA
    {standard input}:1113   .bss.LPF_buff_IA:00000000 $d
    {standard input}:1123   .bss.LPF_buff_IB:00000000 LPF_buff_IB
    {standard input}:1120   .bss.LPF_buff_IB:00000000 $d
    {standard input}:1130   .bss.LPF_buff_Vdc:00000000 LPF_buff_Vdc
    {standard input}:1127   .bss.LPF_buff_Vdc:00000000 $d
    {standard input}:1137   .bss.LPF_buff_Vdc_ref:00000000 LPF_buff_Vdc_ref
    {standard input}:1134   .bss.LPF_buff_Vdc_ref:00000000 $d
    {standard input}:1140   .text.HPF1:00000000 $t
    {standard input}:1145   .text.HPF1:00000000 HPF1
    {standard input}:1219   .text.fw_integ:00000000 $t
    {standard input}:1224   .text.fw_integ:00000000 fw_integ
    {standard input}:1314   .text.tr_integ:00000000 $t
    {standard input}:1319   .text.tr_integ:00000000 tr_integ
    {standard input}:1405   .text.tr_integ:00000098 $d
    {standard input}:1410   .text.deriv:00000000 $t
    {standard input}:1415   .text.deriv:00000000 deriv
    {standard input}:1467   .text.abc_AB:00000000 $t
    {standard input}:1472   .text.abc_AB:00000000 abc_AB
    {standard input}:1543   .text.abc_AB:00000084 $d
    {standard input}:1549   .text.abc_AB_Dy:00000000 $t
    {standard input}:1554   .text.abc_AB_Dy:00000000 abc_AB_Dy
    {standard input}:1624   .text.abc_AB_Dy:00000084 $d
    {standard input}:1630   .text.AB_dq:00000000 $t
    {standard input}:1635   .text.AB_dq:00000000 AB_dq
    {standard input}:1715   .text.dq_AB:00000000 $t
    {standard input}:1720   .text.dq_AB:00000000 dq_AB
    {standard input}:1788   .text.AB_abc:00000000 $t
    {standard input}:1793   .text.AB_abc:00000000 AB_abc
    {standard input}:1861   .text.AB_abc:00000070 $d
    {standard input}:1866   .text.LPF1:00000000 $t
    {standard input}:1871   .text.LPF1:00000000 LPF1
    {standard input}:1941   .text.LPF2:00000000 $t
    {standard input}:1946   .text.LPF2:00000000 LPF2
    {standard input}:2036   .text.LPF1_dq:00000000 $t
    {standard input}:2041   .text.LPF1_dq:00000000 LPF1_dq
    {standard input}:2140   .text.conv2DAC:00000000 $t
    {standard input}:2145   .text.conv2DAC:00000000 conv2DAC
    {standard input}:2222   .text.conv2DAC:00000068 $d
    {standard input}:2228   .text.PI_FW:00000000 $t
    {standard input}:2233   .text.PI_FW:00000000 PI_FW
    {standard input}:2298   .text.PI_TR:00000000 $t
    {standard input}:2303   .text.PI_TR:00000000 PI_TR
    {standard input}:2434   .text.PI_TR_p:00000000 $t
    {standard input}:2439   .text.PI_TR_p:00000000 PI_TR_p
    {standard input}:2566   .text.PI_TR_dq:00000000 $t
    {standard input}:2571   .text.PI_TR_dq:00000000 PI_TR_dq
    {standard input}:2789   .text.abs_sat:00000000 $t
    {standard input}:2794   .text.abs_sat:00000000 abs_sat
    {standard input}:2893   .text.sat2D:00000000 $t
    {standard input}:2898   .text.sat2D:00000000 sat2D
    {standard input}:3080   .text.QSG:00000000 $t
    {standard input}:3085   .text.QSG:00000000 QSG
    {standard input}:3160   .text.DSOGI_filter:00000000 $t
    {standard input}:3165   .text.DSOGI_filter:00000000 DSOGI_filter
    {standard input}:3242   .text.FFDSOGI_filter:00000000 $t
    {standard input}:3247   .text.FFDSOGI_filter:00000000 FFDSOGI_filter
    {standard input}:3335   .text.update_config:00000000 $t
    {standard input}:3340   .text.update_config:00000000 update_config
    {standard input}:3377   .text.update_config:0000001c $d
                            *COM*:00000020 PR_Test
    {standard input}:3388   .bss.CTRL_Vab:00000000 CTRL_Vab
    {standard input}:3385   .bss.CTRL_Vab:00000000 $d
    {standard input}:3395   .bss.PR_output:00000000 PR_output
    {standard input}:3392   .bss.PR_output:00000000 $d
                            *COM*:00000004 VDC_BUS_REF
                            *COM*:00000004 vdc_bus_error
                            *COM*:00000004 vdc_bus_piout
                            *COM*:00000004 vdc_division
                            *COM*:00000004 m_u
                            *COM*:00000004 m_v
    {standard input}:3408   .bss.SOGI_v_AB:00000000 SOGI_v_AB
    {standard input}:3405   .bss.SOGI_v_AB:00000000 $d
    {standard input}:3415   .data.PLL_w:00000000 PLL_w
    {standard input}:3412   .data.PLL_w:00000000 $d
    {standard input}:3422   .data.PLL_w0:00000000 PLL_w0
    {standard input}:3419   .data.PLL_w0:00000000 $d
    {standard input}:3429   .bss.PLL_wt:00000000 PLL_wt
    {standard input}:3426   .bss.PLL_wt:00000000 $d
    {standard input}:3436   .bss.PLL_Vdq:00000000 PLL_Vdq
    {standard input}:3433   .bss.PLL_Vdq:00000000 $d
    {standard input}:3443   .bss.PLL_LPFbuff_d:00000000 PLL_LPFbuff_d
    {standard input}:3440   .bss.PLL_LPFbuff_d:00000000 $d
    {standard input}:3450   .bss.PLL_LPFbuff_q:00000000 PLL_LPFbuff_q
    {standard input}:3447   .bss.PLL_LPFbuff_q:00000000 $d
    {standard input}:3457   .bss.PLL_wt_buff:00000000 PLL_wt_buff
    {standard input}:3454   .bss.PLL_wt_buff:00000000 $d
    {standard input}:3464   .bss.PLL_LPFbuff_w:00000000 PLL_LPFbuff_w
    {standard input}:3461   .bss.PLL_LPFbuff_w:00000000 $d
    {standard input}:3471   .bss.PR_LPFbuff_Iu:00000000 PR_LPFbuff_Iu
    {standard input}:3468   .bss.PR_LPFbuff_Iu:00000000 $d
    {standard input}:3478   .bss.Iu_filt:00000000 Iu_filt
    {standard input}:3475   .bss.Iu_filt:00000000 $d
    {standard input}:3485   .bss.SOGI_i_AB:00000000 SOGI_i_AB
    {standard input}:3482   .bss.SOGI_i_AB:00000000 $d
    {standard input}:3492   .bss.CTRL_idq:00000000 CTRL_idq
    {standard input}:3489   .bss.CTRL_idq:00000000 $d
    {standard input}:3499   .bss.CTRL_idq_ref:00000000 CTRL_idq_ref
    {standard input}:3496   .bss.CTRL_idq_ref:00000000 $d
    {standard input}:3502   .text.run_DC_ctrl:00000000 $t
    {standard input}:3507   .text.run_DC_ctrl:00000000 run_DC_ctrl
    {standard input}:3536   .text.Init_prStruct:00000000 $t
    {standard input}:3541   .text.Init_prStruct:00000000 Init_prStruct
    {standard input}:3607   .text.set_PR_ref:00000000 $t
    {standard input}:3612   .text.set_PR_ref:00000000 set_PR_ref
    {standard input}:3656   .text.Calc_prStruct:00000000 $t
    {standard input}:3661   .text.Calc_prStruct:00000000 Calc_prStruct
    {standard input}:3820   .text.Calc_prStruct:00000158 $d
                            *COM*:00000004 scope1
                            *COM*:00000004 scope2
                            *COM*:00000004 scope3
                            *COM*:00000004 scopeu1
                            *COM*:00000004 scopeu2
                            *COM*:00000004 scopeu3
    {standard input}:3836   .data.counter:00000000 counter
    {standard input}:3833   .data.counter:00000000 $d
    {standard input}:3843   .bss.fault:00000000 fault
    {standard input}:3840   .bss.fault:00000000 $d
    {standard input}:3850   .data.vDQp_ref:00000000 vDQp_ref
    {standard input}:3847   .data.vDQp_ref:00000000 $d
    {standard input}:3858   .bss.vDQp:00000000 vDQp
    {standard input}:3855   .bss.vDQp:00000000 $d
    {standard input}:3865   .bss.vABp:00000000 vABp
    {standard input}:3862   .bss.vABp:00000000 $d
    {standard input}:3872   .bss.vDQn_ref:00000000 vDQn_ref
    {standard input}:3869   .bss.vDQn_ref:00000000 $d
    {standard input}:3879   .bss.vDQn:00000000 vDQn
    {standard input}:3876   .bss.vDQn:00000000 $d
    {standard input}:3886   .bss.vABn:00000000 vABn
    {standard input}:3883   .bss.vABn:00000000 $d
    {standard input}:3893   .data.Vn:00000000 Vn
    {standard input}:3890   .data.Vn:00000000 $d
    {standard input}:3900   .bss.V5:00000000 V5
    {standard input}:3897   .bss.V5:00000000 $d
    {standard input}:3907   .bss.V7:00000000 V7
    {standard input}:3904   .bss.V7:00000000 $d
    {standard input}:3914   .bss.V11:00000000 V11
    {standard input}:3911   .bss.V11:00000000 $d
    {standard input}:3921   .bss.V13:00000000 V13
    {standard input}:3918   .bss.V13:00000000 $d
    {standard input}:3928   .bss.vDQ5:00000000 vDQ5
    {standard input}:3925   .bss.vDQ5:00000000 $d
    {standard input}:3935   .bss.vAB5:00000000 vAB5
    {standard input}:3932   .bss.vAB5:00000000 $d
    {standard input}:3942   .bss.vabc5:00000000 vabc5
    {standard input}:3939   .bss.vabc5:00000000 $d
    {standard input}:3949   .bss.vDQ7:00000000 vDQ7
    {standard input}:3946   .bss.vDQ7:00000000 $d
    {standard input}:3956   .bss.vAB7:00000000 vAB7
    {standard input}:3953   .bss.vAB7:00000000 $d
    {standard input}:3963   .bss.vabc7:00000000 vabc7
    {standard input}:3960   .bss.vabc7:00000000 $d
    {standard input}:3970   .bss.vDQ11:00000000 vDQ11
    {standard input}:3967   .bss.vDQ11:00000000 $d
    {standard input}:3977   .bss.vAB11:00000000 vAB11
    {standard input}:3974   .bss.vAB11:00000000 $d
    {standard input}:3984   .bss.vabc11:00000000 vabc11
    {standard input}:3981   .bss.vabc11:00000000 $d
    {standard input}:3991   .bss.vDQ13:00000000 vDQ13
    {standard input}:3988   .bss.vDQ13:00000000 $d
    {standard input}:3998   .bss.vAB13:00000000 vAB13
    {standard input}:3995   .bss.vAB13:00000000 $d
    {standard input}:4005   .bss.vabc13:00000000 vabc13
    {standard input}:4002   .bss.vabc13:00000000 $d
    {standard input}:4012   .bss.vmAB:00000000 vmAB
    {standard input}:4009   .bss.vmAB:00000000 $d
    {standard input}:4019   .bss.vmabc:00000000 vmabc
    {standard input}:4016   .bss.vmabc:00000000 $d
    {standard input}:4026   .bss.wt_buff5:00000000 wt_buff5
    {standard input}:4023   .bss.wt_buff5:00000000 $d
    {standard input}:4033   .bss.wt_buff7:00000000 wt_buff7
    {standard input}:4030   .bss.wt_buff7:00000000 $d
    {standard input}:4040   .bss.wt_buff11:00000000 wt_buff11
    {standard input}:4037   .bss.wt_buff11:00000000 $d
    {standard input}:4047   .bss.wt_buff13:00000000 wt_buff13
    {standard input}:4044   .bss.wt_buff13:00000000 $d
    {standard input}:4054   .bss.wt5:00000000 wt5
    {standard input}:4051   .bss.wt5:00000000 $d
    {standard input}:4061   .bss.wt7:00000000 wt7
    {standard input}:4058   .bss.wt7:00000000 $d
    {standard input}:4068   .bss.wt11:00000000 wt11
    {standard input}:4065   .bss.wt11:00000000 $d
    {standard input}:4075   .bss.wt13:00000000 wt13
    {standard input}:4072   .bss.wt13:00000000 $d
    {standard input}:4082   .bss.wt_jump:00000000 wt_jump
    {standard input}:4079   .bss.wt_jump:00000000 $d
                            *COM*:00000004 scope_adc1
                            *COM*:00000004 scope_adc2
                            *COM*:00000004 scope_adc3
                            *COM*:00000004 scope_adc4
                            *COM*:00000004 scope_adc5
                            *COM*:00000004 scope_adc6
                            *COM*:00000004 scope_adc7
                            *COM*:00000004 aux_var1
                            *COM*:00000004 aux_var2
                            *COM*:00000004 aux_var3
                            *COM*:00000004 aux_var4
                            *COM*:00000004 aux_var5
                            *COM*:00000004 aux_var6
                            *COM*:00000004 aux_var7
    {standard input}:4103   .bss.LPFbuff_vdc:00000000 LPFbuff_vdc
    {standard input}:4100   .bss.LPFbuff_vdc:00000000 $d
    {standard input}:4110   .bss.LPFbuff_temp:00000000 LPFbuff_temp
    {standard input}:4107   .bss.LPFbuff_temp:00000000 $d
    {standard input}:4117   .bss.LPFbuff_v:00000000 LPFbuff_v
    {standard input}:4114   .bss.LPFbuff_v:00000000 $d
    {standard input}:4124   .bss.LPFbuff_v2:00000000 LPFbuff_v2
    {standard input}:4121   .bss.LPFbuff_v2:00000000 $d
    {standard input}:4131   .bss.AB_aux:00000000 AB_aux
    {standard input}:4128   .bss.AB_aux:00000000 $d
    {standard input}:4138   .bss.dq_aux:00000000 dq_aux
    {standard input}:4135   .bss.dq_aux:00000000 $d
    {standard input}:4145   .bss.wt_aux:00000000 wt_aux
    {standard input}:4142   .bss.wt_aux:00000000 $d
    {standard input}:4152   .data.w_aux:00000000 w_aux
    {standard input}:4149   .data.w_aux:00000000 $d
    {standard input}:4159   .bss.LPFbuff_w_aux:00000000 LPFbuff_w_aux
    {standard input}:4156   .bss.LPFbuff_w_aux:00000000 $d
    {standard input}:4166   .bss.LPFbuff_dq1_aux:00000000 LPFbuff_dq1_aux
    {standard input}:4163   .bss.LPFbuff_dq1_aux:00000000 $d
    {standard input}:4173   .bss.LPFbuff_dq2_aux:00000000 LPFbuff_dq2_aux
    {standard input}:4170   .bss.LPFbuff_dq2_aux:00000000 $d
    {standard input}:4180   .bss.ADC_LPFbuff_VA:00000000 ADC_LPFbuff_VA
    {standard input}:4177   .bss.ADC_LPFbuff_VA:00000000 $d
    {standard input}:4187   .bss.ADC_LPFbuff_VB:00000000 ADC_LPFbuff_VB
    {standard input}:4184   .bss.ADC_LPFbuff_VB:00000000 $d
    {standard input}:4194   .bss.ADC_LPFbuff_VC:00000000 ADC_LPFbuff_VC
    {standard input}:4191   .bss.ADC_LPFbuff_VC:00000000 $d
    {standard input}:4201   .bss.ADC_LPFbuff_IA:00000000 ADC_LPFbuff_IA
    {standard input}:4198   .bss.ADC_LPFbuff_IA:00000000 $d
    {standard input}:4208   .bss.ADC_LPFbuff_IB:00000000 ADC_LPFbuff_IB
    {standard input}:4205   .bss.ADC_LPFbuff_IB:00000000 $d
    {standard input}:4215   .bss.ADC_LPFbuff_IC:00000000 ADC_LPFbuff_IC
    {standard input}:4212   .bss.ADC_LPFbuff_IC:00000000 $d
    {standard input}:4222   .bss.SCADA_enable:00000000 SCADA_enable
    {standard input}:4219   .bss.SCADA_enable:00000000 $d
    {standard input}:4229   .bss.SCADA_disable:00000000 SCADA_disable
    {standard input}:4226   .bss.SCADA_disable:00000000 $d
    {standard input}:4236   .bss.SCADA_status_button:00000000 SCADA_status_button
    {standard input}:4233   .bss.SCADA_status_button:00000000 $d
    {standard input}:4243   .data.SCADA_Imax:00000000 SCADA_Imax
    {standard input}:4240   .data.SCADA_Imax:00000000 $d
    {standard input}:4250   .data.SCADA_VDCmax:00000000 SCADA_VDCmax
    {standard input}:4247   .data.SCADA_VDCmax:00000000 $d
    {standard input}:4257   .data.SCADA_VDCmin:00000000 SCADA_VDCmin
    {standard input}:4254   .data.SCADA_VDCmin:00000000 $d
    {standard input}:4264   .data.SCADA_Tmax:00000000 SCADA_Tmax
    {standard input}:4261   .data.SCADA_Tmax:00000000 $d
    {standard input}:4271   .bss.SCADA_error_Ia:00000000 SCADA_error_Ia
    {standard input}:4268   .bss.SCADA_error_Ia:00000000 $d
    {standard input}:4278   .bss.SCADA_error_Ib:00000000 SCADA_error_Ib
    {standard input}:4275   .bss.SCADA_error_Ib:00000000 $d
    {standard input}:4285   .bss.SCADA_error_Ic:00000000 SCADA_error_Ic
    {standard input}:4282   .bss.SCADA_error_Ic:00000000 $d
    {standard input}:4292   .bss.SCADA_error_VDCmax:00000000 SCADA_error_VDCmax
    {standard input}:4289   .bss.SCADA_error_VDCmax:00000000 $d
    {standard input}:4299   .bss.SCADA_error_VDCmin:00000000 SCADA_error_VDCmin
    {standard input}:4296   .bss.SCADA_error_VDCmin:00000000 $d
    {standard input}:4306   .bss.SCADA_error_Tmax:00000000 SCADA_error_Tmax
    {standard input}:4303   .bss.SCADA_error_Tmax:00000000 $d
    {standard input}:4313   .bss.timer_sm:00000000 timer_sm
    {standard input}:4310   .bss.timer_sm:00000000 $d
    {standard input}:4320   .bss.SCADA_Id_ref:00000000 SCADA_Id_ref
    {standard input}:4317   .bss.SCADA_Id_ref:00000000 $d
    {standard input}:4327   .bss.SCADA_Iq_ref:00000000 SCADA_Iq_ref
    {standard input}:4324   .bss.SCADA_Iq_ref:00000000 $d
    {standard input}:4334   .data.SCADA_Vdc_ref:00000000 SCADA_Vdc_ref
    {standard input}:4331   .data.SCADA_Vdc_ref:00000000 $d
    {standard input}:4337   .text.no_fault:00000000 $t
    {standard input}:4342   .text.no_fault:00000000 no_fault
    {standard input}:4459   .text.no_fault:000000e8 $d
    {standard input}:4469   .text.ConverterStateMachine:00000000 $t
    {standard input}:4474   .text.ConverterStateMachine:00000000 ConverterStateMachine
    {standard input}:4504   .text.ConverterStateMachine:00000020 $d
    {standard input}:4509   .text.ConverterStateMachine:00000034 $t
    {standard input}:4869   .text.ConverterStateMachine:000002ac $d
    {standard input}:4894   .text.ConverterStateMachine:00000308 $t
    {standard input}:4978   .text.ConverterStateMachine:00000398 $d
    {standard input}:4990   .text.CCU80_3_IRQHandler:00000000 $t
    {standard input}:4995   .text.CCU80_3_IRQHandler:00000000 CCU80_3_IRQHandler
    {standard input}:5318   .text.CCU80_3_IRQHandler:000002d0 $d
    {standard input}:5368   .text.CCU80_3_IRQHandler:00000394 $t
    {standard input}:5635   .text.CCU80_3_IRQHandler:000005ac $d
    {standard input}:5670   .text.CCU80_3_IRQHandler:00000630 $t
    {standard input}:5968   .text.CCU80_3_IRQHandler:00000864 $d
    {standard input}:6007   .text.main:00000000 $t
    {standard input}:6012   .text.main:00000000 main
    {standard input}:6099   .text.main:00000084 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
group_ptrs
arm_cos_f32
arm_sin_f32
fminf
fmaxf
sqrtf
__aeabi_f2d
__aeabi_dmul
__aeabi_dadd
__aeabi_d2f
EN_1
EN_2
EN_3
SSR1
SSR2
__aeabi_dsub
P_1_0
ADC_MEASUREMENT_1_V1_1_handle
ADC_MEASUREMENT_2_V2_1_handle
ADC_MEASUREMENT_2_V2_3_handle
ADC_MEASUREMENT_2_V2_2_handle
ADC_MEASUREMENT_1_V1_4_handle
ADC_MEASUREMENT_1_V1_3_handle
ADC_MEASUREMENT_1_V1_2_handle
ADC_MEASUREMENT_3_V3_1_handle
PWM_SetDutyCycle
PWM_a
PWM_b
PWM_c
DAVE_Init
ProbeScope_Init
PWM_Stop
PWM_Start
ProbeScope_Sampling
SystemCoreClock
ENABLE
FAULT_RST
PWM_update
