   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "arm_biquad_cascade_df1_f32.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.arm_biquad_cascade_df1_f32,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_biquad_cascade_df1_f32
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_biquad_cascade_df1_f32:
  26              	.LFB135:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c"
   1:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** /* ----------------------------------------------------------------------
   2:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Project:      CMSIS DSP Library
   3:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Title:        arm_biquad_cascade_df1_f32.c
   4:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Description:  Processing function for the floating-point Biquad cascade DirectFormI(DF1) filter
   5:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *
   6:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * $Date:        27. January 2017
   7:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * $Revision:    V.1.5.1
   8:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *
   9:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Target Processor: Cortex-M cores
  10:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * -------------------------------------------------------------------- */
  11:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** /*
  12:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *
  14:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *
  16:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * not use this file except in compliance with the License.
  18:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * You may obtain a copy of the License at
  19:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *
  20:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *
  22:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * See the License for the specific language governing permissions and
  26:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * limitations under the License.
  27:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  */
  28:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
  29:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  30:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
  31:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** /**
  32:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * @ingroup groupFilters
  33:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  */
  34:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
  35:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** /**
  36:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * @defgroup BiquadCascadeDF1 Biquad Cascade IIR Filters Using Direct Form I Structure
  37:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *
  38:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * This set of functions implements arbitrary order recursive (IIR) filters.
  39:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * The filters are implemented as a cascade of second order Biquad sections.
  40:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * The functions support Q15, Q31 and floating-point data types.
  41:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Fast version of Q15 and Q31 also supported on CortexM4 and Cortex-M3.
  42:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *
  43:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * The functions operate on blocks of input and output data and each call to the function
  44:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * processes <code>blockSize</code> samples through the filter.
  45:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * <code>pSrc</code> points to the array of input data and
  46:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * <code>pDst</code> points to the array of output data.
  47:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Both arrays contain <code>blockSize</code> values.
  48:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *
  49:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * \par Algorithm
  50:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Each Biquad stage implements a second order filter using the difference equation:
  51:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * <pre>
  52:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *     y[n] = b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2]
  53:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * </pre>
  54:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * A Direct Form I algorithm is used with 5 coefficients and 4 state variables per stage.
  55:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * \image html Biquad.gif "Single Biquad filter stage"
  56:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Coefficients <code>b0, b1 and b2 </code> multiply the input signal <code>x[n]</code> and are ref
  57:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Coefficients <code>a1</code> and <code>a2</code> multiply the output signal <code>y[n]</code> an
  58:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Pay careful attention to the sign of the feedback coefficients.
  59:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Some design tools use the difference equation
  60:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * <pre>
  61:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *     y[n] = b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] - a1 * y[n-1] - a2 * y[n-2]
  62:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * </pre>
  63:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * In this case the feedback coefficients <code>a1</code> and <code>a2</code> must be negated when 
  64:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *
  65:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * \par
  66:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Higher order filters are realized as a cascade of second order sections.
  67:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * <code>numStages</code> refers to the number of second order stages used.
  68:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * For example, an 8th order filter would be realized with <code>numStages=4</code> second order st
  69:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * \image html BiquadCascade.gif "8th order filter using a cascade of Biquad stages"
  70:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * A 9th order filter would be realized with <code>numStages=5</code> second order stages with the 
  71:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *
  72:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * \par
  73:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * The <code>pState</code> points to state variables array.
  74:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Each Biquad stage has 4 state variables <code>x[n-1], x[n-2], y[n-1],</code> and <code>y[n-2]</c
  75:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * The state variables are arranged in the <code>pState</code> array as:
  76:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * <pre>
  77:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *     {x[n-1], x[n-2], y[n-1], y[n-2]}
  78:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * </pre>
  79:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *
  80:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * \par
  81:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * The 4 state variables for stage 1 are first, then the 4 state variables for stage 2, and so on.
  82:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * The state array has a total length of <code>4*numStages</code> values.
  83:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * The state variables are updated after each block of data is processed, the coefficients are unto
  84:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *
  85:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * \par Instance Structure
  86:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * The coefficients and state variables for a filter are stored together in an instance data struct
  87:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * A separate instance structure must be defined for each filter.
  88:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Coefficient arrays may be shared among several instances while state variable arrays cannot be s
  89:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * There are separate instance structure declarations for each of the 3 supported data types.
  90:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *
  91:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * \par Init Functions
  92:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * There is also an associated initialization function for each data type.
  93:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * The initialization function performs following operations:
  94:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * - Sets the values of the internal structure fields.
  95:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * - Zeros out the values in the state buffer.
  96:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * To do this manually without calling the init function, assign the follow subfields of the instan
  97:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * numStages, pCoeffs, pState. Also set all of the values in pState to zero.
  98:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *
  99:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * \par
 100:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Use of the initialization function is optional.
 101:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * However, if the initialization function is used, then the instance structure cannot be placed in
 102:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * To place an instance structure into a const data section, the instance structure must be manuall
 103:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Set the values in the state buffer to zeros before static initialization.
 104:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * The code below statically initializes each of the 3 different data type filter instance structur
 105:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * <pre>
 106:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *     arm_biquad_casd_df1_inst_f32 S1 = {numStages, pState, pCoeffs};
 107:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *     arm_biquad_casd_df1_inst_q15 S2 = {numStages, pState, pCoeffs, postShift};
 108:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *     arm_biquad_casd_df1_inst_q31 S3 = {numStages, pState, pCoeffs, postShift};
 109:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * </pre>
 110:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * where <code>numStages</code> is the number of Biquad stages in the filter; <code>pState</code> i
 111:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * <code>pCoeffs</code> is the address of the coefficient buffer; <code>postShift</code> shift to b
 112:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *
 113:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * \par Fixed-Point Behavior
 114:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Care must be taken when using the Q15 and Q31 versions of the Biquad Cascade filter functions.
 115:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Following issues must be considered:
 116:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * - Scaling of coefficients
 117:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * - Filter gain
 118:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * - Overflow and saturation
 119:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *
 120:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * \par
 121:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * <b>Scaling of coefficients: </b>
 122:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Filter coefficients are represented as fractional values and
 123:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * coefficients are restricted to lie in the range <code>[-1 +1)</code>.
 124:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * The fixed-point functions have an additional scaling parameter <code>postShift</code>
 125:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * which allow the filter coefficients to exceed the range <code>[+1 -1)</code>.
 126:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * At the output of the filter's accumulator is a shift register which shifts the result by <code>p
 127:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * \image html BiquadPostshift.gif "Fixed-point Biquad with shift by postShift bits after accumulat
 128:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * This essentially scales the filter coefficients by <code>2^postShift</code>.
 129:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * For example, to realize the coefficients
 130:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * <pre>
 131:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *    {1.5, -0.8, 1.2, 1.6, -0.9}
 132:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * </pre>
 133:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * set the pCoeffs array to:
 134:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * <pre>
 135:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *    {0.75, -0.4, 0.6, 0.8, -0.45}
 136:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * </pre>
 137:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * and set <code>postShift=1</code>
 138:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *
 139:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * \par
 140:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * <b>Filter gain: </b>
 141:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * The frequency response of a Biquad filter is a function of its coefficients.
 142:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * It is possible for the gain through the filter to exceed 1.0 meaning that the filter increases t
 143:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * This means that an input signal with amplitude < 1.0 may result in an output > 1.0 and these are
 144:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * To avoid this behavior the filter needs to be scaled down such that its peak gain < 1.0 or the i
 145:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *
 146:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * \par
 147:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * <b>Overflow and saturation: </b>
 148:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * For Q15 and Q31 versions, it is described separately as part of the function specific documentat
 149:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  */
 150:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 151:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** /**
 152:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * @addtogroup BiquadCascadeDF1
 153:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * @{
 154:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  */
 155:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 156:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** /**
 157:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * @param[in]  *S         points to an instance of the floating-point Biquad cascade structure.
 158:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * @param[in]  *pSrc      points to the block of input data.
 159:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * @param[out] *pDst      points to the block of output data.
 160:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * @param[in]  blockSize  number of samples to process per call.
 161:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * @return     none.
 162:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *
 163:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  */
 164:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 165:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** void arm_biquad_cascade_df1_f32(
 166:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   const arm_biquad_casd_df1_inst_f32 * S,
 167:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   float32_t * pSrc,
 168:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   float32_t * pDst,
 169:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   uint32_t blockSize)
 170:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** {
  28              	 .loc 1 170 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33 0000 80B4     	 push {r7}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 4
  36              	 .cfi_offset 7,-4
  37 0002 97B0     	 sub sp,sp,#92
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 96
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
  43 0006 F860     	 str r0,[r7,#12]
  44 0008 B960     	 str r1,[r7,#8]
  45 000a 7A60     	 str r2,[r7,#4]
  46 000c 3B60     	 str r3,[r7]
 171:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   float32_t *pIn = pSrc;                         /*  source pointer            */
  47              	 .loc 1 171 0
  48 000e BB68     	 ldr r3,[r7,#8]
  49 0010 7B65     	 str r3,[r7,#84]
 172:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   float32_t *pOut = pDst;                        /*  destination pointer       */
  50              	 .loc 1 172 0
  51 0012 7B68     	 ldr r3,[r7,#4]
  52 0014 3B65     	 str r3,[r7,#80]
 173:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   float32_t *pState = S->pState;                 /*  pState pointer            */
  53              	 .loc 1 173 0
  54 0016 FB68     	 ldr r3,[r7,#12]
  55 0018 5B68     	 ldr r3,[r3,#4]
  56 001a FB64     	 str r3,[r7,#76]
 174:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   float32_t *pCoeffs = S->pCoeffs;               /*  coefficient pointer       */
  57              	 .loc 1 174 0
  58 001c FB68     	 ldr r3,[r7,#12]
  59 001e 9B68     	 ldr r3,[r3,#8]
  60 0020 BB64     	 str r3,[r7,#72]
 175:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   float32_t acc;                                 /*  Simulates the accumulator */
 176:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   float32_t b0, b1, b2, a1, a2;                  /*  Filter coefficients       */
 177:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   float32_t Xn1, Xn2, Yn1, Yn2;                  /*  Filter pState variables   */
 178:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   float32_t Xn;                                  /*  temporary input           */
 179:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   uint32_t sample, stage = S->numStages;         /*  loop counters             */
  61              	 .loc 1 179 0
  62 0022 FB68     	 ldr r3,[r7,#12]
  63 0024 1B68     	 ldr r3,[r3]
  64 0026 3B63     	 str r3,[r7,#48]
  65              	.L6:
 180:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 181:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 182:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** #if defined (ARM_MATH_DSP)
 183:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 184:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   /* Run the below code for Cortex-M4 and Cortex-M3 */
 185:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 186:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   do
 187:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   {
 188:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /* Reading the coefficients */
 189:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     b0 = *pCoeffs++;
  66              	 .loc 1 189 0
  67 0028 BB6C     	 ldr r3,[r7,#72]
  68 002a 1A1D     	 adds r2,r3,#4
  69 002c BA64     	 str r2,[r7,#72]
  70 002e 1B68     	 ldr r3,[r3]
  71 0030 FB62     	 str r3,[r7,#44]
 190:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     b1 = *pCoeffs++;
  72              	 .loc 1 190 0
  73 0032 BB6C     	 ldr r3,[r7,#72]
  74 0034 1A1D     	 adds r2,r3,#4
  75 0036 BA64     	 str r2,[r7,#72]
  76 0038 1B68     	 ldr r3,[r3]
  77 003a BB62     	 str r3,[r7,#40]
 191:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     b2 = *pCoeffs++;
  78              	 .loc 1 191 0
  79 003c BB6C     	 ldr r3,[r7,#72]
  80 003e 1A1D     	 adds r2,r3,#4
  81 0040 BA64     	 str r2,[r7,#72]
  82 0042 1B68     	 ldr r3,[r3]
  83 0044 7B62     	 str r3,[r7,#36]
 192:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     a1 = *pCoeffs++;
  84              	 .loc 1 192 0
  85 0046 BB6C     	 ldr r3,[r7,#72]
  86 0048 1A1D     	 adds r2,r3,#4
  87 004a BA64     	 str r2,[r7,#72]
  88 004c 1B68     	 ldr r3,[r3]
  89 004e 3B62     	 str r3,[r7,#32]
 193:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     a2 = *pCoeffs++;
  90              	 .loc 1 193 0
  91 0050 BB6C     	 ldr r3,[r7,#72]
  92 0052 1A1D     	 adds r2,r3,#4
  93 0054 BA64     	 str r2,[r7,#72]
  94 0056 1B68     	 ldr r3,[r3]
  95 0058 FB61     	 str r3,[r7,#28]
 194:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 195:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /* Reading the pState values */
 196:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     Xn1 = pState[0];
  96              	 .loc 1 196 0
  97 005a FB6C     	 ldr r3,[r7,#76]
  98 005c 1B68     	 ldr r3,[r3]
  99 005e 7B64     	 str r3,[r7,#68]
 197:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     Xn2 = pState[1];
 100              	 .loc 1 197 0
 101 0060 FB6C     	 ldr r3,[r7,#76]
 102 0062 5B68     	 ldr r3,[r3,#4]
 103 0064 3B64     	 str r3,[r7,#64]
 198:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     Yn1 = pState[2];
 104              	 .loc 1 198 0
 105 0066 FB6C     	 ldr r3,[r7,#76]
 106 0068 9B68     	 ldr r3,[r3,#8]
 107 006a FB63     	 str r3,[r7,#60]
 199:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     Yn2 = pState[3];
 108              	 .loc 1 199 0
 109 006c FB6C     	 ldr r3,[r7,#76]
 110 006e DB68     	 ldr r3,[r3,#12]
 111 0070 BB63     	 str r3,[r7,#56]
 200:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 201:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /* Apply loop unrolling and compute 4 output values simultaneously. */
 202:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /*      The variable acc hold output values that are being computed:
 203:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****      *
 204:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****      *    acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1]   + a2 * y[n-2]
 205:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****      *    acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1]   + a2 * y[n-2]
 206:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****      *    acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1]   + a2 * y[n-2]
 207:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****      *    acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1]   + a2 * y[n-2]
 208:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****      */
 209:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 210:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     sample = blockSize >> 2u;
 112              	 .loc 1 210 0
 113 0072 3B68     	 ldr r3,[r7]
 114 0074 9B08     	 lsrs r3,r3,#2
 115 0076 7B63     	 str r3,[r7,#52]
 211:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 212:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
 213:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****      ** a second loop below computes the remaining 1 to 3 samples. */
 214:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     while (sample > 0u)
 116              	 .loc 1 214 0
 117 0078 CEE0     	 b .L2
 118              	.L3:
 215:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     {
 216:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Read the first input */
 217:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Xn = *pIn++;
 119              	 .loc 1 217 0
 120 007a 7B6D     	 ldr r3,[r7,#84]
 121 007c 1A1D     	 adds r2,r3,#4
 122 007e 7A65     	 str r2,[r7,#84]
 123 0080 1B68     	 ldr r3,[r3]
 124 0082 BB61     	 str r3,[r7,#24]
 218:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 219:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
 220:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Yn2 = (b0 * Xn) + (b1 * Xn1) + (b2 * Xn2) + (a1 * Yn1) + (a2 * Yn2);
 125              	 .loc 1 220 0
 126 0084 97ED0B7A 	 flds s14,[r7,#44]
 127 0088 D7ED067A 	 flds s15,[r7,#24]
 128 008c 27EE277A 	 fmuls s14,s14,s15
 129 0090 D7ED0A6A 	 flds s13,[r7,#40]
 130 0094 D7ED117A 	 flds s15,[r7,#68]
 131 0098 66EEA77A 	 fmuls s15,s13,s15
 132 009c 37EE277A 	 fadds s14,s14,s15
 133 00a0 D7ED096A 	 flds s13,[r7,#36]
 134 00a4 D7ED107A 	 flds s15,[r7,#64]
 135 00a8 66EEA77A 	 fmuls s15,s13,s15
 136 00ac 37EE277A 	 fadds s14,s14,s15
 137 00b0 D7ED086A 	 flds s13,[r7,#32]
 138 00b4 D7ED0F7A 	 flds s15,[r7,#60]
 139 00b8 66EEA77A 	 fmuls s15,s13,s15
 140 00bc 37EE277A 	 fadds s14,s14,s15
 141 00c0 D7ED076A 	 flds s13,[r7,#28]
 142 00c4 D7ED0E7A 	 flds s15,[r7,#56]
 143 00c8 66EEA77A 	 fmuls s15,s13,s15
 144 00cc 77EE277A 	 fadds s15,s14,s15
 145 00d0 C7ED0E7A 	 fsts s15,[r7,#56]
 221:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 222:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Store the result in the accumulator in the destination buffer. */
 223:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       *pOut++ = Yn2;
 146              	 .loc 1 223 0
 147 00d4 3B6D     	 ldr r3,[r7,#80]
 148 00d6 1A1D     	 adds r2,r3,#4
 149 00d8 3A65     	 str r2,[r7,#80]
 150 00da BA6B     	 ldr r2,[r7,#56]
 151 00dc 1A60     	 str r2,[r3]
 224:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 225:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Every time after the output is computed state should be updated. */
 226:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* The states should be updated as:  */
 227:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Xn2 = Xn1    */
 228:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Xn1 = Xn     */
 229:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Yn2 = Yn1    */
 230:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Yn1 = acc   */
 231:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 232:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Read the second input */
 233:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Xn2 = *pIn++;
 152              	 .loc 1 233 0
 153 00de 7B6D     	 ldr r3,[r7,#84]
 154 00e0 1A1D     	 adds r2,r3,#4
 155 00e2 7A65     	 str r2,[r7,#84]
 156 00e4 1B68     	 ldr r3,[r3]
 157 00e6 3B64     	 str r3,[r7,#64]
 234:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 235:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
 236:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Yn1 = (b0 * Xn2) + (b1 * Xn) + (b2 * Xn1) + (a1 * Yn2) + (a2 * Yn1);
 158              	 .loc 1 236 0
 159 00e8 97ED0B7A 	 flds s14,[r7,#44]
 160 00ec D7ED107A 	 flds s15,[r7,#64]
 161 00f0 27EE277A 	 fmuls s14,s14,s15
 162 00f4 D7ED0A6A 	 flds s13,[r7,#40]
 163 00f8 D7ED067A 	 flds s15,[r7,#24]
 164 00fc 66EEA77A 	 fmuls s15,s13,s15
 165 0100 37EE277A 	 fadds s14,s14,s15
 166 0104 D7ED096A 	 flds s13,[r7,#36]
 167 0108 D7ED117A 	 flds s15,[r7,#68]
 168 010c 66EEA77A 	 fmuls s15,s13,s15
 169 0110 37EE277A 	 fadds s14,s14,s15
 170 0114 D7ED086A 	 flds s13,[r7,#32]
 171 0118 D7ED0E7A 	 flds s15,[r7,#56]
 172 011c 66EEA77A 	 fmuls s15,s13,s15
 173 0120 37EE277A 	 fadds s14,s14,s15
 174 0124 D7ED076A 	 flds s13,[r7,#28]
 175 0128 D7ED0F7A 	 flds s15,[r7,#60]
 176 012c 66EEA77A 	 fmuls s15,s13,s15
 177 0130 77EE277A 	 fadds s15,s14,s15
 178 0134 C7ED0F7A 	 fsts s15,[r7,#60]
 237:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 238:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Store the result in the accumulator in the destination buffer. */
 239:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       *pOut++ = Yn1;
 179              	 .loc 1 239 0
 180 0138 3B6D     	 ldr r3,[r7,#80]
 181 013a 1A1D     	 adds r2,r3,#4
 182 013c 3A65     	 str r2,[r7,#80]
 183 013e FA6B     	 ldr r2,[r7,#60]
 184 0140 1A60     	 str r2,[r3]
 240:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 241:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Every time after the output is computed state should be updated. */
 242:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* The states should be updated as:  */
 243:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Xn2 = Xn1    */
 244:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Xn1 = Xn     */
 245:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Yn2 = Yn1    */
 246:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Yn1 = acc   */
 247:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 248:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Read the third input */
 249:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Xn1 = *pIn++;
 185              	 .loc 1 249 0
 186 0142 7B6D     	 ldr r3,[r7,#84]
 187 0144 1A1D     	 adds r2,r3,#4
 188 0146 7A65     	 str r2,[r7,#84]
 189 0148 1B68     	 ldr r3,[r3]
 190 014a 7B64     	 str r3,[r7,#68]
 250:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 251:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
 252:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Yn2 = (b0 * Xn1) + (b1 * Xn2) + (b2 * Xn) + (a1 * Yn1) + (a2 * Yn2);
 191              	 .loc 1 252 0
 192 014c 97ED0B7A 	 flds s14,[r7,#44]
 193 0150 D7ED117A 	 flds s15,[r7,#68]
 194 0154 27EE277A 	 fmuls s14,s14,s15
 195 0158 D7ED0A6A 	 flds s13,[r7,#40]
 196 015c D7ED107A 	 flds s15,[r7,#64]
 197 0160 66EEA77A 	 fmuls s15,s13,s15
 198 0164 37EE277A 	 fadds s14,s14,s15
 199 0168 D7ED096A 	 flds s13,[r7,#36]
 200 016c D7ED067A 	 flds s15,[r7,#24]
 201 0170 66EEA77A 	 fmuls s15,s13,s15
 202 0174 37EE277A 	 fadds s14,s14,s15
 203 0178 D7ED086A 	 flds s13,[r7,#32]
 204 017c D7ED0F7A 	 flds s15,[r7,#60]
 205 0180 66EEA77A 	 fmuls s15,s13,s15
 206 0184 37EE277A 	 fadds s14,s14,s15
 207 0188 D7ED076A 	 flds s13,[r7,#28]
 208 018c D7ED0E7A 	 flds s15,[r7,#56]
 209 0190 66EEA77A 	 fmuls s15,s13,s15
 210 0194 77EE277A 	 fadds s15,s14,s15
 211 0198 C7ED0E7A 	 fsts s15,[r7,#56]
 253:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 254:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Store the result in the accumulator in the destination buffer. */
 255:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       *pOut++ = Yn2;
 212              	 .loc 1 255 0
 213 019c 3B6D     	 ldr r3,[r7,#80]
 214 019e 1A1D     	 adds r2,r3,#4
 215 01a0 3A65     	 str r2,[r7,#80]
 216 01a2 BA6B     	 ldr r2,[r7,#56]
 217 01a4 1A60     	 str r2,[r3]
 256:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 257:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Every time after the output is computed state should be updated. */
 258:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* The states should be updated as: */
 259:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Xn2 = Xn1    */
 260:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Xn1 = Xn     */
 261:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Yn2 = Yn1    */
 262:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Yn1 = acc   */
 263:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 264:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Read the forth input */
 265:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Xn = *pIn++;
 218              	 .loc 1 265 0
 219 01a6 7B6D     	 ldr r3,[r7,#84]
 220 01a8 1A1D     	 adds r2,r3,#4
 221 01aa 7A65     	 str r2,[r7,#84]
 222 01ac 1B68     	 ldr r3,[r3]
 223 01ae BB61     	 str r3,[r7,#24]
 266:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 267:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
 268:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Yn1 = (b0 * Xn) + (b1 * Xn1) + (b2 * Xn2) + (a1 * Yn2) + (a2 * Yn1);
 224              	 .loc 1 268 0
 225 01b0 97ED0B7A 	 flds s14,[r7,#44]
 226 01b4 D7ED067A 	 flds s15,[r7,#24]
 227 01b8 27EE277A 	 fmuls s14,s14,s15
 228 01bc D7ED0A6A 	 flds s13,[r7,#40]
 229 01c0 D7ED117A 	 flds s15,[r7,#68]
 230 01c4 66EEA77A 	 fmuls s15,s13,s15
 231 01c8 37EE277A 	 fadds s14,s14,s15
 232 01cc D7ED096A 	 flds s13,[r7,#36]
 233 01d0 D7ED107A 	 flds s15,[r7,#64]
 234 01d4 66EEA77A 	 fmuls s15,s13,s15
 235 01d8 37EE277A 	 fadds s14,s14,s15
 236 01dc D7ED086A 	 flds s13,[r7,#32]
 237 01e0 D7ED0E7A 	 flds s15,[r7,#56]
 238 01e4 66EEA77A 	 fmuls s15,s13,s15
 239 01e8 37EE277A 	 fadds s14,s14,s15
 240 01ec D7ED076A 	 flds s13,[r7,#28]
 241 01f0 D7ED0F7A 	 flds s15,[r7,#60]
 242 01f4 66EEA77A 	 fmuls s15,s13,s15
 243 01f8 77EE277A 	 fadds s15,s14,s15
 244 01fc C7ED0F7A 	 fsts s15,[r7,#60]
 269:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 270:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Store the result in the accumulator in the destination buffer. */
 271:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       *pOut++ = Yn1;
 245              	 .loc 1 271 0
 246 0200 3B6D     	 ldr r3,[r7,#80]
 247 0202 1A1D     	 adds r2,r3,#4
 248 0204 3A65     	 str r2,[r7,#80]
 249 0206 FA6B     	 ldr r2,[r7,#60]
 250 0208 1A60     	 str r2,[r3]
 272:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 273:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Every time after the output is computed state should be updated. */
 274:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* The states should be updated as:  */
 275:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Xn2 = Xn1    */
 276:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Xn1 = Xn     */
 277:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Yn2 = Yn1    */
 278:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Yn1 = acc   */
 279:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Xn2 = Xn1;
 251              	 .loc 1 279 0
 252 020a 7B6C     	 ldr r3,[r7,#68]
 253 020c 3B64     	 str r3,[r7,#64]
 280:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Xn1 = Xn;
 254              	 .loc 1 280 0
 255 020e BB69     	 ldr r3,[r7,#24]
 256 0210 7B64     	 str r3,[r7,#68]
 281:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 282:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* decrement the loop counter */
 283:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       sample--;
 257              	 .loc 1 283 0
 258 0212 7B6B     	 ldr r3,[r7,#52]
 259 0214 013B     	 subs r3,r3,#1
 260 0216 7B63     	 str r3,[r7,#52]
 261              	.L2:
 214:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     {
 262              	 .loc 1 214 0
 263 0218 7B6B     	 ldr r3,[r7,#52]
 264 021a 002B     	 cmp r3,#0
 265 021c 7FF42DAF 	 bne .L3
 284:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 285:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     }
 286:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 287:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
 288:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****      ** No loop unrolling is used. */
 289:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     sample = blockSize & 0x3u;
 266              	 .loc 1 289 0
 267 0220 3B68     	 ldr r3,[r7]
 268 0222 03F00303 	 and r3,r3,#3
 269 0226 7B63     	 str r3,[r7,#52]
 290:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 291:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     while (sample > 0u)
 270              	 .loc 1 291 0
 271 0228 3CE0     	 b .L4
 272              	.L5:
 292:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     {
 293:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Read the input */
 294:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Xn = *pIn++;
 273              	 .loc 1 294 0
 274 022a 7B6D     	 ldr r3,[r7,#84]
 275 022c 1A1D     	 adds r2,r3,#4
 276 022e 7A65     	 str r2,[r7,#84]
 277 0230 1B68     	 ldr r3,[r3]
 278 0232 BB61     	 str r3,[r7,#24]
 295:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 296:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
 297:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       acc = (b0 * Xn) + (b1 * Xn1) + (b2 * Xn2) + (a1 * Yn1) + (a2 * Yn2);
 279              	 .loc 1 297 0
 280 0234 97ED0B7A 	 flds s14,[r7,#44]
 281 0238 D7ED067A 	 flds s15,[r7,#24]
 282 023c 27EE277A 	 fmuls s14,s14,s15
 283 0240 D7ED0A6A 	 flds s13,[r7,#40]
 284 0244 D7ED117A 	 flds s15,[r7,#68]
 285 0248 66EEA77A 	 fmuls s15,s13,s15
 286 024c 37EE277A 	 fadds s14,s14,s15
 287 0250 D7ED096A 	 flds s13,[r7,#36]
 288 0254 D7ED107A 	 flds s15,[r7,#64]
 289 0258 66EEA77A 	 fmuls s15,s13,s15
 290 025c 37EE277A 	 fadds s14,s14,s15
 291 0260 D7ED086A 	 flds s13,[r7,#32]
 292 0264 D7ED0F7A 	 flds s15,[r7,#60]
 293 0268 66EEA77A 	 fmuls s15,s13,s15
 294 026c 37EE277A 	 fadds s14,s14,s15
 295 0270 D7ED076A 	 flds s13,[r7,#28]
 296 0274 D7ED0E7A 	 flds s15,[r7,#56]
 297 0278 66EEA77A 	 fmuls s15,s13,s15
 298 027c 77EE277A 	 fadds s15,s14,s15
 299 0280 C7ED057A 	 fsts s15,[r7,#20]
 298:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 299:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Store the result in the accumulator in the destination buffer. */
 300:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       *pOut++ = acc;
 300              	 .loc 1 300 0
 301 0284 3B6D     	 ldr r3,[r7,#80]
 302 0286 1A1D     	 adds r2,r3,#4
 303 0288 3A65     	 str r2,[r7,#80]
 304 028a 7A69     	 ldr r2,[r7,#20]
 305 028c 1A60     	 str r2,[r3]
 301:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 302:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Every time after the output is computed state should be updated. */
 303:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* The states should be updated as:    */
 304:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Xn2 = Xn1    */
 305:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Xn1 = Xn     */
 306:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Yn2 = Yn1    */
 307:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Yn1 = acc   */
 308:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Xn2 = Xn1;
 306              	 .loc 1 308 0
 307 028e 7B6C     	 ldr r3,[r7,#68]
 308 0290 3B64     	 str r3,[r7,#64]
 309:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Xn1 = Xn;
 309              	 .loc 1 309 0
 310 0292 BB69     	 ldr r3,[r7,#24]
 311 0294 7B64     	 str r3,[r7,#68]
 310:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Yn2 = Yn1;
 312              	 .loc 1 310 0
 313 0296 FB6B     	 ldr r3,[r7,#60]
 314 0298 BB63     	 str r3,[r7,#56]
 311:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Yn1 = acc;
 315              	 .loc 1 311 0
 316 029a 7B69     	 ldr r3,[r7,#20]
 317 029c FB63     	 str r3,[r7,#60]
 312:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 313:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* decrement the loop counter */
 314:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       sample--;
 318              	 .loc 1 314 0
 319 029e 7B6B     	 ldr r3,[r7,#52]
 320 02a0 013B     	 subs r3,r3,#1
 321 02a2 7B63     	 str r3,[r7,#52]
 322              	.L4:
 291:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     {
 323              	 .loc 1 291 0
 324 02a4 7B6B     	 ldr r3,[r7,#52]
 325 02a6 002B     	 cmp r3,#0
 326 02a8 BFD1     	 bne .L5
 315:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 316:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     }
 317:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 318:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /*  Store the updated state variables back into the pState array */
 319:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     *pState++ = Xn1;
 327              	 .loc 1 319 0
 328 02aa FB6C     	 ldr r3,[r7,#76]
 329 02ac 1A1D     	 adds r2,r3,#4
 330 02ae FA64     	 str r2,[r7,#76]
 331 02b0 7A6C     	 ldr r2,[r7,#68]
 332 02b2 1A60     	 str r2,[r3]
 320:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     *pState++ = Xn2;
 333              	 .loc 1 320 0
 334 02b4 FB6C     	 ldr r3,[r7,#76]
 335 02b6 1A1D     	 adds r2,r3,#4
 336 02b8 FA64     	 str r2,[r7,#76]
 337 02ba 3A6C     	 ldr r2,[r7,#64]
 338 02bc 1A60     	 str r2,[r3]
 321:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     *pState++ = Yn1;
 339              	 .loc 1 321 0
 340 02be FB6C     	 ldr r3,[r7,#76]
 341 02c0 1A1D     	 adds r2,r3,#4
 342 02c2 FA64     	 str r2,[r7,#76]
 343 02c4 FA6B     	 ldr r2,[r7,#60]
 344 02c6 1A60     	 str r2,[r3]
 322:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     *pState++ = Yn2;
 345              	 .loc 1 322 0
 346 02c8 FB6C     	 ldr r3,[r7,#76]
 347 02ca 1A1D     	 adds r2,r3,#4
 348 02cc FA64     	 str r2,[r7,#76]
 349 02ce BA6B     	 ldr r2,[r7,#56]
 350 02d0 1A60     	 str r2,[r3]
 323:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 324:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /*  The first stage goes from the input buffer to the output buffer. */
 325:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /*  Subsequent numStages  occur in-place in the output buffer */
 326:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     pIn = pDst;
 351              	 .loc 1 326 0
 352 02d2 7B68     	 ldr r3,[r7,#4]
 353 02d4 7B65     	 str r3,[r7,#84]
 327:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 328:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /* Reset the output pointer */
 329:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     pOut = pDst;
 354              	 .loc 1 329 0
 355 02d6 7B68     	 ldr r3,[r7,#4]
 356 02d8 3B65     	 str r3,[r7,#80]
 330:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 331:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /* decrement the loop counter */
 332:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     stage--;
 357              	 .loc 1 332 0
 358 02da 3B6B     	 ldr r3,[r7,#48]
 359 02dc 013B     	 subs r3,r3,#1
 360 02de 3B63     	 str r3,[r7,#48]
 333:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 334:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   } while (stage > 0u);
 361              	 .loc 1 334 0
 362 02e0 3B6B     	 ldr r3,[r7,#48]
 363 02e2 002B     	 cmp r3,#0
 364 02e4 7FF4A0AE 	 bne .L6
 335:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 336:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** #else
 337:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 338:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   /* Run the below code for Cortex-M0 */
 339:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 340:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   do
 341:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   {
 342:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /* Reading the coefficients */
 343:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     b0 = *pCoeffs++;
 344:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     b1 = *pCoeffs++;
 345:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     b2 = *pCoeffs++;
 346:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     a1 = *pCoeffs++;
 347:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     a2 = *pCoeffs++;
 348:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 349:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /* Reading the pState values */
 350:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     Xn1 = pState[0];
 351:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     Xn2 = pState[1];
 352:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     Yn1 = pState[2];
 353:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     Yn2 = pState[3];
 354:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 355:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /*      The variables acc holds the output value that is computed:
 356:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****      *    acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1]   + a2 * y[n-2]
 357:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****      */
 358:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 359:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     sample = blockSize;
 360:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 361:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     while (sample > 0u)
 362:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     {
 363:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Read the input */
 364:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Xn = *pIn++;
 365:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 366:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
 367:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       acc = (b0 * Xn) + (b1 * Xn1) + (b2 * Xn2) + (a1 * Yn1) + (a2 * Yn2);
 368:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 369:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Store the result in the accumulator in the destination buffer. */
 370:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       *pOut++ = acc;
 371:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 372:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Every time after the output is computed state should be updated. */
 373:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* The states should be updated as:    */
 374:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Xn2 = Xn1    */
 375:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Xn1 = Xn     */
 376:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Yn2 = Yn1    */
 377:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Yn1 = acc   */
 378:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Xn2 = Xn1;
 379:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Xn1 = Xn;
 380:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Yn2 = Yn1;
 381:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Yn1 = acc;
 382:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 383:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* decrement the loop counter */
 384:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       sample--;
 385:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     }
 386:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 387:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /*  Store the updated state variables back into the pState array */
 388:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     *pState++ = Xn1;
 389:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     *pState++ = Xn2;
 390:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     *pState++ = Yn1;
 391:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     *pState++ = Yn2;
 392:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 393:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /*  The first stage goes from the input buffer to the output buffer. */
 394:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /*  Subsequent numStages  occur in-place in the output buffer */
 395:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     pIn = pDst;
 396:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 397:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /* Reset the output pointer */
 398:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     pOut = pDst;
 399:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 400:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /* decrement the loop counter */
 401:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     stage--;
 402:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 403:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   } while (stage > 0u);
 404:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 405:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** #endif /* #if defined (ARM_MATH_DSP) */
 406:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 407:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** }
 365              	 .loc 1 407 0
 366 02e8 5C37     	 adds r7,r7,#92
 367              	.LCFI3:
 368              	 .cfi_def_cfa_offset 4
 369 02ea BD46     	 mov sp,r7
 370              	.LCFI4:
 371              	 .cfi_def_cfa_register 13
 372              	 
 373 02ec 5DF8047B 	 ldr r7,[sp],#4
 374              	.LCFI5:
 375              	 .cfi_restore 7
 376              	 .cfi_def_cfa_offset 0
 377 02f0 7047     	 bx lr
 378              	 .cfi_endproc
 379              	.LFE135:
 381 02f2 00BF     	 .text
 382              	.Letext0:
 383              	 .file 2 "c:\\program files (x86)\\dave\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 384              	 .file 3 "c:\\program files (x86)\\dave\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 385              	 .file 4 "C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_biquad_cascade_df1_f32.c
    {standard input}:20     .text.arm_biquad_cascade_df1_f32:00000000 $t
    {standard input}:25     .text.arm_biquad_cascade_df1_f32:00000000 arm_biquad_cascade_df1_f32
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
