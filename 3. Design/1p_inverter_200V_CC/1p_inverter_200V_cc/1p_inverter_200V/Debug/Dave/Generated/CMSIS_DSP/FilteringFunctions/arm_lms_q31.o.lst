   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "arm_lms_q31.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.arm_lms_q31,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_lms_q31
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_lms_q31:
  26              	.LFB135:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c"
   1:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** /* ----------------------------------------------------------------------
   2:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  * Project:      CMSIS DSP Library
   3:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  * Title:        arm_lms_q31.c
   4:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  * Description:  Processing function for the Q31 LMS filter
   5:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  *
   6:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  * $Date:        27. January 2017
   7:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  * $Revision:    V.1.5.1
   8:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  *
   9:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  * Target Processor: Cortex-M cores
  10:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  * -------------------------------------------------------------------- */
  11:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** /*
  12:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  *
  14:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  * SPDX-License-Identifier: Apache-2.0
  15:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  *
  16:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  * not use this file except in compliance with the License.
  18:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  * You may obtain a copy of the License at
  19:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  *
  20:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  *
  22:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  * Unless required by applicable law or agreed to in writing, software
  23:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  * See the License for the specific language governing permissions and
  26:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  * limitations under the License.
  27:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  */
  28:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
  29:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  30:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** /**
  31:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  * @ingroup groupFilters
  32:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  */
  33:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
  34:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** /**
  35:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  * @addtogroup LMS
  36:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  * @{
  37:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  */
  38:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
  39:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  /**
  40:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  * @brief Processing function for Q31 LMS filter.
  41:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  * @param[in]  *S points to an instance of the Q15 LMS filter structure.
  42:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  * @param[in]  *pSrc points to the block of input data.
  43:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  * @param[in]  *pRef points to the block of reference data.
  44:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  * @param[out] *pOut points to the block of output data.
  45:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  * @param[out] *pErr points to the block of error data.
  46:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  * @param[in]  blockSize number of samples to process.
  47:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  * @return     none.
  48:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  *
  49:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  * \par Scaling and Overflow Behavior:
  50:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  * The function is implemented using an internal 64-bit accumulator.
  51:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  * The accumulator has a 2.62 format and maintains full precision of the intermediate
  52:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  * multiplication results but provides only a single guard bit.
  53:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  * Thus, if the accumulator result overflows it wraps around rather than clips.
  54:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  * In order to avoid overflows completely the input signal must be scaled down by
  55:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  * log2(numTaps) bits.
  56:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  * The reference signal should not be scaled down.
  57:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  * After all multiply-accumulates are performed, the 2.62 accumulator is shifted
  58:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  * and saturated to 1.31 format to yield the final result.
  59:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  * The output signal and error signal are in 1.31 format.
  60:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  *
  61:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  * \par
  62:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  * 	In this filter, filter coefficients are updated for each sample and the updation of filter coff
  63:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****  */
  64:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
  65:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** void arm_lms_q31(
  66:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   const arm_lms_instance_q31 * S,
  67:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   q31_t * pSrc,
  68:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   q31_t * pRef,
  69:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   q31_t * pOut,
  70:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   q31_t * pErr,
  71:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   uint32_t blockSize)
  72:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** {
  28              	 .loc 1 72 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33 0000 2DE9B00F 	 push {r4,r5,r7,r8,r9,r10,fp}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 28
  36              	 .cfi_offset 4,-28
  37              	 .cfi_offset 5,-24
  38              	 .cfi_offset 7,-20
  39              	 .cfi_offset 8,-16
  40              	 .cfi_offset 9,-12
  41              	 .cfi_offset 10,-8
  42              	 .cfi_offset 11,-4
  43 0004 BFB0     	 sub sp,sp,#252
  44              	.LCFI1:
  45              	 .cfi_def_cfa_offset 280
  46 0006 00AF     	 add r7,sp,#0
  47              	.LCFI2:
  48              	 .cfi_def_cfa_register 7
  49 0008 C7F88400 	 str r0,[r7,#132]
  50 000c C7F88010 	 str r1,[r7,#128]
  51 0010 FA67     	 str r2,[r7,#124]
  52 0012 BB67     	 str r3,[r7,#120]
  73:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   q31_t *pState = S->pState;                     /* State pointer */
  53              	 .loc 1 73 0
  54 0014 D7F88430 	 ldr r3,[r7,#132]
  55 0018 5B68     	 ldr r3,[r3,#4]
  56 001a C7F8F430 	 str r3,[r7,#244]
  74:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
  57              	 .loc 1 74 0
  58 001e D7F88430 	 ldr r3,[r7,#132]
  59 0022 1B88     	 ldrh r3,[r3]
  60 0024 C7F8D430 	 str r3,[r7,#212]
  75:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   q31_t *pCoeffs = S->pCoeffs;                   /* Coefficient pointer */
  61              	 .loc 1 75 0
  62 0028 D7F88430 	 ldr r3,[r7,#132]
  63 002c 9B68     	 ldr r3,[r3,#8]
  64 002e C7F8D030 	 str r3,[r7,#208]
  76:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   q31_t *pStateCurnt;                            /* Points to the current sample of the state */
  77:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   q31_t mu = S->mu;                              /* Adaptive factor */
  65              	 .loc 1 77 0
  66 0032 D7F88430 	 ldr r3,[r7,#132]
  67 0036 DB68     	 ldr r3,[r3,#12]
  68 0038 C7F8CC30 	 str r3,[r7,#204]
  78:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   q31_t *px;                                     /* Temporary pointer for state */
  79:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   q31_t *pb;                                     /* Temporary pointer for coefficient buffer */
  80:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   uint32_t tapCnt, blkCnt;                       /* Loop counters */
  81:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   q63_t acc;                                     /* Accumulator */
  82:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   q31_t e = 0;                                   /* error of data sample */
  69              	 .loc 1 82 0
  70 003c 0023     	 movs r3,#0
  71 003e C7F8C830 	 str r3,[r7,#200]
  83:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   q31_t alpha;                                   /* Intermediate constant for taps update */
  84:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   q31_t coef;                                    /* Temporary variable for coef */
  85:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   q31_t acc_l, acc_h;                            /*  temporary input */
  86:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   uint32_t uShift = ((uint32_t) S->postShift + 1u);
  72              	 .loc 1 86 0
  73 0042 D7F88430 	 ldr r3,[r7,#132]
  74 0046 1B69     	 ldr r3,[r3,#16]
  75 0048 0133     	 adds r3,r3,#1
  76 004a C7F8C430 	 str r3,[r7,#196]
  87:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   uint32_t lShift = 32u - uShift;                /*  Shift to be applied to the output */
  77              	 .loc 1 87 0
  78 004e D7F8C430 	 ldr r3,[r7,#196]
  79 0052 C3F12003 	 rsb r3,r3,#32
  80 0056 C7F8C030 	 str r3,[r7,#192]
  88:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
  89:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   /* S->pState points to buffer which contains previous frame (numTaps - 1) samples */
  90:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   /* pStateCurnt points to the location where the new input data should be written */
  91:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   pStateCurnt = &(S->pState[(numTaps - 1u)]);
  81              	 .loc 1 91 0
  82 005a D7F88430 	 ldr r3,[r7,#132]
  83 005e 5A68     	 ldr r2,[r3,#4]
  84 0060 D7F8D430 	 ldr r3,[r7,#212]
  85 0064 03F18043 	 add r3,r3,#1073741824
  86 0068 013B     	 subs r3,r3,#1
  87 006a 9B00     	 lsls r3,r3,#2
  88 006c 1344     	 add r3,r3,r2
  89 006e C7F8F030 	 str r3,[r7,#240]
  92:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
  93:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   /* Initializing blkCnt with blockSize */
  94:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   blkCnt = blockSize;
  90              	 .loc 1 94 0
  91 0072 D7F81C31 	 ldr r3,[r7,#284]
  92 0076 C7F8E030 	 str r3,[r7,#224]
  95:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
  96:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
  97:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** #if defined (ARM_MATH_DSP)
  98:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
  99:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   /* Run the below code for Cortex-M4 and Cortex-M3 */
 100:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 101:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   while (blkCnt > 0u)
  93              	 .loc 1 101 0
  94 007a F4E2     	 b .L2
  95              	.L26:
 102:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   {
 103:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     /* Copy the new input sample into the state buffer */
 104:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     *pStateCurnt++ = *pSrc++;
  96              	 .loc 1 104 0
  97 007c D7F8F010 	 ldr r1,[r7,#240]
  98 0080 0B1D     	 adds r3,r1,#4
  99 0082 C7F8F030 	 str r3,[r7,#240]
 100 0086 D7F88020 	 ldr r2,[r7,#128]
 101 008a 131D     	 adds r3,r2,#4
 102 008c C7F88030 	 str r3,[r7,#128]
 103 0090 1368     	 ldr r3,[r2]
 104 0092 0B60     	 str r3,[r1]
 105:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 106:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     /* Initialize state pointer */
 107:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     px = pState;
 105              	 .loc 1 107 0
 106 0094 D7F8F430 	 ldr r3,[r7,#244]
 107 0098 C7F8EC30 	 str r3,[r7,#236]
 108:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 109:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     /* Initialize coefficient pointer */
 110:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     pb = pCoeffs;
 108              	 .loc 1 110 0
 109 009c D7F8D030 	 ldr r3,[r7,#208]
 110 00a0 C7F8E830 	 str r3,[r7,#232]
 111:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 112:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     /* Set the accumulator to zero */
 113:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     acc = 0;
 111              	 .loc 1 113 0
 112 00a4 4FF00002 	 mov r2,#0
 113 00a8 4FF00003 	 mov r3,#0
 114 00ac C7E93623 	 strd r2,[r7,#216]
 114:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 115:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     /* Loop unrolling.  Process 4 taps at a time. */
 116:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     tapCnt = numTaps >> 2;
 115              	 .loc 1 116 0
 116 00b0 D7F8D430 	 ldr r3,[r7,#212]
 117 00b4 9B08     	 lsrs r3,r3,#2
 118 00b6 C7F8E430 	 str r3,[r7,#228]
 117:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 118:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     while (tapCnt > 0u)
 119              	 .loc 1 118 0
 120 00ba 8CE0     	 b .L3
 121              	.L4:
 119:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     {
 120:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       /* Perform the multiply-accumulate */
 121:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       /* acc +=  b[N] * x[n-N] */
 122:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       acc += ((q63_t) (*px++)) * (*pb++);
 122              	 .loc 1 122 0
 123 00bc D7F8EC20 	 ldr r2,[r7,#236]
 124 00c0 131D     	 adds r3,r2,#4
 125 00c2 C7F8EC30 	 str r3,[r7,#236]
 126 00c6 1368     	 ldr r3,[r2]
 127 00c8 1C46     	 mov r4,r3
 128 00ca 4FEAE475 	 asr r5,r4,#31
 129 00ce D7F8E820 	 ldr r2,[r7,#232]
 130 00d2 131D     	 adds r3,r2,#4
 131 00d4 C7F8E830 	 str r3,[r7,#232]
 132 00d8 1368     	 ldr r3,[r2]
 133 00da 1A46     	 mov r2,r3
 134 00dc 4FEAE273 	 asr r3,r2,#31
 135 00e0 02FB05F0 	 mul r0,r2,r5
 136 00e4 04FB03F1 	 mul r1,r4,r3
 137 00e8 0144     	 add r1,r1,r0
 138 00ea A4FB0245 	 umull r4,r5,r4,r2
 139 00ee 4B19     	 adds r3,r1,r5
 140 00f0 1D46     	 mov r5,r3
 141 00f2 D7E93623 	 ldrd r2,[r7,#216]
 142 00f6 1219     	 adds r2,r2,r4
 143 00f8 43EB0503 	 adc r3,r3,r5
 144 00fc C7E93623 	 strd r2,[r7,#216]
 123:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 124:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       /* acc +=  b[N-1] * x[n-N-1] */
 125:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       acc += ((q63_t) (*px++)) * (*pb++);
 145              	 .loc 1 125 0
 146 0100 D7F8EC20 	 ldr r2,[r7,#236]
 147 0104 131D     	 adds r3,r2,#4
 148 0106 C7F8EC30 	 str r3,[r7,#236]
 149 010a 1368     	 ldr r3,[r2]
 150 010c 1C46     	 mov r4,r3
 151 010e 4FEAE475 	 asr r5,r4,#31
 152 0112 D7F8E820 	 ldr r2,[r7,#232]
 153 0116 131D     	 adds r3,r2,#4
 154 0118 C7F8E830 	 str r3,[r7,#232]
 155 011c 1368     	 ldr r3,[r2]
 156 011e 1A46     	 mov r2,r3
 157 0120 4FEAE273 	 asr r3,r2,#31
 158 0124 02FB05F0 	 mul r0,r2,r5
 159 0128 04FB03F1 	 mul r1,r4,r3
 160 012c 0144     	 add r1,r1,r0
 161 012e A4FB0245 	 umull r4,r5,r4,r2
 162 0132 4B19     	 adds r3,r1,r5
 163 0134 1D46     	 mov r5,r3
 164 0136 D7E93623 	 ldrd r2,[r7,#216]
 165 013a 1219     	 adds r2,r2,r4
 166 013c 43EB0503 	 adc r3,r3,r5
 167 0140 C7E93623 	 strd r2,[r7,#216]
 126:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 127:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       /* acc +=  b[N-2] * x[n-N-2] */
 128:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       acc += ((q63_t) (*px++)) * (*pb++);
 168              	 .loc 1 128 0
 169 0144 D7F8EC20 	 ldr r2,[r7,#236]
 170 0148 131D     	 adds r3,r2,#4
 171 014a C7F8EC30 	 str r3,[r7,#236]
 172 014e 1368     	 ldr r3,[r2]
 173 0150 1C46     	 mov r4,r3
 174 0152 4FEAE475 	 asr r5,r4,#31
 175 0156 D7F8E820 	 ldr r2,[r7,#232]
 176 015a 131D     	 adds r3,r2,#4
 177 015c C7F8E830 	 str r3,[r7,#232]
 178 0160 1368     	 ldr r3,[r2]
 179 0162 1A46     	 mov r2,r3
 180 0164 4FEAE273 	 asr r3,r2,#31
 181 0168 02FB05F0 	 mul r0,r2,r5
 182 016c 04FB03F1 	 mul r1,r4,r3
 183 0170 0144     	 add r1,r1,r0
 184 0172 A4FB0245 	 umull r4,r5,r4,r2
 185 0176 4B19     	 adds r3,r1,r5
 186 0178 1D46     	 mov r5,r3
 187 017a D7E93623 	 ldrd r2,[r7,#216]
 188 017e 1219     	 adds r2,r2,r4
 189 0180 43EB0503 	 adc r3,r3,r5
 190 0184 C7E93623 	 strd r2,[r7,#216]
 129:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 130:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       /* acc +=  b[N-3] * x[n-N-3] */
 131:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       acc += ((q63_t) (*px++)) * (*pb++);
 191              	 .loc 1 131 0
 192 0188 D7F8EC20 	 ldr r2,[r7,#236]
 193 018c 131D     	 adds r3,r2,#4
 194 018e C7F8EC30 	 str r3,[r7,#236]
 195 0192 1368     	 ldr r3,[r2]
 196 0194 1C46     	 mov r4,r3
 197 0196 4FEAE475 	 asr r5,r4,#31
 198 019a D7F8E820 	 ldr r2,[r7,#232]
 199 019e 131D     	 adds r3,r2,#4
 200 01a0 C7F8E830 	 str r3,[r7,#232]
 201 01a4 1368     	 ldr r3,[r2]
 202 01a6 1A46     	 mov r2,r3
 203 01a8 4FEAE273 	 asr r3,r2,#31
 204 01ac 02FB05F0 	 mul r0,r2,r5
 205 01b0 04FB03F1 	 mul r1,r4,r3
 206 01b4 0144     	 add r1,r1,r0
 207 01b6 A4FB0245 	 umull r4,r5,r4,r2
 208 01ba 4B19     	 adds r3,r1,r5
 209 01bc 1D46     	 mov r5,r3
 210 01be D7E93623 	 ldrd r2,[r7,#216]
 211 01c2 1219     	 adds r2,r2,r4
 212 01c4 43EB0503 	 adc r3,r3,r5
 213 01c8 C7E93623 	 strd r2,[r7,#216]
 132:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 133:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       /* Decrement the loop counter */
 134:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       tapCnt--;
 214              	 .loc 1 134 0
 215 01cc D7F8E430 	 ldr r3,[r7,#228]
 216 01d0 013B     	 subs r3,r3,#1
 217 01d2 C7F8E430 	 str r3,[r7,#228]
 218              	.L3:
 118:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     {
 219              	 .loc 1 118 0
 220 01d6 D7F8E430 	 ldr r3,[r7,#228]
 221 01da 002B     	 cmp r3,#0
 222 01dc 7FF46EAF 	 bne .L4
 135:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     }
 136:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 137:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     /* If the filter length is not a multiple of 4, compute the remaining filter taps */
 138:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     tapCnt = numTaps % 0x4u;
 223              	 .loc 1 138 0
 224 01e0 D7F8D430 	 ldr r3,[r7,#212]
 225 01e4 03F00303 	 and r3,r3,#3
 226 01e8 C7F8E430 	 str r3,[r7,#228]
 139:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 140:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     while (tapCnt > 0u)
 227              	 .loc 1 140 0
 228 01ec 26E0     	 b .L5
 229              	.L6:
 141:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     {
 142:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       /* Perform the multiply-accumulate */
 143:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       acc += ((q63_t) (*px++)) * (*pb++);
 230              	 .loc 1 143 0
 231 01ee D7F8EC20 	 ldr r2,[r7,#236]
 232 01f2 131D     	 adds r3,r2,#4
 233 01f4 C7F8EC30 	 str r3,[r7,#236]
 234 01f8 1368     	 ldr r3,[r2]
 235 01fa 1C46     	 mov r4,r3
 236 01fc 4FEAE475 	 asr r5,r4,#31
 237 0200 D7F8E820 	 ldr r2,[r7,#232]
 238 0204 131D     	 adds r3,r2,#4
 239 0206 C7F8E830 	 str r3,[r7,#232]
 240 020a 1368     	 ldr r3,[r2]
 241 020c 1A46     	 mov r2,r3
 242 020e 4FEAE273 	 asr r3,r2,#31
 243 0212 02FB05F0 	 mul r0,r2,r5
 244 0216 04FB03F1 	 mul r1,r4,r3
 245 021a 0144     	 add r1,r1,r0
 246 021c A4FB0245 	 umull r4,r5,r4,r2
 247 0220 4B19     	 adds r3,r1,r5
 248 0222 1D46     	 mov r5,r3
 249 0224 D7E93623 	 ldrd r2,[r7,#216]
 250 0228 1219     	 adds r2,r2,r4
 251 022a 43EB0503 	 adc r3,r3,r5
 252 022e C7E93623 	 strd r2,[r7,#216]
 144:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 145:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       /* Decrement the loop counter */
 146:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       tapCnt--;
 253              	 .loc 1 146 0
 254 0232 D7F8E430 	 ldr r3,[r7,#228]
 255 0236 013B     	 subs r3,r3,#1
 256 0238 C7F8E430 	 str r3,[r7,#228]
 257              	.L5:
 140:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     {
 258              	 .loc 1 140 0
 259 023c D7F8E430 	 ldr r3,[r7,#228]
 260 0240 002B     	 cmp r3,#0
 261 0242 D4D1     	 bne .L6
 147:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     }
 148:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 149:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     /* Converting the result to 1.31 format */
 150:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     /* Calc lower part of acc */
 151:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     acc_l = acc & 0xffffffff;
 262              	 .loc 1 151 0
 263 0244 D7F8D830 	 ldr r3,[r7,#216]
 264 0248 C7F8BC30 	 str r3,[r7,#188]
 152:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 153:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     /* Calc upper part of acc */
 154:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     acc_h = (acc >> 32) & 0xffffffff;
 265              	 .loc 1 154 0
 266 024c D7E93623 	 ldrd r2,[r7,#216]
 267 0250 1B00     	 movs r3,r3
 268 0252 3B67     	 str r3,[r7,#112]
 269 0254 0023     	 movs r3,#0
 270 0256 7B67     	 str r3,[r7,#116]
 271 0258 3B6F     	 ldr r3,[r7,#112]
 272 025a C7F8B830 	 str r3,[r7,#184]
 155:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 156:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     acc = (uint32_t) acc_l >> lShift | acc_h << uShift;
 273              	 .loc 1 156 0
 274 025e D7F8BC20 	 ldr r2,[r7,#188]
 275 0262 D7F8C030 	 ldr r3,[r7,#192]
 276 0266 22FA03F1 	 lsr r1,r2,r3
 277 026a D7F8C420 	 ldr r2,[r7,#196]
 278 026e D7F8B830 	 ldr r3,[r7,#184]
 279 0272 9340     	 lsls r3,r3,r2
 280 0274 0B43     	 orrs r3,r3,r1
 281 0276 1A46     	 mov r2,r3
 282 0278 4FF00003 	 mov r3,#0
 283 027c C7E93623 	 strd r2,[r7,#216]
 157:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 158:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     /* Store the result from accumulator into the destination buffer. */
 159:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     *pOut++ = (q31_t) acc;
 284              	 .loc 1 159 0
 285 0280 BA6F     	 ldr r2,[r7,#120]
 286 0282 131D     	 adds r3,r2,#4
 287 0284 BB67     	 str r3,[r7,#120]
 288 0286 D7F8D830 	 ldr r3,[r7,#216]
 289 028a 1360     	 str r3,[r2]
 160:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 161:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     /* Compute and store error */
 162:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     e = *pRef++ - (q31_t) acc;
 290              	 .loc 1 162 0
 291 028c FA6F     	 ldr r2,[r7,#124]
 292 028e 131D     	 adds r3,r2,#4
 293 0290 FB67     	 str r3,[r7,#124]
 294 0292 1268     	 ldr r2,[r2]
 295 0294 D7F8D830 	 ldr r3,[r7,#216]
 296 0298 D31A     	 subs r3,r2,r3
 297 029a C7F8C830 	 str r3,[r7,#200]
 163:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 164:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     *pErr++ = (q31_t) e;
 298              	 .loc 1 164 0
 299 029e D7F81821 	 ldr r2,[r7,#280]
 300 02a2 131D     	 adds r3,r2,#4
 301 02a4 C7F81831 	 str r3,[r7,#280]
 302 02a8 D7F8C830 	 ldr r3,[r7,#200]
 303 02ac 1360     	 str r3,[r2]
 165:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 166:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     /* Compute alpha i.e. intermediate constant for taps update */
 167:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     alpha = (q31_t) (((q63_t) e * mu) >> 31);
 304              	 .loc 1 167 0
 305 02ae D7F8C830 	 ldr r3,[r7,#200]
 306 02b2 1846     	 mov r0,r3
 307 02b4 4FEAE071 	 asr r1,r0,#31
 308 02b8 D7F8CC30 	 ldr r3,[r7,#204]
 309 02bc 1A46     	 mov r2,r3
 310 02be 4FEAE273 	 asr r3,r2,#31
 311 02c2 02FB01F5 	 mul r5,r2,r1
 312 02c6 00FB03F4 	 mul r4,r0,r3
 313 02ca 2C44     	 add r4,r4,r5
 314 02cc A0FB0223 	 umull r2,r3,r0,r2
 315 02d0 E118     	 adds r1,r4,r3
 316 02d2 0B46     	 mov r3,r1
 317 02d4 4FEAD278 	 lsr r8,r2,#31
 318 02d8 48EA4308 	 orr r8,r8,r3,lsl#1
 319 02dc 4FEAE379 	 asr r9,r3,#31
 320 02e0 4346     	 mov r3,r8
 321 02e2 C7F8B430 	 str r3,[r7,#180]
 168:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 169:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     /* Initialize state pointer */
 170:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     /* Advance state pointer by 1 for the next sample */
 171:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     px = pState++;
 322              	 .loc 1 171 0
 323 02e6 D7F8F420 	 ldr r2,[r7,#244]
 324 02ea 131D     	 adds r3,r2,#4
 325 02ec C7F8F430 	 str r3,[r7,#244]
 326 02f0 C7F8EC20 	 str r2,[r7,#236]
 172:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 173:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     /* Initialize coefficient pointer */
 174:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     pb = pCoeffs;
 327              	 .loc 1 174 0
 328 02f4 D7F8D030 	 ldr r3,[r7,#208]
 329 02f8 C7F8E830 	 str r3,[r7,#232]
 175:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 176:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     /* Loop unrolling.  Process 4 taps at a time. */
 177:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     tapCnt = numTaps >> 2;
 330              	 .loc 1 177 0
 331 02fc D7F8D430 	 ldr r3,[r7,#212]
 332 0300 9B08     	 lsrs r3,r3,#2
 333 0302 C7F8E430 	 str r3,[r7,#228]
 178:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 179:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     /* Update filter coefficients */
 180:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     while (tapCnt > 0u)
 334              	 .loc 1 180 0
 335 0306 44E1     	 b .L7
 336              	.L20:
 181:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     {
 182:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       /* coef is in 2.30 format */
 183:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       coef = (q31_t) (((q63_t) alpha * (*px++)) >> (32));
 337              	 .loc 1 183 0
 338 0308 D7F8B430 	 ldr r3,[r7,#180]
 339 030c 1C46     	 mov r4,r3
 340 030e 4FEAE475 	 asr r5,r4,#31
 341 0312 D7F8EC20 	 ldr r2,[r7,#236]
 342 0316 131D     	 adds r3,r2,#4
 343 0318 C7F8EC30 	 str r3,[r7,#236]
 344 031c 1368     	 ldr r3,[r2]
 345 031e 1A46     	 mov r2,r3
 346 0320 4FEAE273 	 asr r3,r2,#31
 347 0324 02FB05F0 	 mul r0,r2,r5
 348 0328 04FB03F1 	 mul r1,r4,r3
 349 032c 0144     	 add r1,r1,r0
 350 032e A4FB0223 	 umull r2,r3,r4,r2
 351 0332 1944     	 add r1,r1,r3
 352 0334 0B46     	 mov r3,r1
 353 0336 1900     	 movs r1,r3
 354 0338 B966     	 str r1,[r7,#104]
 355 033a DB17     	 asrs r3,r3,#31
 356 033c FB66     	 str r3,[r7,#108]
 357 033e BB6E     	 ldr r3,[r7,#104]
 358 0340 C7F8B030 	 str r3,[r7,#176]
 184:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       /* get coef in 1.31 format by left shifting */
 185:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       *pb = clip_q63_to_q31((q63_t) * pb + (coef << 1u));
 359              	 .loc 1 185 0
 360 0344 D7F8E830 	 ldr r3,[r7,#232]
 361 0348 1B68     	 ldr r3,[r3]
 362 034a 1846     	 mov r0,r3
 363 034c 4FEAE071 	 asr r1,r0,#31
 364 0350 D7F8B030 	 ldr r3,[r7,#176]
 365 0354 5B00     	 lsls r3,r3,#1
 366 0356 1A46     	 mov r2,r3
 367 0358 4FEAE273 	 asr r3,r2,#31
 368 035c 1218     	 adds r2,r2,r0
 369 035e 43EB0103 	 adc r3,r3,r1
 370 0362 C7E92A23 	 strd r2,[r7,#168]
 371              	.LBB12:
 372              	.LBB13:
 373              	 .file 2 "C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP/arm_math.h"
   1:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /* ----------------------------------------------------------------------
   2:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * Project:      CMSIS DSP Library
   3:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * Title:        CMSIS_DSP/cmsis_dsp.h
   4:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * Description:  Public header file for CMSIS DSP Library
   5:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  *
   6:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * $Date:        27. January 2017
   7:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * $Revision:    V.1.5.1
   8:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  *
   9:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * Target Processor: Cortex-M cores
  10:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * -------------------------------------------------------------------- */
  11:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /*
  12:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  *
  14:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * SPDX-License-Identifier: Apache-2.0
  15:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  *
  16:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * not use this file except in compliance with the License.
  18:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * You may obtain a copy of the License at
  19:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  *
  20:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * www.apache.org/licenses/LICENSE-2.0
  21:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  *
  22:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * Unless required by applicable law or agreed to in writing, software
  23:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * See the License for the specific language governing permissions and
  26:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * limitations under the License.
  27:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  */
  28:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
  29:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /**
  30:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    \mainpage CMSIS DSP Software Library
  31:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
  32:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Introduction
  33:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * ------------
  34:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
  35:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * This user manual describes the CMSIS DSP software library,
  36:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * a suite of common signal processing functions for use on Cortex-M processor based devices.
  37:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
  38:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The library is divided into a number of functions each covering a specific category:
  39:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - Basic math functions
  40:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - Fast math functions
  41:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - Complex math functions
  42:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - Filters
  43:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - Matrix functions
  44:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - Transforms
  45:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - Motor control functions
  46:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - Statistical functions
  47:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - Support functions
  48:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - Interpolation functions
  49:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
  50:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The library has separate functions for operating on 8-bit integers, 16-bit integers,
  51:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * 32-bit integer and 32-bit floating-point values.
  52:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
  53:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Using the Library
  54:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * ------------
  55:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
  56:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The library installer contains prebuilt versions of the libraries in the <code>Lib</code> fold
  57:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - arm_cortexM7lfdp_math.lib (Cortex-M7, Little endian, Double Precision Floating Point Unit)
  58:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - arm_cortexM7bfdp_math.lib (Cortex-M7, Big endian, Double Precision Floating Point Unit)
  59:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - arm_cortexM7lfsp_math.lib (Cortex-M7, Little endian, Single Precision Floating Point Unit)
  60:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - arm_cortexM7bfsp_math.lib (Cortex-M7, Big endian and Single Precision Floating Point Unit on
  61:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - arm_cortexM7l_math.lib (Cortex-M7, Little endian)
  62:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - arm_cortexM7b_math.lib (Cortex-M7, Big endian)
  63:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - arm_cortexM4lf_math.lib (Cortex-M4, Little endian, Floating Point Unit)
  64:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - arm_cortexM4bf_math.lib (Cortex-M4, Big endian, Floating Point Unit)
  65:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - arm_cortexM4l_math.lib (Cortex-M4, Little endian)
  66:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - arm_cortexM4b_math.lib (Cortex-M4, Big endian)
  67:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - arm_cortexM3l_math.lib (Cortex-M3, Little endian)
  68:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - arm_cortexM3b_math.lib (Cortex-M3, Big endian)
  69:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - arm_cortexM0l_math.lib (Cortex-M0 / Cortex-M0+, Little endian)
  70:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - arm_cortexM0b_math.lib (Cortex-M0 / Cortex-M0+, Big endian)
  71:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - arm_ARMv8MBLl_math.lib (ARMv8M Baseline, Little endian)
  72:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - arm_ARMv8MMLl_math.lib (ARMv8M Mainline, Little endian)
  73:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - arm_ARMv8MMLlfsp_math.lib (ARMv8M Mainline, Little endian, Single Precision Floating Point U
  74:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - arm_ARMv8MMLld_math.lib (ARMv8M Mainline, Little endian, DSP instructions)
  75:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - arm_ARMv8MMLldfsp_math.lib (ARMv8M Mainline, Little endian, DSP instructions, Single Precisi
  76:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
  77:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The library functions are declared in the public file <code>CMSIS_DSP/cmsis_dsp.h</code> which
  78:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Simply include this file and link the appropriate library in the application and begin calling
  79:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * public header file <code> CMSIS_DSP/cmsis_dsp.h</code> for Cortex-M cores with little endian a
  80:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Define the appropriate pre processor MACRO ARM_MATH_CM7 or ARM_MATH_CM4 or  ARM_MATH_CM3 or
  81:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * ARM_MATH_CM0 or ARM_MATH_CM0PLUS depending on the target processor in the application.
  82:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * For ARMv8M cores define pre processor MACRO ARM_MATH_ARMV8MBL or ARM_MATH_ARMV8MML.
  83:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Set Pre processor MACRO __DSP_PRESENT if ARMv8M Mainline core supports DSP instructions.
  84:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * 
  85:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
  86:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Examples
  87:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * --------
  88:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
  89:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The library ships with a number of examples which demonstrate how to use the library functions
  90:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
  91:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Toolchain Support
  92:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * ------------
  93:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
  94:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The library has been developed and tested with MDK-ARM version 5.14.0.0
  95:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The library is being tested in GCC and IAR toolchains and updates on this activity will be mad
  96:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
  97:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Building the Library
  98:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * ------------
  99:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 100:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The library installer contains a project file to re build libraries on MDK-ARM Tool chain in t
 101:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - arm_cortexM_math.uvprojx
 102:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 103:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 104:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The libraries can be built by opening the arm_cortexM_math.uvprojx project in MDK-ARM, selecti
 105:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 106:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Pre-processor Macros
 107:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * ------------
 108:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 109:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Each library project have differant pre-processor macros.
 110:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 111:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - UNALIGNED_SUPPORT_DISABLE:
 112:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 113:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Define macro UNALIGNED_SUPPORT_DISABLE, If the silicon does not support unaligned memory acces
 114:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 115:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - ARM_MATH_BIG_ENDIAN:
 116:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 117:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Define macro ARM_MATH_BIG_ENDIAN to build the library for big endian targets. By default libra
 118:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 119:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - ARM_MATH_MATRIX_CHECK:
 120:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 121:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Define macro ARM_MATH_MATRIX_CHECK for checking on the input and output sizes of matrices
 122:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 123:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - ARM_MATH_ROUNDING:
 124:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 125:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Define macro ARM_MATH_ROUNDING for rounding on support functions
 126:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 127:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - ARM_MATH_CMx:
 128:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 129:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Define macro ARM_MATH_CM4 for building the library on Cortex-M4 target, ARM_MATH_CM3 for build
 130:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * and ARM_MATH_CM0 for building library on Cortex-M0 target, ARM_MATH_CM0PLUS for building libra
 131:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * ARM_MATH_CM7 for building the library on cortex-M7.
 132:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 133:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - ARM_MATH_ARMV8MxL:
 134:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 135:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Define macro ARM_MATH_ARMV8MBL for building the library on ARMv8M Baseline target, ARM_MATH_AR
 136:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * on ARMv8M Mainline target.
 137:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 138:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - __FPU_PRESENT:
 139:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 140:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Initialize macro __FPU_PRESENT = 1 when building on FPU supported Targets. Enable this macro f
 141:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 142:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * - __DSP_PRESENT:
 143:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 144:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Initialize macro __DSP_PRESENT = 1 when ARMv8M Mainline core supports DSP instructions.
 145:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 146:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * <hr>
 147:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * CMSIS-DSP in ARM::CMSIS Pack
 148:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * -----------------------------
 149:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 150:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * The following files relevant to CMSIS-DSP are present in the <b>ARM::CMSIS</b> Pack directorie
 151:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * |File/Folder                   |Content                                                       
 152:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * |------------------------------|--------------------------------------------------------------
 153:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * |\b CMSIS\\Documentation\\DSP  | This documentation                                           
 154:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * |\b CMSIS\\DSP_Lib             | Software license agreement (license.txt)                     
 155:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Examples   | Example projects demonstrating the usage of the library funct
 156:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Source     | Source files for rebuilding the library                      
 157:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 158:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * <hr>
 159:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Revision History of CMSIS-DSP
 160:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * ------------
 161:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Please refer to \ref ChangeLog_pg.
 162:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 163:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Copyright Notice
 164:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * ------------
 165:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    *
 166:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * Copyright (C) 2010-2015 ARM Limited. All rights reserved.
 167:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 168:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 169:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 170:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /**
 171:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * @defgroup groupMath Basic Math Functions
 172:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  */
 173:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 174:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /**
 175:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * @defgroup groupFastMath Fast Math Functions
 176:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * This set of functions provides a fast approximation to sine, cosine, and square root.
 177:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * As compared to most of the other functions in the CMSIS math library, the fast math functions
 178:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * operate on individual values and not arrays.
 179:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * There are separate functions for Q15, Q31, and floating-point data.
 180:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  *
 181:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  */
 182:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 183:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /**
 184:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * @defgroup groupCmplxMath Complex Math Functions
 185:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * This set of functions operates on complex data vectors.
 186:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * The data in the complex arrays is stored in an interleaved fashion
 187:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * (real, imag, real, imag, ...).
 188:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * In the API functions, the number of samples in a complex array refers
 189:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * to the number of complex values; the array contains twice this number of
 190:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * real values.
 191:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  */
 192:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 193:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /**
 194:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * @defgroup groupFilters Filtering Functions
 195:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  */
 196:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 197:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /**
 198:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * @defgroup groupMatrix Matrix Functions
 199:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  *
 200:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * This set of functions provides basic matrix math operations.
 201:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * The functions operate on matrix data structures.  For example,
 202:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * the type
 203:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * definition for the floating-point matrix structure is shown
 204:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * below:
 205:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * <pre>
 206:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  *     typedef struct
 207:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  *     {
 208:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  *       uint16_t numRows;     // number of rows of the matrix.
 209:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  *       uint16_t numCols;     // number of columns of the matrix.
 210:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  *       float32_t *pData;     // points to the data of the matrix.
 211:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  *     } arm_matrix_instance_f32;
 212:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * </pre>
 213:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * There are similar definitions for Q15 and Q31 data types.
 214:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  *
 215:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * The structure specifies the size of the matrix and then points to
 216:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * an array of data.  The array is of size <code>numRows X numCols</code>
 217:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * and the values are arranged in row order.  That is, the
 218:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * matrix element (i, j) is stored at:
 219:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * <pre>
 220:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  *     pData[i*numCols + j]
 221:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * </pre>
 222:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  *
 223:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * \par Init Functions
 224:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * There is an associated initialization function for each type of matrix
 225:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * data structure.
 226:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * The initialization function sets the values of the internal structure fields.
 227:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * Refer to the function <code>arm_mat_init_f32()</code>, <code>arm_mat_init_q31()</code>
 228:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * and <code>arm_mat_init_q15()</code> for floating-point, Q31 and Q15 types,  respectively.
 229:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  *
 230:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * \par
 231:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * Use of the initialization function is optional. However, if initialization function is used
 232:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * then the instance structure cannot be placed into a const data section.
 233:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * To place the instance structure in a const data
 234:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * section, manually initialize the data structure.  For example:
 235:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * <pre>
 236:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * <code>arm_matrix_instance_f32 S = {nRows, nColumns, pData};</code>
 237:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * <code>arm_matrix_instance_q31 S = {nRows, nColumns, pData};</code>
 238:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * <code>arm_matrix_instance_q15 S = {nRows, nColumns, pData};</code>
 239:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * </pre>
 240:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * where <code>nRows</code> specifies the number of rows, <code>nColumns</code>
 241:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * specifies the number of columns, and <code>pData</code> points to the
 242:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * data array.
 243:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  *
 244:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * \par Size Checking
 245:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * By default all of the matrix functions perform size checking on the input and
 246:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * output matrices.  For example, the matrix addition function verifies that the
 247:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * two input matrices and the output matrix all have the same number of rows and
 248:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * columns.  If the size check fails the functions return:
 249:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * <pre>
 250:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  *     ARM_MATH_SIZE_MISMATCH
 251:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * </pre>
 252:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * Otherwise the functions return
 253:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * <pre>
 254:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  *     ARM_MATH_SUCCESS
 255:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * </pre>
 256:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * There is some overhead associated with this matrix size checking.
 257:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * The matrix size checking is enabled via the \#define
 258:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * <pre>
 259:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  *     ARM_MATH_MATRIX_CHECK
 260:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * </pre>
 261:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * within the library project settings.  By default this macro is defined
 262:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * and size checking is enabled.  By changing the project settings and
 263:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * undefining this macro size checking is eliminated and the functions
 264:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * run a bit faster.  With size checking disabled the functions always
 265:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * return <code>ARM_MATH_SUCCESS</code>.
 266:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  */
 267:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 268:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /**
 269:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * @defgroup groupTransforms Transform Functions
 270:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  */
 271:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 272:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /**
 273:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * @defgroup groupController Controller Functions
 274:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  */
 275:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 276:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /**
 277:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * @defgroup groupStats Statistics Functions
 278:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  */
 279:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /**
 280:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * @defgroup groupSupport Support Functions
 281:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  */
 282:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 283:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /**
 284:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * @defgroup groupInterpolation Interpolation Functions
 285:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * These functions perform 1- and 2-dimensional interpolation of data.
 286:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * Linear interpolation is used for 1-dimensional data and
 287:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * bilinear interpolation is used for 2-dimensional data.
 288:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  */
 289:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 290:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /**
 291:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  * @defgroup groupExamples Examples
 292:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****  */
 293:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #ifndef _ARM_MATH_H
 294:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #define _ARM_MATH_H
 295:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 296:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /* ignore some GCC warnings */
 297:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #if defined ( __GNUC__ )
 298:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #pragma GCC diagnostic push
 299:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
 300:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #pragma GCC diagnostic ignored "-Wconversion"
 301:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
 302:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #endif
 303:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 304:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #define __CMSIS_GENERIC         /* disable NVIC and Systick functions */
 305:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 306:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #if defined(ARM_MATH_CM7)
 307:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #include "core_cm7.h"
 308:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define ARM_MATH_DSP
 309:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #elif defined (ARM_MATH_CM4)
 310:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #include "core_cm4.h"
 311:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define ARM_MATH_DSP
 312:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #elif defined (ARM_MATH_CM3)
 313:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #include "core_cm3.h"
 314:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #elif defined (ARM_MATH_CM0)
 315:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #include "core_cm0.h"
 316:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 317:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #elif defined (ARM_MATH_CM0PLUS)
 318:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #include "core_cm0plus.h"
 319:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 320:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #elif defined (ARM_MATH_ARMV8MBL)
 321:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #include "core_armv8mbl.h"
 322:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 323:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #elif defined (ARM_MATH_ARMV8MML)
 324:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #include "core_armv8mml.h"
 325:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #if (defined (__DSP_PRESENT) && (__DSP_PRESENT == 1))
 326:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     #define ARM_MATH_DSP
 327:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #endif
 328:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #else
 329:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #error "Define according the used Cortex core ARM_MATH_CM7, ARM_MATH_CM4, ARM_MATH_CM3, ARM_MATH_
 330:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #endif
 331:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 332:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #undef  __CMSIS_GENERIC         /* enable NVIC and Systick functions */
 333:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #include "string.h"
 334:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #include "math.h"
 335:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #ifdef   __cplusplus
 336:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** extern "C"
 337:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** {
 338:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #endif
 339:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 340:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 341:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
 342:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Macros required for reciprocal calculation in Normalized LMS
 343:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 344:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 345:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #define DELTA_Q31          (0x100)
 346:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #define DELTA_Q15          0x5
 347:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #define INDEX_MASK         0x0000003F
 348:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #ifndef PI
 349:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define PI               3.14159265358979f
 350:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #endif
 351:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 352:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
 353:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Macros required for SINE and COSINE Fast math approximations
 354:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 355:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 356:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #define FAST_MATH_TABLE_SIZE  512
 357:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #define FAST_MATH_Q31_SHIFT   (32 - 10)
 358:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #define FAST_MATH_Q15_SHIFT   (16 - 10)
 359:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #define CONTROLLER_Q31_SHIFT  (32 - 9)
 360:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #define TABLE_SPACING_Q31     0x400000
 361:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #define TABLE_SPACING_Q15     0x80
 362:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 363:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
 364:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Macros required for SINE and COSINE Controller functions
 365:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 366:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /* 1.31(q31) Fixed value of 2/360 */
 367:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /* -1 to +1 is divided into 360 values so total spacing is (2/360) */
 368:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #define INPUT_SPACING         0xB60B61
 369:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 370:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
 371:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Macro for Unaligned Support
 372:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 373:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #ifndef UNALIGNED_SUPPORT_DISABLE
 374:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     #define ALIGN4
 375:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #else
 376:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #if defined  (__GNUC__)
 377:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     #define ALIGN4 __attribute__((aligned(4)))
 378:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #else
 379:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     #define ALIGN4 __align(4)
 380:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #endif
 381:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #endif   /* #ifndef UNALIGNED_SUPPORT_DISABLE */
 382:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 383:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
 384:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Error status returned by some functions in the library.
 385:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 386:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 387:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef enum
 388:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
 389:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     ARM_MATH_SUCCESS = 0,                /**< No error */
 390:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     ARM_MATH_ARGUMENT_ERROR = -1,        /**< One or more arguments are incorrect */
 391:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     ARM_MATH_LENGTH_ERROR = -2,          /**< Length of data buffer is incorrect */
 392:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     ARM_MATH_SIZE_MISMATCH = -3,         /**< Size of matrices is not compatible with the operation
 393:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     ARM_MATH_NANINF = -4,                /**< Not-a-number (NaN) or infinity is generated */
 394:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     ARM_MATH_SINGULAR = -5,              /**< Generated by matrix inversion if the input matrix is 
 395:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     ARM_MATH_TEST_FAILURE = -6           /**< Test Failed  */
 396:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   } arm_status;
 397:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 398:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
 399:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief 8-bit fractional data type in 1.7 format.
 400:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 401:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef int8_t q7_t;
 402:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 403:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
 404:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief 16-bit fractional data type in 1.15 format.
 405:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 406:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef int16_t q15_t;
 407:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 408:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
 409:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief 32-bit fractional data type in 1.31 format.
 410:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 411:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef int32_t q31_t;
 412:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 413:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
 414:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief 64-bit fractional data type in 1.63 format.
 415:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 416:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef int64_t q63_t;
 417:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 418:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
 419:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief 32-bit floating-point type definition.
 420:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 421:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef float float32_t;
 422:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 423:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
 424:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief 64-bit floating-point type definition.
 425:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 426:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   typedef double float64_t;
 427:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 428:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
 429:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief definition to read/write two 16 bit values.
 430:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 431:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #if   defined ( __CC_ARM )
 432:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 433:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 434:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 435:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 436:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #elif defined ( __ARMCC_VERSION ) && ( __ARMCC_VERSION >= 6010050 )
 437:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define __SIMD32_TYPE int32_t
 438:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 439:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 440:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 441:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #elif defined ( __GNUC__ )
 442:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define __SIMD32_TYPE int32_t
 443:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 444:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 445:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 446:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #elif defined ( __ICCARM__ )
 447:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 448:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define CMSIS_UNUSED
 449:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define CMSIS_INLINE
 450:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 451:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #elif defined ( __TI_ARM__ )
 452:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define __SIMD32_TYPE int32_t
 453:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 454:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define CMSIS_INLINE
 455:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 456:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #elif defined ( __CSMC__ )
 457:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define __SIMD32_TYPE int32_t
 458:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define CMSIS_UNUSED
 459:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define CMSIS_INLINE
 460:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 461:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #elif defined ( __TASKING__ )
 462:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define __SIMD32_TYPE __unaligned int32_t
 463:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define CMSIS_UNUSED
 464:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #define CMSIS_INLINE
 465:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 466:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #else
 467:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   #error Unknown compiler
 468:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #endif
 469:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 470:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #define __SIMD32(addr)        (*(__SIMD32_TYPE **) & (addr))
 471:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #define __SIMD32_CONST(addr)  ((__SIMD32_TYPE *)(addr))
 472:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #define _SIMD32_OFFSET(addr)  (*(__SIMD32_TYPE *)  (addr))
 473:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #define __SIMD64(addr)        (*(int64_t **) & (addr))
 474:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 475:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /* #if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 476:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #if !defined (ARM_MATH_DSP)
 477:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
 478:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief definition to pack two 16 bit values.
 479:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 480:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #define __PKHBT(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0x0000FFFF) | \
 481:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****                                     (((int32_t)(ARG2) << ARG3) & (int32_t)0xFFFF0000)  )
 482:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #define __PKHTB(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0xFFFF0000) | \
 483:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****                                     (((int32_t)(ARG2) >> ARG3) & (int32_t)0x0000FFFF)  )
 484:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 485:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** /* #endif // defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 486:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #endif /* !defined (ARM_MATH_DSP) */
 487:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 488:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    /**
 489:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief definition to pack four 8 bit values.
 490:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 491:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #ifndef ARM_MATH_BIG_ENDIAN
 492:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 493:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v0) <<  0) & (int32_t)0x000000FF) | \
 494:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****                                 (((int32_t)(v1) <<  8) & (int32_t)0x0000FF00) | \
 495:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****                                 (((int32_t)(v2) << 16) & (int32_t)0x00FF0000) | \
 496:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****                                 (((int32_t)(v3) << 24) & (int32_t)0xFF000000)  )
 497:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #else
 498:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 499:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v3) <<  0) & (int32_t)0x000000FF) | \
 500:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****                                 (((int32_t)(v2) <<  8) & (int32_t)0x0000FF00) | \
 501:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****                                 (((int32_t)(v1) << 16) & (int32_t)0x00FF0000) | \
 502:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****                                 (((int32_t)(v0) << 24) & (int32_t)0xFF000000)  )
 503:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 504:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** #endif
 505:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 506:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h **** 
 507:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   /**
 508:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    * @brief Clips Q63 to Q31 values.
 509:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****    */
 510:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t clip_q63_to_q31(
 511:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   q63_t x)
 512:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****   {
 513:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 374              	 .loc 2 513 0
 375 0366 D7E92A23 	 ldrd r2,[r7,#168]
 376 036a 1900     	 movs r1,r3
 377 036c 3964     	 str r1,[r7,#64]
 378 036e DB17     	 asrs r3,r3,#31
 379 0370 7B64     	 str r3,[r7,#68]
 380 0372 3A6C     	 ldr r2,[r7,#64]
 381 0374 D7F8A830 	 ldr r3,[r7,#168]
 382 0378 DB17     	 asrs r3,r3,#31
 514:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 383              	 .loc 2 514 0
 384 037a 9A42     	 cmp r2,r3
 385 037c 0AD0     	 beq .L8
 386 037e D7E92A23 	 ldrd r2,[r7,#168]
 387 0382 4FEAE37A 	 asr r10,r3,#31
 388 0386 4FEAE37B 	 asr fp,r3,#31
 389 038a 5346     	 mov r3,r10
 390 038c 83F00042 	 eor r2,r3,#-2147483648
 391 0390 D243     	 mvns r2,r2
 392 0392 01E0     	 b .L10
 393              	.L8:
 394 0394 D7F8A820 	 ldr r2,[r7,#168]
 395              	.L10:
 396              	.LBE13:
 397              	.LBE12:
 398              	 .loc 1 185 0
 399 0398 D7F8E830 	 ldr r3,[r7,#232]
 400 039c 1A60     	 str r2,[r3]
 186:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       /* update coefficient buffer to next coefficient */
 187:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       pb++;
 401              	 .loc 1 187 0
 402 039e D7F8E830 	 ldr r3,[r7,#232]
 403 03a2 0433     	 adds r3,r3,#4
 404 03a4 C7F8E830 	 str r3,[r7,#232]
 188:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 189:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       coef = (q31_t) (((q63_t) alpha * (*px++)) >> (32));
 405              	 .loc 1 189 0
 406 03a8 D7F8B430 	 ldr r3,[r7,#180]
 407 03ac 1C46     	 mov r4,r3
 408 03ae 4FEAE475 	 asr r5,r4,#31
 409 03b2 D7F8EC20 	 ldr r2,[r7,#236]
 410 03b6 131D     	 adds r3,r2,#4
 411 03b8 C7F8EC30 	 str r3,[r7,#236]
 412 03bc 1368     	 ldr r3,[r2]
 413 03be 1A46     	 mov r2,r3
 414 03c0 4FEAE273 	 asr r3,r2,#31
 415 03c4 02FB05F0 	 mul r0,r2,r5
 416 03c8 04FB03F1 	 mul r1,r4,r3
 417 03cc 0144     	 add r1,r1,r0
 418 03ce A4FB0223 	 umull r2,r3,r4,r2
 419 03d2 1944     	 add r1,r1,r3
 420 03d4 0B46     	 mov r3,r1
 421 03d6 1900     	 movs r1,r3
 422 03d8 3966     	 str r1,[r7,#96]
 423 03da DB17     	 asrs r3,r3,#31
 424 03dc 7B66     	 str r3,[r7,#100]
 425 03de 3B6E     	 ldr r3,[r7,#96]
 426 03e0 C7F8B030 	 str r3,[r7,#176]
 190:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       *pb = clip_q63_to_q31((q63_t) * pb + (coef << 1u));
 427              	 .loc 1 190 0
 428 03e4 D7F8E830 	 ldr r3,[r7,#232]
 429 03e8 1B68     	 ldr r3,[r3]
 430 03ea 1846     	 mov r0,r3
 431 03ec 4FEAE071 	 asr r1,r0,#31
 432 03f0 D7F8B030 	 ldr r3,[r7,#176]
 433 03f4 5B00     	 lsls r3,r3,#1
 434 03f6 1A46     	 mov r2,r3
 435 03f8 4FEAE273 	 asr r3,r2,#31
 436 03fc 1218     	 adds r2,r2,r0
 437 03fe 43EB0103 	 adc r3,r3,r1
 438 0402 C7E92823 	 strd r2,[r7,#160]
 439              	.LBB14:
 440              	.LBB15:
 513:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 441              	 .loc 2 513 0
 442 0406 D7E92823 	 ldrd r2,[r7,#160]
 443 040a 1900     	 movs r1,r3
 444 040c B963     	 str r1,[r7,#56]
 445 040e DB17     	 asrs r3,r3,#31
 446 0410 FB63     	 str r3,[r7,#60]
 447 0412 BA6B     	 ldr r2,[r7,#56]
 448 0414 D7F8A030 	 ldr r3,[r7,#160]
 449 0418 DB17     	 asrs r3,r3,#31
 450              	 .loc 2 514 0
 451 041a 9A42     	 cmp r2,r3
 452 041c 0AD0     	 beq .L11
 453 041e D7E92823 	 ldrd r2,[r7,#160]
 454 0422 D917     	 asrs r1,r3,#31
 455 0424 3963     	 str r1,[r7,#48]
 456 0426 DB17     	 asrs r3,r3,#31
 457 0428 7B63     	 str r3,[r7,#52]
 458 042a 3B6B     	 ldr r3,[r7,#48]
 459 042c 83F00042 	 eor r2,r3,#-2147483648
 460 0430 D243     	 mvns r2,r2
 461 0432 01E0     	 b .L13
 462              	.L11:
 463 0434 D7F8A020 	 ldr r2,[r7,#160]
 464              	.L13:
 465              	.LBE15:
 466              	.LBE14:
 467              	 .loc 1 190 0
 468 0438 D7F8E830 	 ldr r3,[r7,#232]
 469 043c 1A60     	 str r2,[r3]
 191:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       pb++;
 470              	 .loc 1 191 0
 471 043e D7F8E830 	 ldr r3,[r7,#232]
 472 0442 0433     	 adds r3,r3,#4
 473 0444 C7F8E830 	 str r3,[r7,#232]
 192:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 193:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       coef = (q31_t) (((q63_t) alpha * (*px++)) >> (32));
 474              	 .loc 1 193 0
 475 0448 D7F8B430 	 ldr r3,[r7,#180]
 476 044c 1C46     	 mov r4,r3
 477 044e 4FEAE475 	 asr r5,r4,#31
 478 0452 D7F8EC20 	 ldr r2,[r7,#236]
 479 0456 131D     	 adds r3,r2,#4
 480 0458 C7F8EC30 	 str r3,[r7,#236]
 481 045c 1368     	 ldr r3,[r2]
 482 045e 1A46     	 mov r2,r3
 483 0460 4FEAE273 	 asr r3,r2,#31
 484 0464 02FB05F0 	 mul r0,r2,r5
 485 0468 04FB03F1 	 mul r1,r4,r3
 486 046c 0144     	 add r1,r1,r0
 487 046e A4FB0223 	 umull r2,r3,r4,r2
 488 0472 1944     	 add r1,r1,r3
 489 0474 0B46     	 mov r3,r1
 490 0476 1900     	 movs r1,r3
 491 0478 B965     	 str r1,[r7,#88]
 492 047a DB17     	 asrs r3,r3,#31
 493 047c FB65     	 str r3,[r7,#92]
 494 047e BB6D     	 ldr r3,[r7,#88]
 495 0480 C7F8B030 	 str r3,[r7,#176]
 194:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       *pb = clip_q63_to_q31((q63_t) * pb + (coef << 1u));
 496              	 .loc 1 194 0
 497 0484 D7F8E830 	 ldr r3,[r7,#232]
 498 0488 1B68     	 ldr r3,[r3]
 499 048a 1846     	 mov r0,r3
 500 048c 4FEAE071 	 asr r1,r0,#31
 501 0490 D7F8B030 	 ldr r3,[r7,#176]
 502 0494 5B00     	 lsls r3,r3,#1
 503 0496 1A46     	 mov r2,r3
 504 0498 4FEAE273 	 asr r3,r2,#31
 505 049c 1218     	 adds r2,r2,r0
 506 049e 43EB0103 	 adc r3,r3,r1
 507 04a2 C7E92623 	 strd r2,[r7,#152]
 508              	.LBB16:
 509              	.LBB17:
 513:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 510              	 .loc 2 513 0
 511 04a6 D7E92623 	 ldrd r2,[r7,#152]
 512 04aa 1900     	 movs r1,r3
 513 04ac B962     	 str r1,[r7,#40]
 514 04ae DB17     	 asrs r3,r3,#31
 515 04b0 FB62     	 str r3,[r7,#44]
 516 04b2 BA6A     	 ldr r2,[r7,#40]
 517 04b4 D7F89830 	 ldr r3,[r7,#152]
 518 04b8 DB17     	 asrs r3,r3,#31
 519              	 .loc 2 514 0
 520 04ba 9A42     	 cmp r2,r3
 521 04bc 0AD0     	 beq .L14
 522 04be D7E92623 	 ldrd r2,[r7,#152]
 523 04c2 D917     	 asrs r1,r3,#31
 524 04c4 3962     	 str r1,[r7,#32]
 525 04c6 DB17     	 asrs r3,r3,#31
 526 04c8 7B62     	 str r3,[r7,#36]
 527 04ca 3B6A     	 ldr r3,[r7,#32]
 528 04cc 83F00042 	 eor r2,r3,#-2147483648
 529 04d0 D243     	 mvns r2,r2
 530 04d2 01E0     	 b .L16
 531              	.L14:
 532 04d4 D7F89820 	 ldr r2,[r7,#152]
 533              	.L16:
 534              	.LBE17:
 535              	.LBE16:
 536              	 .loc 1 194 0
 537 04d8 D7F8E830 	 ldr r3,[r7,#232]
 538 04dc 1A60     	 str r2,[r3]
 195:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       pb++;
 539              	 .loc 1 195 0
 540 04de D7F8E830 	 ldr r3,[r7,#232]
 541 04e2 0433     	 adds r3,r3,#4
 542 04e4 C7F8E830 	 str r3,[r7,#232]
 196:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 197:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       coef = (q31_t) (((q63_t) alpha * (*px++)) >> (32));
 543              	 .loc 1 197 0
 544 04e8 D7F8B430 	 ldr r3,[r7,#180]
 545 04ec 1C46     	 mov r4,r3
 546 04ee 4FEAE475 	 asr r5,r4,#31
 547 04f2 D7F8EC20 	 ldr r2,[r7,#236]
 548 04f6 131D     	 adds r3,r2,#4
 549 04f8 C7F8EC30 	 str r3,[r7,#236]
 550 04fc 1368     	 ldr r3,[r2]
 551 04fe 1A46     	 mov r2,r3
 552 0500 4FEAE273 	 asr r3,r2,#31
 553 0504 02FB05F0 	 mul r0,r2,r5
 554 0508 04FB03F1 	 mul r1,r4,r3
 555 050c 0144     	 add r1,r1,r0
 556 050e A4FB0223 	 umull r2,r3,r4,r2
 557 0512 1944     	 add r1,r1,r3
 558 0514 0B46     	 mov r3,r1
 559 0516 1900     	 movs r1,r3
 560 0518 3965     	 str r1,[r7,#80]
 561 051a DB17     	 asrs r3,r3,#31
 562 051c 7B65     	 str r3,[r7,#84]
 563 051e 3B6D     	 ldr r3,[r7,#80]
 564 0520 C7F8B030 	 str r3,[r7,#176]
 198:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       *pb = clip_q63_to_q31((q63_t) * pb + (coef << 1u));
 565              	 .loc 1 198 0
 566 0524 D7F8E830 	 ldr r3,[r7,#232]
 567 0528 1B68     	 ldr r3,[r3]
 568 052a 1846     	 mov r0,r3
 569 052c 4FEAE071 	 asr r1,r0,#31
 570 0530 D7F8B030 	 ldr r3,[r7,#176]
 571 0534 5B00     	 lsls r3,r3,#1
 572 0536 1A46     	 mov r2,r3
 573 0538 4FEAE273 	 asr r3,r2,#31
 574 053c 1218     	 adds r2,r2,r0
 575 053e 43EB0103 	 adc r3,r3,r1
 576 0542 C7E92423 	 strd r2,[r7,#144]
 577              	.LBB18:
 578              	.LBB19:
 513:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 579              	 .loc 2 513 0
 580 0546 D7E92423 	 ldrd r2,[r7,#144]
 581 054a 1900     	 movs r1,r3
 582 054c B961     	 str r1,[r7,#24]
 583 054e DB17     	 asrs r3,r3,#31
 584 0550 FB61     	 str r3,[r7,#28]
 585 0552 BA69     	 ldr r2,[r7,#24]
 586 0554 D7F89030 	 ldr r3,[r7,#144]
 587 0558 DB17     	 asrs r3,r3,#31
 588              	 .loc 2 514 0
 589 055a 9A42     	 cmp r2,r3
 590 055c 0AD0     	 beq .L17
 591 055e D7E92423 	 ldrd r2,[r7,#144]
 592 0562 D917     	 asrs r1,r3,#31
 593 0564 3961     	 str r1,[r7,#16]
 594 0566 DB17     	 asrs r3,r3,#31
 595 0568 7B61     	 str r3,[r7,#20]
 596 056a 3B69     	 ldr r3,[r7,#16]
 597 056c 83F00042 	 eor r2,r3,#-2147483648
 598 0570 D243     	 mvns r2,r2
 599 0572 01E0     	 b .L31
 600              	.L17:
 601 0574 D7F89020 	 ldr r2,[r7,#144]
 602              	.L31:
 603              	.LBE19:
 604              	.LBE18:
 605              	 .loc 1 198 0
 606 0578 D7F8E830 	 ldr r3,[r7,#232]
 607 057c 1A60     	 str r2,[r3]
 199:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       pb++;
 608              	 .loc 1 199 0
 609 057e D7F8E830 	 ldr r3,[r7,#232]
 610 0582 0433     	 adds r3,r3,#4
 611 0584 C7F8E830 	 str r3,[r7,#232]
 200:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 201:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       /* Decrement the loop counter */
 202:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       tapCnt--;
 612              	 .loc 1 202 0
 613 0588 D7F8E430 	 ldr r3,[r7,#228]
 614 058c 013B     	 subs r3,r3,#1
 615 058e C7F8E430 	 str r3,[r7,#228]
 616              	.L7:
 180:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     {
 617              	 .loc 1 180 0
 618 0592 D7F8E430 	 ldr r3,[r7,#228]
 619 0596 002B     	 cmp r3,#0
 620 0598 7FF4B6AE 	 bne .L20
 203:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     }
 204:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 205:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     /* If the filter length is not a multiple of 4, compute the remaining filter taps */
 206:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     tapCnt = numTaps % 0x4u;
 621              	 .loc 1 206 0
 622 059c D7F8D430 	 ldr r3,[r7,#212]
 623 05a0 03F00303 	 and r3,r3,#3
 624 05a4 C7F8E430 	 str r3,[r7,#228]
 207:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 208:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     while (tapCnt > 0u)
 625              	 .loc 1 208 0
 626 05a8 54E0     	 b .L21
 627              	.L25:
 209:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     {
 210:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       /* Perform the multiply-accumulate */
 211:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       coef = (q31_t) (((q63_t) alpha * (*px++)) >> (32));
 628              	 .loc 1 211 0
 629 05aa D7F8B430 	 ldr r3,[r7,#180]
 630 05ae 1C46     	 mov r4,r3
 631 05b0 4FEAE475 	 asr r5,r4,#31
 632 05b4 D7F8EC20 	 ldr r2,[r7,#236]
 633 05b8 131D     	 adds r3,r2,#4
 634 05ba C7F8EC30 	 str r3,[r7,#236]
 635 05be 1368     	 ldr r3,[r2]
 636 05c0 1A46     	 mov r2,r3
 637 05c2 4FEAE273 	 asr r3,r2,#31
 638 05c6 02FB05F0 	 mul r0,r2,r5
 639 05ca 04FB03F1 	 mul r1,r4,r3
 640 05ce 0144     	 add r1,r1,r0
 641 05d0 A4FB0223 	 umull r2,r3,r4,r2
 642 05d4 1944     	 add r1,r1,r3
 643 05d6 0B46     	 mov r3,r1
 644 05d8 1900     	 movs r1,r3
 645 05da B964     	 str r1,[r7,#72]
 646 05dc DB17     	 asrs r3,r3,#31
 647 05de FB64     	 str r3,[r7,#76]
 648 05e0 BB6C     	 ldr r3,[r7,#72]
 649 05e2 C7F8B030 	 str r3,[r7,#176]
 212:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       *pb = clip_q63_to_q31((q63_t) * pb + (coef << 1u));
 650              	 .loc 1 212 0
 651 05e6 D7F8E830 	 ldr r3,[r7,#232]
 652 05ea 1B68     	 ldr r3,[r3]
 653 05ec 1846     	 mov r0,r3
 654 05ee 4FEAE071 	 asr r1,r0,#31
 655 05f2 D7F8B030 	 ldr r3,[r7,#176]
 656 05f6 5B00     	 lsls r3,r3,#1
 657 05f8 1A46     	 mov r2,r3
 658 05fa 4FEAE273 	 asr r3,r2,#31
 659 05fe 1218     	 adds r2,r2,r0
 660 0600 43EB0103 	 adc r3,r3,r1
 661 0604 C7E92223 	 strd r2,[r7,#136]
 662              	.LBB20:
 663              	.LBB21:
 513:C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP\arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 664              	 .loc 2 513 0
 665 0608 D7E92223 	 ldrd r2,[r7,#136]
 666 060c 1900     	 movs r1,r3
 667 060e B960     	 str r1,[r7,#8]
 668 0610 DB17     	 asrs r3,r3,#31
 669 0612 FB60     	 str r3,[r7,#12]
 670 0614 BA68     	 ldr r2,[r7,#8]
 671 0616 D7F88830 	 ldr r3,[r7,#136]
 672 061a DB17     	 asrs r3,r3,#31
 673              	 .loc 2 514 0
 674 061c 9A42     	 cmp r2,r3
 675 061e 0AD0     	 beq .L22
 676 0620 D7E92223 	 ldrd r2,[r7,#136]
 677 0624 D917     	 asrs r1,r3,#31
 678 0626 3960     	 str r1,[r7]
 679 0628 DB17     	 asrs r3,r3,#31
 680 062a 7B60     	 str r3,[r7,#4]
 681 062c 3B68     	 ldr r3,[r7]
 682 062e 83F00042 	 eor r2,r3,#-2147483648
 683 0632 D243     	 mvns r2,r2
 684 0634 01E0     	 b .L32
 685              	.L22:
 686 0636 D7F88820 	 ldr r2,[r7,#136]
 687              	.L32:
 688              	.LBE21:
 689              	.LBE20:
 690              	 .loc 1 212 0
 691 063a D7F8E830 	 ldr r3,[r7,#232]
 692 063e 1A60     	 str r2,[r3]
 213:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       pb++;
 693              	 .loc 1 213 0
 694 0640 D7F8E830 	 ldr r3,[r7,#232]
 695 0644 0433     	 adds r3,r3,#4
 696 0646 C7F8E830 	 str r3,[r7,#232]
 214:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 215:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       /* Decrement the loop counter */
 216:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       tapCnt--;
 697              	 .loc 1 216 0
 698 064a D7F8E430 	 ldr r3,[r7,#228]
 699 064e 013B     	 subs r3,r3,#1
 700 0650 C7F8E430 	 str r3,[r7,#228]
 701              	.L21:
 208:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     {
 702              	 .loc 1 208 0
 703 0654 D7F8E430 	 ldr r3,[r7,#228]
 704 0658 002B     	 cmp r3,#0
 705 065a A6D1     	 bne .L25
 217:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     }
 218:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 219:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     /* Decrement the loop counter */
 220:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     blkCnt--;
 706              	 .loc 1 220 0
 707 065c D7F8E030 	 ldr r3,[r7,#224]
 708 0660 013B     	 subs r3,r3,#1
 709 0662 C7F8E030 	 str r3,[r7,#224]
 710              	.L2:
 101:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   {
 711              	 .loc 1 101 0
 712 0666 D7F8E030 	 ldr r3,[r7,#224]
 713 066a 002B     	 cmp r3,#0
 714 066c 7FF406AD 	 bne .L26
 221:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   }
 222:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 223:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   /* Processing is complete. Now copy the last numTaps - 1 samples to the
 224:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****      satrt of the state buffer. This prepares the state buffer for the
 225:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****      next function call. */
 226:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 227:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   /* Points to the start of the pState buffer */
 228:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   pStateCurnt = S->pState;
 715              	 .loc 1 228 0
 716 0670 D7F88430 	 ldr r3,[r7,#132]
 717 0674 5B68     	 ldr r3,[r3,#4]
 718 0676 C7F8F030 	 str r3,[r7,#240]
 229:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 230:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   /* Loop unrolling for (numTaps - 1u) samples copy */
 231:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   tapCnt = (numTaps - 1u) >> 2u;
 719              	 .loc 1 231 0
 720 067a D7F8D430 	 ldr r3,[r7,#212]
 721 067e 013B     	 subs r3,r3,#1
 722 0680 9B08     	 lsrs r3,r3,#2
 723 0682 C7F8E430 	 str r3,[r7,#228]
 232:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 233:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   /* copy data */
 234:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   while (tapCnt > 0u)
 724              	 .loc 1 234 0
 725 0686 34E0     	 b .L27
 726              	.L28:
 235:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   {
 236:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     *pStateCurnt++ = *pState++;
 727              	 .loc 1 236 0
 728 0688 D7F8F030 	 ldr r3,[r7,#240]
 729 068c 1A1D     	 adds r2,r3,#4
 730 068e C7F8F020 	 str r2,[r7,#240]
 731 0692 D7F8F420 	 ldr r2,[r7,#244]
 732 0696 111D     	 adds r1,r2,#4
 733 0698 C7F8F410 	 str r1,[r7,#244]
 734 069c 1268     	 ldr r2,[r2]
 735 069e 1A60     	 str r2,[r3]
 237:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     *pStateCurnt++ = *pState++;
 736              	 .loc 1 237 0
 737 06a0 D7F8F030 	 ldr r3,[r7,#240]
 738 06a4 1A1D     	 adds r2,r3,#4
 739 06a6 C7F8F020 	 str r2,[r7,#240]
 740 06aa D7F8F420 	 ldr r2,[r7,#244]
 741 06ae 111D     	 adds r1,r2,#4
 742 06b0 C7F8F410 	 str r1,[r7,#244]
 743 06b4 1268     	 ldr r2,[r2]
 744 06b6 1A60     	 str r2,[r3]
 238:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     *pStateCurnt++ = *pState++;
 745              	 .loc 1 238 0
 746 06b8 D7F8F030 	 ldr r3,[r7,#240]
 747 06bc 1A1D     	 adds r2,r3,#4
 748 06be C7F8F020 	 str r2,[r7,#240]
 749 06c2 D7F8F420 	 ldr r2,[r7,#244]
 750 06c6 111D     	 adds r1,r2,#4
 751 06c8 C7F8F410 	 str r1,[r7,#244]
 752 06cc 1268     	 ldr r2,[r2]
 753 06ce 1A60     	 str r2,[r3]
 239:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     *pStateCurnt++ = *pState++;
 754              	 .loc 1 239 0
 755 06d0 D7F8F030 	 ldr r3,[r7,#240]
 756 06d4 1A1D     	 adds r2,r3,#4
 757 06d6 C7F8F020 	 str r2,[r7,#240]
 758 06da D7F8F420 	 ldr r2,[r7,#244]
 759 06de 111D     	 adds r1,r2,#4
 760 06e0 C7F8F410 	 str r1,[r7,#244]
 761 06e4 1268     	 ldr r2,[r2]
 762 06e6 1A60     	 str r2,[r3]
 240:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 241:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     /* Decrement the loop counter */
 242:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     tapCnt--;
 763              	 .loc 1 242 0
 764 06e8 D7F8E430 	 ldr r3,[r7,#228]
 765 06ec 013B     	 subs r3,r3,#1
 766 06ee C7F8E430 	 str r3,[r7,#228]
 767              	.L27:
 234:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   {
 768              	 .loc 1 234 0
 769 06f2 D7F8E430 	 ldr r3,[r7,#228]
 770 06f6 002B     	 cmp r3,#0
 771 06f8 C6D1     	 bne .L28
 243:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   }
 244:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 245:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   /* Calculate remaining number of copies */
 246:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   tapCnt = (numTaps - 1u) % 0x4u;
 772              	 .loc 1 246 0
 773 06fa D7F8D430 	 ldr r3,[r7,#212]
 774 06fe 013B     	 subs r3,r3,#1
 775 0700 03F00303 	 and r3,r3,#3
 776 0704 C7F8E430 	 str r3,[r7,#228]
 247:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 248:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   /* Copy the remaining q31_t data */
 249:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   while (tapCnt > 0u)
 777              	 .loc 1 249 0
 778 0708 10E0     	 b .L29
 779              	.L30:
 250:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   {
 251:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     *pStateCurnt++ = *pState++;
 780              	 .loc 1 251 0
 781 070a D7F8F030 	 ldr r3,[r7,#240]
 782 070e 1A1D     	 adds r2,r3,#4
 783 0710 C7F8F020 	 str r2,[r7,#240]
 784 0714 D7F8F420 	 ldr r2,[r7,#244]
 785 0718 111D     	 adds r1,r2,#4
 786 071a C7F8F410 	 str r1,[r7,#244]
 787 071e 1268     	 ldr r2,[r2]
 788 0720 1A60     	 str r2,[r3]
 252:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 253:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     /* Decrement the loop counter */
 254:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     tapCnt--;
 789              	 .loc 1 254 0
 790 0722 D7F8E430 	 ldr r3,[r7,#228]
 791 0726 013B     	 subs r3,r3,#1
 792 0728 C7F8E430 	 str r3,[r7,#228]
 793              	.L29:
 249:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   {
 794              	 .loc 1 249 0
 795 072c D7F8E430 	 ldr r3,[r7,#228]
 796 0730 002B     	 cmp r3,#0
 797 0732 EAD1     	 bne .L30
 255:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   }
 256:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 257:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** #else
 258:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 259:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   /* Run the below code for Cortex-M0 */
 260:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 261:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   while (blkCnt > 0u)
 262:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   {
 263:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     /* Copy the new input sample into the state buffer */
 264:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     *pStateCurnt++ = *pSrc++;
 265:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 266:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     /* Initialize pState pointer */
 267:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     px = pState;
 268:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 269:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     /* Initialize pCoeffs pointer */
 270:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     pb = pCoeffs;
 271:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 272:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     /* Set the accumulator to zero */
 273:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     acc = 0;
 274:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 275:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     /* Loop over numTaps number of values */
 276:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     tapCnt = numTaps;
 277:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 278:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     while (tapCnt > 0u)
 279:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     {
 280:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       /* Perform the multiply-accumulate */
 281:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       acc += ((q63_t) (*px++)) * (*pb++);
 282:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 283:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       /* Decrement the loop counter */
 284:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       tapCnt--;
 285:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     }
 286:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 287:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     /* Converting the result to 1.31 format */
 288:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     /* Store the result from accumulator into the destination buffer. */
 289:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     /* Calc lower part of acc */
 290:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     acc_l = acc & 0xffffffff;
 291:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 292:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     /* Calc upper part of acc */
 293:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     acc_h = (acc >> 32) & 0xffffffff;
 294:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 295:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     acc = (uint32_t) acc_l >> lShift | acc_h << uShift;
 296:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 297:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     *pOut++ = (q31_t) acc;
 298:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 299:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     /* Compute and store error */
 300:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     e = *pRef++ - (q31_t) acc;
 301:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 302:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     *pErr++ = (q31_t) e;
 303:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 304:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     /* Weighting factor for the LMS version */
 305:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     alpha = (q31_t) (((q63_t) e * mu) >> 31);
 306:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 307:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     /* Initialize pState pointer */
 308:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     /* Advance state pointer by 1 for the next sample */
 309:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     px = pState++;
 310:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 311:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     /* Initialize pCoeffs pointer */
 312:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     pb = pCoeffs;
 313:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 314:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     /* Loop over numTaps number of values */
 315:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     tapCnt = numTaps;
 316:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 317:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     while (tapCnt > 0u)
 318:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     {
 319:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       /* Perform the multiply-accumulate */
 320:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       coef = (q31_t) (((q63_t) alpha * (*px++)) >> (32));
 321:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       *pb = clip_q63_to_q31((q63_t) * pb + (coef << 1u));
 322:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       pb++;
 323:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 324:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       /* Decrement the loop counter */
 325:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****       tapCnt--;
 326:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     }
 327:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 328:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     /* Decrement the loop counter */
 329:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     blkCnt--;
 330:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   }
 331:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 332:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   /* Processing is complete. Now copy the last numTaps - 1 samples to the
 333:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****      start of the state buffer. This prepares the state buffer for the
 334:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****      next function call. */
 335:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 336:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   /* Points to the start of the pState buffer */
 337:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   pStateCurnt = S->pState;
 338:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 339:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   /*  Copy (numTaps - 1u) samples  */
 340:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   tapCnt = (numTaps - 1u);
 341:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 342:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   /* Copy the data */
 343:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   while (tapCnt > 0u)
 344:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   {
 345:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     *pStateCurnt++ = *pState++;
 346:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 347:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     /* Decrement the loop counter */
 348:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****     tapCnt--;
 349:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c ****   }
 350:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 351:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** #endif /*   #if defined (ARM_MATH_DSP) */
 352:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** 
 353:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_q31.c **** }
 798              	 .loc 1 353 0
 799 0734 FC37     	 adds r7,r7,#252
 800              	.LCFI3:
 801              	 .cfi_def_cfa_offset 28
 802 0736 BD46     	 mov sp,r7
 803              	.LCFI4:
 804              	 .cfi_def_cfa_register 13
 805              	 
 806 0738 BDE8B00F 	 pop {r4,r5,r7,r8,r9,r10,fp}
 807              	.LCFI5:
 808              	 .cfi_restore 11
 809              	 .cfi_restore 10
 810              	 .cfi_restore 9
 811              	 .cfi_restore 8
 812              	 .cfi_restore 7
 813              	 .cfi_restore 5
 814              	 .cfi_restore 4
 815              	 .cfi_def_cfa_offset 0
 816 073c 7047     	 bx lr
 817              	 .cfi_endproc
 818              	.LFE135:
 820 073e 00BF     	 .text
 821              	.Letext0:
 822              	 .file 3 "c:\\program files (x86)\\dave\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 823              	 .file 4 "c:\\program files (x86)\\dave\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_lms_q31.c
    {standard input}:20     .text.arm_lms_q31:00000000 $t
    {standard input}:25     .text.arm_lms_q31:00000000 arm_lms_q31
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
