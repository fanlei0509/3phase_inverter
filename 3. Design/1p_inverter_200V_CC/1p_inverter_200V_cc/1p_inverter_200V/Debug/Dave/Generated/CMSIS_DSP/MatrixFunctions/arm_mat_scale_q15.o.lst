   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "arm_mat_scale_q15.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.arm_mat_scale_q15,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_mat_scale_q15
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_mat_scale_q15:
  26              	.LFB135:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c"
   1:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** /* ----------------------------------------------------------------------
   2:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * Project:      CMSIS DSP Library
   3:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * Title:        arm_mat_scale_q15.c
   4:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * Description:  Multiplies a Q15 matrix by a scalar
   5:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  *
   6:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * $Date:        27. January 2017
   7:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * $Revision:    V.1.5.1
   8:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  *
   9:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * Target Processor: Cortex-M cores
  10:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * -------------------------------------------------------------------- */
  11:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** /*
  12:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  *
  14:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * SPDX-License-Identifier: Apache-2.0
  15:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  *
  16:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * not use this file except in compliance with the License.
  18:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * You may obtain a copy of the License at
  19:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  *
  20:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  *
  22:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * Unless required by applicable law or agreed to in writing, software
  23:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * See the License for the specific language governing permissions and
  26:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * limitations under the License.
  27:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  */
  28:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
  29:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  30:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
  31:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** /**
  32:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * @ingroup groupMatrix
  33:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  */
  34:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
  35:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** /**
  36:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * @addtogroup MatrixScale
  37:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * @{
  38:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  */
  39:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
  40:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** /**
  41:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * @brief Q15 matrix scaling.
  42:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * @param[in]       *pSrc points to input matrix
  43:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * @param[in]       scaleFract fractional portion of the scale factor
  44:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * @param[in]       shift number of bits to shift the result by
  45:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * @param[out]      *pDst points to output matrix structure
  46:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * @return     		The function returns either
  47:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of siz
  48:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  *
  49:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * @details
  50:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * <b>Scaling and Overflow Behavior:</b>
  51:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * \par
  52:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * The input data <code>*pSrc</code> and <code>scaleFract</code> are in 1.15 format.
  53:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * These are multiplied to yield a 2.30 intermediate result and this is shifted with saturation to 
  54:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  */
  55:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
  56:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** arm_status arm_mat_scale_q15(
  57:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   const arm_matrix_instance_q15 * pSrc,
  58:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   q15_t scaleFract,
  59:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   int32_t shift,
  60:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   arm_matrix_instance_q15 * pDst)
  61:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** {
  28              	 .loc 1 61 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33 0000 80B4     	 push {r7}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 4
  36              	 .cfi_offset 7,-4
  37 0002 9FB0     	 sub sp,sp,#124
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 128
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
  43 0006 F860     	 str r0,[r7,#12]
  44 0008 7A60     	 str r2,[r7,#4]
  45 000a 3B60     	 str r3,[r7]
  46 000c 0B46     	 mov r3,r1
  47 000e 7B81     	 strh r3,[r7,#10]
  62:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   q15_t *pIn = pSrc->pData;                      /* input data matrix pointer */
  48              	 .loc 1 62 0
  49 0010 FB68     	 ldr r3,[r7,#12]
  50 0012 5B68     	 ldr r3,[r3,#4]
  51 0014 7B67     	 str r3,[r7,#116]
  63:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   q15_t *pOut = pDst->pData;                     /* output data matrix pointer */
  52              	 .loc 1 63 0
  53 0016 3B68     	 ldr r3,[r7]
  54 0018 5B68     	 ldr r3,[r3,#4]
  55 001a 3B67     	 str r3,[r7,#112]
  64:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   uint32_t numSamples;                           /* total number of elements in the matrix */
  65:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   int32_t totShift = 15 - shift;                 /* total shift to apply after scaling */
  56              	 .loc 1 65 0
  57 001c 7B68     	 ldr r3,[r7,#4]
  58 001e C3F10F03 	 rsb r3,r3,#15
  59 0022 7B66     	 str r3,[r7,#100]
  66:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   uint32_t blkCnt;                               /* loop counters */
  67:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   arm_status status;                             /* status of matrix scaling     */
  68:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
  69:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** #if defined (ARM_MATH_DSP)
  70:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
  71:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   q15_t in1, in2, in3, in4;
  72:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   q31_t out1, out2, out3, out4;
  73:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   q31_t inA1, inA2;
  74:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
  75:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** #endif //     #if defined (ARM_MATH_DSP)
  76:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
  77:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** #ifdef ARM_MATH_MATRIX_CHECK
  78:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   /* Check for matrix mismatch */
  79:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   if ((pSrc->numRows != pDst->numRows) || (pSrc->numCols != pDst->numCols))
  60              	 .loc 1 79 0
  61 0024 FB68     	 ldr r3,[r7,#12]
  62 0026 1A88     	 ldrh r2,[r3]
  63 0028 3B68     	 ldr r3,[r7]
  64 002a 1B88     	 ldrh r3,[r3]
  65 002c 9A42     	 cmp r2,r3
  66 002e 05D1     	 bne .L2
  67              	 .loc 1 79 0 is_stmt 0 discriminator 1
  68 0030 FB68     	 ldr r3,[r7,#12]
  69 0032 5A88     	 ldrh r2,[r3,#2]
  70 0034 3B68     	 ldr r3,[r7]
  71 0036 5B88     	 ldrh r3,[r3,#2]
  72 0038 9A42     	 cmp r2,r3
  73 003a 03D0     	 beq .L3
  74              	.L2:
  80:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   {
  81:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     /* Set status as ARM_MATH_SIZE_MISMATCH */
  82:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     status = ARM_MATH_SIZE_MISMATCH;
  75              	 .loc 1 82 0 is_stmt 1
  76 003c FD23     	 movs r3,#253
  77 003e 87F86B30 	 strb r3,[r7,#107]
  78 0042 B3E0     	 b .L4
  79              	.L3:
  83:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   }
  84:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   else
  85:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** #endif //    #ifdef ARM_MATH_MATRIX_CHECK
  86:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   {
  87:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     /* Total number of samples in the input matrix */
  88:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
  80              	 .loc 1 88 0
  81 0044 FB68     	 ldr r3,[r7,#12]
  82 0046 1B88     	 ldrh r3,[r3]
  83 0048 1A46     	 mov r2,r3
  84 004a FB68     	 ldr r3,[r7,#12]
  85 004c 5B88     	 ldrh r3,[r3,#2]
  86 004e 03FB02F3 	 mul r3,r3,r2
  87 0052 3B66     	 str r3,[r7,#96]
  89:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
  90:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** #if defined (ARM_MATH_DSP)
  91:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
  92:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     /* Run the below code for Cortex-M4 and Cortex-M3 */
  93:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     /* Loop Unrolling */
  94:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     blkCnt = numSamples >> 2;
  88              	 .loc 1 94 0
  89 0054 3B6E     	 ldr r3,[r7,#96]
  90 0056 9B08     	 lsrs r3,r3,#2
  91 0058 FB66     	 str r3,[r7,#108]
  95:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
  96:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
  97:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****      ** a second loop below computes the remaining 1 to 3 samples. */
  98:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     while (blkCnt > 0u)
  92              	 .loc 1 98 0
  93 005a 7EE0     	 b .L5
  94              	.L6:
  99:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     {
 100:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       /* C(m,n) = A(m,n) * k */
 101:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       /* Scale, saturate and then store the results in the destination buffer. */
 102:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       /* Reading 2 inputs from memory */
 103:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       inA1 = _SIMD32_OFFSET(pIn);
  95              	 .loc 1 103 0
  96 005c 7B6F     	 ldr r3,[r7,#116]
  97 005e 1B68     	 ldr r3,[r3]
  98 0060 FB65     	 str r3,[r7,#92]
 104:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       inA2 = _SIMD32_OFFSET(pIn + 2);
  99              	 .loc 1 104 0
 100 0062 7B6F     	 ldr r3,[r7,#116]
 101 0064 5B68     	 ldr r3,[r3,#4]
 102 0066 BB65     	 str r3,[r7,#88]
 105:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 106:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       /* C = A * scale */
 107:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       /* Scale the inputs and then store the 2 results in the destination buffer
 108:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****        * in single cycle by packing the outputs */
 109:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       out1 = (q31_t) ((q15_t) (inA1 >> 16) * scaleFract);
 103              	 .loc 1 109 0
 104 0068 FB6D     	 ldr r3,[r7,#92]
 105 006a 1B14     	 asrs r3,r3,#16
 106 006c 9BB2     	 uxth r3,r3
 107 006e 1BB2     	 sxth r3,r3
 108 0070 B7F90A20 	 ldrsh r2,[r7,#10]
 109 0074 02FB03F3 	 mul r3,r2,r3
 110 0078 7B65     	 str r3,[r7,#84]
 110:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       out2 = (q31_t) ((q15_t) inA1 * scaleFract);
 111              	 .loc 1 110 0
 112 007a FB6D     	 ldr r3,[r7,#92]
 113 007c 9BB2     	 uxth r3,r3
 114 007e 1BB2     	 sxth r3,r3
 115 0080 B7F90A20 	 ldrsh r2,[r7,#10]
 116 0084 02FB03F3 	 mul r3,r2,r3
 117 0088 3B65     	 str r3,[r7,#80]
 111:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       out3 = (q31_t) ((q15_t) (inA2 >> 16) * scaleFract);
 118              	 .loc 1 111 0
 119 008a BB6D     	 ldr r3,[r7,#88]
 120 008c 1B14     	 asrs r3,r3,#16
 121 008e 9BB2     	 uxth r3,r3
 122 0090 1BB2     	 sxth r3,r3
 123 0092 B7F90A20 	 ldrsh r2,[r7,#10]
 124 0096 02FB03F3 	 mul r3,r2,r3
 125 009a FB64     	 str r3,[r7,#76]
 112:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       out4 = (q31_t) ((q15_t) inA2 * scaleFract);
 126              	 .loc 1 112 0
 127 009c BB6D     	 ldr r3,[r7,#88]
 128 009e 9BB2     	 uxth r3,r3
 129 00a0 1BB2     	 sxth r3,r3
 130 00a2 B7F90A20 	 ldrsh r2,[r7,#10]
 131 00a6 02FB03F3 	 mul r3,r2,r3
 132 00aa BB64     	 str r3,[r7,#72]
 113:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 114:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       out1 = out1 >> totShift;
 133              	 .loc 1 114 0
 134 00ac 7A6D     	 ldr r2,[r7,#84]
 135 00ae 7B6E     	 ldr r3,[r7,#100]
 136 00b0 42FA03F3 	 asr r3,r2,r3
 137 00b4 7B65     	 str r3,[r7,#84]
 115:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       inA1 = _SIMD32_OFFSET(pIn + 4);
 138              	 .loc 1 115 0
 139 00b6 7B6F     	 ldr r3,[r7,#116]
 140 00b8 9B68     	 ldr r3,[r3,#8]
 141 00ba FB65     	 str r3,[r7,#92]
 116:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       out2 = out2 >> totShift;
 142              	 .loc 1 116 0
 143 00bc 3A6D     	 ldr r2,[r7,#80]
 144 00be 7B6E     	 ldr r3,[r7,#100]
 145 00c0 42FA03F3 	 asr r3,r2,r3
 146 00c4 3B65     	 str r3,[r7,#80]
 117:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       inA2 = _SIMD32_OFFSET(pIn + 6);
 147              	 .loc 1 117 0
 148 00c6 7B6F     	 ldr r3,[r7,#116]
 149 00c8 DB68     	 ldr r3,[r3,#12]
 150 00ca BB65     	 str r3,[r7,#88]
 118:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       out3 = out3 >> totShift;
 151              	 .loc 1 118 0
 152 00cc FA6C     	 ldr r2,[r7,#76]
 153 00ce 7B6E     	 ldr r3,[r7,#100]
 154 00d0 42FA03F3 	 asr r3,r2,r3
 155 00d4 FB64     	 str r3,[r7,#76]
 119:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       out4 = out4 >> totShift;
 156              	 .loc 1 119 0
 157 00d6 BA6C     	 ldr r2,[r7,#72]
 158 00d8 7B6E     	 ldr r3,[r7,#100]
 159 00da 42FA03F3 	 asr r3,r2,r3
 160 00de BB64     	 str r3,[r7,#72]
 161              	.LBB2:
 120:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 121:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       in1 = (q15_t) (__SSAT(out1, 16));
 162              	 .loc 1 121 0
 163 00e0 7B6D     	 ldr r3,[r7,#84]
 164 00e2 7B64     	 str r3,[r7,#68]
 165 00e4 7B6C     	 ldr r3,[r7,#68]
 166              	
 167 00e6 03F30F03 	 ssat r3,#16,r3
 168              	
 169              	 .thumb
 170 00ea 3B64     	 str r3,[r7,#64]
 171 00ec 3B6C     	 ldr r3,[r7,#64]
 172              	.LBE2:
 173 00ee FB87     	 strh r3,[r7,#62]
 174              	.LBB3:
 122:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       in2 = (q15_t) (__SSAT(out2, 16));
 175              	 .loc 1 122 0
 176 00f0 3B6D     	 ldr r3,[r7,#80]
 177 00f2 BB63     	 str r3,[r7,#56]
 178 00f4 BB6B     	 ldr r3,[r7,#56]
 179              	
 180 00f6 03F30F03 	 ssat r3,#16,r3
 181              	
 182              	 .thumb
 183 00fa 7B63     	 str r3,[r7,#52]
 184 00fc 7B6B     	 ldr r3,[r7,#52]
 185              	.LBE3:
 186 00fe 7B86     	 strh r3,[r7,#50]
 187              	.LBB4:
 123:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       in3 = (q15_t) (__SSAT(out3, 16));
 188              	 .loc 1 123 0
 189 0100 FB6C     	 ldr r3,[r7,#76]
 190 0102 FB62     	 str r3,[r7,#44]
 191 0104 FB6A     	 ldr r3,[r7,#44]
 192              	
 193 0106 03F30F03 	 ssat r3,#16,r3
 194              	
 195              	 .thumb
 196 010a BB62     	 str r3,[r7,#40]
 197 010c BB6A     	 ldr r3,[r7,#40]
 198              	.LBE4:
 199 010e FB84     	 strh r3,[r7,#38]
 200              	.LBB5:
 124:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       in4 = (q15_t) (__SSAT(out4, 16));
 201              	 .loc 1 124 0
 202 0110 BB6C     	 ldr r3,[r7,#72]
 203 0112 3B62     	 str r3,[r7,#32]
 204 0114 3B6A     	 ldr r3,[r7,#32]
 205              	
 206 0116 03F30F03 	 ssat r3,#16,r3
 207              	
 208              	 .thumb
 209 011a FB61     	 str r3,[r7,#28]
 210 011c FB69     	 ldr r3,[r7,#28]
 211              	.LBE5:
 212 011e 7B83     	 strh r3,[r7,#26]
 125:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 126:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       _SIMD32_OFFSET(pOut) = __PKHBT(in2, in1, 16);
 213              	 .loc 1 126 0
 214 0120 B7F93230 	 ldrsh r3,[r7,#50]
 215 0124 9AB2     	 uxth r2,r3
 216 0126 B7F93E30 	 ldrsh r3,[r7,#62]
 217 012a 1B04     	 lsls r3,r3,#16
 218 012c 1343     	 orrs r3,r3,r2
 219 012e 1A46     	 mov r2,r3
 220 0130 3B6F     	 ldr r3,[r7,#112]
 221 0132 1A60     	 str r2,[r3]
 127:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       _SIMD32_OFFSET(pOut + 2) = __PKHBT(in4, in3, 16);
 222              	 .loc 1 127 0
 223 0134 3B6F     	 ldr r3,[r7,#112]
 224 0136 0433     	 adds r3,r3,#4
 225 0138 B7F91A20 	 ldrsh r2,[r7,#26]
 226 013c 91B2     	 uxth r1,r2
 227 013e B7F92620 	 ldrsh r2,[r7,#38]
 228 0142 1204     	 lsls r2,r2,#16
 229 0144 0A43     	 orrs r2,r2,r1
 230 0146 1A60     	 str r2,[r3]
 128:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 129:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       /* update pointers to process next sampels */
 130:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       pIn += 4u;
 231              	 .loc 1 130 0
 232 0148 7B6F     	 ldr r3,[r7,#116]
 233 014a 0833     	 adds r3,r3,#8
 234 014c 7B67     	 str r3,[r7,#116]
 131:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       pOut += 4u;
 235              	 .loc 1 131 0
 236 014e 3B6F     	 ldr r3,[r7,#112]
 237 0150 0833     	 adds r3,r3,#8
 238 0152 3B67     	 str r3,[r7,#112]
 132:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 133:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 134:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       /* Decrement the numSamples loop counter */
 135:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       blkCnt--;
 239              	 .loc 1 135 0
 240 0154 FB6E     	 ldr r3,[r7,#108]
 241 0156 013B     	 subs r3,r3,#1
 242 0158 FB66     	 str r3,[r7,#108]
 243              	.L5:
  98:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     {
 244              	 .loc 1 98 0
 245 015a FB6E     	 ldr r3,[r7,#108]
 246 015c 002B     	 cmp r3,#0
 247 015e 7FF47DAF 	 bne .L6
 136:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     }
 137:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 138:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
 139:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****      ** No loop unrolling is used. */
 140:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     blkCnt = numSamples % 0x4u;
 248              	 .loc 1 140 0
 249 0162 3B6E     	 ldr r3,[r7,#96]
 250 0164 03F00303 	 and r3,r3,#3
 251 0168 FB66     	 str r3,[r7,#108]
 141:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 142:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** #else
 143:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 144:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     /* Run the below code for Cortex-M0 */
 145:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 146:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     /* Initialize blkCnt with number of samples */
 147:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     blkCnt = numSamples;
 148:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 149:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** #endif /* #if defined (ARM_MATH_DSP) */
 150:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 151:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     while (blkCnt > 0u)
 252              	 .loc 1 151 0
 253 016a 19E0     	 b .L7
 254              	.L8:
 152:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     {
 153:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       /* C(m,n) = A(m,n) * k */
 154:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       /* Scale, saturate and then store the results in the destination buffer. */
 155:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       *pOut++ =
 255              	 .loc 1 155 0
 256 016c 3B6F     	 ldr r3,[r7,#112]
 257 016e 9A1C     	 adds r2,r3,#2
 258 0170 3A67     	 str r2,[r7,#112]
 259              	.LBB6:
 156:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****         (q15_t) (__SSAT(((q31_t) (*pIn++) * scaleFract) >> totShift, 16));
 260              	 .loc 1 156 0
 261 0172 7A6F     	 ldr r2,[r7,#116]
 262 0174 911C     	 adds r1,r2,#2
 263 0176 7967     	 str r1,[r7,#116]
 264 0178 1288     	 ldrh r2,[r2]
 265 017a 12B2     	 sxth r2,r2
 266 017c B7F90A10 	 ldrsh r1,[r7,#10]
 267 0180 01FB02F1 	 mul r1,r1,r2
 268 0184 7A6E     	 ldr r2,[r7,#100]
 269 0186 41FA02F2 	 asr r2,r1,r2
 270 018a 7A61     	 str r2,[r7,#20]
 271 018c 7A69     	 ldr r2,[r7,#20]
 272              	
 273 018e 02F30F02 	 ssat r2,#16,r2
 274              	
 275              	 .thumb
 276 0192 3A61     	 str r2,[r7,#16]
 277 0194 3A69     	 ldr r2,[r7,#16]
 278              	.LBE6:
 279 0196 92B2     	 uxth r2,r2
 155:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****         (q15_t) (__SSAT(((q31_t) (*pIn++) * scaleFract) >> totShift, 16));
 280              	 .loc 1 155 0
 281 0198 1A80     	 strh r2,[r3]
 157:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 158:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       /* Decrement the numSamples loop counter */
 159:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       blkCnt--;
 282              	 .loc 1 159 0
 283 019a FB6E     	 ldr r3,[r7,#108]
 284 019c 013B     	 subs r3,r3,#1
 285 019e FB66     	 str r3,[r7,#108]
 286              	.L7:
 151:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     {
 287              	 .loc 1 151 0
 288 01a0 FB6E     	 ldr r3,[r7,#108]
 289 01a2 002B     	 cmp r3,#0
 290 01a4 E2D1     	 bne .L8
 160:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     }
 161:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     /* Set status as ARM_MATH_SUCCESS */
 162:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     status = ARM_MATH_SUCCESS;
 291              	 .loc 1 162 0
 292 01a6 0023     	 movs r3,#0
 293 01a8 87F86B30 	 strb r3,[r7,#107]
 294              	.L4:
 163:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   }
 164:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 165:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   /* Return to application */
 166:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   return (status);
 295              	 .loc 1 166 0
 296 01ac 97F86B30 	 ldrb r3,[r7,#107]
 297 01b0 5BB2     	 sxtb r3,r3
 167:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** }
 298              	 .loc 1 167 0
 299 01b2 1846     	 mov r0,r3
 300 01b4 7C37     	 adds r7,r7,#124
 301              	.LCFI3:
 302              	 .cfi_def_cfa_offset 4
 303 01b6 BD46     	 mov sp,r7
 304              	.LCFI4:
 305              	 .cfi_def_cfa_register 13
 306              	 
 307 01b8 5DF8047B 	 ldr r7,[sp],#4
 308              	.LCFI5:
 309              	 .cfi_restore 7
 310              	 .cfi_def_cfa_offset 0
 311 01bc 7047     	 bx lr
 312              	 .cfi_endproc
 313              	.LFE135:
 315 01be 00BF     	 .text
 316              	.Letext0:
 317              	 .file 2 "c:\\program files (x86)\\dave\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 318              	 .file 3 "c:\\program files (x86)\\dave\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 319              	 .file 4 "C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_mat_scale_q15.c
    {standard input}:20     .text.arm_mat_scale_q15:00000000 $t
    {standard input}:25     .text.arm_mat_scale_q15:00000000 arm_mat_scale_q15
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
