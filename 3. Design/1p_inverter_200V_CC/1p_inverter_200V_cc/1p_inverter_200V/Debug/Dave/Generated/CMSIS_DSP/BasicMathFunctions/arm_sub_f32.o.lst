   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "arm_sub_f32.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.arm_sub_f32,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_sub_f32
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_sub_f32:
  26              	.LFB135:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c"
   1:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c **** /* ----------------------------------------------------------------------
   2:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****  * Project:      CMSIS DSP Library
   3:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****  * Title:        arm_sub_f32.c
   4:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****  * Description:  Floating-point vector subtraction.
   5:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****  *
   6:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****  * $Date:        27. January 2017
   7:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****  * $Revision:    V.1.5.1
   8:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****  *
   9:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****  * Target Processor: Cortex-M cores
  10:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****  * -------------------------------------------------------------------- */
  11:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c **** /*
  12:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****  *
  14:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****  *
  16:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****  * not use this file except in compliance with the License.
  18:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****  * You may obtain a copy of the License at
  19:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****  *
  20:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****  *
  22:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****  * See the License for the specific language governing permissions and
  26:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****  * limitations under the License.
  27:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****  */
  28:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c **** 
  29:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  30:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c **** 
  31:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c **** /**
  32:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****  * @ingroup groupMath
  33:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****  */
  34:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c **** 
  35:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c **** /**
  36:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****  * @defgroup BasicSub Vector Subtraction
  37:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****  *
  38:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****  * Element-by-element subtraction of two vectors.
  39:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****  *
  40:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****  * <pre>
  41:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****  *     pDst[n] = pSrcA[n] - pSrcB[n],   0 <= n < blockSize.
  42:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****  * </pre>
  43:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****  *
  44:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****  * There are separate functions for floating-point, Q7, Q15, and Q31 data types.
  45:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****  */
  46:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c **** 
  47:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c **** /**
  48:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****  * @addtogroup BasicSub
  49:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****  * @{
  50:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****  */
  51:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c **** 
  52:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c **** 
  53:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c **** /**
  54:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****  * @brief Floating-point vector subtraction.
  55:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****  * @param[in]       *pSrcA points to the first input vector
  56:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****  * @param[in]       *pSrcB points to the second input vector
  57:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****  * @param[out]      *pDst points to the output vector
  58:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****  * @param[in]       blockSize number of samples in each vector
  59:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****  * @return none.
  60:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****  */
  61:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c **** 
  62:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c **** void arm_sub_f32(
  63:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****   float32_t * pSrcA,
  64:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****   float32_t * pSrcB,
  65:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****   float32_t * pDst,
  66:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****   uint32_t blockSize)
  67:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c **** {
  28              	 .loc 1 67 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33 0000 80B4     	 push {r7}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 4
  36              	 .cfi_offset 7,-4
  37 0002 8FB0     	 sub sp,sp,#60
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 64
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
  43 0006 F860     	 str r0,[r7,#12]
  44 0008 B960     	 str r1,[r7,#8]
  45 000a 7A60     	 str r2,[r7,#4]
  46 000c 3B60     	 str r3,[r7]
  68:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****   uint32_t blkCnt;                               /* loop counter */
  69:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c **** 
  70:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c **** #if defined (ARM_MATH_DSP)
  71:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c **** 
  72:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c **** /* Run the below code for Cortex-M4 and Cortex-M3 */
  73:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****   float32_t inA1, inA2, inA3, inA4;              /* temporary variables */
  74:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****   float32_t inB1, inB2, inB3, inB4;              /* temporary variables */
  75:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c **** 
  76:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****   /*loop Unrolling */
  77:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****   blkCnt = blockSize >> 2u;
  47              	 .loc 1 77 0
  48 000e 3B68     	 ldr r3,[r7]
  49 0010 9B08     	 lsrs r3,r3,#2
  50 0012 7B63     	 str r3,[r7,#52]
  78:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c **** 
  79:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
  80:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
  81:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****   while (blkCnt > 0u)
  51              	 .loc 1 81 0
  52 0014 4AE0     	 b .L2
  53              	.L3:
  82:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****   {
  83:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****     /* C = A - B */
  84:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****     /* Subtract and then store the results in the destination buffer. */
  85:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****     /* Read 4 input samples from sourceA and sourceB */
  86:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****     inA1 = *pSrcA;
  54              	 .loc 1 86 0
  55 0016 FB68     	 ldr r3,[r7,#12]
  56 0018 1B68     	 ldr r3,[r3]
  57 001a 3B63     	 str r3,[r7,#48]
  87:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****     inB1 = *pSrcB;
  58              	 .loc 1 87 0
  59 001c BB68     	 ldr r3,[r7,#8]
  60 001e 1B68     	 ldr r3,[r3]
  61 0020 FB62     	 str r3,[r7,#44]
  88:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****     inA2 = *(pSrcA + 1);
  62              	 .loc 1 88 0
  63 0022 FB68     	 ldr r3,[r7,#12]
  64 0024 5B68     	 ldr r3,[r3,#4]
  65 0026 BB62     	 str r3,[r7,#40]
  89:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****     inB2 = *(pSrcB + 1);
  66              	 .loc 1 89 0
  67 0028 BB68     	 ldr r3,[r7,#8]
  68 002a 5B68     	 ldr r3,[r3,#4]
  69 002c 7B62     	 str r3,[r7,#36]
  90:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****     inA3 = *(pSrcA + 2);
  70              	 .loc 1 90 0
  71 002e FB68     	 ldr r3,[r7,#12]
  72 0030 9B68     	 ldr r3,[r3,#8]
  73 0032 3B62     	 str r3,[r7,#32]
  91:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****     inB3 = *(pSrcB + 2);
  74              	 .loc 1 91 0
  75 0034 BB68     	 ldr r3,[r7,#8]
  76 0036 9B68     	 ldr r3,[r3,#8]
  77 0038 FB61     	 str r3,[r7,#28]
  92:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****     inA4 = *(pSrcA + 3);
  78              	 .loc 1 92 0
  79 003a FB68     	 ldr r3,[r7,#12]
  80 003c DB68     	 ldr r3,[r3,#12]
  81 003e BB61     	 str r3,[r7,#24]
  93:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****     inB4 = *(pSrcB + 3);
  82              	 .loc 1 93 0
  83 0040 BB68     	 ldr r3,[r7,#8]
  84 0042 DB68     	 ldr r3,[r3,#12]
  85 0044 7B61     	 str r3,[r7,#20]
  94:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c **** 
  95:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****     /* dst = srcA - srcB */
  96:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****     /* subtract and store the result */
  97:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****     *pDst = inA1 - inB1;
  86              	 .loc 1 97 0
  87 0046 97ED0C7A 	 flds s14,[r7,#48]
  88 004a D7ED0B7A 	 flds s15,[r7,#44]
  89 004e 77EE677A 	 fsubs s15,s14,s15
  90 0052 7B68     	 ldr r3,[r7,#4]
  91 0054 C3ED007A 	 fsts s15,[r3]
  98:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****     *(pDst + 1) = inA2 - inB2;
  92              	 .loc 1 98 0
  93 0058 7B68     	 ldr r3,[r7,#4]
  94 005a 0433     	 adds r3,r3,#4
  95 005c 97ED0A7A 	 flds s14,[r7,#40]
  96 0060 D7ED097A 	 flds s15,[r7,#36]
  97 0064 77EE677A 	 fsubs s15,s14,s15
  98 0068 C3ED007A 	 fsts s15,[r3]
  99:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****     *(pDst + 2) = inA3 - inB3;
  99              	 .loc 1 99 0
 100 006c 7B68     	 ldr r3,[r7,#4]
 101 006e 0833     	 adds r3,r3,#8
 102 0070 97ED087A 	 flds s14,[r7,#32]
 103 0074 D7ED077A 	 flds s15,[r7,#28]
 104 0078 77EE677A 	 fsubs s15,s14,s15
 105 007c C3ED007A 	 fsts s15,[r3]
 100:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****     *(pDst + 3) = inA4 - inB4;
 106              	 .loc 1 100 0
 107 0080 7B68     	 ldr r3,[r7,#4]
 108 0082 0C33     	 adds r3,r3,#12
 109 0084 97ED067A 	 flds s14,[r7,#24]
 110 0088 D7ED057A 	 flds s15,[r7,#20]
 111 008c 77EE677A 	 fsubs s15,s14,s15
 112 0090 C3ED007A 	 fsts s15,[r3]
 101:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c **** 
 102:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c **** 
 103:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****     /* Update pointers to process next sampels */
 104:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****     pSrcA += 4u;
 113              	 .loc 1 104 0
 114 0094 FB68     	 ldr r3,[r7,#12]
 115 0096 1033     	 adds r3,r3,#16
 116 0098 FB60     	 str r3,[r7,#12]
 105:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****     pSrcB += 4u;
 117              	 .loc 1 105 0
 118 009a BB68     	 ldr r3,[r7,#8]
 119 009c 1033     	 adds r3,r3,#16
 120 009e BB60     	 str r3,[r7,#8]
 106:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****     pDst += 4u;
 121              	 .loc 1 106 0
 122 00a0 7B68     	 ldr r3,[r7,#4]
 123 00a2 1033     	 adds r3,r3,#16
 124 00a4 7B60     	 str r3,[r7,#4]
 107:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c **** 
 108:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****     /* Decrement the loop counter */
 109:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****     blkCnt--;
 125              	 .loc 1 109 0
 126 00a6 7B6B     	 ldr r3,[r7,#52]
 127 00a8 013B     	 subs r3,r3,#1
 128 00aa 7B63     	 str r3,[r7,#52]
 129              	.L2:
  81:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****   {
 130              	 .loc 1 81 0
 131 00ac 7B6B     	 ldr r3,[r7,#52]
 132 00ae 002B     	 cmp r3,#0
 133 00b0 B1D1     	 bne .L3
 110:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****   }
 111:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c **** 
 112:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****   /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
 113:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****    ** No loop unrolling is used. */
 114:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****   blkCnt = blockSize % 0x4u;
 134              	 .loc 1 114 0
 135 00b2 3B68     	 ldr r3,[r7]
 136 00b4 03F00303 	 and r3,r3,#3
 137 00b8 7B63     	 str r3,[r7,#52]
 115:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c **** 
 116:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c **** #else
 117:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c **** 
 118:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****   /* Run the below code for Cortex-M0 */
 119:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c **** 
 120:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****   /* Initialize blkCnt with number of samples */
 121:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****   blkCnt = blockSize;
 122:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c **** 
 123:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c **** #endif /* #if defined (ARM_MATH_DSP) */
 124:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c **** 
 125:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****   while (blkCnt > 0u)
 138              	 .loc 1 125 0
 139 00ba 13E0     	 b .L4
 140              	.L5:
 126:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****   {
 127:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****     /* C = A - B */
 128:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****     /* Subtract and then store the results in the destination buffer. */
 129:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****     *pDst++ = (*pSrcA++) - (*pSrcB++);
 141              	 .loc 1 129 0
 142 00bc 7B68     	 ldr r3,[r7,#4]
 143 00be 1A1D     	 adds r2,r3,#4
 144 00c0 7A60     	 str r2,[r7,#4]
 145 00c2 FA68     	 ldr r2,[r7,#12]
 146 00c4 111D     	 adds r1,r2,#4
 147 00c6 F960     	 str r1,[r7,#12]
 148 00c8 92ED007A 	 flds s14,[r2]
 149 00cc BA68     	 ldr r2,[r7,#8]
 150 00ce 111D     	 adds r1,r2,#4
 151 00d0 B960     	 str r1,[r7,#8]
 152 00d2 D2ED007A 	 flds s15,[r2]
 153 00d6 77EE677A 	 fsubs s15,s14,s15
 154 00da C3ED007A 	 fsts s15,[r3]
 130:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c **** 
 131:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****     /* Decrement the loop counter */
 132:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****     blkCnt--;
 155              	 .loc 1 132 0
 156 00de 7B6B     	 ldr r3,[r7,#52]
 157 00e0 013B     	 subs r3,r3,#1
 158 00e2 7B63     	 str r3,[r7,#52]
 159              	.L4:
 125:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****   {
 160              	 .loc 1 125 0
 161 00e4 7B6B     	 ldr r3,[r7,#52]
 162 00e6 002B     	 cmp r3,#0
 163 00e8 E8D1     	 bne .L5
 133:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c ****   }
 134:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_sub_f32.c **** }
 164              	 .loc 1 134 0
 165 00ea 3C37     	 adds r7,r7,#60
 166              	.LCFI3:
 167              	 .cfi_def_cfa_offset 4
 168 00ec BD46     	 mov sp,r7
 169              	.LCFI4:
 170              	 .cfi_def_cfa_register 13
 171              	 
 172 00ee 5DF8047B 	 ldr r7,[sp],#4
 173              	.LCFI5:
 174              	 .cfi_restore 7
 175              	 .cfi_def_cfa_offset 0
 176 00f2 7047     	 bx lr
 177              	 .cfi_endproc
 178              	.LFE135:
 180              	 .text
 181              	.Letext0:
 182              	 .file 2 "c:\\program files (x86)\\dave\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 183              	 .file 3 "c:\\program files (x86)\\dave\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 184              	 .file 4 "C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_sub_f32.c
    {standard input}:20     .text.arm_sub_f32:00000000 $t
    {standard input}:25     .text.arm_sub_f32:00000000 arm_sub_f32
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
