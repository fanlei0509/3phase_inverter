   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "arm_scale_q15.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.arm_scale_q15,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_scale_q15
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_scale_q15:
  26              	.LFB135:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c"
   1:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** /* ----------------------------------------------------------------------
   2:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  * Project:      CMSIS DSP Library
   3:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  * Title:        arm_scale_q15.c
   4:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  * Description:  Multiplies a Q15 vector by a scalar
   5:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  *
   6:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  * $Date:        27. January 2017
   7:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  * $Revision:    V.1.5.1
   8:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  *
   9:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  * Target Processor: Cortex-M cores
  10:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  * -------------------------------------------------------------------- */
  11:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** /*
  12:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  *
  14:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  * SPDX-License-Identifier: Apache-2.0
  15:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  *
  16:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  * not use this file except in compliance with the License.
  18:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  * You may obtain a copy of the License at
  19:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  *
  20:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  *
  22:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  * Unless required by applicable law or agreed to in writing, software
  23:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  * See the License for the specific language governing permissions and
  26:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  * limitations under the License.
  27:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  */
  28:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
  29:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  30:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
  31:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** /**
  32:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  * @ingroup groupMath
  33:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  */
  34:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
  35:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** /**
  36:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  * @addtogroup scale
  37:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  * @{
  38:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  */
  39:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
  40:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** /**
  41:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  * @brief Multiplies a Q15 vector by a scalar.
  42:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  * @param[in]       *pSrc points to the input vector
  43:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  * @param[in]       scaleFract fractional portion of the scale value
  44:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  * @param[in]       shift number of bits to shift the result by
  45:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  * @param[out]      *pDst points to the output vector
  46:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  * @param[in]       blockSize number of samples in the vector
  47:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  * @return none.
  48:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  *
  49:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  * <b>Scaling and Overflow Behavior:</b>
  50:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  * \par
  51:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  * The input data <code>*pSrc</code> and <code>scaleFract</code> are in 1.15 format.
  52:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  * These are multiplied to yield a 2.30 intermediate result and this is shifted with saturation to 
  53:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  */
  54:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
  55:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
  56:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** void arm_scale_q15(
  57:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   q15_t * pSrc,
  58:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   q15_t scaleFract,
  59:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   int8_t shift,
  60:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   q15_t * pDst,
  61:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   uint32_t blockSize)
  62:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** {
  28              	 .loc 1 62 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33 0000 80B4     	 push {r7}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 4
  36              	 .cfi_offset 7,-4
  37 0002 9BB0     	 sub sp,sp,#108
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 112
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
  43 0006 F860     	 str r0,[r7,#12]
  44 0008 7B60     	 str r3,[r7,#4]
  45 000a 0B46     	 mov r3,r1
  46 000c 7B81     	 strh r3,[r7,#10]
  47 000e 1346     	 mov r3,r2
  48 0010 7B72     	 strb r3,[r7,#9]
  63:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   int8_t kShift = 15 - shift;                    /* shift to apply after scaling */
  49              	 .loc 1 63 0
  50 0012 7B7A     	 ldrb r3,[r7,#9]
  51 0014 C3F10F03 	 rsb r3,r3,#15
  52 0018 DBB2     	 uxtb r3,r3
  53 001a 87F86330 	 strb r3,[r7,#99]
  64:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   uint32_t blkCnt;                               /* loop counter */
  65:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
  66:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** #if defined (ARM_MATH_DSP)
  67:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
  68:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** /* Run the below code for Cortex-M4 and Cortex-M3 */
  69:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   q15_t in1, in2, in3, in4;
  70:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   q31_t inA1, inA2;                              /* Temporary variables */
  71:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   q31_t out1, out2, out3, out4;
  72:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
  73:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
  74:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   /*loop Unrolling */
  75:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   blkCnt = blockSize >> 2u;
  54              	 .loc 1 75 0
  55 001e 3B6F     	 ldr r3,[r7,#112]
  56 0020 9B08     	 lsrs r3,r3,#2
  57 0022 7B66     	 str r3,[r7,#100]
  76:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
  77:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
  78:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
  79:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   while (blkCnt > 0u)
  58              	 .loc 1 79 0
  59 0024 82E0     	 b .L2
  60              	.L3:
  80:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   {
  81:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     /* Reading 2 inputs from memory */
  82:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     inA1 = *__SIMD32(pSrc)++;
  61              	 .loc 1 82 0
  62 0026 07F10C02 	 add r2,r7,#12
  63 002a 1368     	 ldr r3,[r2]
  64 002c 191D     	 adds r1,r3,#4
  65 002e 1160     	 str r1,[r2]
  66 0030 1B68     	 ldr r3,[r3]
  67 0032 FB65     	 str r3,[r7,#92]
  83:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     inA2 = *__SIMD32(pSrc)++;
  68              	 .loc 1 83 0
  69 0034 07F10C02 	 add r2,r7,#12
  70 0038 1368     	 ldr r3,[r2]
  71 003a 191D     	 adds r1,r3,#4
  72 003c 1160     	 str r1,[r2]
  73 003e 1B68     	 ldr r3,[r3]
  74 0040 BB65     	 str r3,[r7,#88]
  84:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
  85:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     /* C = A * scale */
  86:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     /* Scale the inputs and then store the 2 results in the destination buffer
  87:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****      * in single cycle by packing the outputs */
  88:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     out1 = (q31_t) ((q15_t) (inA1 >> 16) * scaleFract);
  75              	 .loc 1 88 0
  76 0042 FB6D     	 ldr r3,[r7,#92]
  77 0044 1B14     	 asrs r3,r3,#16
  78 0046 9BB2     	 uxth r3,r3
  79 0048 1BB2     	 sxth r3,r3
  80 004a B7F90A20 	 ldrsh r2,[r7,#10]
  81 004e 02FB03F3 	 mul r3,r2,r3
  82 0052 7B65     	 str r3,[r7,#84]
  89:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     out2 = (q31_t) ((q15_t) inA1 * scaleFract);
  83              	 .loc 1 89 0
  84 0054 FB6D     	 ldr r3,[r7,#92]
  85 0056 9BB2     	 uxth r3,r3
  86 0058 1BB2     	 sxth r3,r3
  87 005a B7F90A20 	 ldrsh r2,[r7,#10]
  88 005e 02FB03F3 	 mul r3,r2,r3
  89 0062 3B65     	 str r3,[r7,#80]
  90:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     out3 = (q31_t) ((q15_t) (inA2 >> 16) * scaleFract);
  90              	 .loc 1 90 0
  91 0064 BB6D     	 ldr r3,[r7,#88]
  92 0066 1B14     	 asrs r3,r3,#16
  93 0068 9BB2     	 uxth r3,r3
  94 006a 1BB2     	 sxth r3,r3
  95 006c B7F90A20 	 ldrsh r2,[r7,#10]
  96 0070 02FB03F3 	 mul r3,r2,r3
  97 0074 FB64     	 str r3,[r7,#76]
  91:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     out4 = (q31_t) ((q15_t) inA2 * scaleFract);
  98              	 .loc 1 91 0
  99 0076 BB6D     	 ldr r3,[r7,#88]
 100 0078 9BB2     	 uxth r3,r3
 101 007a 1BB2     	 sxth r3,r3
 102 007c B7F90A20 	 ldrsh r2,[r7,#10]
 103 0080 02FB03F3 	 mul r3,r2,r3
 104 0084 BB64     	 str r3,[r7,#72]
  92:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
  93:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     /* apply shifting */
  94:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     out1 = out1 >> kShift;
 105              	 .loc 1 94 0
 106 0086 97F96330 	 ldrsb r3,[r7,#99]
 107 008a 7A6D     	 ldr r2,[r7,#84]
 108 008c 42FA03F3 	 asr r3,r2,r3
 109 0090 7B65     	 str r3,[r7,#84]
  95:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     out2 = out2 >> kShift;
 110              	 .loc 1 95 0
 111 0092 97F96330 	 ldrsb r3,[r7,#99]
 112 0096 3A6D     	 ldr r2,[r7,#80]
 113 0098 42FA03F3 	 asr r3,r2,r3
 114 009c 3B65     	 str r3,[r7,#80]
  96:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     out3 = out3 >> kShift;
 115              	 .loc 1 96 0
 116 009e 97F96330 	 ldrsb r3,[r7,#99]
 117 00a2 FA6C     	 ldr r2,[r7,#76]
 118 00a4 42FA03F3 	 asr r3,r2,r3
 119 00a8 FB64     	 str r3,[r7,#76]
  97:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     out4 = out4 >> kShift;
 120              	 .loc 1 97 0
 121 00aa 97F96330 	 ldrsb r3,[r7,#99]
 122 00ae BA6C     	 ldr r2,[r7,#72]
 123 00b0 42FA03F3 	 asr r3,r2,r3
 124 00b4 BB64     	 str r3,[r7,#72]
 125              	.LBB2:
  98:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
  99:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     /* saturate the output */
 100:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     in1 = (q15_t) (__SSAT(out1, 16));
 126              	 .loc 1 100 0
 127 00b6 7B6D     	 ldr r3,[r7,#84]
 128 00b8 7B64     	 str r3,[r7,#68]
 129 00ba 7B6C     	 ldr r3,[r7,#68]
 130              	
 131 00bc 03F30F03 	 ssat r3,#16,r3
 132              	
 133              	 .thumb
 134 00c0 3B64     	 str r3,[r7,#64]
 135 00c2 3B6C     	 ldr r3,[r7,#64]
 136              	.LBE2:
 137 00c4 FB87     	 strh r3,[r7,#62]
 138              	.LBB3:
 101:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     in2 = (q15_t) (__SSAT(out2, 16));
 139              	 .loc 1 101 0
 140 00c6 3B6D     	 ldr r3,[r7,#80]
 141 00c8 BB63     	 str r3,[r7,#56]
 142 00ca BB6B     	 ldr r3,[r7,#56]
 143              	
 144 00cc 03F30F03 	 ssat r3,#16,r3
 145              	
 146              	 .thumb
 147 00d0 7B63     	 str r3,[r7,#52]
 148 00d2 7B6B     	 ldr r3,[r7,#52]
 149              	.LBE3:
 150 00d4 7B86     	 strh r3,[r7,#50]
 151              	.LBB4:
 102:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     in3 = (q15_t) (__SSAT(out3, 16));
 152              	 .loc 1 102 0
 153 00d6 FB6C     	 ldr r3,[r7,#76]
 154 00d8 FB62     	 str r3,[r7,#44]
 155 00da FB6A     	 ldr r3,[r7,#44]
 156              	
 157 00dc 03F30F03 	 ssat r3,#16,r3
 158              	
 159              	 .thumb
 160 00e0 BB62     	 str r3,[r7,#40]
 161 00e2 BB6A     	 ldr r3,[r7,#40]
 162              	.LBE4:
 163 00e4 FB84     	 strh r3,[r7,#38]
 164              	.LBB5:
 103:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     in4 = (q15_t) (__SSAT(out4, 16));
 165              	 .loc 1 103 0
 166 00e6 BB6C     	 ldr r3,[r7,#72]
 167 00e8 3B62     	 str r3,[r7,#32]
 168 00ea 3B6A     	 ldr r3,[r7,#32]
 169              	
 170 00ec 03F30F03 	 ssat r3,#16,r3
 171              	
 172              	 .thumb
 173 00f0 FB61     	 str r3,[r7,#28]
 174 00f2 FB69     	 ldr r3,[r7,#28]
 175              	.LBE5:
 176 00f4 7B83     	 strh r3,[r7,#26]
 104:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
 105:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     /* store the result to destination */
 106:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     *__SIMD32(pDst)++ = __PKHBT(in2, in1, 16);
 177              	 .loc 1 106 0
 178 00f6 3A1D     	 adds r2,r7,#4
 179 00f8 1368     	 ldr r3,[r2]
 180 00fa 191D     	 adds r1,r3,#4
 181 00fc 1160     	 str r1,[r2]
 182 00fe B7F93220 	 ldrsh r2,[r7,#50]
 183 0102 91B2     	 uxth r1,r2
 184 0104 B7F93E20 	 ldrsh r2,[r7,#62]
 185 0108 1204     	 lsls r2,r2,#16
 186 010a 0A43     	 orrs r2,r2,r1
 187 010c 1A60     	 str r2,[r3]
 107:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     *__SIMD32(pDst)++ = __PKHBT(in4, in3, 16);
 188              	 .loc 1 107 0
 189 010e 3A1D     	 adds r2,r7,#4
 190 0110 1368     	 ldr r3,[r2]
 191 0112 191D     	 adds r1,r3,#4
 192 0114 1160     	 str r1,[r2]
 193 0116 B7F91A20 	 ldrsh r2,[r7,#26]
 194 011a 91B2     	 uxth r1,r2
 195 011c B7F92620 	 ldrsh r2,[r7,#38]
 196 0120 1204     	 lsls r2,r2,#16
 197 0122 0A43     	 orrs r2,r2,r1
 198 0124 1A60     	 str r2,[r3]
 108:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
 109:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     /* Decrement the loop counter */
 110:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     blkCnt--;
 199              	 .loc 1 110 0
 200 0126 7B6E     	 ldr r3,[r7,#100]
 201 0128 013B     	 subs r3,r3,#1
 202 012a 7B66     	 str r3,[r7,#100]
 203              	.L2:
  79:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   {
 204              	 .loc 1 79 0
 205 012c 7B6E     	 ldr r3,[r7,#100]
 206 012e 002B     	 cmp r3,#0
 207 0130 7FF479AF 	 bne .L3
 111:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   }
 112:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
 113:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
 114:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****    ** No loop unrolling is used. */
 115:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   blkCnt = blockSize % 0x4u;
 208              	 .loc 1 115 0
 209 0134 3B6F     	 ldr r3,[r7,#112]
 210 0136 03F00303 	 and r3,r3,#3
 211 013a 7B66     	 str r3,[r7,#100]
 116:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
 117:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   while (blkCnt > 0u)
 212              	 .loc 1 117 0
 213 013c 1AE0     	 b .L4
 214              	.L5:
 118:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   {
 119:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     /* C = A * scale */
 120:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     /* Scale the input and then store the result in the destination buffer. */
 121:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     *pDst++ = (q15_t) (__SSAT(((*pSrc++) * scaleFract) >> kShift, 16));
 215              	 .loc 1 121 0
 216 013e 7B68     	 ldr r3,[r7,#4]
 217 0140 9A1C     	 adds r2,r3,#2
 218 0142 7A60     	 str r2,[r7,#4]
 219              	.LBB6:
 220 0144 FA68     	 ldr r2,[r7,#12]
 221 0146 911C     	 adds r1,r2,#2
 222 0148 F960     	 str r1,[r7,#12]
 223 014a 1288     	 ldrh r2,[r2]
 224 014c 12B2     	 sxth r2,r2
 225 014e B7F90A10 	 ldrsh r1,[r7,#10]
 226 0152 01FB02F1 	 mul r1,r1,r2
 227 0156 97F96320 	 ldrsb r2,[r7,#99]
 228 015a 41FA02F2 	 asr r2,r1,r2
 229 015e 7A61     	 str r2,[r7,#20]
 230 0160 7A69     	 ldr r2,[r7,#20]
 231              	
 232 0162 02F30F02 	 ssat r2,#16,r2
 233              	
 234              	 .thumb
 235 0166 3A61     	 str r2,[r7,#16]
 236 0168 3A69     	 ldr r2,[r7,#16]
 237              	.LBE6:
 238 016a 92B2     	 uxth r2,r2
 239 016c 1A80     	 strh r2,[r3]
 122:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
 123:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     /* Decrement the loop counter */
 124:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     blkCnt--;
 240              	 .loc 1 124 0
 241 016e 7B6E     	 ldr r3,[r7,#100]
 242 0170 013B     	 subs r3,r3,#1
 243 0172 7B66     	 str r3,[r7,#100]
 244              	.L4:
 117:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   {
 245              	 .loc 1 117 0
 246 0174 7B6E     	 ldr r3,[r7,#100]
 247 0176 002B     	 cmp r3,#0
 248 0178 E1D1     	 bne .L5
 125:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   }
 126:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
 127:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** #else
 128:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
 129:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   /* Run the below code for Cortex-M0 */
 130:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
 131:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   /* Initialize blkCnt with number of samples */
 132:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   blkCnt = blockSize;
 133:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
 134:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   while (blkCnt > 0u)
 135:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   {
 136:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     /* C = A * scale */
 137:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     /* Scale the input and then store the result in the destination buffer. */
 138:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     *pDst++ = (q15_t) (__SSAT(((q31_t) * pSrc++ * scaleFract) >> kShift, 16));
 139:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
 140:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     /* Decrement the loop counter */
 141:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     blkCnt--;
 142:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   }
 143:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
 144:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** #endif /* #if defined (ARM_MATH_DSP) */
 145:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
 146:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** }
 249              	 .loc 1 146 0
 250 017a 6C37     	 adds r7,r7,#108
 251              	.LCFI3:
 252              	 .cfi_def_cfa_offset 4
 253 017c BD46     	 mov sp,r7
 254              	.LCFI4:
 255              	 .cfi_def_cfa_register 13
 256              	 
 257 017e 5DF8047B 	 ldr r7,[sp],#4
 258              	.LCFI5:
 259              	 .cfi_restore 7
 260              	 .cfi_def_cfa_offset 0
 261 0182 7047     	 bx lr
 262              	 .cfi_endproc
 263              	.LFE135:
 265              	 .text
 266              	.Letext0:
 267              	 .file 2 "c:\\program files (x86)\\dave\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 268              	 .file 3 "c:\\program files (x86)\\dave\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 269              	 .file 4 "C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_scale_q15.c
    {standard input}:20     .text.arm_scale_q15:00000000 $t
    {standard input}:25     .text.arm_scale_q15:00000000 arm_scale_q15
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
