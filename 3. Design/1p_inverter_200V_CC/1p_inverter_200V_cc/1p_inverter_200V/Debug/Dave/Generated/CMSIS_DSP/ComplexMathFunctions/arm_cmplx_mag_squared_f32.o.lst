   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "arm_cmplx_mag_squared_f32.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.arm_cmplx_mag_squared_f32,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_cmplx_mag_squared_f32
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_cmplx_mag_squared_f32:
  26              	.LFB135:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c"
   1:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** /* ----------------------------------------------------------------------
   2:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * Project:      CMSIS DSP Library
   3:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * Title:        arm_cmplx_mag_squared_f32.c
   4:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * Description:  Floating-point complex magnitude squared
   5:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  *
   6:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * $Date:        27. January 2017
   7:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * $Revision:    V.1.5.1
   8:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  *
   9:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * Target Processor: Cortex-M cores
  10:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * -------------------------------------------------------------------- */
  11:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** /*
  12:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  *
  14:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  *
  16:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * not use this file except in compliance with the License.
  18:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * You may obtain a copy of the License at
  19:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  *
  20:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  *
  22:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * See the License for the specific language governing permissions and
  26:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * limitations under the License.
  27:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  */
  28:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  29:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  30:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  31:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** /**
  32:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * @ingroup groupCmplxMath
  33:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  */
  34:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  35:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** /**
  36:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * @defgroup cmplx_mag_squared Complex Magnitude Squared
  37:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  *
  38:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * Computes the magnitude squared of the elements of a complex data vector.
  39:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  *
  40:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * The <code>pSrc</code> points to the source data and
  41:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * <code>pDst</code> points to the where the result should be written.
  42:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * <code>numSamples</code> specifies the number of complex samples
  43:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * in the input array and the data is stored in an interleaved fashion
  44:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * (real, imag, real, imag, ...).
  45:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * The input array has a total of <code>2*numSamples</code> values;
  46:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * the output array has a total of <code>numSamples</code> values.
  47:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  *
  48:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * The underlying algorithm is used:
  49:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  *
  50:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * <pre>
  51:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * for(n=0; n<numSamples; n++) {
  52:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  *     pDst[n] = pSrc[(2*n)+0]^2 + pSrc[(2*n)+1]^2;
  53:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * }
  54:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * </pre>
  55:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  *
  56:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * There are separate functions for floating-point, Q15, and Q31 data types.
  57:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  */
  58:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  59:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** /**
  60:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * @addtogroup cmplx_mag_squared
  61:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * @{
  62:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  */
  63:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  64:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  65:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** /**
  66:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * @brief  Floating-point complex magnitude squared
  67:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * @param[in]  *pSrc points to the complex input vector
  68:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * @param[out]  *pDst points to the real output vector
  69:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * @param[in]  numSamples number of complex samples in the input vector
  70:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * @return none.
  71:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  */
  72:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  73:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** void arm_cmplx_mag_squared_f32(
  74:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   float32_t * pSrc,
  75:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   float32_t * pDst,
  76:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   uint32_t numSamples)
  77:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** {
  28              	 .loc 1 77 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33 0000 80B4     	 push {r7}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 4
  36              	 .cfi_offset 7,-4
  37 0002 9DB0     	 sub sp,sp,#116
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 120
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
  43 0006 F860     	 str r0,[r7,#12]
  44 0008 B960     	 str r1,[r7,#8]
  45 000a 7A60     	 str r2,[r7,#4]
  78:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   float32_t real, imag;                          /* Temporary variables to store real and imaginary
  79:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   uint32_t blkCnt;                               /* loop counter */
  80:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  81:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** #if defined (ARM_MATH_DSP)
  82:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   float32_t real1, real2, real3, real4;          /* Temporary variables to hold real values */
  83:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   float32_t imag1, imag2, imag3, imag4;          /* Temporary variables to hold imaginary values */
  84:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   float32_t mul1, mul2, mul3, mul4;              /* Temporary variables */
  85:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   float32_t mul5, mul6, mul7, mul8;              /* Temporary variables */
  86:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   float32_t out1, out2, out3, out4;              /* Temporary variables to hold output values */
  87:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  88:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   /*loop Unrolling */
  89:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   blkCnt = numSamples >> 2u;
  46              	 .loc 1 89 0
  47 000c 7B68     	 ldr r3,[r7,#4]
  48 000e 9B08     	 lsrs r3,r3,#2
  49 0010 FB66     	 str r3,[r7,#108]
  90:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  91:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
  92:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
  93:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   while (blkCnt > 0u)
  50              	 .loc 1 93 0
  51 0012 8FE0     	 b .L2
  52              	.L3:
  94:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   {
  95:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* C[0] = (A[0] * A[0] + A[1] * A[1]) */
  96:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* read real input sample from source buffer */
  97:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     real1 = pSrc[0];
  53              	 .loc 1 97 0
  54 0014 FB68     	 ldr r3,[r7,#12]
  55 0016 1B68     	 ldr r3,[r3]
  56 0018 BB66     	 str r3,[r7,#104]
  98:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* read imaginary input sample from source buffer */
  99:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     imag1 = pSrc[1];
  57              	 .loc 1 99 0
  58 001a FB68     	 ldr r3,[r7,#12]
  59 001c 5B68     	 ldr r3,[r3,#4]
  60 001e 7B66     	 str r3,[r7,#100]
 100:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 101:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* calculate power of real value */
 102:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     mul1 = real1 * real1;
  61              	 .loc 1 102 0
  62 0020 97ED1A7A 	 flds s14,[r7,#104]
  63 0024 D7ED1A7A 	 flds s15,[r7,#104]
  64 0028 67EE277A 	 fmuls s15,s14,s15
  65 002c C7ED187A 	 fsts s15,[r7,#96]
 103:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 104:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* read real input sample from source buffer */
 105:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     real2 = pSrc[2];
  66              	 .loc 1 105 0
  67 0030 FB68     	 ldr r3,[r7,#12]
  68 0032 9B68     	 ldr r3,[r3,#8]
  69 0034 FB65     	 str r3,[r7,#92]
 106:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 107:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* calculate power of imaginary value */
 108:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     mul2 = imag1 * imag1;
  70              	 .loc 1 108 0
  71 0036 97ED197A 	 flds s14,[r7,#100]
  72 003a D7ED197A 	 flds s15,[r7,#100]
  73 003e 67EE277A 	 fmuls s15,s14,s15
  74 0042 C7ED167A 	 fsts s15,[r7,#88]
 109:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 110:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* read imaginary input sample from source buffer */
 111:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     imag2 = pSrc[3];
  75              	 .loc 1 111 0
  76 0046 FB68     	 ldr r3,[r7,#12]
  77 0048 DB68     	 ldr r3,[r3,#12]
  78 004a 7B65     	 str r3,[r7,#84]
 112:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 113:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* calculate power of real value */
 114:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     mul3 = real2 * real2;
  79              	 .loc 1 114 0
  80 004c 97ED177A 	 flds s14,[r7,#92]
  81 0050 D7ED177A 	 flds s15,[r7,#92]
  82 0054 67EE277A 	 fmuls s15,s14,s15
  83 0058 C7ED147A 	 fsts s15,[r7,#80]
 115:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 116:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* read real input sample from source buffer */
 117:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     real3 = pSrc[4];
  84              	 .loc 1 117 0
  85 005c FB68     	 ldr r3,[r7,#12]
  86 005e 1B69     	 ldr r3,[r3,#16]
  87 0060 FB64     	 str r3,[r7,#76]
 118:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 119:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* calculate power of imaginary value */
 120:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     mul4 = imag2 * imag2;
  88              	 .loc 1 120 0
  89 0062 97ED157A 	 flds s14,[r7,#84]
  90 0066 D7ED157A 	 flds s15,[r7,#84]
  91 006a 67EE277A 	 fmuls s15,s14,s15
  92 006e C7ED127A 	 fsts s15,[r7,#72]
 121:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 122:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* read imaginary input sample from source buffer */
 123:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     imag3 = pSrc[5];
  93              	 .loc 1 123 0
  94 0072 FB68     	 ldr r3,[r7,#12]
  95 0074 5B69     	 ldr r3,[r3,#20]
  96 0076 7B64     	 str r3,[r7,#68]
 124:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 125:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* calculate power of real value */
 126:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     mul5 = real3 * real3;
  97              	 .loc 1 126 0
  98 0078 97ED137A 	 flds s14,[r7,#76]
  99 007c D7ED137A 	 flds s15,[r7,#76]
 100 0080 67EE277A 	 fmuls s15,s14,s15
 101 0084 C7ED107A 	 fsts s15,[r7,#64]
 127:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* calculate power of imaginary value */
 128:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     mul6 = imag3 * imag3;
 102              	 .loc 1 128 0
 103 0088 97ED117A 	 flds s14,[r7,#68]
 104 008c D7ED117A 	 flds s15,[r7,#68]
 105 0090 67EE277A 	 fmuls s15,s14,s15
 106 0094 C7ED0F7A 	 fsts s15,[r7,#60]
 129:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 130:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* read real input sample from source buffer */
 131:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     real4 = pSrc[6];
 107              	 .loc 1 131 0
 108 0098 FB68     	 ldr r3,[r7,#12]
 109 009a 9B69     	 ldr r3,[r3,#24]
 110 009c BB63     	 str r3,[r7,#56]
 132:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 133:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* accumulate real and imaginary powers */
 134:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     out1 = mul1 + mul2;
 111              	 .loc 1 134 0
 112 009e 97ED187A 	 flds s14,[r7,#96]
 113 00a2 D7ED167A 	 flds s15,[r7,#88]
 114 00a6 77EE277A 	 fadds s15,s14,s15
 115 00aa C7ED0D7A 	 fsts s15,[r7,#52]
 135:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 136:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* read imaginary input sample from source buffer */
 137:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     imag4 = pSrc[7];
 116              	 .loc 1 137 0
 117 00ae FB68     	 ldr r3,[r7,#12]
 118 00b0 DB69     	 ldr r3,[r3,#28]
 119 00b2 3B63     	 str r3,[r7,#48]
 138:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 139:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* accumulate real and imaginary powers */
 140:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     out2 = mul3 + mul4;
 120              	 .loc 1 140 0
 121 00b4 97ED147A 	 flds s14,[r7,#80]
 122 00b8 D7ED127A 	 flds s15,[r7,#72]
 123 00bc 77EE277A 	 fadds s15,s14,s15
 124 00c0 C7ED0B7A 	 fsts s15,[r7,#44]
 141:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 142:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* calculate power of real value */
 143:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     mul7 = real4 * real4;
 125              	 .loc 1 143 0
 126 00c4 97ED0E7A 	 flds s14,[r7,#56]
 127 00c8 D7ED0E7A 	 flds s15,[r7,#56]
 128 00cc 67EE277A 	 fmuls s15,s14,s15
 129 00d0 C7ED0A7A 	 fsts s15,[r7,#40]
 144:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* calculate power of imaginary value */
 145:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     mul8 = imag4 * imag4;
 130              	 .loc 1 145 0
 131 00d4 97ED0C7A 	 flds s14,[r7,#48]
 132 00d8 D7ED0C7A 	 flds s15,[r7,#48]
 133 00dc 67EE277A 	 fmuls s15,s14,s15
 134 00e0 C7ED097A 	 fsts s15,[r7,#36]
 146:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 147:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* store output to destination */
 148:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     pDst[0] = out1;
 135              	 .loc 1 148 0
 136 00e4 BB68     	 ldr r3,[r7,#8]
 137 00e6 7A6B     	 ldr r2,[r7,#52]
 138 00e8 1A60     	 str r2,[r3]
 149:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 150:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* accumulate real and imaginary powers */
 151:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     out3 = mul5 + mul6;
 139              	 .loc 1 151 0
 140 00ea 97ED107A 	 flds s14,[r7,#64]
 141 00ee D7ED0F7A 	 flds s15,[r7,#60]
 142 00f2 77EE277A 	 fadds s15,s14,s15
 143 00f6 C7ED087A 	 fsts s15,[r7,#32]
 152:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 153:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* store output to destination */
 154:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     pDst[1] = out2;
 144              	 .loc 1 154 0
 145 00fa BB68     	 ldr r3,[r7,#8]
 146 00fc 0433     	 adds r3,r3,#4
 147 00fe FA6A     	 ldr r2,[r7,#44]
 148 0100 1A60     	 str r2,[r3]
 155:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 156:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* accumulate real and imaginary powers */
 157:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     out4 = mul7 + mul8;
 149              	 .loc 1 157 0
 150 0102 97ED0A7A 	 flds s14,[r7,#40]
 151 0106 D7ED097A 	 flds s15,[r7,#36]
 152 010a 77EE277A 	 fadds s15,s14,s15
 153 010e C7ED077A 	 fsts s15,[r7,#28]
 158:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 159:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* store output to destination */
 160:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     pDst[2] = out3;
 154              	 .loc 1 160 0
 155 0112 BB68     	 ldr r3,[r7,#8]
 156 0114 0833     	 adds r3,r3,#8
 157 0116 3A6A     	 ldr r2,[r7,#32]
 158 0118 1A60     	 str r2,[r3]
 161:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 162:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* increment destination pointer by 8 to process next samples */
 163:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     pSrc += 8u;
 159              	 .loc 1 163 0
 160 011a FB68     	 ldr r3,[r7,#12]
 161 011c 2033     	 adds r3,r3,#32
 162 011e FB60     	 str r3,[r7,#12]
 164:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 165:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* store output to destination */
 166:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     pDst[3] = out4;
 163              	 .loc 1 166 0
 164 0120 BB68     	 ldr r3,[r7,#8]
 165 0122 0C33     	 adds r3,r3,#12
 166 0124 FA69     	 ldr r2,[r7,#28]
 167 0126 1A60     	 str r2,[r3]
 167:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 168:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* increment destination pointer by 4 to process next samples */
 169:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     pDst += 4u;
 168              	 .loc 1 169 0
 169 0128 BB68     	 ldr r3,[r7,#8]
 170 012a 1033     	 adds r3,r3,#16
 171 012c BB60     	 str r3,[r7,#8]
 170:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 171:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* Decrement the loop counter */
 172:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     blkCnt--;
 172              	 .loc 1 172 0
 173 012e FB6E     	 ldr r3,[r7,#108]
 174 0130 013B     	 subs r3,r3,#1
 175 0132 FB66     	 str r3,[r7,#108]
 176              	.L2:
  93:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   {
 177              	 .loc 1 93 0
 178 0134 FB6E     	 ldr r3,[r7,#108]
 179 0136 002B     	 cmp r3,#0
 180 0138 7FF46CAF 	 bne .L3
 173:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   }
 174:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 175:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
 176:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****    ** No loop unrolling is used. */
 177:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   blkCnt = numSamples % 0x4u;
 181              	 .loc 1 177 0
 182 013c 7B68     	 ldr r3,[r7,#4]
 183 013e 03F00303 	 and r3,r3,#3
 184 0142 FB66     	 str r3,[r7,#108]
 178:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 179:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** #else
 180:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 181:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   /* Run the below code for Cortex-M0 */
 182:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 183:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   blkCnt = numSamples;
 184:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 185:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** #endif /* #if defined (ARM_MATH_DSP) */
 186:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 187:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   while (blkCnt > 0u)
 185              	 .loc 1 187 0
 186 0144 1FE0     	 b .L4
 187              	.L5:
 188:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   {
 189:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* C[0] = (A[0] * A[0] + A[1] * A[1]) */
 190:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     real = *pSrc++;
 188              	 .loc 1 190 0
 189 0146 FB68     	 ldr r3,[r7,#12]
 190 0148 1A1D     	 adds r2,r3,#4
 191 014a FA60     	 str r2,[r7,#12]
 192 014c 1B68     	 ldr r3,[r3]
 193 014e BB61     	 str r3,[r7,#24]
 191:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     imag = *pSrc++;
 194              	 .loc 1 191 0
 195 0150 FB68     	 ldr r3,[r7,#12]
 196 0152 1A1D     	 adds r2,r3,#4
 197 0154 FA60     	 str r2,[r7,#12]
 198 0156 1B68     	 ldr r3,[r3]
 199 0158 7B61     	 str r3,[r7,#20]
 192:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 193:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* out = (real * real) + (imag * imag) */
 194:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* store the result in the destination buffer. */
 195:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     *pDst++ = (real * real) + (imag * imag);
 200              	 .loc 1 195 0
 201 015a BB68     	 ldr r3,[r7,#8]
 202 015c 1A1D     	 adds r2,r3,#4
 203 015e BA60     	 str r2,[r7,#8]
 204 0160 97ED067A 	 flds s14,[r7,#24]
 205 0164 D7ED067A 	 flds s15,[r7,#24]
 206 0168 27EE277A 	 fmuls s14,s14,s15
 207 016c D7ED056A 	 flds s13,[r7,#20]
 208 0170 D7ED057A 	 flds s15,[r7,#20]
 209 0174 66EEA77A 	 fmuls s15,s13,s15
 210 0178 77EE277A 	 fadds s15,s14,s15
 211 017c C3ED007A 	 fsts s15,[r3]
 196:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 197:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* Decrement the loop counter */
 198:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     blkCnt--;
 212              	 .loc 1 198 0
 213 0180 FB6E     	 ldr r3,[r7,#108]
 214 0182 013B     	 subs r3,r3,#1
 215 0184 FB66     	 str r3,[r7,#108]
 216              	.L4:
 187:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   {
 217              	 .loc 1 187 0
 218 0186 FB6E     	 ldr r3,[r7,#108]
 219 0188 002B     	 cmp r3,#0
 220 018a DCD1     	 bne .L5
 199:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   }
 200:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** }
 221              	 .loc 1 200 0
 222 018c 7437     	 adds r7,r7,#116
 223              	.LCFI3:
 224              	 .cfi_def_cfa_offset 4
 225 018e BD46     	 mov sp,r7
 226              	.LCFI4:
 227              	 .cfi_def_cfa_register 13
 228              	 
 229 0190 5DF8047B 	 ldr r7,[sp],#4
 230              	.LCFI5:
 231              	 .cfi_restore 7
 232              	 .cfi_def_cfa_offset 0
 233 0194 7047     	 bx lr
 234              	 .cfi_endproc
 235              	.LFE135:
 237 0196 00BF     	 .text
 238              	.Letext0:
 239              	 .file 2 "c:\\program files (x86)\\dave\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 240              	 .file 3 "c:\\program files (x86)\\dave\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 241              	 .file 4 "C:/Users/VMORAIS/Documents/DAVE_WS/1p_inverter_200V/Dave/Generated/CMSIS_DSP/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_cmplx_mag_squared_f32.c
    {standard input}:20     .text.arm_cmplx_mag_squared_f32:00000000 $t
    {standard input}:25     .text.arm_cmplx_mag_squared_f32:00000000 arm_cmplx_mag_squared_f32
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
