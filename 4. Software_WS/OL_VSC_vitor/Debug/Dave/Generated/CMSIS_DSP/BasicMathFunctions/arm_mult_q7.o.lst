   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "arm_mult_q7.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.arm_mult_q7,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_mult_q7
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_mult_q7:
  26              	.LFB135:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c"
   1:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** /* ----------------------------------------------------------------------
   2:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * Project:      CMSIS DSP Library
   3:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * Title:        arm_mult_q7.c
   4:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * Description:  Q7 vector multiplication
   5:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  *
   6:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * $Date:        27. January 2017
   7:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * $Revision:    V.1.5.1
   8:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  *
   9:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * Target Processor: Cortex-M cores
  10:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * -------------------------------------------------------------------- */
  11:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** /*
  12:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  *
  14:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * SPDX-License-Identifier: Apache-2.0
  15:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  *
  16:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * not use this file except in compliance with the License.
  18:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * You may obtain a copy of the License at
  19:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  *
  20:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  *
  22:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * Unless required by applicable law or agreed to in writing, software
  23:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * See the License for the specific language governing permissions and
  26:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * limitations under the License.
  27:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  */
  28:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
  29:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  30:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
  31:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** /**
  32:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * @ingroup groupMath
  33:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  */
  34:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
  35:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** /**
  36:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * @addtogroup BasicMult
  37:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * @{
  38:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  */
  39:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
  40:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** /**
  41:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * @brief           Q7 vector multiplication
  42:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * @param[in]       *pSrcA points to the first input vector
  43:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * @param[in]       *pSrcB points to the second input vector
  44:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * @param[out]      *pDst points to the output vector
  45:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * @param[in]       blockSize number of samples in each vector
  46:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * @return none.
  47:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  *
  48:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * <b>Scaling and Overflow Behavior:</b>
  49:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * \par
  50:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * The function uses saturating arithmetic.
  51:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * Results outside of the allowable Q7 range [0x80 0x7F] will be saturated.
  52:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  */
  53:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
  54:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** void arm_mult_q7(
  55:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   q7_t * pSrcA,
  56:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   q7_t * pSrcB,
  57:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   q7_t * pDst,
  58:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   uint32_t blockSize)
  59:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** {
  28              	 .loc 1 59 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33 0000 80B4     	 push {r7}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 4
  36              	 .cfi_offset 7,-4
  37 0002 95B0     	 sub sp,sp,#84
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 88
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
  43 0006 F860     	 str r0,[r7,#12]
  44 0008 B960     	 str r1,[r7,#8]
  45 000a 7A60     	 str r2,[r7,#4]
  46 000c 3B60     	 str r3,[r7]
  60:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   uint32_t blkCnt;                               /* loop counters */
  61:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
  62:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** #if defined (ARM_MATH_DSP)
  63:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
  64:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** /* Run the below code for Cortex-M4 and Cortex-M3 */
  65:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   q7_t out1, out2, out3, out4;                   /* Temporary variables to store the product */
  66:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
  67:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   /* loop Unrolling */
  68:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   blkCnt = blockSize >> 2u;
  47              	 .loc 1 68 0
  48 000e 3B68     	 ldr r3,[r7]
  49 0010 9B08     	 lsrs r3,r3,#2
  50 0012 FB64     	 str r3,[r7,#76]
  69:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
  70:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
  71:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
  72:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   while (blkCnt > 0u)
  51              	 .loc 1 72 0
  52 0014 6CE0     	 b .L2
  53              	.L3:
  54              	.LBB2:
  73:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   {
  74:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     /* C = A * B */
  75:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     /* Multiply the inputs and store the results in temporary variables */
  76:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     out1 = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
  55              	 .loc 1 76 0
  56 0016 FB68     	 ldr r3,[r7,#12]
  57 0018 5A1C     	 adds r2,r3,#1
  58 001a FA60     	 str r2,[r7,#12]
  59 001c 1B78     	 ldrb r3,[r3]
  60 001e 5AB2     	 sxtb r2,r3
  61 0020 BB68     	 ldr r3,[r7,#8]
  62 0022 591C     	 adds r1,r3,#1
  63 0024 B960     	 str r1,[r7,#8]
  64 0026 1B78     	 ldrb r3,[r3]
  65 0028 5BB2     	 sxtb r3,r3
  66 002a 03FB02F3 	 mul r3,r3,r2
  67 002e DB11     	 asrs r3,r3,#7
  68 0030 BB64     	 str r3,[r7,#72]
  69 0032 BB6C     	 ldr r3,[r7,#72]
  70              	
  71 0034 03F30703 	 ssat r3,#8,r3
  72              	
  73              	 .thumb
  74 0038 7B64     	 str r3,[r7,#68]
  75 003a 7B6C     	 ldr r3,[r7,#68]
  76              	.LBE2:
  77 003c 87F84330 	 strb r3,[r7,#67]
  78              	.LBB3:
  77:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     out2 = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
  79              	 .loc 1 77 0
  80 0040 FB68     	 ldr r3,[r7,#12]
  81 0042 5A1C     	 adds r2,r3,#1
  82 0044 FA60     	 str r2,[r7,#12]
  83 0046 1B78     	 ldrb r3,[r3]
  84 0048 5AB2     	 sxtb r2,r3
  85 004a BB68     	 ldr r3,[r7,#8]
  86 004c 591C     	 adds r1,r3,#1
  87 004e B960     	 str r1,[r7,#8]
  88 0050 1B78     	 ldrb r3,[r3]
  89 0052 5BB2     	 sxtb r3,r3
  90 0054 03FB02F3 	 mul r3,r3,r2
  91 0058 DB11     	 asrs r3,r3,#7
  92 005a FB63     	 str r3,[r7,#60]
  93 005c FB6B     	 ldr r3,[r7,#60]
  94              	
  95 005e 03F30703 	 ssat r3,#8,r3
  96              	
  97              	 .thumb
  98 0062 BB63     	 str r3,[r7,#56]
  99 0064 BB6B     	 ldr r3,[r7,#56]
 100              	.LBE3:
 101 0066 87F83730 	 strb r3,[r7,#55]
 102              	.LBB4:
  78:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     out3 = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
 103              	 .loc 1 78 0
 104 006a FB68     	 ldr r3,[r7,#12]
 105 006c 5A1C     	 adds r2,r3,#1
 106 006e FA60     	 str r2,[r7,#12]
 107 0070 1B78     	 ldrb r3,[r3]
 108 0072 5AB2     	 sxtb r2,r3
 109 0074 BB68     	 ldr r3,[r7,#8]
 110 0076 591C     	 adds r1,r3,#1
 111 0078 B960     	 str r1,[r7,#8]
 112 007a 1B78     	 ldrb r3,[r3]
 113 007c 5BB2     	 sxtb r3,r3
 114 007e 03FB02F3 	 mul r3,r3,r2
 115 0082 DB11     	 asrs r3,r3,#7
 116 0084 3B63     	 str r3,[r7,#48]
 117 0086 3B6B     	 ldr r3,[r7,#48]
 118              	
 119 0088 03F30703 	 ssat r3,#8,r3
 120              	
 121              	 .thumb
 122 008c FB62     	 str r3,[r7,#44]
 123 008e FB6A     	 ldr r3,[r7,#44]
 124              	.LBE4:
 125 0090 87F82B30 	 strb r3,[r7,#43]
 126              	.LBB5:
  79:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     out4 = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
 127              	 .loc 1 79 0
 128 0094 FB68     	 ldr r3,[r7,#12]
 129 0096 5A1C     	 adds r2,r3,#1
 130 0098 FA60     	 str r2,[r7,#12]
 131 009a 1B78     	 ldrb r3,[r3]
 132 009c 5AB2     	 sxtb r2,r3
 133 009e BB68     	 ldr r3,[r7,#8]
 134 00a0 591C     	 adds r1,r3,#1
 135 00a2 B960     	 str r1,[r7,#8]
 136 00a4 1B78     	 ldrb r3,[r3]
 137 00a6 5BB2     	 sxtb r3,r3
 138 00a8 03FB02F3 	 mul r3,r3,r2
 139 00ac DB11     	 asrs r3,r3,#7
 140 00ae 7B62     	 str r3,[r7,#36]
 141 00b0 7B6A     	 ldr r3,[r7,#36]
 142              	
 143 00b2 03F30703 	 ssat r3,#8,r3
 144              	
 145              	 .thumb
 146 00b6 3B62     	 str r3,[r7,#32]
 147 00b8 3B6A     	 ldr r3,[r7,#32]
 148              	.LBE5:
 149 00ba FB77     	 strb r3,[r7,#31]
  80:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
  81:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     /* Store the results of 4 inputs in the destination buffer in single cycle by packing */
  82:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     *__SIMD32(pDst)++ = __PACKq7(out1, out2, out3, out4);
 150              	 .loc 1 82 0
 151 00bc 3A1D     	 adds r2,r7,#4
 152 00be 1368     	 ldr r3,[r2]
 153 00c0 191D     	 adds r1,r3,#4
 154 00c2 1160     	 str r1,[r2]
 155 00c4 97F94320 	 ldrsb r2,[r7,#67]
 156 00c8 D1B2     	 uxtb r1,r2
 157 00ca 97F93720 	 ldrsb r2,[r7,#55]
 158 00ce 1202     	 lsls r2,r2,#8
 159 00d0 92B2     	 uxth r2,r2
 160 00d2 1143     	 orrs r1,r1,r2
 161 00d4 97F92B20 	 ldrsb r2,[r7,#43]
 162 00d8 1204     	 lsls r2,r2,#16
 163 00da 02F47F02 	 and r2,r2,#16711680
 164 00de 1143     	 orrs r1,r1,r2
 165 00e0 97F91F20 	 ldrsb r2,[r7,#31]
 166 00e4 1206     	 lsls r2,r2,#24
 167 00e6 0A43     	 orrs r2,r2,r1
 168 00e8 1A60     	 str r2,[r3]
  83:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
  84:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     /* Decrement the blockSize loop counter */
  85:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     blkCnt--;
 169              	 .loc 1 85 0
 170 00ea FB6C     	 ldr r3,[r7,#76]
 171 00ec 013B     	 subs r3,r3,#1
 172 00ee FB64     	 str r3,[r7,#76]
 173              	.L2:
  72:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   {
 174              	 .loc 1 72 0
 175 00f0 FB6C     	 ldr r3,[r7,#76]
 176 00f2 002B     	 cmp r3,#0
 177 00f4 8FD1     	 bne .L3
  86:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   }
  87:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
  88:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
  89:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****    ** No loop unrolling is used. */
  90:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   blkCnt = blockSize % 0x4u;
 178              	 .loc 1 90 0
 179 00f6 3B68     	 ldr r3,[r7]
 180 00f8 03F00303 	 and r3,r3,#3
 181 00fc FB64     	 str r3,[r7,#76]
  91:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
  92:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** #else
  93:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
  94:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   /* Run the below code for Cortex-M0 */
  95:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
  96:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   /* Initialize blkCnt with number of samples */
  97:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   blkCnt = blockSize;
  98:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
  99:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** #endif /* #if defined (ARM_MATH_DSP) */
 100:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
 101:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
 102:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   while (blkCnt > 0u)
 182              	 .loc 1 102 0
 183 00fe 1AE0     	 b .L4
 184              	.L5:
 103:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   {
 104:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     /* C = A * B */
 105:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     /* Multiply the inputs and store the result in the destination buffer */
 106:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     *pDst++ = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
 185              	 .loc 1 106 0
 186 0100 7B68     	 ldr r3,[r7,#4]
 187 0102 5A1C     	 adds r2,r3,#1
 188 0104 7A60     	 str r2,[r7,#4]
 189              	.LBB6:
 190 0106 FA68     	 ldr r2,[r7,#12]
 191 0108 511C     	 adds r1,r2,#1
 192 010a F960     	 str r1,[r7,#12]
 193 010c 1278     	 ldrb r2,[r2]
 194 010e 51B2     	 sxtb r1,r2
 195 0110 BA68     	 ldr r2,[r7,#8]
 196 0112 501C     	 adds r0,r2,#1
 197 0114 B860     	 str r0,[r7,#8]
 198 0116 1278     	 ldrb r2,[r2]
 199 0118 52B2     	 sxtb r2,r2
 200 011a 02FB01F2 	 mul r2,r2,r1
 201 011e D211     	 asrs r2,r2,#7
 202 0120 BA61     	 str r2,[r7,#24]
 203 0122 BA69     	 ldr r2,[r7,#24]
 204              	
 205 0124 02F30702 	 ssat r2,#8,r2
 206              	
 207              	 .thumb
 208 0128 7A61     	 str r2,[r7,#20]
 209 012a 7A69     	 ldr r2,[r7,#20]
 210              	.LBE6:
 211 012c D2B2     	 uxtb r2,r2
 212 012e 1A70     	 strb r2,[r3]
 107:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
 108:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     /* Decrement the blockSize loop counter */
 109:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     blkCnt--;
 213              	 .loc 1 109 0
 214 0130 FB6C     	 ldr r3,[r7,#76]
 215 0132 013B     	 subs r3,r3,#1
 216 0134 FB64     	 str r3,[r7,#76]
 217              	.L4:
 102:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   {
 218              	 .loc 1 102 0
 219 0136 FB6C     	 ldr r3,[r7,#76]
 220 0138 002B     	 cmp r3,#0
 221 013a E1D1     	 bne .L5
 110:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   }
 111:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** }
 222              	 .loc 1 111 0
 223 013c 5437     	 adds r7,r7,#84
 224              	.LCFI3:
 225              	 .cfi_def_cfa_offset 4
 226 013e BD46     	 mov sp,r7
 227              	.LCFI4:
 228              	 .cfi_def_cfa_register 13
 229              	 
 230 0140 5DF8047B 	 ldr r7,[sp],#4
 231              	.LCFI5:
 232              	 .cfi_restore 7
 233              	 .cfi_def_cfa_offset 0
 234 0144 7047     	 bx lr
 235              	 .cfi_endproc
 236              	.LFE135:
 238 0146 00BF     	 .text
 239              	.Letext0:
 240              	 .file 2 "c:\\program files (x86)\\dave\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 241              	 .file 3 "c:\\program files (x86)\\dave\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 242              	 .file 4 "F:/Projects/20190909 - 3phase_inverter/3phase_inverter/4. Software_WS/OL_VSC_vitor/Dave/Generated/CMSIS_DSP/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_mult_q7.c
    {standard input}:20     .text.arm_mult_q7:00000000 $t
    {standard input}:25     .text.arm_mult_q7:00000000 arm_mult_q7
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
