   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "arm_mult_q15.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.arm_mult_q15,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_mult_q15
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_mult_q15:
  26              	.LFB135:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c"
   1:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** /* ----------------------------------------------------------------------
   2:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  * Project:      CMSIS DSP Library
   3:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  * Title:        arm_mult_q15.c
   4:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  * Description:  Q15 vector multiplication
   5:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  *
   6:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  * $Date:        27. January 2017
   7:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  * $Revision:    V.1.5.1
   8:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  *
   9:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  * Target Processor: Cortex-M cores
  10:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  * -------------------------------------------------------------------- */
  11:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** /*
  12:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  *
  14:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  * SPDX-License-Identifier: Apache-2.0
  15:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  *
  16:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  * not use this file except in compliance with the License.
  18:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  * You may obtain a copy of the License at
  19:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  *
  20:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  *
  22:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  * Unless required by applicable law or agreed to in writing, software
  23:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  * See the License for the specific language governing permissions and
  26:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  * limitations under the License.
  27:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  */
  28:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
  29:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  30:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
  31:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** /**
  32:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  * @ingroup groupMath
  33:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  */
  34:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
  35:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** /**
  36:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  * @addtogroup BasicMult
  37:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  * @{
  38:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  */
  39:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
  40:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
  41:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** /**
  42:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  * @brief           Q15 vector multiplication
  43:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  * @param[in]       *pSrcA points to the first input vector
  44:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  * @param[in]       *pSrcB points to the second input vector
  45:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  * @param[out]      *pDst points to the output vector
  46:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  * @param[in]       blockSize number of samples in each vector
  47:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  * @return none.
  48:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  *
  49:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  * <b>Scaling and Overflow Behavior:</b>
  50:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  * \par
  51:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  * The function uses saturating arithmetic.
  52:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  * Results outside of the allowable Q15 range [0x8000 0x7FFF] will be saturated.
  53:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  */
  54:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
  55:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** void arm_mult_q15(
  56:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   q15_t * pSrcA,
  57:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   q15_t * pSrcB,
  58:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   q15_t * pDst,
  59:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   uint32_t blockSize)
  60:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** {
  28              	 .loc 1 60 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33 0000 80B4     	 push {r7}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 4
  36              	 .cfi_offset 7,-4
  37 0002 9DB0     	 sub sp,sp,#116
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 120
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
  43 0006 F860     	 str r0,[r7,#12]
  44 0008 B960     	 str r1,[r7,#8]
  45 000a 7A60     	 str r2,[r7,#4]
  46 000c 3B60     	 str r3,[r7]
  61:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   uint32_t blkCnt;                               /* loop counters */
  62:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
  63:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** #if defined (ARM_MATH_DSP)
  64:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
  65:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** /* Run the below code for Cortex-M4 and Cortex-M3 */
  66:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   q31_t inA1, inA2, inB1, inB2;                  /* temporary input variables */
  67:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   q15_t out1, out2, out3, out4;                  /* temporary output variables */
  68:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   q31_t mul1, mul2, mul3, mul4;                  /* temporary variables */
  69:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
  70:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   /* loop Unrolling */
  71:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   blkCnt = blockSize >> 2u;
  47              	 .loc 1 71 0
  48 000e 3B68     	 ldr r3,[r7]
  49 0010 9B08     	 lsrs r3,r3,#2
  50 0012 FB66     	 str r3,[r7,#108]
  72:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
  73:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
  74:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
  75:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   while (blkCnt > 0u)
  51              	 .loc 1 75 0
  52 0014 83E0     	 b .L2
  53              	.L3:
  76:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   {
  77:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     /* read two samples at a time from sourceA */
  78:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     inA1 = *__SIMD32(pSrcA)++;
  54              	 .loc 1 78 0
  55 0016 07F10C02 	 add r2,r7,#12
  56 001a 1368     	 ldr r3,[r2]
  57 001c 191D     	 adds r1,r3,#4
  58 001e 1160     	 str r1,[r2]
  59 0020 1B68     	 ldr r3,[r3]
  60 0022 BB66     	 str r3,[r7,#104]
  79:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     /* read two samples at a time from sourceB */
  80:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     inB1 = *__SIMD32(pSrcB)++;
  61              	 .loc 1 80 0
  62 0024 07F10802 	 add r2,r7,#8
  63 0028 1368     	 ldr r3,[r2]
  64 002a 191D     	 adds r1,r3,#4
  65 002c 1160     	 str r1,[r2]
  66 002e 1B68     	 ldr r3,[r3]
  67 0030 7B66     	 str r3,[r7,#100]
  81:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     /* read two samples at a time from sourceA */
  82:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     inA2 = *__SIMD32(pSrcA)++;
  68              	 .loc 1 82 0
  69 0032 07F10C02 	 add r2,r7,#12
  70 0036 1368     	 ldr r3,[r2]
  71 0038 191D     	 adds r1,r3,#4
  72 003a 1160     	 str r1,[r2]
  73 003c 1B68     	 ldr r3,[r3]
  74 003e 3B66     	 str r3,[r7,#96]
  83:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     /* read two samples at a time from sourceB */
  84:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     inB2 = *__SIMD32(pSrcB)++;
  75              	 .loc 1 84 0
  76 0040 07F10802 	 add r2,r7,#8
  77 0044 1368     	 ldr r3,[r2]
  78 0046 191D     	 adds r1,r3,#4
  79 0048 1160     	 str r1,[r2]
  80 004a 1B68     	 ldr r3,[r3]
  81 004c FB65     	 str r3,[r7,#92]
  85:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
  86:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     /* multiply mul = sourceA * sourceB */
  87:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     mul1 = (q31_t) ((q15_t) (inA1 >> 16) * (q15_t) (inB1 >> 16));
  82              	 .loc 1 87 0
  83 004e BB6E     	 ldr r3,[r7,#104]
  84 0050 1B14     	 asrs r3,r3,#16
  85 0052 9BB2     	 uxth r3,r3
  86 0054 1BB2     	 sxth r3,r3
  87 0056 7A6E     	 ldr r2,[r7,#100]
  88 0058 1214     	 asrs r2,r2,#16
  89 005a 92B2     	 uxth r2,r2
  90 005c 12B2     	 sxth r2,r2
  91 005e 02FB03F3 	 mul r3,r2,r3
  92 0062 BB65     	 str r3,[r7,#88]
  88:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     mul2 = (q31_t) ((q15_t) inA1 * (q15_t) inB1);
  93              	 .loc 1 88 0
  94 0064 BB6E     	 ldr r3,[r7,#104]
  95 0066 9BB2     	 uxth r3,r3
  96 0068 1BB2     	 sxth r3,r3
  97 006a 7A6E     	 ldr r2,[r7,#100]
  98 006c 92B2     	 uxth r2,r2
  99 006e 12B2     	 sxth r2,r2
 100 0070 02FB03F3 	 mul r3,r2,r3
 101 0074 7B65     	 str r3,[r7,#84]
  89:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     mul3 = (q31_t) ((q15_t) (inA2 >> 16) * (q15_t) (inB2 >> 16));
 102              	 .loc 1 89 0
 103 0076 3B6E     	 ldr r3,[r7,#96]
 104 0078 1B14     	 asrs r3,r3,#16
 105 007a 9BB2     	 uxth r3,r3
 106 007c 1BB2     	 sxth r3,r3
 107 007e FA6D     	 ldr r2,[r7,#92]
 108 0080 1214     	 asrs r2,r2,#16
 109 0082 92B2     	 uxth r2,r2
 110 0084 12B2     	 sxth r2,r2
 111 0086 02FB03F3 	 mul r3,r2,r3
 112 008a 3B65     	 str r3,[r7,#80]
  90:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     mul4 = (q31_t) ((q15_t) inA2 * (q15_t) inB2);
 113              	 .loc 1 90 0
 114 008c 3B6E     	 ldr r3,[r7,#96]
 115 008e 9BB2     	 uxth r3,r3
 116 0090 1BB2     	 sxth r3,r3
 117 0092 FA6D     	 ldr r2,[r7,#92]
 118 0094 92B2     	 uxth r2,r2
 119 0096 12B2     	 sxth r2,r2
 120 0098 02FB03F3 	 mul r3,r2,r3
 121 009c FB64     	 str r3,[r7,#76]
 122              	.LBB2:
  91:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
  92:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     /* saturate result to 16 bit */
  93:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     out1 = (q15_t) __SSAT(mul1 >> 15, 16);
 123              	 .loc 1 93 0
 124 009e BB6D     	 ldr r3,[r7,#88]
 125 00a0 DB13     	 asrs r3,r3,#15
 126 00a2 BB64     	 str r3,[r7,#72]
 127 00a4 BB6C     	 ldr r3,[r7,#72]
 128              	
 129 00a6 03F30F03 	 ssat r3,#16,r3
 130              	
 131              	 .thumb
 132 00aa 7B64     	 str r3,[r7,#68]
 133 00ac 7B6C     	 ldr r3,[r7,#68]
 134              	.LBE2:
 135 00ae A7F84230 	 strh r3,[r7,#66]
 136              	.LBB3:
  94:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     out2 = (q15_t) __SSAT(mul2 >> 15, 16);
 137              	 .loc 1 94 0
 138 00b2 7B6D     	 ldr r3,[r7,#84]
 139 00b4 DB13     	 asrs r3,r3,#15
 140 00b6 FB63     	 str r3,[r7,#60]
 141 00b8 FB6B     	 ldr r3,[r7,#60]
 142              	
 143 00ba 03F30F03 	 ssat r3,#16,r3
 144              	
 145              	 .thumb
 146 00be BB63     	 str r3,[r7,#56]
 147 00c0 BB6B     	 ldr r3,[r7,#56]
 148              	.LBE3:
 149 00c2 FB86     	 strh r3,[r7,#54]
 150              	.LBB4:
  95:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     out3 = (q15_t) __SSAT(mul3 >> 15, 16);
 151              	 .loc 1 95 0
 152 00c4 3B6D     	 ldr r3,[r7,#80]
 153 00c6 DB13     	 asrs r3,r3,#15
 154 00c8 3B63     	 str r3,[r7,#48]
 155 00ca 3B6B     	 ldr r3,[r7,#48]
 156              	
 157 00cc 03F30F03 	 ssat r3,#16,r3
 158              	
 159              	 .thumb
 160 00d0 FB62     	 str r3,[r7,#44]
 161 00d2 FB6A     	 ldr r3,[r7,#44]
 162              	.LBE4:
 163 00d4 7B85     	 strh r3,[r7,#42]
 164              	.LBB5:
  96:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     out4 = (q15_t) __SSAT(mul4 >> 15, 16);
 165              	 .loc 1 96 0
 166 00d6 FB6C     	 ldr r3,[r7,#76]
 167 00d8 DB13     	 asrs r3,r3,#15
 168 00da 7B62     	 str r3,[r7,#36]
 169 00dc 7B6A     	 ldr r3,[r7,#36]
 170              	
 171 00de 03F30F03 	 ssat r3,#16,r3
 172              	
 173              	 .thumb
 174 00e2 3B62     	 str r3,[r7,#32]
 175 00e4 3B6A     	 ldr r3,[r7,#32]
 176              	.LBE5:
 177 00e6 FB83     	 strh r3,[r7,#30]
  97:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
  98:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     /* store the result */
  99:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
 100:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
 101:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     *__SIMD32(pDst)++ = __PKHBT(out2, out1, 16);
 178              	 .loc 1 101 0
 179 00e8 3A1D     	 adds r2,r7,#4
 180 00ea 1368     	 ldr r3,[r2]
 181 00ec 191D     	 adds r1,r3,#4
 182 00ee 1160     	 str r1,[r2]
 183 00f0 B7F93620 	 ldrsh r2,[r7,#54]
 184 00f4 91B2     	 uxth r1,r2
 185 00f6 B7F94220 	 ldrsh r2,[r7,#66]
 186 00fa 1204     	 lsls r2,r2,#16
 187 00fc 0A43     	 orrs r2,r2,r1
 188 00fe 1A60     	 str r2,[r3]
 102:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     *__SIMD32(pDst)++ = __PKHBT(out4, out3, 16);
 189              	 .loc 1 102 0
 190 0100 3A1D     	 adds r2,r7,#4
 191 0102 1368     	 ldr r3,[r2]
 192 0104 191D     	 adds r1,r3,#4
 193 0106 1160     	 str r1,[r2]
 194 0108 B7F91E20 	 ldrsh r2,[r7,#30]
 195 010c 91B2     	 uxth r1,r2
 196 010e B7F92A20 	 ldrsh r2,[r7,#42]
 197 0112 1204     	 lsls r2,r2,#16
 198 0114 0A43     	 orrs r2,r2,r1
 199 0116 1A60     	 str r2,[r3]
 103:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
 104:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** #else
 105:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
 106:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     *__SIMD32(pDst)++ = __PKHBT(out2, out1, 16);
 107:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     *__SIMD32(pDst)++ = __PKHBT(out4, out3, 16);
 108:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
 109:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** #endif /* #ifndef ARM_MATH_BIG_ENDIAN */
 110:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
 111:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     /* Decrement the blockSize loop counter */
 112:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     blkCnt--;
 200              	 .loc 1 112 0
 201 0118 FB6E     	 ldr r3,[r7,#108]
 202 011a 013B     	 subs r3,r3,#1
 203 011c FB66     	 str r3,[r7,#108]
 204              	.L2:
  75:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   {
 205              	 .loc 1 75 0
 206 011e FB6E     	 ldr r3,[r7,#108]
 207 0120 002B     	 cmp r3,#0
 208 0122 7FF478AF 	 bne .L3
 113:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   }
 114:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
 115:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
 116:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****    ** No loop unrolling is used. */
 117:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   blkCnt = blockSize % 0x4u;
 209              	 .loc 1 117 0
 210 0126 3B68     	 ldr r3,[r7]
 211 0128 03F00303 	 and r3,r3,#3
 212 012c FB66     	 str r3,[r7,#108]
 118:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
 119:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** #else
 120:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
 121:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   /* Run the below code for Cortex-M0 */
 122:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
 123:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   /* Initialize blkCnt with number of samples */
 124:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   blkCnt = blockSize;
 125:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
 126:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** #endif /* #if defined (ARM_MATH_DSP) */
 127:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
 128:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
 129:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   while (blkCnt > 0u)
 213              	 .loc 1 129 0
 214 012e 1AE0     	 b .L4
 215              	.L5:
 130:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   {
 131:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     /* C = A * B */
 132:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     /* Multiply the inputs and store the result in the destination buffer */
 133:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     *pDst++ = (q15_t) __SSAT((((q31_t) (*pSrcA++) * (*pSrcB++)) >> 15), 16);
 216              	 .loc 1 133 0
 217 0130 7B68     	 ldr r3,[r7,#4]
 218 0132 9A1C     	 adds r2,r3,#2
 219 0134 7A60     	 str r2,[r7,#4]
 220              	.LBB6:
 221 0136 FA68     	 ldr r2,[r7,#12]
 222 0138 911C     	 adds r1,r2,#2
 223 013a F960     	 str r1,[r7,#12]
 224 013c 1288     	 ldrh r2,[r2]
 225 013e 11B2     	 sxth r1,r2
 226 0140 BA68     	 ldr r2,[r7,#8]
 227 0142 901C     	 adds r0,r2,#2
 228 0144 B860     	 str r0,[r7,#8]
 229 0146 1288     	 ldrh r2,[r2]
 230 0148 12B2     	 sxth r2,r2
 231 014a 02FB01F2 	 mul r2,r2,r1
 232 014e D213     	 asrs r2,r2,#15
 233 0150 BA61     	 str r2,[r7,#24]
 234 0152 BA69     	 ldr r2,[r7,#24]
 235              	
 236 0154 02F30F02 	 ssat r2,#16,r2
 237              	
 238              	 .thumb
 239 0158 7A61     	 str r2,[r7,#20]
 240 015a 7A69     	 ldr r2,[r7,#20]
 241              	.LBE6:
 242 015c 92B2     	 uxth r2,r2
 243 015e 1A80     	 strh r2,[r3]
 134:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
 135:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     /* Decrement the blockSize loop counter */
 136:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     blkCnt--;
 244              	 .loc 1 136 0
 245 0160 FB6E     	 ldr r3,[r7,#108]
 246 0162 013B     	 subs r3,r3,#1
 247 0164 FB66     	 str r3,[r7,#108]
 248              	.L4:
 129:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   {
 249              	 .loc 1 129 0
 250 0166 FB6E     	 ldr r3,[r7,#108]
 251 0168 002B     	 cmp r3,#0
 252 016a E1D1     	 bne .L5
 137:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   }
 138:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** }
 253              	 .loc 1 138 0
 254 016c 7437     	 adds r7,r7,#116
 255              	.LCFI3:
 256              	 .cfi_def_cfa_offset 4
 257 016e BD46     	 mov sp,r7
 258              	.LCFI4:
 259              	 .cfi_def_cfa_register 13
 260              	 
 261 0170 5DF8047B 	 ldr r7,[sp],#4
 262              	.LCFI5:
 263              	 .cfi_restore 7
 264              	 .cfi_def_cfa_offset 0
 265 0174 7047     	 bx lr
 266              	 .cfi_endproc
 267              	.LFE135:
 269 0176 00BF     	 .text
 270              	.Letext0:
 271              	 .file 2 "c:\\program files (x86)\\dave\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 272              	 .file 3 "c:\\program files (x86)\\dave\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 273              	 .file 4 "F:/Projects/20190909 - 3phase_inverter/3phase_inverter/4. Software_WS/OL_VSC_vitor/Dave/Generated/CMSIS_DSP/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_mult_q15.c
    {standard input}:20     .text.arm_mult_q15:00000000 $t
    {standard input}:25     .text.arm_mult_q15:00000000 arm_mult_q15
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
