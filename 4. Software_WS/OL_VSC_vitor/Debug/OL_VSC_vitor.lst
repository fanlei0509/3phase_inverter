
OL_VSC_vitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000051c4  08000000  0c000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00018000  2**0
                  ALLOC
  2 .data         000001bc  20000000  0c0051c4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00007f54  200001bc  0c005380  000101bc  2**2
                  ALLOC
  4 .no_init      00000014  2000ffc0  2000ffc0  00017fc0  2**2
                  ALLOC
  5 .debug_aranges 00001060  00000000  00000000  000101c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001a3c1  00000000  00000000  00011220  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000030ec  00000000  00000000  0002b5e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007fcc  00000000  00000000  0002e6cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00004400  00000000  00000000  0003669c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000b410  00000000  00000000  0003aa9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008cf0  00000000  00000000  00045eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000e10  00000000  00000000  0004eb9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .build_attributes 00000796  00000000  00000000  0004f9ac  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	41 30 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     A0..............
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

	.align	1
    .thumb
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)

 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c0051c4 	.word	0x0c0051c4
 800024c:	20000000 	.word	0x20000000
 8000250:	000001bc 	.word	0x000001bc
 8000254:	0c005380 	.word	0x0c005380
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c0051c4 	.word	0x0c0051c4
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c0051c4 	.word	0x0c0051c4
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	200001bc 	.word	0x200001bc
 800027c:	00007f50 	.word	0x00007f50
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000290:	10000800 	.word	0x10000800

	.align	1
    .thumb
 8000294:	080002b5 	.word	0x080002b5
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	08004635 	.word	0x08004635
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	08003799 	.word	0x08003799

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80002b4:	b598      	push	{r3, r4, r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002b8:	4a05      	ldr	r2, [pc, #20]	; (80002d0 <SystemInit+0x1c>)
 80002ba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002be:	4614      	mov	r4, r2
 80002c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002c6:	f002 f867 	bl	8002398 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002ca:	f002 f9cf 	bl	800266c <SystemCoreClockSetup>
}
 80002ce:	bd98      	pop	{r3, r4, r7, pc}
 80002d0:	2000ffc4 	.word	0x2000ffc4

080002d4 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002da:	4b2f      	ldr	r3, [pc, #188]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d03e      	beq.n	8000364 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002e6:	4b2d      	ldr	r3, [pc, #180]	; (800039c <SystemCoreClockUpdate+0xc8>)
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	f003 0301 	and.w	r3, r3, #1
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d002      	beq.n	80002f8 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002f2:	4b2b      	ldr	r3, [pc, #172]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 80002f4:	60fb      	str	r3, [r7, #12]
 80002f6:	e002      	b.n	80002fe <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002f8:	f002 f9ae 	bl	8002658 <OSCHP_GetFrequency>
 80002fc:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002fe:	4b27      	ldr	r3, [pc, #156]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f003 0304 	and.w	r3, r3, #4
 8000306:	2b00      	cmp	r3, #0
 8000308:	d020      	beq.n	800034c <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800030a:	4b24      	ldr	r3, [pc, #144]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000312:	0e1b      	lsrs	r3, r3, #24
 8000314:	3301      	adds	r3, #1
 8000316:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000318:	4b20      	ldr	r3, [pc, #128]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000320:	0a1b      	lsrs	r3, r3, #8
 8000322:	3301      	adds	r3, #1
 8000324:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8000326:	4b1d      	ldr	r3, [pc, #116]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800032e:	0c1b      	lsrs	r3, r3, #16
 8000330:	3301      	adds	r3, #1
 8000332:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	683a      	ldr	r2, [r7, #0]
 8000338:	fb02 f303 	mul.w	r3, r2, r3
 800033c:	68fa      	ldr	r2, [r7, #12]
 800033e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	fb02 f303 	mul.w	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e00d      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 800034c:	4b13      	ldr	r3, [pc, #76]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000354:	3301      	adds	r3, #1
 8000356:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	e001      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8000364:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 8000366:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000368:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	b2db      	uxtb	r3, r3
 800036e:	3301      	adds	r3, #1
 8000370:	68fa      	ldr	r2, [r7, #12]
 8000372:	fbb2 f3f3 	udiv	r3, r2, r3
 8000376:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800037a:	691b      	ldr	r3, [r3, #16]
 800037c:	f003 0301 	and.w	r3, r3, #1
 8000380:	3301      	adds	r3, #1
 8000382:	68fa      	ldr	r2, [r7, #12]
 8000384:	fbb2 f3f3 	udiv	r3, r2, r3
 8000388:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 800038a:	4a06      	ldr	r2, [pc, #24]	; (80003a4 <SystemCoreClockUpdate+0xd0>)
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	6013      	str	r3, [r2, #0]
}
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	50004600 	.word	0x50004600
 800039c:	50004710 	.word	0x50004710
 80003a0:	016e3600 	.word	0x016e3600
 80003a4:	2000ffc0 	.word	0x2000ffc0

080003a8 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b085      	sub	sp, #20
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	60f8      	str	r0, [r7, #12]
 80003b0:	460b      	mov	r3, r1
 80003b2:	607a      	str	r2, [r7, #4]
 80003b4:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80003b6:	7afb      	ldrb	r3, [r7, #11]
 80003b8:	089b      	lsrs	r3, r3, #2
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	4618      	mov	r0, r3
 80003be:	7afb      	ldrb	r3, [r7, #11]
 80003c0:	089b      	lsrs	r3, r3, #2
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	461a      	mov	r2, r3
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	3204      	adds	r2, #4
 80003ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003ce:	7afb      	ldrb	r3, [r7, #11]
 80003d0:	f003 0303 	and.w	r3, r3, #3
 80003d4:	00db      	lsls	r3, r3, #3
 80003d6:	4619      	mov	r1, r3
 80003d8:	23f8      	movs	r3, #248	; 0xf8
 80003da:	408b      	lsls	r3, r1
 80003dc:	43db      	mvns	r3, r3
 80003de:	ea02 0103 	and.w	r1, r2, r3
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	1d02      	adds	r2, r0, #4
 80003e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80003ee:	7afb      	ldrb	r3, [r7, #11]
 80003f0:	005b      	lsls	r3, r3, #1
 80003f2:	4619      	mov	r1, r3
 80003f4:	2303      	movs	r3, #3
 80003f6:	408b      	lsls	r3, r1
 80003f8:	43db      	mvns	r3, r3
 80003fa:	401a      	ands	r2, r3
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	4a37      	ldr	r2, [pc, #220]	; (80004e0 <XMC_GPIO_Init+0x138>)
 8000404:	4293      	cmp	r3, r2
 8000406:	d003      	beq.n	8000410 <XMC_GPIO_Init+0x68>
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	4a36      	ldr	r2, [pc, #216]	; (80004e4 <XMC_GPIO_Init+0x13c>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d10a      	bne.n	8000426 <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000414:	7afb      	ldrb	r3, [r7, #11]
 8000416:	2101      	movs	r1, #1
 8000418:	fa01 f303 	lsl.w	r3, r1, r3
 800041c:	43db      	mvns	r3, r3
 800041e:	401a      	ands	r2, r3
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	661a      	str	r2, [r3, #96]	; 0x60
 8000424:	e03c      	b.n	80004a0 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	685a      	ldr	r2, [r3, #4]
 800042a:	7afb      	ldrb	r3, [r7, #11]
 800042c:	409a      	lsls	r2, r3
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000432:	7afb      	ldrb	r3, [r7, #11]
 8000434:	08db      	lsrs	r3, r3, #3
 8000436:	b2db      	uxtb	r3, r3
 8000438:	4618      	mov	r0, r3
 800043a:	7afb      	ldrb	r3, [r7, #11]
 800043c:	08db      	lsrs	r3, r3, #3
 800043e:	b2db      	uxtb	r3, r3
 8000440:	461a      	mov	r2, r3
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	3210      	adds	r2, #16
 8000446:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800044a:	7afb      	ldrb	r3, [r7, #11]
 800044c:	f003 0307 	and.w	r3, r3, #7
 8000450:	009b      	lsls	r3, r3, #2
 8000452:	4619      	mov	r1, r3
 8000454:	2307      	movs	r3, #7
 8000456:	408b      	lsls	r3, r1
 8000458:	43db      	mvns	r3, r3
 800045a:	ea02 0103 	and.w	r1, r2, r3
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	f100 0210 	add.w	r2, r0, #16
 8000464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000468:	7afb      	ldrb	r3, [r7, #11]
 800046a:	08db      	lsrs	r3, r3, #3
 800046c:	b2db      	uxtb	r3, r3
 800046e:	4618      	mov	r0, r3
 8000470:	7afb      	ldrb	r3, [r7, #11]
 8000472:	08db      	lsrs	r3, r3, #3
 8000474:	b2db      	uxtb	r3, r3
 8000476:	461a      	mov	r2, r3
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	3210      	adds	r2, #16
 800047c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	7a1b      	ldrb	r3, [r3, #8]
 8000484:	4619      	mov	r1, r3
 8000486:	7afb      	ldrb	r3, [r7, #11]
 8000488:	f003 0307 	and.w	r3, r3, #7
 800048c:	009b      	lsls	r3, r3, #2
 800048e:	fa01 f303 	lsl.w	r3, r1, r3
 8000492:	ea42 0103 	orr.w	r1, r2, r3
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	f100 0210 	add.w	r2, r0, #16
 800049c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80004a0:	7afb      	ldrb	r3, [r7, #11]
 80004a2:	089b      	lsrs	r3, r3, #2
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	4618      	mov	r0, r3
 80004a8:	7afb      	ldrb	r3, [r7, #11]
 80004aa:	089b      	lsrs	r3, r3, #2
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	461a      	mov	r2, r3
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	3204      	adds	r2, #4
 80004b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	4619      	mov	r1, r3
 80004be:	7afb      	ldrb	r3, [r7, #11]
 80004c0:	f003 0303 	and.w	r3, r3, #3
 80004c4:	00db      	lsls	r3, r3, #3
 80004c6:	fa01 f303 	lsl.w	r3, r1, r3
 80004ca:	ea42 0103 	orr.w	r1, r2, r3
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	1d02      	adds	r2, r0, #4
 80004d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004d6:	3714      	adds	r7, #20
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr
 80004e0:	48028e00 	.word	0x48028e00
 80004e4:	48028f00 	.word	0x48028f00

080004e8 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80004ec:	4b03      	ldr	r3, [pc, #12]	; (80004fc <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 80004ee:	681b      	ldr	r3, [r3, #0]
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	2000ffc0 	.word	0x2000ffc0

08000500 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8000508:	f7ff fee4 	bl	80002d4 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 800050c:	4b0b      	ldr	r3, [pc, #44]	; (800053c <XMC_SCU_lDelay+0x3c>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a0b      	ldr	r2, [pc, #44]	; (8000540 <XMC_SCU_lDelay+0x40>)
 8000512:	fba2 2303 	umull	r2, r3, r2, r3
 8000516:	0c9a      	lsrs	r2, r3, #18
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	fb02 f303 	mul.w	r3, r2, r3
 800051e:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8000520:	2300      	movs	r3, #0
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	e003      	b.n	800052e <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 8000526:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	3301      	adds	r3, #1
 800052c:	60fb      	str	r3, [r7, #12]
 800052e:	68fa      	ldr	r2, [r7, #12]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	429a      	cmp	r2, r3
 8000534:	d3f7      	bcc.n	8000526 <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 8000536:	3710      	adds	r7, #16
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	2000ffc0 	.word	0x2000ffc0
 8000540:	431bde83 	.word	0x431bde83

08000544 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8000544:	b5b0      	push	{r4, r5, r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af02      	add	r7, sp, #8
 800054a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 800054c:	2000      	movs	r0, #0
 800054e:	f000 f8b9 	bl	80006c4 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 8000552:	f000 fa4b 	bl	80009ec <XMC_SCU_HIB_EnableHibernateDomain>
  if (config->enable_osculp == true)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	79db      	ldrb	r3, [r3, #7]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d00a      	beq.n	8000574 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 800055e:	f000 fa83 	bl	8000a68 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while(XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 8000562:	bf00      	nop
 8000564:	f000 fa6e 	bl	8000a44 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8000568:	4603      	mov	r3, r0
 800056a:	f083 0301 	eor.w	r3, r3, #1
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d1f7      	bne.n	8000564 <XMC_SCU_CLOCK_Init+0x20>
  }
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	7a5b      	ldrb	r3, [r3, #9]
 8000578:	4618      	mov	r0, r3
 800057a:	f000 f91d 	bl	80007b8 <XMC_SCU_HIB_SetStandbyClockSource>

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	7a1b      	ldrb	r3, [r3, #8]
 8000582:	4618      	mov	r0, r3
 8000584:	f000 fa0c 	bl	80009a0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	7c1b      	ldrb	r3, [r3, #16]
 800058c:	4618      	mov	r0, r3
 800058e:	f000 f931 	bl	80007f4 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	7c5b      	ldrb	r3, [r3, #17]
 8000596:	4618      	mov	r0, r3
 8000598:	f000 f954 	bl	8000844 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	7c9b      	ldrb	r3, [r3, #18]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 f93b 	bl	800081c <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	7cdb      	ldrb	r3, [r3, #19]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 f95e 	bl	800086c <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	799b      	ldrb	r3, [r3, #6]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d00a      	beq.n	80005ce <XMC_SCU_CLOCK_Init+0x8a>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 80005b8:	f000 fa88 	bl	8000acc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 80005bc:	bf00      	nop
 80005be:	f000 faad 	bl	8000b1c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 80005c2:	4603      	mov	r3, r0
 80005c4:	f083 0301 	eor.w	r3, r3, #1
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d1f7      	bne.n	80005be <XMC_SCU_CLOCK_Init+0x7a>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	78db      	ldrb	r3, [r3, #3]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d102      	bne.n	80005dc <XMC_SCU_CLOCK_Init+0x98>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 80005d6:	f000 fac5 	bl	8000b64 <XMC_SCU_CLOCK_DisableSystemPll>
 80005da:	e014      	b.n	8000606 <XMC_SCU_CLOCK_Init+0xc2>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 80005dc:	f000 fab2 	bl	8000b44 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	8899      	ldrh	r1, [r3, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80005ec:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80005f2:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	4608      	mov	r0, r1
 80005fc:	4611      	mov	r1, r2
 80005fe:	462a      	mov	r2, r5
 8000600:	4623      	mov	r3, r4
 8000602:	f000 fabf 	bl	8000b84 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	68db      	ldr	r3, [r3, #12]
 800060a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800060e:	d103      	bne.n	8000618 <XMC_SCU_CLOCK_Init+0xd4>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 8000610:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000614:	f000 f856 	bl	80006c4 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8000618:	f7ff fe5c 	bl	80002d4 <SystemCoreClockUpdate>
}
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bdb0      	pop	{r4, r5, r7, pc}
 8000622:	bf00      	nop

08000624 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	0f1b      	lsrs	r3, r3, #28
 8000630:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000638:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 800063a:	68fa      	ldr	r2, [r7, #12]
 800063c:	4613      	mov	r3, r2
 800063e:	005b      	lsls	r3, r3, #1
 8000640:	4413      	add	r3, r2
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	461a      	mov	r2, r3
 8000646:	4b04      	ldr	r3, [pc, #16]	; (8000658 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 8000648:	4413      	add	r3, r2
 800064a:	68ba      	ldr	r2, [r7, #8]
 800064c:	601a      	str	r2, [r3, #0]
}
 800064e:	3714      	adds	r7, #20
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	50004414 	.word	0x50004414

0800065c <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 800065c:	b480      	push	{r7}
 800065e:	b085      	sub	sp, #20
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	0f1b      	lsrs	r3, r3, #28
 8000668:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000670:	60bb      	str	r3, [r7, #8]

  return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 8000672:	68fa      	ldr	r2, [r7, #12]
 8000674:	4613      	mov	r3, r2
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	4413      	add	r3, r2
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	461a      	mov	r2, r3
 800067e:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 8000680:	4413      	add	r3, r2
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	4013      	ands	r3, r2
 8000688:	2b00      	cmp	r3, #0
 800068a:	bf14      	ite	ne
 800068c:	2301      	movne	r3, #1
 800068e:	2300      	moveq	r3, #0
 8000690:	b2db      	uxtb	r3, r3
}
 8000692:	4618      	mov	r0, r3
 8000694:	3714      	adds	r7, #20
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	5000440c 	.word	0x5000440c

080006a4 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80006a8:	f7ff ff1e 	bl	80004e8 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 80006ac:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 80006ae:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 80006b0:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	50004600 	.word	0x50004600

080006c4 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 80006cc:	4906      	ldr	r1, [pc, #24]	; (80006e8 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006d0:	68db      	ldr	r3, [r3, #12]
 80006d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4313      	orrs	r3, r2
 80006da:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	50004600 	.word	0x50004600

080006ec <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 80006f4:	4906      	ldr	r1, [pc, #24]	; (8000710 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80006f8:	699b      	ldr	r3, [r3, #24]
 80006fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4313      	orrs	r3, r2
 8000702:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	50004600 	.word	0x50004600

08000714 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 800071c:	4906      	ldr	r1, [pc, #24]	; (8000738 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000722:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4313      	orrs	r3, r2
 800072a:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	50004600 	.word	0x50004600

0800073c <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 8000746:	88fb      	ldrh	r3, [r7, #6]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d108      	bne.n	800075e <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 800074c:	4a0a      	ldr	r2, [pc, #40]	; (8000778 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800074e:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000750:	68db      	ldr	r3, [r3, #12]
 8000752:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000756:	f023 0301 	bic.w	r3, r3, #1
 800075a:	60d3      	str	r3, [r2, #12]
 800075c:	e007      	b.n	800076e <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 800075e:	4a06      	ldr	r2, [pc, #24]	; (8000778 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000760:	4b05      	ldr	r3, [pc, #20]	; (8000778 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000762:	68db      	ldr	r3, [r3, #12]
 8000764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	60d3      	str	r3, [r2, #12]
  }
}
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	50004710 	.word	0x50004710

0800077c <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000786:	bf00      	nop
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 800078a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800078e:	f003 0308 	and.w	r3, r3, #8
 8000792:	2b00      	cmp	r3, #0
 8000794:	d1f8      	bne.n	8000788 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8000796:	4907      	ldr	r1, [pc, #28]	; (80007b4 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 80007a0:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80007a2:	4313      	orrs	r3, r2
 80007a4:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr
 80007b0:	50004000 	.word	0x50004000
 80007b4:	50004300 	.word	0x50004300

080007b8 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80007c2:	bf00      	nop
 80007c4:	4b09      	ldr	r3, [pc, #36]	; (80007ec <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 80007c6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80007ca:	f003 0308 	and.w	r3, r3, #8
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d1f8      	bne.n	80007c4 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80007d2:	4907      	ldr	r1, [pc, #28]	; (80007f0 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007d6:	68db      	ldr	r3, [r3, #12]
 80007d8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 80007dc:	79fb      	ldrb	r3, [r7, #7]
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80007de:	4313      	orrs	r3, r2
 80007e0:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	50004000 	.word	0x50004000
 80007f0:	50004300 	.word	0x50004300

080007f4 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80007fc:	4906      	ldr	r1, [pc, #24]	; (8000818 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000800:	68db      	ldr	r3, [r3, #12]
 8000802:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 800080a:	4313      	orrs	r3, r2
 800080c:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr
 8000818:	50004600 	.word	0x50004600

0800081c <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000824:	4906      	ldr	r1, [pc, #24]	; (8000840 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000828:	6a1b      	ldr	r3, [r3, #32]
 800082a:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000832:	4313      	orrs	r3, r2
 8000834:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	50004600 	.word	0x50004600

08000844 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 800084c:	4906      	ldr	r1, [pc, #24]	; (8000868 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000850:	691b      	ldr	r3, [r3, #16]
 8000852:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 800085a:	4313      	orrs	r3, r2
 800085c:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr
 8000868:	50004600 	.word	0x50004600

0800086c <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000874:	4906      	ldr	r1, [pc, #24]	; (8000890 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000882:	4313      	orrs	r3, r2
 8000884:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	50004600 	.word	0x50004600

08000894 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 800089c:	4906      	ldr	r1, [pc, #24]	; (80008b8 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80008a0:	699b      	ldr	r3, [r3, #24]
 80008a2:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80008aa:	4313      	orrs	r3, r2
 80008ac:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
}
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	50004600 	.word	0x50004600

080008bc <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80008c4:	4906      	ldr	r1, [pc, #24]	; (80008e0 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80008c8:	69db      	ldr	r3, [r3, #28]
 80008ca:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80008d2:	4313      	orrs	r3, r2
 80008d4:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	50004600 	.word	0x50004600

080008e4 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80008ec:	4906      	ldr	r1, [pc, #24]	; (8000908 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80008f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80008fa:	4313      	orrs	r3, r2
 80008fc:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	50004600 	.word	0x50004600

0800090c <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 8000916:	4a04      	ldr	r2, [pc, #16]	; (8000928 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	6053      	str	r3, [r2, #4]
}
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	50004600 	.word	0x50004600

0800092c <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000936:	4a19      	ldr	r2, [pc, #100]	; (800099c <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000938:	4b18      	ldr	r3, [pc, #96]	; (800099c <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800093a:	695b      	ldr	r3, [r3, #20]
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000942:	4a16      	ldr	r2, [pc, #88]	; (800099c <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000944:	4b15      	ldr	r3, [pc, #84]	; (800099c <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000946:	695b      	ldr	r3, [r3, #20]
 8000948:	f043 0310 	orr.w	r3, r3, #16
 800094c:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 800094e:	4913      	ldr	r1, [pc, #76]	; (800099c <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	3b01      	subs	r3, #1
 8000954:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	3b01      	subs	r3, #1
 800095a:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 800095c:	4313      	orrs	r3, r2
 800095e:	614b      	str	r3, [r1, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000960:	4a0e      	ldr	r2, [pc, #56]	; (800099c <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800096a:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 800096c:	4a0b      	ldr	r2, [pc, #44]	; (800099c <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	f023 0310 	bic.w	r3, r3, #16
 8000976:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8000978:	4a08      	ldr	r2, [pc, #32]	; (800099c <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800097a:	4b08      	ldr	r3, [pc, #32]	; (800099c <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800097c:	695b      	ldr	r3, [r3, #20]
 800097e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000982:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8000984:	bf00      	nop
 8000986:	4b05      	ldr	r3, [pc, #20]	; (800099c <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000988:	691b      	ldr	r3, [r3, #16]
 800098a:	f003 0304 	and.w	r3, r3, #4
 800098e:	2b00      	cmp	r3, #0
 8000990:	d0f9      	beq.n	8000986 <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	50004710 	.word	0x50004710

080009a0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 80009aa:	4a0f      	ldr	r2, [pc, #60]	; (80009e8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009ac:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80009b4:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d10e      	bne.n	80009da <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 80009bc:	4a0a      	ldr	r2, [pc, #40]	; (80009e8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009be:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80009c6:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 80009c8:	2064      	movs	r0, #100	; 0x64
 80009ca:	f7ff fd99 	bl	8000500 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 80009ce:	4a06      	ldr	r2, [pc, #24]	; (80009e8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009d0:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009d8:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 80009da:	2064      	movs	r0, #100	; 0x64
 80009dc:	f7ff fd90 	bl	8000500 <XMC_SCU_lDelay>
}
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	50004710 	.word	0x50004710

080009ec <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80009f0:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f003 0301 	and.w	r3, r3, #1
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d109      	bne.n	8000a10 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000a02:	bf00      	nop
 8000a04:	4b0d      	ldr	r3, [pc, #52]	; (8000a3c <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f003 0301 	and.w	r3, r3, #1
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d0f9      	beq.n	8000a04 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000a10:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d00a      	beq.n	8000a32 <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a22:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000a24:	bf00      	nop
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d1f9      	bne.n	8000a26 <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	50004200 	.word	0x50004200
 8000a40:	50004400 	.word	0x50004400

08000a44 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f003 0308 	and.w	r3, r3, #8
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	bf0c      	ite	eq
 8000a54:	2301      	moveq	r3, #1
 8000a56:	2300      	movne	r3, #0
 8000a58:	b2db      	uxtb	r3, r3
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	50004300 	.word	0x50004300

08000a68 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8000a6c:	bf00      	nop
 8000a6e:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>)
 8000a70:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d1f8      	bne.n	8000a6e <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6>
  {
    /* Wait until the update of OSCULCTRL register in hibernate domain is completed */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000a7c:	4a12      	ldr	r2, [pc, #72]	; (8000ac8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000a7e:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000a80:	69db      	ldr	r3, [r3, #28]
 8000a82:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000a86:	61d3      	str	r3, [r2, #28]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000a88:	bf00      	nop
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>)
 8000a8c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000a90:	f003 0308 	and.w	r3, r3, #8
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d1f8      	bne.n	8000a8a <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x22>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000a98:	4a0b      	ldr	r2, [pc, #44]	; (8000ac8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000a9c:	68db      	ldr	r3, [r3, #12]
 8000a9e:	f043 0308 	orr.w	r3, r3, #8
 8000aa2:	60d3      	str	r3, [r2, #12]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 8000aa4:	bf00      	nop
 8000aa6:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>)
 8000aa8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000aac:	f003 0304 	and.w	r3, r3, #4
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d1f8      	bne.n	8000aa6 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3e>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDSET = (uint32_t)SCU_HIBERNATE_HDSET_ULPWDG_Msk;
 8000ab4:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000ab6:	2208      	movs	r2, #8
 8000ab8:	609a      	str	r2, [r3, #8]
}
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	50004000 	.word	0x50004000
 8000ac8:	50004300 	.word	0x50004300

08000acc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000acc:	b5b0      	push	{r4, r5, r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000ad0:	4a0f      	ldr	r2, [pc, #60]	; (8000b10 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ada:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000adc:	4d0d      	ldr	r5, [pc, #52]	; (8000b14 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000ade:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000ae6:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000aea:	f001 fdb5 	bl	8002658 <OSCHP_GetFrequency>
 8000aee:	4602      	mov	r2, r0
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000af2:	fba3 2302 	umull	r2, r3, r3, r2
 8000af6:	0d1b      	lsrs	r3, r3, #20
 8000af8:	3b01      	subs	r3, #1
 8000afa:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000afc:	4323      	orrs	r3, r4
 8000afe:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000b00:	4a03      	ldr	r2, [pc, #12]	; (8000b10 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b02:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000b0a:	6053      	str	r3, [r2, #4]
}
 8000b0c:	bdb0      	pop	{r4, r5, r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	50004710 	.word	0x50004710
 8000b14:	50004700 	.word	0x50004700
 8000b18:	6b5fca6b 	.word	0x6b5fca6b

08000b1c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000b20:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000b28:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000b2c:	bf0c      	ite	eq
 8000b2e:	2301      	moveq	r3, #1
 8000b30:	2300      	movne	r3, #0
 8000b32:	b2db      	uxtb	r3, r3
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	50004710 	.word	0x50004710

08000b44 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000b48:	4a05      	ldr	r2, [pc, #20]	; (8000b60 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000b4a:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b52:	f023 0302 	bic.w	r3, r3, #2
 8000b56:	6053      	str	r3, [r2, #4]
}
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	50004710 	.word	0x50004710

08000b64 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000b68:	4a05      	ldr	r2, [pc, #20]	; (8000b80 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000b6a:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b72:	f043 0302 	orr.w	r3, r3, #2
 8000b76:	6053      	str	r3, [r2, #4]
}
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	50004710 	.word	0x50004710

08000b84 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60ba      	str	r2, [r7, #8]
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	4603      	mov	r3, r0
 8000b90:	81fb      	strh	r3, [r7, #14]
 8000b92:	460b      	mov	r3, r1
 8000b94:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000b96:	89fb      	ldrh	r3, [r7, #14]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fdcf 	bl	800073c <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000b9e:	7b7b      	ldrb	r3, [r7, #13]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	f040 8084 	bne.w	8000cae <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000ba6:	89fb      	ldrh	r3, [r7, #14]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d109      	bne.n	8000bc0 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000bac:	f001 fd54 	bl	8002658 <OSCHP_GetFrequency>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	4b4b      	ldr	r3, [pc, #300]	; (8000ce0 <XMC_SCU_CLOCK_StartSystemPll+0x15c>)
 8000bb4:	fba3 2302 	umull	r2, r3, r3, r2
 8000bb8:	0c9b      	lsrs	r3, r3, #18
 8000bba:	059b      	lsls	r3, r3, #22
 8000bbc:	617b      	str	r3, [r7, #20]
 8000bbe:	e002      	b.n	8000bc6 <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000bc0:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000bc4:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	fb02 f203 	mul.w	r2, r2, r3
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd4:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	4a42      	ldr	r2, [pc, #264]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 8000bda:	fba2 2303 	umull	r2, r3, r2, r3
 8000bde:	091b      	lsrs	r3, r3, #4
 8000be0:	0d9b      	lsrs	r3, r3, #22
 8000be2:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000be4:	4a40      	ldr	r2, [pc, #256]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000be6:	4b40      	ldr	r3, [pc, #256]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f043 0301 	orr.w	r3, r3, #1
 8000bee:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000bf0:	4a3d      	ldr	r2, [pc, #244]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bf2:	4b3d      	ldr	r3, [pc, #244]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f043 0310 	orr.w	r3, r3, #16
 8000bfa:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000bfc:	493a      	ldr	r1, [pc, #232]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bfe:	4b3a      	ldr	r3, [pc, #232]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c00:	689a      	ldr	r2, [r3, #8]
 8000c02:	4b3a      	ldr	r3, [pc, #232]	; (8000cec <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8000c04:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	3a01      	subs	r2, #1
 8000c0a:	0212      	lsls	r2, r2, #8
 8000c0c:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	3b01      	subs	r3, #1
 8000c12:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000c14:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	3b01      	subs	r3, #1
 8000c1a:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000c20:	4a31      	ldr	r2, [pc, #196]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c22:	4b31      	ldr	r3, [pc, #196]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c2a:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000c2c:	4a2e      	ldr	r2, [pc, #184]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c2e:	4b2e      	ldr	r3, [pc, #184]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	f023 0310 	bic.w	r3, r3, #16
 8000c36:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000c38:	4a2b      	ldr	r2, [pc, #172]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c3a:	4b2b      	ldr	r3, [pc, #172]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c42:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000c44:	bf00      	nop
 8000c46:	4b28      	ldr	r3, [pc, #160]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f003 0304 	and.w	r3, r3, #4
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d0f9      	beq.n	8000c46 <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000c52:	4a25      	ldr	r2, [pc, #148]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c54:	4b24      	ldr	r3, [pc, #144]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f023 0301 	bic.w	r3, r3, #1
 8000c5c:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000c5e:	bf00      	nop
 8000c60:	4b21      	ldr	r3, [pc, #132]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f003 0301 	and.w	r3, r3, #1
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d1f9      	bne.n	8000c60 <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	4a20      	ldr	r2, [pc, #128]	; (8000cf0 <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 8000c70:	fba2 2303 	umull	r2, r3, r2, r3
 8000c74:	095b      	lsrs	r3, r3, #5
 8000c76:	0d9b      	lsrs	r3, r3, #22
 8000c78:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000c7a:	6a3a      	ldr	r2, [r7, #32]
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d202      	bcs.n	8000c88 <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000c82:	6938      	ldr	r0, [r7, #16]
 8000c84:	f000 f838 	bl	8000cf8 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	085b      	lsrs	r3, r3, #1
 8000c8c:	4a19      	ldr	r2, [pc, #100]	; (8000cf4 <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 8000c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c92:	095b      	lsrs	r3, r3, #5
 8000c94:	0d9b      	lsrs	r3, r3, #22
 8000c96:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000c98:	6a3a      	ldr	r2, [r7, #32]
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d202      	bcs.n	8000ca6 <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000ca0:	6938      	ldr	r0, [r7, #16]
 8000ca2:	f000 f829 	bl	8000cf8 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000ca6:	6a38      	ldr	r0, [r7, #32]
 8000ca8:	f000 f826 	bl	8000cf8 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000cac:	e015      	b.n	8000cda <XMC_SCU_CLOCK_StartSystemPll+0x156>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000cae:	490e      	ldr	r1, [pc, #56]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cb0:	4b0d      	ldr	r3, [pc, #52]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000cb8:	6a3b      	ldr	r3, [r7, #32]
 8000cba:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	608b      	str	r3, [r1, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000cc0:	4a09      	ldr	r2, [pc, #36]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cc2:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f043 0301 	orr.w	r3, r3, #1
 8000cca:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000ccc:	bf00      	nop
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d0f9      	beq.n	8000cce <XMC_SCU_CLOCK_StartSystemPll+0x14a>
    {
      /* wait for prescaler mode */
    }
  }
}
 8000cda:	3718      	adds	r7, #24
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	431bde83 	.word	0x431bde83
 8000ce4:	aaaaaaab 	.word	0xaaaaaaab
 8000ce8:	50004710 	.word	0x50004710
 8000cec:	f08080ff 	.word	0xf08080ff
 8000cf0:	88888889 	.word	0x88888889
 8000cf4:	b60b60b7 	.word	0xb60b60b7

08000cf8 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000d00:	4907      	ldr	r1, [pc, #28]	; (8000d20 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000d02:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	3b01      	subs	r3, #1
 8000d0e:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000d10:	4313      	orrs	r3, r2
 8000d12:	608b      	str	r3, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 8000d14:	2032      	movs	r0, #50	; 0x32
 8000d16:	f7ff fbf3 	bl	8000500 <XMC_SCU_lDelay>
}
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	50004710 	.word	0x50004710

08000d24 <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR> 
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU8_GIDLC_SPRB_Msk;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	60da      	str	r2, [r3, #12]
}
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop

08000d44 <XMC_CCU8_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2201      	movs	r2, #1
 8000d50:	611a      	str	r2, [r3, #16]
}
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <XMC_CCU8_lDeassertReset>:
    XMC_ASSERT("XMC_CCU8_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU8_lDeassertReset(const XMC_CCU8_MODULE_t *const module)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  if (module == CCU80)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a09      	ldr	r2, [pc, #36]	; (8000d8c <XMC_CCU8_lDeassertReset+0x30>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d103      	bne.n	8000d74 <XMC_CCU8_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU80);
 8000d6c:	2080      	movs	r0, #128	; 0x80
 8000d6e:	f7ff fc59 	bl	8000624 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000d72:	e007      	b.n	8000d84 <XMC_CCU8_lDeassertReset+0x28>
  }
#if defined(CCU81)
  else if (module == CCU81)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4a06      	ldr	r2, [pc, #24]	; (8000d90 <XMC_CCU8_lDeassertReset+0x34>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d103      	bne.n	8000d84 <XMC_CCU8_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU81);
 8000d7c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000d80:	f7ff fc50 	bl	8000624 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU8_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40020000 	.word	0x40020000
 8000d90:	40024000 	.word	0x40024000

08000d94 <XMC_CCU8_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* API to set the CCU8 module as active and enable the clock  */
void XMC_CCU8_EnableModule(XMC_CCU8_MODULE_t *const module)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_EnableModule:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));

#if (UC_FAMILY == XMC4)
  /* Enable CCU8 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8000d9c:	2010      	movs	r0, #16
 8000d9e:	f7ff fdb5 	bl	800090c <XMC_SCU_CLOCK_EnableClock>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU8_lUngateClock(module);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU8_lDeassertReset(module);
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f7ff ffda 	bl	8000d5c <XMC_CCU8_lDeassertReset>
#endif
}
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop

08000db0 <XMC_CCU8_Init>:
#endif
}

/* API to initialize CCU8 global resources  */
void XMC_CCU8_Init(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SLICE_MCMS_ACTION_t mcs_action)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	460b      	mov	r3, r1
 8000dba:	70fb      	strb	r3, [r7, #3]

  XMC_ASSERT("XMC_CCU8_Init:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_Init:Invalid mcs action", XMC_CCU8_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU8 module */
  XMC_CCU8_EnableModule(module);
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff ffe9 	bl	8000d94 <XMC_CCU8_EnableModule>
  /* Start the prescaler */
  XMC_CCU8_StartPrescaler(module);
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f7ff ffae 	bl	8000d24 <XMC_CCU8_StartPrescaler>
  
  gctrl = module->GCTRL;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU8_GCTRL_MSDE_Msk);
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000dd4:	60fb      	str	r3, [r7, #12]
  gctrl |= (uint32_t)mcs_action << CCU8_GCTRL_MSDE_Pos;
 8000dd6:	78fb      	ldrb	r3, [r7, #3]
 8000dd8:	039b      	lsls	r3, r3, #14
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	68fa      	ldr	r2, [r7, #12]
 8000de4:	601a      	str	r2, [r3, #0]
}
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <XMC_CCU8_SLICE_CompareInit>:
}

/* API to configure CC8 Slice in Compare mode */
void XMC_CCU8_SLICE_CompareInit(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Timer Init Pointer is NULL",
             (XMC_CCU8_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);
  /* Stops the timer */
  XMC_CCU8_SLICE_StopTimer(slice);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f7ff ffa4 	bl	8000d44 <XMC_CCU8_SLICE_StopTimer>
  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	7b5b      	ldrb	r3, [r3, #13]
 8000e08:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	051a      	lsls	r2, r3, #20
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	7b1b      	ldrb	r3, [r3, #12]
 8000e18:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	461a      	mov	r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	7b1b      	ldrb	r3, [r3, #12]
 8000e28:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	461a      	mov	r2, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	7b5b      	ldrb	r3, [r3, #13]
 8000e38:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	461a      	mov	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->psl;
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685a      	ldr	r2, [r3, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	619a      	str	r2, [r3, #24]
  /* Asymmetric PWM and Slice output routing configuration */
#if defined(CCU8V3) /* Defined for XMC1400 devices only */
  slice->CHC = (uint32_t) compare_init->chc;
#else
  slice->CHC = (uint32_t)((uint32_t)compare_init->chc ^ XMC_CCU8_SLICE_CHC_CONFIG_MASK);
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	f083 0214 	eor.w	r2, r3, #20
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	649a      	str	r2, [r3, #72]	; 0x48
#endif
}
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop

08000e60 <XMC_CCU8_SLICE_SetTimerPeriodMatch>:
  slice->TC = tc;
}

/* Programs period match value of the timer  */
void XMC_CCU8_SLICE_SetTimerPeriodMatch(XMC_CCU8_SLICE_t *const slice, const uint16_t period_val)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	460b      	mov	r3, r1
 8000e6a:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8000e6c:	887a      	ldrh	r2, [r7, #2]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <XMC_CCU8_SLICE_SetTimerCompareMatch>:

/* Programs timer compare match value for channel 1 or 2 */
void XMC_CCU8_SLICE_SetTimerCompareMatch(XMC_CCU8_SLICE_t *const slice,
                                         const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
                                         const uint16_t compare_val)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	460b      	mov	r3, r1
 8000e86:	70fb      	strb	r3, [r7, #3]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	803b      	strh	r3, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(channel));

  if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 8000e8c:	78fb      	ldrb	r3, [r7, #3]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d103      	bne.n	8000e9a <XMC_CCU8_SLICE_SetTimerCompareMatch+0x1e>
  {
    slice->CR1S = (uint32_t) compare_val;
 8000e92:	883a      	ldrh	r2, [r7, #0]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e98:	e002      	b.n	8000ea0 <XMC_CCU8_SLICE_SetTimerCompareMatch+0x24>
  }
  else
  {
    slice->CR2S = (uint32_t) compare_val;
 8000e9a:	883a      	ldrh	r2, [r7, #0]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <XMC_CCU8_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU8_SLICE_SetInterruptNode(XMC_CCU8_SLICE_t *const slice,
                                     const XMC_CCU8_SLICE_IRQ_ID_t event,
                                     const XMC_CCU8_SLICE_SR_ID_t sr)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b087      	sub	sp, #28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	70fb      	strb	r3, [r7, #3]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU8_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  srs = slice->SRS;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000ec2:	60fb      	str	r3, [r7, #12]

  switch(event)
 8000ec4:	78fb      	ldrb	r3, [r7, #3]
 8000ec6:	2b09      	cmp	r3, #9
 8000ec8:	d831      	bhi.n	8000f2e <XMC_CCU8_SLICE_SetInterruptNode+0x82>
 8000eca:	a201      	add	r2, pc, #4	; (adr r2, 8000ed0 <XMC_CCU8_SLICE_SetInterruptNode+0x24>)
 8000ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed0:	08000ef9 	.word	0x08000ef9
 8000ed4:	08000ef9 	.word	0x08000ef9
 8000ed8:	08000f03 	.word	0x08000f03
 8000edc:	08000f03 	.word	0x08000f03
 8000ee0:	08000f0d 	.word	0x08000f0d
 8000ee4:	08000f0d 	.word	0x08000f0d
 8000ee8:	08000f2f 	.word	0x08000f2f
 8000eec:	08000f2f 	.word	0x08000f2f
 8000ef0:	08000f17 	.word	0x08000f17
 8000ef4:	08000f23 	.word	0x08000f23
  {
    case XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU8_CC8_SRS_POSR_Msk);
 8000ef8:	2303      	movs	r3, #3
 8000efa:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_POSR_Pos;
 8000efc:	2300      	movs	r3, #0
 8000efe:	613b      	str	r3, [r7, #16]
      break;
 8000f00:	e01b      	b.n	8000f3a <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1:
    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1:
      mask = ((uint32_t) CCU8_CC8_SRS_CM1SR_Msk);
 8000f02:	230c      	movs	r3, #12
 8000f04:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_CM1SR_Pos;
 8000f06:	2302      	movs	r3, #2
 8000f08:	613b      	str	r3, [r7, #16]
      break;
 8000f0a:	e016      	b.n	8000f3a <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2:
    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2:
      mask = ((uint32_t) CCU8_CC8_SRS_CM2SR_Msk);
 8000f0c:	2330      	movs	r3, #48	; 0x30
 8000f0e:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_CM2SR_Pos;
 8000f10:	2304      	movs	r3, #4
 8000f12:	613b      	str	r3, [r7, #16]
      break;
 8000f14:	e011      	b.n	8000f3a <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU8_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU8_CC8_SRS_E0SR_Msk);
 8000f16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f1a:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E0SR_Pos;
 8000f1c:	2308      	movs	r3, #8
 8000f1e:	613b      	str	r3, [r7, #16]
      break;
 8000f20:	e00b      	b.n	8000f3a <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU8_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU8_CC8_SRS_E1SR_Msk);
 8000f22:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f26:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E1SR_Pos;
 8000f28:	230a      	movs	r3, #10
 8000f2a:	613b      	str	r3, [r7, #16]
      break;
 8000f2c:	e005      	b.n	8000f3a <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    default:
      mask = ((uint32_t) CCU8_CC8_SRS_E2SR_Msk);
 8000f2e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000f32:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E2SR_Pos;
 8000f34:	230c      	movs	r3, #12
 8000f36:	613b      	str	r3, [r7, #16]
      break;
 8000f38:	bf00      	nop
  }
  
  srs &= ~mask;
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	4013      	ands	r3, r2
 8000f42:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 8000f44:	78ba      	ldrb	r2, [r7, #2]
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	68fa      	ldr	r2, [r7, #12]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	60fb      	str	r3, [r7, #12]
  
  slice->SRS = srs;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	68fa      	ldr	r2, [r7, #12]
 8000f56:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8000f5a:	371c      	adds	r7, #28
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <XMC_DAC_CH_EnableOutput>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_DisableOutput(), XMC_DAC_CH_IsOutputEnabled()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_EnableOutput(XMC_DAC_t *const dac, const uint8_t channel)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_DAC_CH_EnableOutput: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_EnableOutput: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  
  dac->DACCFG[channel].high |= DAC_DAC0CFG1_ANAEN_Msk;
 8000f70:	78f8      	ldrb	r0, [r7, #3]
 8000f72:	78fb      	ldrb	r3, [r7, #3]
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	00db      	lsls	r3, r3, #3
 8000f78:	4413      	add	r3, r2
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8000f80:	6879      	ldr	r1, [r7, #4]
 8000f82:	00c3      	lsls	r3, r0, #3
 8000f84:	440b      	add	r3, r1
 8000f86:	609a      	str	r2, [r3, #8]
}
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <XMC_DAC_CH_EnablePatternSignOutput>:
 * XMC_DAC_CH_StartPatternMode(), XMC_DAC_CH_DisablePatternSignOutput()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_EnablePatternSignOutput(XMC_DAC_t *const dac,
                                                     const uint8_t channel)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_DAC_CH_EnablePatternSignOutput: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_EnablePatternSignOutput: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  
  dac->DACCFG[channel].low |= DAC_DAC0CFG0_SIGNEN_Msk;
 8000fa0:	78f8      	ldrb	r0, [r7, #3]
 8000fa2:	78fb      	ldrb	r3, [r7, #3]
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	00db      	lsls	r3, r3, #3
 8000fa8:	4413      	add	r3, r2
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8000fb0:	6879      	ldr	r1, [r7, #4]
 8000fb2:	00c3      	lsls	r3, r0, #3
 8000fb4:	440b      	add	r3, r1
 8000fb6:	605a      	str	r2, [r3, #4]
}
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <XMC_DAC_CH_DisablePatternSignOutput>:
 * XMC_DAC_CH_StartPatternMode(), XMC_DAC_CH_EnablePatternSignOutput()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_DisablePatternSignOutput(XMC_DAC_t *const dac,
                                                     const uint8_t channel)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_DAC_CH_DisablePatternSignOutput: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_DisablePatternSignOutput: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  
  dac->DACCFG[channel].low &= ~DAC_DAC0CFG0_SIGNEN_Msk;
 8000fd0:	78f8      	ldrb	r0, [r7, #3]
 8000fd2:	78fb      	ldrb	r3, [r7, #3]
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	4413      	add	r3, r2
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8000fe0:	6879      	ldr	r1, [r7, #4]
 8000fe2:	00c3      	lsls	r3, r0, #3
 8000fe4:	440b      	add	r3, r1
 8000fe6:	605a      	str	r2, [r3, #4]
}
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <XMC_DAC_CH_SetRampStart>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_GetRampStart(), XMC_DAC_CH_GetRampStop(), XMC_DAC_CH_SetRampStop()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetRampStart(XMC_DAC_t *const dac, const uint8_t channel, const uint16_t start)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	70fb      	strb	r3, [r7, #3]
 8001000:	4613      	mov	r3, r2
 8001002:	803b      	strh	r3, [r7, #0]
  XMC_ASSERT("XMC_DAC_CH_SetRampStart: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetRampStart: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  
  dac->DACDATA[channel] = start;
 8001004:	78fb      	ldrb	r3, [r7, #3]
 8001006:	883a      	ldrh	r2, [r7, #0]
 8001008:	6879      	ldr	r1, [r7, #4]
 800100a:	3304      	adds	r3, #4
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	440b      	add	r3, r1
 8001010:	605a      	str	r2, [r3, #4]
}
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <XMC_DAC_CH_SetRampStop>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_GetRampStop(), XMC_DAC_CH_SetRampStart()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetRampStop(XMC_DAC_t *const dac, const uint8_t channel, const uint16_t stop)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	460b      	mov	r3, r1
 8001026:	70fb      	strb	r3, [r7, #3]
 8001028:	4613      	mov	r3, r2
 800102a:	803b      	strh	r3, [r7, #0]
  XMC_ASSERT("XMC_DAC_CH_SetRampStop: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetRampStop: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
    
  dac->DAC01DATA = (dac->DAC01DATA & ~(DAC_DAC01DATA_DATA0_Msk << (channel * DAC_DAC01DATA_DATA1_Pos))) |
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	69da      	ldr	r2, [r3, #28]
 8001030:	78fb      	ldrb	r3, [r7, #3]
 8001032:	011b      	lsls	r3, r3, #4
 8001034:	4619      	mov	r1, r3
 8001036:	f640 73ff 	movw	r3, #4095	; 0xfff
 800103a:	408b      	lsls	r3, r1
 800103c:	43db      	mvns	r3, r3
 800103e:	4013      	ands	r3, r2
               (stop << (channel * DAC_DAC01DATA_DATA1_Pos));
 8001040:	883a      	ldrh	r2, [r7, #0]
 8001042:	78f9      	ldrb	r1, [r7, #3]
 8001044:	0109      	lsls	r1, r1, #4
 8001046:	408a      	lsls	r2, r1
__STATIC_INLINE void XMC_DAC_CH_SetRampStop(XMC_DAC_t *const dac, const uint8_t channel, const uint16_t stop)
{
  XMC_ASSERT("XMC_DAC_CH_SetRampStop: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetRampStop: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
    
  dac->DAC01DATA = (dac->DAC01DATA & ~(DAC_DAC01DATA_DATA0_Msk << (channel * DAC_DAC01DATA_DATA1_Pos))) |
 8001048:	431a      	orrs	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	61da      	str	r2, [r3, #28]
               (stop << (channel * DAC_DAC01DATA_DATA1_Pos));
}
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <XMC_DAC_CH_SetTrigger>:
 * \par
 * Channel \a channel trigger source is selected by \a TRIGSEL bit-field of \a DAC0CFG1 register (for channel 0) / DAC1CFG1 register(for channel 1).
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetTrigger(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_TRIGGER_t trigger)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	460b      	mov	r3, r1
 8001062:	607a      	str	r2, [r7, #4]
 8001064:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_DAC_CH_SetTrigger: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetTrigger: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_SetTrigger: trigger parameter not valid\n", XMC_DAC_IS_TRIGGER_VALID(trigger));

  dac->DACCFG[channel].high = (dac->DACCFG[channel].high & ~(DAC_DAC0CFG1_TRIGSEL_Msk | DAC_DAC0CFG1_TRIGMOD_Msk)) |
 8001066:	7af8      	ldrb	r0, [r7, #11]
 8001068:	7afb      	ldrb	r3, [r7, #11]
 800106a:	68fa      	ldr	r2, [r7, #12]
 800106c:	00db      	lsls	r3, r3, #3
 800106e:	4413      	add	r3, r2
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	f423 22ce 	bic.w	r2, r3, #421888	; 0x67000
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	431a      	orrs	r2, r3
 800107a:	68f9      	ldr	r1, [r7, #12]
 800107c:	00c3      	lsls	r3, r0, #3
 800107e:	440b      	add	r3, r1
 8001080:	609a      	str	r2, [r3, #8]
                              trigger;
}
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <XMC_DAC_CH_SetMode>:
 * Sets the operating \e mode for the \e channel by setting the \a MODE bit-field of \a DAC0CFG0 register (for channel 0) / \a DAC1CFG0 register (for channel 1).
 * Different modes of DAC operation are defined by enum XMC_DAC_CH_MODE_t.
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetMode(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_MODE_t mode)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	460b      	mov	r3, r1
 8001096:	607a      	str	r2, [r7, #4]
 8001098:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_DAC_CH_SetMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_SetMode: trigger parameter not valid\n", XMC_DAC_IS_MODE_VALID(mode));
    
  dac->DACCFG[channel].low = (dac->DACCFG[channel].low & ~DAC_DAC0CFG0_MODE_Msk) |
 800109a:	7af8      	ldrb	r0, [r7, #11]
 800109c:	7afb      	ldrb	r3, [r7, #11]
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	4413      	add	r3, r2
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f423 02e0 	bic.w	r2, r3, #7340032	; 0x700000
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	431a      	orrs	r2, r3
 80010ae:	68f9      	ldr	r1, [r7, #12]
 80010b0:	00c3      	lsls	r3, r0, #3
 80010b2:	440b      	add	r3, r1
 80010b4:	605a      	str	r2, [r3, #4]
                             mode;
}
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <XMC_DAC_Enable>:
 * API IMPLEMENTATION
 *******************************************************************************/

/* API to enable the DAC module */
void XMC_DAC_Enable(XMC_DAC_t *const dac)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  XMC_UNUSED_ARG(dac);
  
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_DAC);
#endif
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_DAC);
 80010c8:	4802      	ldr	r0, [pc, #8]	; (80010d4 <XMC_DAC_Enable+0x14>)
 80010ca:	f7ff faab 	bl	8000624 <XMC_SCU_RESET_DeassertPeripheralReset>
}
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	10000020 	.word	0x10000020

080010d8 <XMC_DAC_CH_Init>:
  return (status);
}

/* API to initialize DAC channel configuration */
void XMC_DAC_CH_Init(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_CONFIG_t *const config)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	460b      	mov	r3, r1
 80010e2:	607a      	str	r2, [r7, #4]
 80010e4:	72fb      	strb	r3, [r7, #11]
  XMC_DAC_Enable(dac);
 80010e6:	68f8      	ldr	r0, [r7, #12]
 80010e8:	f7ff ffea 	bl	80010c0 <XMC_DAC_Enable>

  dac->DACCFG[channel].low = config->cfg0;
 80010ec:	7afb      	ldrb	r3, [r7, #11]
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	6812      	ldr	r2, [r2, #0]
 80010f2:	68f9      	ldr	r1, [r7, #12]
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	440b      	add	r3, r1
 80010f8:	605a      	str	r2, [r3, #4]
  dac->DACCFG[channel].high = config->cfg1;
 80010fa:	7afb      	ldrb	r3, [r7, #11]
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	6852      	ldr	r2, [r2, #4]
 8001100:	68f9      	ldr	r1, [r7, #12]
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	440b      	add	r3, r1
 8001106:	609a      	str	r2, [r3, #8]
  if (channel < XMC_DAC_NO_CHANNELS)
 8001108:	7afb      	ldrb	r3, [r7, #11]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d804      	bhi.n	8001118 <XMC_DAC_CH_Init+0x40>
  {
    XMC_DAC_CH_EnableOutput(dac, channel);
 800110e:	7afb      	ldrb	r3, [r7, #11]
 8001110:	68f8      	ldr	r0, [r7, #12]
 8001112:	4619      	mov	r1, r3
 8001114:	f7ff ff26 	bl	8000f64 <XMC_DAC_CH_EnableOutput>
  }
}
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop

08001120 <XMC_DAC_CH_SetFrequency>:

/* API to set the waveform frequency except in Ramp and Pattern generation mode. */
XMC_DAC_CH_STATUS_t XMC_DAC_CH_SetFrequency(XMC_DAC_t *const dac,
                                            const uint8_t channel,
                                            const uint32_t frequency)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	460b      	mov	r3, r1
 800112a:	607a      	str	r2, [r7, #4]
 800112c:	72fb      	strb	r3, [r7, #11]
  uint32_t divider;
  XMC_DAC_CH_STATUS_t status;

  XMC_ASSERT("XMC_DAC_CH_SetFrequency: frequency must be greater than zero", frequency > 0U);

  divider = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / frequency;
 800112e:	f7ff fab9 	bl	80006a4 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8001132:	4602      	mov	r2, r0
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	fbb2 f3f3 	udiv	r3, r2, r3
 800113a:	613b      	str	r3, [r7, #16]

  if (divider < XMC_DAC_MIN_FREQ_DIVIDER)
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	2b0f      	cmp	r3, #15
 8001140:	d802      	bhi.n	8001148 <XMC_DAC_CH_SetFrequency+0x28>
  {
    status = XMC_DAC_CH_STATUS_ERROR_FREQ2HIGH;
 8001142:	2304      	movs	r3, #4
 8001144:	75fb      	strb	r3, [r7, #23]
 8001146:	e016      	b.n	8001176 <XMC_DAC_CH_SetFrequency+0x56>
  }
  else if (divider >= XMC_DAC_MAX_FREQ_DIVIDER)
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800114e:	d302      	bcc.n	8001156 <XMC_DAC_CH_SetFrequency+0x36>
  {
    status = XMC_DAC_CH_STATUS_ERROR_FREQ2LOW;
 8001150:	2303      	movs	r3, #3
 8001152:	75fb      	strb	r3, [r7, #23]
 8001154:	e00f      	b.n	8001176 <XMC_DAC_CH_SetFrequency+0x56>
  }
  else {
    dac->DACCFG[channel].low = (dac->DACCFG[channel].low & (uint32_t)(~DAC_DAC0CFG0_FREQ_Msk)) |
 8001156:	7af8      	ldrb	r0, [r7, #11]
 8001158:	7afb      	ldrb	r3, [r7, #11]
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	4413      	add	r3, r2
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	0d1b      	lsrs	r3, r3, #20
 8001164:	051b      	lsls	r3, r3, #20
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	431a      	orrs	r2, r3
 800116a:	68f9      	ldr	r1, [r7, #12]
 800116c:	00c3      	lsls	r3, r0, #3
 800116e:	440b      	add	r3, r1
 8001170:	605a      	str	r2, [r3, #4]
                               (divider << DAC_DAC0CFG0_FREQ_Pos);
    status = XMC_DAC_CH_STATUS_OK;
 8001172:	2300      	movs	r3, #0
 8001174:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001176:	7dfb      	ldrb	r3, [r7, #23]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3718      	adds	r7, #24
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <XMC_DAC_CH_SetRampFrequency>:

/* API to set the waveform frequency in Ramp Mode. */
XMC_DAC_CH_STATUS_t XMC_DAC_CH_SetRampFrequency(XMC_DAC_t *const dac,
                                                const uint8_t channel,
                                                const uint32_t frequency)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	460b      	mov	r3, r1
 800118a:	607a      	str	r2, [r7, #4]
 800118c:	72fb      	strb	r3, [r7, #11]
  uint32_t stop;
  uint32_t start;

  start = dac->DACDATA[channel];
 800118e:	7afb      	ldrb	r3, [r7, #11]
 8001190:	68fa      	ldr	r2, [r7, #12]
 8001192:	3304      	adds	r3, #4
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	4413      	add	r3, r2
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	617b      	str	r3, [r7, #20]
  stop = (dac->DAC01DATA >> (channel * DAC_DAC01DATA_DATA1_Pos)) & (uint32_t)DAC_DAC01DATA_DATA0_Msk;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	69db      	ldr	r3, [r3, #28]
 80011a0:	7afa      	ldrb	r2, [r7, #11]
 80011a2:	0112      	lsls	r2, r2, #4
 80011a4:	40d3      	lsrs	r3, r2
 80011a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011aa:	613b      	str	r3, [r7, #16]

  return XMC_DAC_CH_SetFrequency(dac, channel, frequency * ((stop - start) + 1U));
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	3301      	adds	r3, #1
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	fb02 f303 	mul.w	r3, r2, r3
 80011ba:	7afa      	ldrb	r2, [r7, #11]
 80011bc:	68f8      	ldr	r0, [r7, #12]
 80011be:	4611      	mov	r1, r2
 80011c0:	461a      	mov	r2, r3
 80011c2:	f7ff ffad 	bl	8001120 <XMC_DAC_CH_SetFrequency>
 80011c6:	4603      	mov	r3, r0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3718      	adds	r7, #24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <XMC_DAC_CH_StartSingleValueMode>:

/* API to start the operation in Single Value Mode. */
XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartSingleValueMode(XMC_DAC_t *const dac, const uint8_t channel)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_DAC_CH_StartSingleValueMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_StartSingleValueMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_StartSingleValueMode: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_SINGLE);
 80011dc:	78fb      	ldrb	r3, [r7, #3]
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	4619      	mov	r1, r3
 80011e2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80011e6:	f7ff ff51 	bl	800108c <XMC_DAC_CH_SetMode>

  return XMC_DAC_CH_STATUS_OK;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <XMC_DAC_CH_StartDataMode>:
/* API to start the operation in Data Mode. */
XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartDataMode(XMC_DAC_t *const dac,
                                             const uint8_t channel,
                                             const XMC_DAC_CH_TRIGGER_t trigger,
                                             const uint32_t frequency)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	607a      	str	r2, [r7, #4]
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	460b      	mov	r3, r1
 8001202:	72fb      	strb	r3, [r7, #11]
  XMC_DAC_CH_STATUS_t status = XMC_DAC_CH_STATUS_OK;
 8001204:	2300      	movs	r3, #0
 8001206:	75fb      	strb	r3, [r7, #23]

  XMC_ASSERT("XMC_DAC_CH_StartDataMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_StartDataMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_StartDataMode: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_IDLE);
 8001208:	7afb      	ldrb	r3, [r7, #11]
 800120a:	68f8      	ldr	r0, [r7, #12]
 800120c:	4619      	mov	r1, r3
 800120e:	2200      	movs	r2, #0
 8001210:	f7ff ff3c 	bl	800108c <XMC_DAC_CH_SetMode>

  if (trigger == XMC_DAC_CH_TRIGGER_INTERNAL)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d107      	bne.n	800122a <XMC_DAC_CH_StartDataMode+0x36>
  {
    status = XMC_DAC_CH_SetFrequency(dac, channel, frequency);
 800121a:	7afb      	ldrb	r3, [r7, #11]
 800121c:	68f8      	ldr	r0, [r7, #12]
 800121e:	4619      	mov	r1, r3
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	f7ff ff7d 	bl	8001120 <XMC_DAC_CH_SetFrequency>
 8001226:	4603      	mov	r3, r0
 8001228:	75fb      	strb	r3, [r7, #23]
  }

  if (status == XMC_DAC_CH_STATUS_OK)
 800122a:	7dfb      	ldrb	r3, [r7, #23]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d10c      	bne.n	800124a <XMC_DAC_CH_StartDataMode+0x56>
  {
    XMC_DAC_CH_SetTrigger(dac, channel, trigger);
 8001230:	7afb      	ldrb	r3, [r7, #11]
 8001232:	68f8      	ldr	r0, [r7, #12]
 8001234:	4619      	mov	r1, r3
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	f7ff ff0e 	bl	8001058 <XMC_DAC_CH_SetTrigger>
    XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_DATA);
 800123c:	7afb      	ldrb	r3, [r7, #11]
 800123e:	68f8      	ldr	r0, [r7, #12]
 8001240:	4619      	mov	r1, r3
 8001242:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001246:	f7ff ff21 	bl	800108c <XMC_DAC_CH_SetMode>
  }

  return status;
 800124a:	7dfb      	ldrb	r3, [r7, #23]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3718      	adds	r7, #24
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <XMC_DAC_CH_StartRampMode>:
                                             const uint8_t channel,
                                             const uint16_t start,
                                             const uint16_t stop,
                                             const XMC_DAC_CH_TRIGGER_t trigger,
                                             const uint32_t frequency)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	4608      	mov	r0, r1
 800125e:	4611      	mov	r1, r2
 8001260:	461a      	mov	r2, r3
 8001262:	4603      	mov	r3, r0
 8001264:	72fb      	strb	r3, [r7, #11]
 8001266:	460b      	mov	r3, r1
 8001268:	813b      	strh	r3, [r7, #8]
 800126a:	4613      	mov	r3, r2
 800126c:	80fb      	strh	r3, [r7, #6]
  XMC_DAC_CH_STATUS_t status = XMC_DAC_CH_STATUS_OK;
 800126e:	2300      	movs	r3, #0
 8001270:	75fb      	strb	r3, [r7, #23]

  XMC_ASSERT("XMC_DAC_CH_StartRampMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_StartRampMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_StartRampMode: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_IDLE);
 8001272:	7afb      	ldrb	r3, [r7, #11]
 8001274:	68f8      	ldr	r0, [r7, #12]
 8001276:	4619      	mov	r1, r3
 8001278:	2200      	movs	r2, #0
 800127a:	f7ff ff07 	bl	800108c <XMC_DAC_CH_SetMode>

  XMC_DAC_CH_SetRampStart(dac, channel, start);
 800127e:	7afa      	ldrb	r2, [r7, #11]
 8001280:	893b      	ldrh	r3, [r7, #8]
 8001282:	68f8      	ldr	r0, [r7, #12]
 8001284:	4611      	mov	r1, r2
 8001286:	461a      	mov	r2, r3
 8001288:	f7ff feb4 	bl	8000ff4 <XMC_DAC_CH_SetRampStart>
  XMC_DAC_CH_SetRampStop(dac, channel, stop);
 800128c:	7afa      	ldrb	r2, [r7, #11]
 800128e:	88fb      	ldrh	r3, [r7, #6]
 8001290:	68f8      	ldr	r0, [r7, #12]
 8001292:	4611      	mov	r1, r2
 8001294:	461a      	mov	r2, r3
 8001296:	f7ff fec1 	bl	800101c <XMC_DAC_CH_SetRampStop>
  XMC_DAC_CH_SetTrigger(dac, channel, trigger);
 800129a:	7afb      	ldrb	r3, [r7, #11]
 800129c:	68f8      	ldr	r0, [r7, #12]
 800129e:	4619      	mov	r1, r3
 80012a0:	6a3a      	ldr	r2, [r7, #32]
 80012a2:	f7ff fed9 	bl	8001058 <XMC_DAC_CH_SetTrigger>

  if (trigger == XMC_DAC_CH_TRIGGER_INTERNAL)
 80012a6:	6a3b      	ldr	r3, [r7, #32]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d107      	bne.n	80012bc <XMC_DAC_CH_StartRampMode+0x68>
  {
    status = XMC_DAC_CH_SetRampFrequency(dac, channel, frequency);
 80012ac:	7afb      	ldrb	r3, [r7, #11]
 80012ae:	68f8      	ldr	r0, [r7, #12]
 80012b0:	4619      	mov	r1, r3
 80012b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012b4:	f7ff ff64 	bl	8001180 <XMC_DAC_CH_SetRampFrequency>
 80012b8:	4603      	mov	r3, r0
 80012ba:	75fb      	strb	r3, [r7, #23]
  }

  if (status == XMC_DAC_CH_STATUS_OK)
 80012bc:	7dfb      	ldrb	r3, [r7, #23]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d106      	bne.n	80012d0 <XMC_DAC_CH_StartRampMode+0x7c>
  {
    XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_RAMP);
 80012c2:	7afb      	ldrb	r3, [r7, #11]
 80012c4:	68f8      	ldr	r0, [r7, #12]
 80012c6:	4619      	mov	r1, r3
 80012c8:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 80012cc:	f7ff fede 	bl	800108c <XMC_DAC_CH_SetMode>
  }

  return status;
 80012d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop

080012dc <XMC_DAC_CH_StartPatternMode>:
                                                const uint8_t channel,
                                                const uint8_t *const pattern,
                                                const XMC_DAC_CH_PATTERN_SIGN_OUTPUT_t sign_output,
                                                const XMC_DAC_CH_TRIGGER_t trigger,
                                                const uint32_t frequency)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	607a      	str	r2, [r7, #4]
 80012e6:	461a      	mov	r2, r3
 80012e8:	460b      	mov	r3, r1
 80012ea:	72fb      	strb	r3, [r7, #11]
 80012ec:	4613      	mov	r3, r2
 80012ee:	72bb      	strb	r3, [r7, #10]
  XMC_DAC_CH_STATUS_t status = XMC_DAC_CH_STATUS_OK;
 80012f0:	2300      	movs	r3, #0
 80012f2:	75fb      	strb	r3, [r7, #23]

  XMC_ASSERT("XMC_DAC_CH_StartPatternMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_StartPatternMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_StartPatternMode: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_IDLE);
 80012f4:	7afb      	ldrb	r3, [r7, #11]
 80012f6:	68f8      	ldr	r0, [r7, #12]
 80012f8:	4619      	mov	r1, r3
 80012fa:	2200      	movs	r2, #0
 80012fc:	f7ff fec6 	bl	800108c <XMC_DAC_CH_SetMode>

  if (trigger == XMC_DAC_CH_TRIGGER_INTERNAL)
 8001300:	6a3b      	ldr	r3, [r7, #32]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d109      	bne.n	800131a <XMC_DAC_CH_StartPatternMode+0x3e>
  {
    status = XMC_DAC_CH_SetFrequency(dac, channel, frequency * XMC_DAC_SAMPLES_PER_PERIOD);
 8001306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001308:	015b      	lsls	r3, r3, #5
 800130a:	7afa      	ldrb	r2, [r7, #11]
 800130c:	68f8      	ldr	r0, [r7, #12]
 800130e:	4611      	mov	r1, r2
 8001310:	461a      	mov	r2, r3
 8001312:	f7ff ff05 	bl	8001120 <XMC_DAC_CH_SetFrequency>
 8001316:	4603      	mov	r3, r0
 8001318:	75fb      	strb	r3, [r7, #23]
  }

  if (status == XMC_DAC_CH_STATUS_OK)
 800131a:	7dfb      	ldrb	r3, [r7, #23]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d120      	bne.n	8001362 <XMC_DAC_CH_StartPatternMode+0x86>
  {
    XMC_DAC_CH_SetPattern(dac, channel, pattern);
 8001320:	7afb      	ldrb	r3, [r7, #11]
 8001322:	68f8      	ldr	r0, [r7, #12]
 8001324:	4619      	mov	r1, r3
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	f000 f850 	bl	80013cc <XMC_DAC_CH_SetPattern>
    if (XMC_DAC_CH_PATTERN_SIGN_OUTPUT_ENABLED == sign_output)
 800132c:	7abb      	ldrb	r3, [r7, #10]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d105      	bne.n	800133e <XMC_DAC_CH_StartPatternMode+0x62>
    {
      XMC_DAC_CH_EnablePatternSignOutput(dac, channel);
 8001332:	7afb      	ldrb	r3, [r7, #11]
 8001334:	68f8      	ldr	r0, [r7, #12]
 8001336:	4619      	mov	r1, r3
 8001338:	f7ff fe2c 	bl	8000f94 <XMC_DAC_CH_EnablePatternSignOutput>
 800133c:	e004      	b.n	8001348 <XMC_DAC_CH_StartPatternMode+0x6c>
    }
    else
    {
      XMC_DAC_CH_DisablePatternSignOutput(dac, channel);
 800133e:	7afb      	ldrb	r3, [r7, #11]
 8001340:	68f8      	ldr	r0, [r7, #12]
 8001342:	4619      	mov	r1, r3
 8001344:	f7ff fe3e 	bl	8000fc4 <XMC_DAC_CH_DisablePatternSignOutput>
    }
    XMC_DAC_CH_SetTrigger(dac, channel, trigger);
 8001348:	7afb      	ldrb	r3, [r7, #11]
 800134a:	68f8      	ldr	r0, [r7, #12]
 800134c:	4619      	mov	r1, r3
 800134e:	6a3a      	ldr	r2, [r7, #32]
 8001350:	f7ff fe82 	bl	8001058 <XMC_DAC_CH_SetTrigger>
    XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_PATTERN);
 8001354:	7afb      	ldrb	r3, [r7, #11]
 8001356:	68f8      	ldr	r0, [r7, #12]
 8001358:	4619      	mov	r1, r3
 800135a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800135e:	f7ff fe95 	bl	800108c <XMC_DAC_CH_SetMode>
  }

  return status;
 8001362:	7dfb      	ldrb	r3, [r7, #23]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <XMC_DAC_CH_StartNoiseMode>:
/* API to start the operation in Noise Mode. */
XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartNoiseMode(XMC_DAC_t *const dac,
                                              const uint8_t channel,
                                              const XMC_DAC_CH_TRIGGER_t trigger,
                                              const uint32_t frequency)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	607a      	str	r2, [r7, #4]
 8001376:	603b      	str	r3, [r7, #0]
 8001378:	460b      	mov	r3, r1
 800137a:	72fb      	strb	r3, [r7, #11]
  XMC_DAC_CH_STATUS_t status = XMC_DAC_CH_STATUS_OK;
 800137c:	2300      	movs	r3, #0
 800137e:	75fb      	strb	r3, [r7, #23]

  XMC_ASSERT("XMC_DAC_CH_StartNoiseMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_StartNoiseMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_StartNoiseMode: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_IDLE);
 8001380:	7afb      	ldrb	r3, [r7, #11]
 8001382:	68f8      	ldr	r0, [r7, #12]
 8001384:	4619      	mov	r1, r3
 8001386:	2200      	movs	r2, #0
 8001388:	f7ff fe80 	bl	800108c <XMC_DAC_CH_SetMode>

  if (trigger == XMC_DAC_CH_TRIGGER_INTERNAL)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d107      	bne.n	80013a2 <XMC_DAC_CH_StartNoiseMode+0x36>
  {
    status = XMC_DAC_CH_SetFrequency(dac, channel, frequency);
 8001392:	7afb      	ldrb	r3, [r7, #11]
 8001394:	68f8      	ldr	r0, [r7, #12]
 8001396:	4619      	mov	r1, r3
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	f7ff fec1 	bl	8001120 <XMC_DAC_CH_SetFrequency>
 800139e:	4603      	mov	r3, r0
 80013a0:	75fb      	strb	r3, [r7, #23]
  }

  if (status == XMC_DAC_CH_STATUS_OK)
 80013a2:	7dfb      	ldrb	r3, [r7, #23]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d10c      	bne.n	80013c2 <XMC_DAC_CH_StartNoiseMode+0x56>
  {
    XMC_DAC_CH_SetTrigger(dac, channel, trigger);
 80013a8:	7afb      	ldrb	r3, [r7, #11]
 80013aa:	68f8      	ldr	r0, [r7, #12]
 80013ac:	4619      	mov	r1, r3
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	f7ff fe52 	bl	8001058 <XMC_DAC_CH_SetTrigger>
    XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_NOISE);
 80013b4:	7afb      	ldrb	r3, [r7, #11]
 80013b6:	68f8      	ldr	r0, [r7, #12]
 80013b8:	4619      	mov	r1, r3
 80013ba:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80013be:	f7ff fe65 	bl	800108c <XMC_DAC_CH_SetMode>
  }

  return status;
 80013c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <XMC_DAC_CH_SetPattern>:

/* API to write the pattern data table. */
void XMC_DAC_CH_SetPattern(XMC_DAC_t *const dac, uint8_t channel, const uint8_t *const data)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b087      	sub	sp, #28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	460b      	mov	r3, r1
 80013d6:	607a      	str	r2, [r7, #4]
 80013d8:	72fb      	strb	r3, [r7, #11]

  XMC_ASSERT("XMC_DAC_CH_SetPattern: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetPattern: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_SetPattern: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  temp = data[0U];
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	613b      	str	r3, [r7, #16]
  for(index = 1U; index < 6U; ++index)
 80013e0:	2301      	movs	r3, #1
 80013e2:	617b      	str	r3, [r7, #20]
 80013e4:	e010      	b.n	8001408 <XMC_DAC_CH_SetPattern+0x3c>
  {
    temp |= (uint32_t)data[index] << (index * XMC_DAC_DAC0PATL_PAT_BITSIZE);
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	4413      	add	r3, r2
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	4619      	mov	r1, r3
 80013f0:	697a      	ldr	r2, [r7, #20]
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	fa01 f303 	lsl.w	r3, r1, r3
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	4313      	orrs	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
  XMC_ASSERT("XMC_DAC_CH_SetPattern: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetPattern: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_SetPattern: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  temp = data[0U];
  for(index = 1U; index < 6U; ++index)
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	3301      	adds	r3, #1
 8001406:	617b      	str	r3, [r7, #20]
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	2b05      	cmp	r3, #5
 800140c:	d9eb      	bls.n	80013e6 <XMC_DAC_CH_SetPattern+0x1a>
  {
    temp |= (uint32_t)data[index] << (index * XMC_DAC_DAC0PATL_PAT_BITSIZE);
  }
  dac->DACPAT[channel].low = temp;
 800140e:	7afa      	ldrb	r2, [r7, #11]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	3204      	adds	r2, #4
 8001414:	6939      	ldr	r1, [r7, #16]
 8001416:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

  temp = data[6U];
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	3306      	adds	r3, #6
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	613b      	str	r3, [r7, #16]
  for(index = 1U; index < 6U; ++index)
 8001422:	2301      	movs	r3, #1
 8001424:	617b      	str	r3, [r7, #20]
 8001426:	e011      	b.n	800144c <XMC_DAC_CH_SetPattern+0x80>
  {
    temp |= (uint32_t)data[index + 6U] << (index * XMC_DAC_DAC0PATL_PAT_BITSIZE);
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	3306      	adds	r3, #6
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	4413      	add	r3, r2
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	4619      	mov	r1, r3
 8001434:	697a      	ldr	r2, [r7, #20]
 8001436:	4613      	mov	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4413      	add	r3, r2
 800143c:	fa01 f303 	lsl.w	r3, r1, r3
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	4313      	orrs	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
    temp |= (uint32_t)data[index] << (index * XMC_DAC_DAC0PATL_PAT_BITSIZE);
  }
  dac->DACPAT[channel].low = temp;

  temp = data[6U];
  for(index = 1U; index < 6U; ++index)
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	3301      	adds	r3, #1
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	2b05      	cmp	r3, #5
 8001450:	d9ea      	bls.n	8001428 <XMC_DAC_CH_SetPattern+0x5c>
  {
    temp |= (uint32_t)data[index + 6U] << (index * XMC_DAC_DAC0PATL_PAT_BITSIZE);
  }
  dac->DACPAT[channel].high = temp;
 8001452:	7afb      	ldrb	r3, [r7, #11]
 8001454:	68fa      	ldr	r2, [r7, #12]
 8001456:	3304      	adds	r3, #4
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	4413      	add	r3, r2
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	605a      	str	r2, [r3, #4]
}
 8001460:	371c      	adds	r7, #28
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop

0800146c <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	460b      	mov	r3, r1
 8001476:	70fb      	strb	r3, [r7, #3]
 8001478:	4613      	mov	r3, r2
 800147a:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001480:	78fb      	ldrb	r3, [r7, #3]
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	4619      	mov	r1, r3
 8001486:	2303      	movs	r3, #3
 8001488:	408b      	lsls	r3, r1
 800148a:	43db      	mvns	r3, r3
 800148c:	401a      	ands	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001496:	78bb      	ldrb	r3, [r7, #2]
 8001498:	78f9      	ldrb	r1, [r7, #3]
 800149a:	0049      	lsls	r1, r1, #1
 800149c:	408b      	lsls	r3, r1
 800149e:	431a      	orrs	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop

080014b0 <XMC_VADC_GROUP_ExternalMuxControlInit>:
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
                                                           const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 80014ba:	783b      	ldrb	r3, [r7, #0]
 80014bc:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	461a      	mov	r2, r3
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
 80014c4:	78bb      	ldrb	r3, [r7, #2]
 80014c6:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	041b      	lsls	r3, r3, #16
{
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 80014ce:	4313      	orrs	r3, r2
 80014d0:	60fb      	str	r3, [r7, #12]
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	68fa      	ldr	r2, [r7, #12]
 80014d6:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 80014da:	78fb      	ldrb	r3, [r7, #3]
 80014dc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	071a      	lsls	r2, r3, #28
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
 80014e4:	78fb      	ldrb	r3, [r7, #3]
 80014e6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	069b      	lsls	r3, r3, #26

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 80014ee:	431a      	orrs	r2, r3
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
 80014f0:	78fb      	ldrb	r3, [r7, #3]
 80014f2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	075b      	lsls	r3, r3, #29

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 80014fa:	4313      	orrs	r3, r2
 80014fc:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4313      	orrs	r3, r2
 8001508:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <XMC_VADC_GROUP_QueueEnableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_QueueEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr));
  group_ptr->ARBPR |= (uint32_t)((uint32_t)1 << VADC_G_ARBPR_ASEN0_Pos);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800152a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop

08001540 <XMC_VADC_GROUP_QueueDisableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_QueueDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr));
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN0_Msk);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800154e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop

08001564 <XMC_VADC_GLOBAL_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/*API to enable the VADC Module*/
void XMC_VADC_GLOBAL_EnableModule(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  /* Reset the Hardware */
  XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
 8001568:	2001      	movs	r0, #1
 800156a:	f7ff f85b 	bl	8000624 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
}
 800156e:	bd80      	pop	{r7, pc}

08001570 <XMC_VADC_GLOBAL_Init>:
}


/* API to initialize global resources */
void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  uint32_t reg;
#endif
  XMC_ASSERT("XMC_VADC_GLOBAL_Init:Wrong Module Pointer", (global_ptr == VADC))

  /* Enable the VADC module*/
  XMC_VADC_GLOBAL_EnableModule();
 800157a:	f7ff fff3 	bl	8001564 <XMC_VADC_GLOBAL_EnableModule>

  global_ptr->CLC = (uint32_t)(config->clc);
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	695a      	ldr	r2, [r3, #20]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	601a      	str	r2, [r3, #0]

  /* Clock configuration */

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Msk));
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

  /* ICLASS-0 configuration */
  global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	689a      	ldr	r2, [r3, #8]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* ICLASS-1 configuration */
  global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	68da      	ldr	r2, [r3, #12]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4


  /*Result generation related configuration */
  global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	691a      	ldr	r2, [r3, #16]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280

#if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)

  /* Boundaries */
  global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* From the Errata sheet of XMC1100 V1.7*/
  XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
#endif

}
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop

080015c4 <XMC_VADC_GLOBAL_StartupCalibration>:
#endif
}

/* API to enable startup calibration feature */
void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  VADC_G_TypeDef *group_ptr;
#endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015d2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 80015dc:	2300      	movs	r3, #0
 80015de:	73fb      	strb	r3, [r7, #15]
 80015e0:	e016      	b.n	8001610 <XMC_VADC_GLOBAL_StartupCalibration+0x4c>
  {
    group_ptr = g_xmc_vadc_group_array[i];
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
 80015e4:	4a0e      	ldr	r2, [pc, #56]	; (8001620 <XMC_VADC_GLOBAL_StartupCalibration+0x5c>)
 80015e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ea:	60bb      	str	r3, [r7, #8]
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d007      	beq.n	800160a <XMC_VADC_GLOBAL_StartupCalibration+0x46>
    {
      /* This group is active. Loop until it finishes calibration */
      while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 80015fa:	bf00      	nop
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1f8      	bne.n	80015fc <XMC_VADC_GLOBAL_StartupCalibration+0x38>

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800160a:	7bfb      	ldrb	r3, [r7, #15]
 800160c:	3301      	adds	r3, #1
 800160e:	73fb      	strb	r3, [r7, #15]
 8001610:	7bfb      	ldrb	r3, [r7, #15]
 8001612:	2b03      	cmp	r3, #3
 8001614:	d9e5      	bls.n	80015e2 <XMC_VADC_GLOBAL_StartupCalibration+0x1e>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    /* NOP */
  }
#endif
}
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	08004680 	.word	0x08004680

08001624 <XMC_VADC_GROUP_Init>:
}

/* API to initialize an instance of group of VADC hardware */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)  
void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Program the input classes */
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	6859      	ldr	r1, [r3, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	2300      	movs	r3, #0
 8001638:	f000 f828 	bl	800168c <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	6859      	ldr	r1, [r3, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	2300      	movs	r3, #0
 8001646:	f000 f821 	bl	800168c <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	6899      	ldr	r1, [r3, #8]
 8001650:	2200      	movs	r2, #0
 8001652:	2301      	movs	r3, #1
 8001654:	f000 f81a 	bl	800168c <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	6899      	ldr	r1, [r3, #8]
 800165e:	2201      	movs	r2, #1
 8001660:	2301      	movs	r3, #1
 8001662:	f000 f813 	bl	800168c <XMC_VADC_GROUP_InputClassInit>

  group_ptr->ARBCFG = config->g_arbcfg;
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	691a      	ldr	r2, [r3, #16]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  group_ptr->BOUND = config->g_bound;
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	68da      	ldr	r2, [r3, #12]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* External mux configuration */
  XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr,config->emux_config);
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	6819      	ldr	r1, [r3, #0]
 8001680:	f7ff ff16 	bl	80014b0 <XMC_VADC_GROUP_ExternalMuxControlInit>

}
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop

0800168c <XMC_VADC_GROUP_InputClassInit>:

/* API to program conversion characteristics */
void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 800168c:	b480      	push	{r7}
 800168e:	b08d      	sub	sp, #52	; 0x34
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	603b      	str	r3, [r7, #0]
 8001698:	4613      	mov	r3, r2
 800169a:	71fb      	strb	r3, [r7, #7]

  /* 
   * Obtain the mask and position macros of the parameters based on what is being requested - Standard channels vs
   * external mux channels.
   */
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d113      	bne.n	80016ca <XMC_VADC_GROUP_InputClassInit+0x3e>
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
 80016a2:	2308      	movs	r3, #8
 80016a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 80016a6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
 80016ac:	2300      	movs	r3, #0
 80016ae:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 80016b0:	231f      	movs	r3, #31
 80016b2:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sample_time_std_conv;
 80016b4:	7a3b      	ldrb	r3, [r7, #8]
 80016b6:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 80016be:	7a7b      	ldrb	r3, [r7, #9]
 80016c0:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	76fb      	strb	r3, [r7, #27]
 80016c8:	e013      	b.n	80016f2 <XMC_VADC_GROUP_InputClassInit+0x66>
  }
  else
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
 80016ca:	2318      	movs	r3, #24
 80016cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 80016ce:	f04f 63e0 	mov.w	r3, #117440512	; 0x7000000
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 80016d4:	2310      	movs	r3, #16
 80016d6:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 80016d8:	f44f 13f8 	mov.w	r3, #2031616	; 0x1f0000
 80016dc:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 80016de:	7abb      	ldrb	r3, [r7, #10]
 80016e0:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 80016e8:	7afb      	ldrb	r3, [r7, #11]
 80016ea:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	76fb      	strb	r3, [r7, #27]
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	3228      	adds	r2, #40	; 0x28
 80016f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016fc:	617b      	str	r3, [r7, #20]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
 80016fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001700:	43db      	mvns	r3, r3
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	4013      	ands	r3, r2
 8001706:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 8001708:	7efa      	ldrb	r2, [r7, #27]
 800170a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	4313      	orrs	r3, r2
 8001714:	617b      	str	r3, [r7, #20]
  conv_class &= ~(sample_time_mask);
 8001716:	6a3b      	ldr	r3, [r7, #32]
 8001718:	43db      	mvns	r3, r3
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	4013      	ands	r3, r2
 800171e:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 8001720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001722:	69fa      	ldr	r2, [r7, #28]
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	4313      	orrs	r3, r2
 800172c:	617b      	str	r3, [r7, #20]
  group_ptr->ICLASS[set_num] = conv_class;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	3228      	adds	r2, #40	; 0x28
 8001734:	6979      	ldr	r1, [r7, #20]
 8001736:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800173a:	3734      	adds	r7, #52	; 0x34
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <XMC_VADC_GROUP_SetPowerMode>:

/* API which sets the power mode of analog converter of a VADC group */
void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_t power_mode)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	460b      	mov	r3, r1
 800174e:	70fb      	strb	r3, [r7, #3]
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001756:	60fb      	str	r3, [r7, #12]

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f023 0303 	bic.w	r3, r3, #3
 800175e:	60fb      	str	r3, [r7, #12]
  arbcfg |= (uint32_t)power_mode;
 8001760:	78fb      	ldrb	r3, [r7, #3]
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	4313      	orrs	r3, r2
 8001766:	60fb      	str	r3, [r7, #12]

  group_ptr->ARBCFG = arbcfg;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop

0800177c <XMC_VADC_GROUP_SetSyncSlave>:

/* API which programs a group as a slave group during sync conversions */
void XMC_VADC_GROUP_SetSyncSlave(XMC_VADC_GROUP_t *const group_ptr, uint32_t master_grp, uint32_t slave_grp)
{
 800177c:	b480      	push	{r7}
 800177e:	b087      	sub	sp, #28
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_SetSyncSlave:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  
  #if (XMC_VADC_MULTIPLE_SLAVEGROUPS == 1U )

  /* Determine the coding of SYNCTR */
  if (slave_grp > master_grp)
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	429a      	cmp	r2, r3
 800178e:	d902      	bls.n	8001796 <XMC_VADC_GROUP_SetSyncSlave+0x1a>
  {
    master_grp = master_grp + 1U;
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	3301      	adds	r3, #1
 8001794:	60bb      	str	r3, [r7, #8]
  }
  #endif
  
  /* Program SYNCTR */
  synctr = group_ptr->SYNCTR;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800179c:	617b      	str	r3, [r7, #20]
  synctr   &= ~((uint32_t)VADC_G_SYNCTR_STSEL_Msk);
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	f023 0303 	bic.w	r3, r3, #3
 80017a4:	617b      	str	r3, [r7, #20]
  synctr   |= master_grp;
 80017a6:	697a      	ldr	r2, [r7, #20]
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	617b      	str	r3, [r7, #20]
  group_ptr->SYNCTR = synctr;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	697a      	ldr	r2, [r7, #20]
 80017b2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80017b6:	371c      	adds	r7, #28
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <XMC_VADC_GROUP_SetSyncMaster>:

/* API which programs a group as a master group during sync conversions */
void XMC_VADC_GROUP_SetSyncMaster(XMC_VADC_GROUP_t *const group_ptr)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t synctr;

  XMC_ASSERT("XMC_VADC_GROUP_SetSyncMaster:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  synctr = group_ptr->SYNCTR;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80017ce:	60fb      	str	r3, [r7, #12]
  synctr   &= ~((uint32_t)VADC_G_SYNCTR_STSEL_Msk);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f023 0303 	bic.w	r3, r3, #3
 80017d6:	60fb      	str	r3, [r7, #12]
  group_ptr->SYNCTR = synctr;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop

080017ec <XMC_VADC_GROUP_CheckSlaveReadiness>:

/* API to enable checking of readiness of slaves before a synchronous conversion request is issued */
void XMC_VADC_GROUP_CheckSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
  uint32_t i,master_grp_num;
  XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Slave group", ((slave_group >= 0) && (slave_group <= (XMC_VADC_MAXIMUM_NUM_GROUPS - 1))))

  master_grp_num =0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	60bb      	str	r3, [r7, #8]
  for(i=0; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	e00b      	b.n	8001818 <XMC_VADC_GROUP_CheckSlaveReadiness+0x2c>
  {
    if(g_xmc_vadc_group_array[i] == group_ptr)
 8001800:	4a13      	ldr	r2, [pc, #76]	; (8001850 <XMC_VADC_GROUP_CheckSlaveReadiness+0x64>)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	429a      	cmp	r2, r3
 800180c:	d101      	bne.n	8001812 <XMC_VADC_GROUP_CheckSlaveReadiness+0x26>
    {
      master_grp_num = i;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	60bb      	str	r3, [r7, #8]
  uint32_t i,master_grp_num;
  XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Slave group", ((slave_group >= 0) && (slave_group <= (XMC_VADC_MAXIMUM_NUM_GROUPS - 1))))

  master_grp_num =0;
  for(i=0; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	3301      	adds	r3, #1
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2b03      	cmp	r3, #3
 800181c:	d9f0      	bls.n	8001800 <XMC_VADC_GROUP_CheckSlaveReadiness+0x14>
      master_grp_num = i;
    }
  }


  if(slave_group < master_grp_num)
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	429a      	cmp	r2, r3
 8001824:	d202      	bcs.n	800182c <XMC_VADC_GROUP_CheckSlaveReadiness+0x40>
  {
    slave_group++;
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	3301      	adds	r3, #1
 800182a:	603b      	str	r3, [r7, #0]
  }
  group_ptr->SYNCTR |= (1U << (slave_group + XMC_VADC_SYNCTR_START_LOCATION));
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	3303      	adds	r3, #3
 8001836:	4619      	mov	r1, r3
 8001838:	2301      	movs	r3, #1
 800183a:	408b      	lsls	r3, r1
 800183c:	431a      	orrs	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	08004680 	.word	0x08004680

08001854 <XMC_VADC_GROUP_QueueInit>:
}

#if (XMC_VADC_QUEUE_AVAILABLE == 1U)  
/* API to initialize queue request source */
void XMC_VADC_GROUP_QueueInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_QUEUE_CONFIG_t *config)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  uint32_t          reg;

  XMC_ASSERT("XMC_VADC_GROUP_QueueInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Disable arbitration slot of the queue request source */
  XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff fe6e 	bl	8001540 <XMC_VADC_GROUP_QueueDisableArbitrationSlot>
  
  reg = group_ptr->ARBPR;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800186a:	60fb      	str	r3, [r7, #12]

  /* Request Source priority */
  reg &= ~((uint32_t)VADC_G_ARBPR_PRIO0_Msk);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f023 0303 	bic.w	r3, r3, #3
 8001872:	60fb      	str	r3, [r7, #12]
  reg |= (uint32_t) ((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO0_Pos);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800187c:	b2db      	uxtb	r3, r3
 800187e:	461a      	mov	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4313      	orrs	r3, r2
 8001884:	60fb      	str	r3, [r7, #12]

  /* Conversion Start mode */
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	f003 0303 	and.w	r3, r3, #3
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <XMC_VADC_GROUP_QueueInit+0x48>
  {
    reg |= (uint32_t)(VADC_G_ARBPR_CSM0_Msk);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f043 0308 	orr.w	r3, r3, #8
 800189a:	60fb      	str	r3, [r7, #12]
  }

  group_ptr->ARBPR = reg;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84


  group_ptr->QCTRL0 = (uint32_t)((config->qctrl0)|(uint32_t)(VADC_G_QCTRL0_XTWC_Msk)|
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80018ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
                                                    (uint32_t)(VADC_G_QCTRL0_TMWC_Msk)|
                                                    (uint32_t)(VADC_G_QCTRL0_GTWC_Msk));

  /* Gating mode */
  group_ptr->QMR0 = ((uint32_t)(config->qmr0) | (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_G_QMR0_ENGT_Pos));
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f043 0201 	orr.w	r2, r3, #1
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

  if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode) )
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	f003 0303 	and.w	r3, r3, #3
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d107      	bne.n	80018e2 <XMC_VADC_GROUP_QueueInit+0x8e>
  {
    group_ptr->QMR0 |= (uint32_t)((uint32_t)1 << VADC_G_QMR0_RPTDIS_Pos);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80018d8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  }
  /* Enable arbitration slot for the queue request source */
  XMC_VADC_GROUP_QueueEnableArbitrationSlot(group_ptr);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7ff fe1a 	bl	800151c <XMC_VADC_GROUP_QueueEnableArbitrationSlot>

}
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop

080018f0 <XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode>:
  return ch_num;
}

/* Select a Service Request line for the request source event */
void XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_SR_t sr)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	70fb      	strb	r3, [r7, #3]
  uint32_t sevnp;

  XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Service Request", ((sr)  <= XMC_VADC_SR_SHARED_SR3))

  sevnp = group_ptr->SEVNP;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8001902:	60fb      	str	r3, [r7, #12]

  sevnp &= ~((uint32_t)VADC_G_SEVNP_SEV0NP_Msk);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f023 030f 	bic.w	r3, r3, #15
 800190a:	60fb      	str	r3, [r7, #12]
  sevnp |= (uint32_t)((uint32_t)sr << VADC_G_SEVNP_SEV0NP_Pos);
 800190c:	78fb      	ldrb	r3, [r7, #3]
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	4313      	orrs	r3, r2
 8001912:	60fb      	str	r3, [r7, #12]

  group_ptr->SEVNP = sevnp;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0

}
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop

08001928 <XMC_VADC_GROUP_ChannelInit>:

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
/* API to initialize a channel unit */
void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
                                        const XMC_VADC_CHANNEL_CONFIG_t *config)
{
 8001928:	b480      	push	{r7}
 800192a:	b089      	sub	sp, #36	; 0x24
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]


  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
  
  prio  = (uint32_t)config->channel_priority;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	7a1b      	ldrb	r3, [r3, #8]
 8001938:	61bb      	str	r3, [r7, #24]

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001940:	617b      	str	r3, [r7, #20]
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	2201      	movs	r2, #1
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43db      	mvns	r3, r3
 800194c:	697a      	ldr	r2, [r7, #20]
 800194e:	4013      	ands	r3, r2
 8001950:	617b      	str	r3, [r7, #20]
  ch_assign |= (uint32_t)(prio << ch_num);
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	4313      	orrs	r3, r2
 800195e:	617b      	str	r3, [r7, #20]
  group_ptr->CHASS = ch_assign;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Alias channel */
  if (config->alias_channel >= (int32_t)0)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	7a5b      	ldrb	r3, [r3, #9]
 800196c:	b25b      	sxtb	r3, r3
 800196e:	2b00      	cmp	r3, #0
 8001970:	db29      	blt.n	80019c6 <XMC_VADC_GROUP_ChannelInit+0x9e>
  {
    mask = (uint32_t)0;
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]
    if ((uint32_t)1 == ch_num)
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d10a      	bne.n	8001992 <XMC_VADC_GROUP_ChannelInit+0x6a>
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
 800197c:	2308      	movs	r3, #8
 800197e:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001986:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001990:	e00c      	b.n	80019ac <XMC_VADC_GROUP_ChannelInit+0x84>
    }
    else if ((uint32_t)0 == ch_num)
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d109      	bne.n	80019ac <XMC_VADC_GROUP_ChannelInit+0x84>
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
 8001998:	2300      	movs	r3, #0
 800199a:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80019a2:	f023 021f 	bic.w	r2, r3, #31
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	7a52      	ldrb	r2, [r2, #9]
 80019b6:	b251      	sxtb	r1, r2
 80019b8:	69fa      	ldr	r2, [r7, #28]
 80019ba:	fa01 f202 	lsl.w	r2, r1, r2
 80019be:	431a      	orrs	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }

  group_ptr->BFL |= config->bfl;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	431a      	orrs	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6819      	ldr	r1, [r3, #0]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	3280      	adds	r2, #128	; 0x80
 80019e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 80019e6:	3724      	adds	r7, #36	; 0x24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <_init>:
  }
}

/* Init */
void _init(void)
{}
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <XMC_CCU8_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_DisableClock()<BR>  XMC_CCU8_EnableMultipleClocks()<BR>  XMC_CCU8_StartPrescaler()<BR>  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_EnableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_number)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	460b      	mov	r3, r1
 8001a06:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1 << slice_number);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68da      	ldr	r2, [r3, #12]
 8001a0c:	78fb      	ldrb	r3, [r7, #3]
 8001a0e:	2101      	movs	r1, #1
 8001a10:	fa01 f303 	lsl.w	r3, r1, r3
 8001a14:	431a      	orrs	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	60da      	str	r2, [r3, #12]
}
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <XMC_CCU8_DisableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_EnableClock()<BR>  XMC_CCU8_EnableMultipleClocks()<BR>  XMC_CCU8_StartPrescaler()<BR>  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_DisableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_number)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_DisableClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_DisableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLS |= ((uint32_t) 1 << slice_number);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	78fb      	ldrb	r3, [r7, #3]
 8001a36:	2101      	movs	r1, #1
 8001a38:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3c:	431a      	orrs	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	609a      	str	r2, [r3, #8]
}
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <XMC_CCU8_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StartTimer(XMC_CCU8_SLICE_t *const slice)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCSET = CCU8_CC8_TCSET_TRBS_Msk;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	60da      	str	r2, [r3, #12]
}
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <XMC_CCU8_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	611a      	str	r2, [r3, #16]
}
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <XMC_CCU8_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_ClearTimer(XMC_CCU8_SLICE_t *const slice)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TCC_Msk;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2202      	movs	r2, #2
 8001a88:	611a      	str	r2, [r3, #16]
}
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <XMC_CCU8_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU8_EnableShadowTransfer(XMC_CCU8_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_EnableShadowTransfer:Invalid module Pointer", XMC_CCU8_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	611a      	str	r2, [r3, #16]
}
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop

08001ab0 <XMC_CCU8_SLICE_EnableEvent>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_SetInterruptNode()<BR>  XMC_CCU8_SLICE_EnableMultipleEvents()<BR>  XMC_CCU8_SLICE_DisableEvent()<BR> 
 *  XMC_CCU8_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_EnableEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IRQ_ID_t event)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8001ac2:	78fb      	ldrb	r3, [r7, #3]
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aca:	431a      	orrs	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <PWM_lCCU8_Init>:

#ifdef PWM_SLICE_USED_CCU8

/*Initialize the APP and CCU8 slice. */
PWM_STATUS_t PWM_lCCU8_Init(PWM_t *const handle_ptr)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  PWM_STATUS_t status = PWM_STATUS_FAILURE;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	73fb      	strb	r3, [r7, #15]

  if (PWM_STATUS_UNINITIALIZED == handle_ptr->state)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d14e      	bne.n	8001b90 <PWM_lCCU8_Init+0xb4>
  {
    /* Initialize consumed Apps */
    status = (PWM_STATUS_t)GLOBAL_CCU8_Init(handle_ptr->global_ccu8_handle);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f000 fa24 	bl	8001f44 <GLOBAL_CCU8_Init>
 8001afc:	4603      	mov	r3, r0
 8001afe:	73fb      	strb	r3, [r7, #15]

    /*Initialize CCU8 slice */
    if (PWM_STATUS_SUCCESS == status)
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d140      	bne.n	8001b88 <PWM_lCCU8_Init+0xac>
    {
      XMC_DEBUG("PWM_lCCU8_Init:Initilizing Slice")
      XMC_CCU8_SLICE_CompareInit(handle_ptr->ccu8_slice_ptr, handle_ptr->ccu8_slice_config_ptr);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	689a      	ldr	r2, [r3, #8]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	4610      	mov	r0, r2
 8001b10:	4619      	mov	r1, r3
 8001b12:	f7ff f96b 	bl	8000dec <XMC_CCU8_SLICE_CompareInit>

      /* Set the period and compare register values */
      XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr,
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689a      	ldr	r2, [r3, #8]
    		                            (uint16_t)handle_ptr->period_value);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	69db      	ldr	r3, [r3, #28]
    {
      XMC_DEBUG("PWM_lCCU8_Init:Initilizing Slice")
      XMC_CCU8_SLICE_CompareInit(handle_ptr->ccu8_slice_ptr, handle_ptr->ccu8_slice_config_ptr);

      /* Set the period and compare register values */
      XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr,
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	4610      	mov	r0, r2
 8001b22:	4619      	mov	r1, r3
 8001b24:	f7ff f99c 	bl	8000e60 <XMC_CCU8_SLICE_SetTimerPeriodMatch>
    		                            (uint16_t)handle_ptr->period_value);

      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689a      	ldr	r2, [r3, #8]
    		                              (uint16_t)handle_ptr->compare_value);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	699b      	ldr	r3, [r3, #24]

      /* Set the period and compare register values */
      XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr,
    		                            (uint16_t)handle_ptr->period_value);

      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	4610      	mov	r0, r2
 8001b34:	2100      	movs	r1, #0
 8001b36:	461a      	mov	r2, r3
 8001b38:	f7ff f9a0 	bl	8000e7c <XMC_CCU8_SLICE_SetTimerCompareMatch>
    		                              (uint16_t)handle_ptr->compare_value);

      XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_kernel_ptr, handle_ptr->shadow_mask);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b44:	4610      	mov	r0, r2
 8001b46:	4619      	mov	r1, r3
 8001b48:	f7ff ffa4 	bl	8001a94 <XMC_CCU8_EnableShadowTransfer>

      /* Initialize interrupts */
      PWM_lCCU8_ConfigInterrupts(handle_ptr);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 f825 	bl	8001b9c <PWM_lCCU8_ConfigInterrupts>

      XMC_GPIO_Init(handle_ptr->gpio_out_port,handle_ptr->gpio_out_pin,
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6919      	ldr	r1, [r3, #16]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	695b      	ldr	r3, [r3, #20]
 8001b60:	4608      	mov	r0, r1
 8001b62:	4611      	mov	r1, r2
 8001b64:	461a      	mov	r2, r3
 8001b66:	f7fe fc1f 	bl	80003a8 <XMC_GPIO_Init>
    		        handle_ptr->gpio_out_config);

      handle_ptr->state = PWM_STATUS_SUCCESS;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->start_control)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d002      	beq.n	8001b82 <PWM_lCCU8_Init+0xa6>
      {
        PWM_Start(handle_ptr);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 f8df 	bl	8001d40 <PWM_Start>
      }
      status = PWM_STATUS_SUCCESS;
 8001b82:	2300      	movs	r3, #0
 8001b84:	73fb      	strb	r3, [r7, #15]
 8001b86:	e003      	b.n	8001b90 <PWM_lCCU8_Init+0xb4>
    }
    else
    {
      handle_ptr->state = PWM_STATUS_UNINITIALIZED;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    }

  }
  return(status);
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
} /* end of PWM_lCCU8_Init() api */
 8001b92:	4618      	mov	r0, r3
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop

08001b9c <PWM_lCCU8_ConfigInterrupts>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialize interrupts */
void PWM_lCCU8_ConfigInterrupts(PWM_t *const handle_ptr)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  if ((bool) true == handle_ptr->period_match_enable)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00f      	beq.n	8001bce <PWM_lCCU8_ConfigInterrupts+0x32>
  {
    XMC_DEBUG("PWM_lCCU8_ConfigInterrupts:period match event enable")

    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	f7ff ff7b 	bl	8001ab0 <XMC_CCU8_SLICE_EnableEvent>

    /* Bind event to Service Request Node for period match event */
    XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689a      	ldr	r2, [r3, #8]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001bc4:	4610      	mov	r0, r2
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	461a      	mov	r2, r3
 8001bca:	f7ff f96f 	bl	8000eac <XMC_CCU8_SLICE_SetInterruptNode>
                                    handle_ptr->ccu8_slice_period_match_node);
  }

  if ((bool) true == handle_ptr->compare_match_enable)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d00f      	beq.n	8001bf8 <PWM_lCCU8_ConfigInterrupts+0x5c>
  {
    XMC_DEBUG("PWM_lCCU8_ConfigInterrupts:compare match event enable ")

    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	2102      	movs	r1, #2
 8001be0:	f7ff ff66 	bl	8001ab0 <XMC_CCU8_SLICE_EnableEvent>
    /* Bind event to Service Request Node for compare match event */
    XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1,
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001bee:	4610      	mov	r0, r2
 8001bf0:	2102      	movs	r1, #2
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	f7ff f95a 	bl	8000eac <XMC_CCU8_SLICE_SetInterruptNode>
                                    handle_ptr->ccu8_slice_compare_match_node);
  }
}
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop

08001c00 <PWM_lCCU8_Start>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*Starts the CCU8 slice. */
void PWM_lCCU8_Start(PWM_t *const handle_ptr)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PWM_lCCU8_Start:Invalid handle_ptr" , (handle_ptr != NULL))

  if ((PWM_STATUS_SUCCESS == handle_ptr->state) || (PWM_STATUS_STOPPED == handle_ptr->state))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d004      	beq.n	8001c1c <PWM_lCCU8_Start+0x1c>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001c18:	2b04      	cmp	r3, #4
 8001c1a:	d111      	bne.n	8001c40 <PWM_lCCU8_Start+0x40>
  {
    /* Clears IDLE mode for the slice */
    XMC_CCU8_EnableClock(handle_ptr->ccu8_kernel_ptr,handle_ptr->slice_number);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001c26:	4610      	mov	r0, r2
 8001c28:	4619      	mov	r1, r3
 8001c2a:	f7ff fee7 	bl	80019fc <XMC_CCU8_EnableClock>
    XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff ff0a 	bl	8001a4c <XMC_CCU8_SLICE_StartTimer>

    handle_ptr->state = PWM_STATUS_RUNNING;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2203      	movs	r2, #3
 8001c3c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    XMC_DEBUG("PWM_lCCU8_Start:start PWM")
  }
} /* end of PWM_lCCU8_Start() api */
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop

08001c48 <PWM_lCCU8_Stop>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*Stops the CCU8 slice. */
void PWM_lCCU8_Stop(PWM_t *const handle_ptr)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PWM_lCCU8_Stop:Invalid handle_ptr" , (handle_ptr != NULL))

  if (PWM_STATUS_UNINITIALIZED != handle_ptr->state)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d016      	beq.n	8001c88 <PWM_lCCU8_Stop+0x40>
  {
    XMC_CCU8_SLICE_StopTimer(handle_ptr->ccu8_slice_ptr);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff ff00 	bl	8001a64 <XMC_CCU8_SLICE_StopTimer>
    XMC_CCU8_SLICE_ClearTimer(handle_ptr->ccu8_slice_ptr);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff07 	bl	8001a7c <XMC_CCU8_SLICE_ClearTimer>
    XMC_CCU8_DisableClock(handle_ptr->ccu8_kernel_ptr, handle_ptr->slice_number);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001c78:	4610      	mov	r0, r2
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	f7ff fed2 	bl	8001a24 <XMC_CCU8_DisableClock>

    handle_ptr->state = PWM_STATUS_STOPPED;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2204      	movs	r2, #4
 8001c84:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    XMC_DEBUG("PWM_lCCU8_Stop:stop PWM")
  }
} /* end of PWM_lCCU8_Stop() api */
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop

08001c90 <PWM_lCCU8_SetDutyCycle>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*Sets the duty cycle for CCU8 slice. */
PWM_STATUS_t PWM_lCCU8_SetDutyCycle(PWM_t *const handle_ptr, uint32_t duty_cycle)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]

  XMC_ASSERT("PWM_lCCU8_SetDutyCycle:Invalid handle_ptr" , (handle_ptr != NULL))
  XMC_ASSERT("PWM_lCCU8_SetDutyCycle:Invalid duty_cycle",((duty_cycle >= 0) &&
                                                          (duty_cycle <= PWM_MAX_DUTY_CYCLE)))

  status = PWM_STATUS_FAILURE;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	75fb      	strb	r3, [r7, #23]
  if (handle_ptr->state != PWM_STATUS_UNINITIALIZED)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d02d      	beq.n	8001d04 <PWM_lCCU8_SetDutyCycle+0x74>
  {
    /* Duty cycle needs between 0 and 10000 */
    if (duty_cycle <= PWM_MAX_DUTY_CYCLE)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	f242 7210 	movw	r2, #10000	; 0x2710
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d828      	bhi.n	8001d04 <PWM_lCCU8_SetDutyCycle+0x74>
    {
      period = (uint32_t)handle_ptr->period_value + 1U;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	613b      	str	r3, [r7, #16]

      /* Duty Cycle(symmetric) = (PR-CR1)+1 / period */
      compare = ((period * ((uint32_t) PWM_MAX_DUTY_CYCLE - duty_cycle)) / ((uint32_t) 100 * PWM_DUTY_CYCLE_SCALE));
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8001cc0:	3310      	adds	r3, #16
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	fb02 f303 	mul.w	r3, r2, r3
 8001cc8:	4a11      	ldr	r2, [pc, #68]	; (8001d10 <PWM_lCCU8_SetDutyCycle+0x80>)
 8001cca:	fba2 2303 	umull	r2, r3, r2, r3
 8001cce:	0b5b      	lsrs	r3, r3, #13
 8001cd0:	60fb      	str	r3, [r7, #12]

      handle_ptr->compare_value = compare;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	619a      	str	r2, [r3, #24]
      handle_ptr->duty_cycle = duty_cycle;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	621a      	str	r2, [r3, #32]

      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689a      	ldr	r2, [r3, #8]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	2100      	movs	r1, #0
 8001cea:	461a      	mov	r2, r3
 8001cec:	f7ff f8c6 	bl	8000e7c <XMC_CCU8_SLICE_SetTimerCompareMatch>
    		                             (uint16_t)compare);

      XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_kernel_ptr, handle_ptr->shadow_mask);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf8:	4610      	mov	r0, r2
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	f7ff feca 	bl	8001a94 <XMC_CCU8_EnableShadowTransfer>
      status = PWM_STATUS_SUCCESS;
 8001d00:	2300      	movs	r3, #0
 8001d02:	75fb      	strb	r3, [r7, #23]
    }
  }

  XMC_DEBUG("PWM_lCCU8_SetDutyCycle:dutycycle set")
  return (status);
 8001d04:	7dfb      	ldrb	r3, [r7, #23]
} /* end of PWM_lCCU8_SetDutyCycle() api */
 8001d06:	4618      	mov	r0, r3
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	d1b71759 	.word	0xd1b71759

08001d14 <PWM_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* This function initializes the app */
PWM_STATUS_t PWM_Init(PWM_t *const handle_ptr)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  PWM_STATUS_t status;
  status = PWM_STATUS_FAILURE;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	73fb      	strb	r3, [r7, #15]
    status = PWM_lCCU4_Init(handle_ptr);
  }
#endif

#ifdef PWM_SLICE_USED_CCU8
  if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d104      	bne.n	8001d34 <PWM_Init+0x20>
  {
    status = PWM_lCCU8_Init(handle_ptr);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7ff fed6 	bl	8001adc <PWM_lCCU8_Init>
 8001d30:	4603      	mov	r3, r0
 8001d32:	73fb      	strb	r3, [r7, #15]
  }
#endif

  return (status);
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop

08001d40 <PWM_Start>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* This function starts the PWM generation. This needs to be called even if external start is configured.*/
void PWM_Start(PWM_t *const handle_ptr)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
    PWM_lCCU4_Start(handle_ptr);
  }
#endif

#ifdef PWM_SLICE_USED_CCU8
  if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d102      	bne.n	8001d58 <PWM_Start+0x18>
  {
    PWM_lCCU8_Start(handle_ptr);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7ff ff54 	bl	8001c00 <PWM_lCCU8_Start>
  }
#endif
}
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop

08001d60 <PWM_Stop>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* This function stops the PWM generation. */
void PWM_Stop(PWM_t *const handle_ptr)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
    PWM_lCCU4_Stop(handle_ptr);
  }
#endif

#ifdef PWM_SLICE_USED_CCU8
  if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d102      	bne.n	8001d78 <PWM_Stop+0x18>
  {
    PWM_lCCU8_Stop(handle_ptr);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7ff ff68 	bl	8001c48 <PWM_lCCU8_Stop>
  }
#endif
}
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop

08001d80 <PWM_SetDutyCycle>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*This function is used to set the duty cycle (uint32_t) of the PWM waveform  */
PWM_STATUS_t PWM_SetDutyCycle(PWM_t *const handle_ptr, uint32_t duty_cycle)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  PWM_STATUS_t status;
  status = PWM_STATUS_FAILURE;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	73fb      	strb	r3, [r7, #15]
    status = PWM_lCCU4_SetDutyCycle(handle_ptr, duty_cycle);
  }
#endif

#ifdef PWM_SLICE_USED_CCU8
  if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d105      	bne.n	8001da4 <PWM_SetDutyCycle+0x24>
  {
    status = PWM_lCCU8_SetDutyCycle(handle_ptr, duty_cycle);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	6839      	ldr	r1, [r7, #0]
 8001d9c:	f7ff ff78 	bl	8001c90 <PWM_lCCU8_SetDutyCycle>
 8001da0:	4603      	mov	r3, r0
 8001da2:	73fb      	strb	r3, [r7, #15]
  }
#endif
  return (status);
 8001da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop

08001db0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001db4:	4b04      	ldr	r3, [pc, #16]	; (8001dc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001dbc:	0a1b      	lsrs	r3, r3, #8
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	db0b      	blt.n	8001df6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001dde:	4908      	ldr	r1, [pc, #32]	; (8001e00 <__NVIC_EnableIRQ+0x34>)
 8001de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de4:	095b      	lsrs	r3, r3, #5
 8001de6:	79fa      	ldrb	r2, [r7, #7]
 8001de8:	f002 021f 	and.w	r2, r2, #31
 8001dec:	2001      	movs	r0, #1
 8001dee:	fa00 f202 	lsl.w	r2, r0, r2
 8001df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	e000e100 	.word	0xe000e100

08001e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	6039      	str	r1, [r7, #0]
 8001e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	db0a      	blt.n	8001e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e18:	490d      	ldr	r1, [pc, #52]	; (8001e50 <__NVIC_SetPriority+0x4c>)
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	b2d2      	uxtb	r2, r2
 8001e22:	0092      	lsls	r2, r2, #2
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	440b      	add	r3, r1
 8001e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8001e2c:	e00a      	b.n	8001e44 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2e:	4909      	ldr	r1, [pc, #36]	; (8001e54 <__NVIC_SetPriority+0x50>)
 8001e30:	79fb      	ldrb	r3, [r7, #7]
 8001e32:	f003 030f 	and.w	r3, r3, #15
 8001e36:	3b04      	subs	r3, #4
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	0092      	lsls	r2, r2, #2
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	440b      	add	r3, r1
 8001e42:	761a      	strb	r2, [r3, #24]
  }
}
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	e000e100 	.word	0xe000e100
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b089      	sub	sp, #36	; 0x24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f1c3 0307 	rsb	r3, r3, #7
 8001e72:	2b06      	cmp	r3, #6
 8001e74:	bf28      	it	cs
 8001e76:	2306      	movcs	r3, #6
 8001e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	3306      	adds	r3, #6
 8001e7e:	2b06      	cmp	r3, #6
 8001e80:	d902      	bls.n	8001e88 <NVIC_EncodePriority+0x30>
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	3b01      	subs	r3, #1
 8001e86:	e000      	b.n	8001e8a <NVIC_EncodePriority+0x32>
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	1e5a      	subs	r2, r3, #1
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	401a      	ands	r2, r3
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea6:	1e59      	subs	r1, r3, #1
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8001eac:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3724      	adds	r7, #36	; 0x24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop

08001ebc <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	b25b      	sxtb	r3, r3
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff ff7e 	bl	8001dcc <__NVIC_EnableIRQ>
}
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop

08001ed8 <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 8001ed8:	b590      	push	{r4, r7, lr}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	781c      	ldrb	r4, [r3, #0]
 8001ee4:	f7ff ff64 	bl	8001db0 <__NVIC_GetPriorityGrouping>
 8001ee8:	4601      	mov	r1, r0
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	785b      	ldrb	r3, [r3, #1]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8001eee:	461a      	mov	r2, r3
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	789b      	ldrb	r3, [r3, #2]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8001ef4:	4608      	mov	r0, r1
 8001ef6:	4611      	mov	r1, r2
 8001ef8:	461a      	mov	r2, r3
 8001efa:	f7ff ffad 	bl	8001e58 <NVIC_EncodePriority>
 8001efe:	4602      	mov	r2, r0
 8001f00:	b263      	sxtb	r3, r4
 8001f02:	4618      	mov	r0, r3
 8001f04:	4611      	mov	r1, r2
 8001f06:	f7ff ff7d 	bl	8001e04 <__NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	78db      	ldrb	r3, [r3, #3]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d002      	beq.n	8001f18 <INTERRUPT_Init+0x40>
  {
    INTERRUPT_Enable(handler);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7ff ffd2 	bl	8001ebc <INTERRUPT_Enable>
  {
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd90      	pop	{r4, r7, pc}
 8001f22:	bf00      	nop

08001f24 <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR> 
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU8_GIDLC_SPRB_Msk;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	60da      	str	r2, [r3, #12]
}
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop

08001f44 <GLOBAL_CCU8_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU8_STATUS_t GLOBAL_CCU8_Init(GLOBAL_CCU8_t* handle)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU8_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	7b5b      	ldrb	r3, [r3, #13]
 8001f50:	f083 0301 	eor.w	r3, r3, #1
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00f      	beq.n	8001f7a <GLOBAL_CCU8_Init+0x36>
  {
    /* Enable CCU8 module */
    XMC_CCU8_Init(handle->module_ptr,handle->mcs_action);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	7b1b      	ldrb	r3, [r3, #12]
 8001f62:	4610      	mov	r0, r2
 8001f64:	4619      	mov	r1, r3
 8001f66:	f7fe ff23 	bl	8000db0 <XMC_CCU8_Init>
    /* Start the prescaler */
    XMC_CCU8_StartPrescaler(handle->module_ptr);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff ffd8 	bl	8001f24 <XMC_CCU8_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU8_STATUS_SUCCESS);
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <XMC_VADC_GLOBAL_DisablePostCalibration>:
 * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
 * None
 */

__STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uint32_t group_number)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_number));
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	3310      	adds	r3, #16
 8001f98:	4619      	mov	r1, r3
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	408b      	lsls	r3, r1
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <GLOBAL_ADC_Init>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * This function initializes all instances of the ADC Global APP and low level app.
 */
GLOBAL_ADC_STATUS_t GLOBAL_ADC_Init(GLOBAL_ADC_t *const handle_ptr)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_ADC_Init:Invalid handle_ptr", (handle_ptr != NULL))
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  uint32_t group_index;
#endif

  if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	7e1b      	ldrb	r3, [r3, #24]
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d149      	bne.n	8002054 <GLOBAL_ADC_Init+0xa4>
  {  
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	695a      	ldr	r2, [r3, #20]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	4610      	mov	r0, r2
 8001fca:	4619      	mov	r1, r3
 8001fcc:	f7ff fad0 	bl	8001570 <XMC_VADC_GLOBAL_Init>

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	e02f      	b.n	8002036 <GLOBAL_ADC_Init+0x86>
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fde:	6819      	ldr	r1, [r3, #0]
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	4608      	mov	r0, r1
 8001fec:	4619      	mov	r1, r3
 8001fee:	f7ff fb19 	bl	8001624 <XMC_VADC_GROUP_Init>
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);

      /* Switch on the converter of the Group[group_index]*/
      XMC_VADC_GROUP_SetPowerMode(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	2103      	movs	r1, #3
 8002000:	f7ff fba0 	bl	8001744 <XMC_VADC_GROUP_SetPowerMode>
                                  XMC_VADC_GROUP_POWERMODE_NORMAL);

      /* Disable the post calibration option for the respective group*/
      if ((bool)false == handle_ptr->group_ptrs_array[group_index]->post_calibration)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800200c:	7a1b      	ldrb	r3, [r3, #8]
 800200e:	f083 0301 	eor.w	r3, r3, #1
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b00      	cmp	r3, #0
 8002016:	d005      	beq.n	8002024 <GLOBAL_ADC_Init+0x74>
      {
        XMC_VADC_GLOBAL_DisablePostCalibration(handle_ptr->module_ptr,group_index);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	4618      	mov	r0, r3
 800201e:	68f9      	ldr	r1, [r7, #12]
 8002020:	f7ff ffb0 	bl	8001f84 <XMC_VADC_GLOBAL_DisablePostCalibration>

#if(XMC_VADC_SHS_AVAILABLE == 1U)
      XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(handle_ptr->global_shs_ptr, (XMC_VADC_GROUP_INDEX_t)group_index);
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800202c:	2200      	movs	r2, #0
 800202e:	725a      	strb	r2, [r3, #9]
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	3301      	adds	r3, #1
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2b03      	cmp	r3, #3
 800203a:	d9cc      	bls.n	8001fd6 <GLOBAL_ADC_Init+0x26>
    }
#if(XMC_VADC_SHS_AVAILABLE == 1U)
    XMC_VADC_GLOBAL_SHS_SetClockDivider(handle_ptr->global_shs_ptr, (uint8_t) GLOBAL_ADC_DIVS_VALUE);
#endif
#endif /* _XMC_VADC_GROUP_AVAILABLE_ */
    if((bool)true == handle_ptr->enable_startup_calibration)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	7e5b      	ldrb	r3, [r3, #25]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d004      	beq.n	800204e <GLOBAL_ADC_Init+0x9e>
    {
    	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff fabb 	bl	80015c4 <XMC_VADC_GLOBAL_StartupCalibration>
    }
    handle_ptr->init_state = GLOBAL_ADC_SUCCESS;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	7e1b      	ldrb	r3, [r3, #24]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6819      	ldr	r1, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	7c1a      	ldrb	r2, [r3, #16]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3304      	adds	r3, #4
 8002074:	4608      	mov	r0, r1
 8002076:	4611      	mov	r1, r2
 8002078:	461a      	mov	r2, r3
 800207a:	f7fe f995 	bl	80003a8 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6819      	ldr	r1, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	7c1a      	ldrb	r2, [r3, #16]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	7c5b      	ldrb	r3, [r3, #17]
 800208a:	4608      	mov	r0, r1
 800208c:	4611      	mov	r1, r2
 800208e:	461a      	mov	r2, r3
 8002090:	f7ff f9ec 	bl	800146c <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop

080020a0 <XMC_DAC_EnableSimultaneousDataMode>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_StartSingleValueMode(), XMC_DAC_CH_StartDataMode(), XMC_DAC_SimultaneousWrite(), XMC_DAC_DisableSimultaneousDataMode()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_EnableSimultaneousDataMode(XMC_DAC_t *const dac)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_DAC_EnableSimultaneousDataMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  
  dac->DACCFG[0].high |= DAC_DAC0CFG1_DATMOD_Msk;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	609a      	str	r2, [r3, #8]
}
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop

080020c0 <XMC_DAC_CH_Write>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_StartSingleValueMode(), XMC_DAC_CH_StartDataMode(), XMC_DAC_CH_StartRampMode()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_Write(XMC_DAC_t *const dac, const uint8_t channel, const uint16_t data)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	460b      	mov	r3, r1
 80020ca:	70fb      	strb	r3, [r7, #3]
 80020cc:	4613      	mov	r3, r2
 80020ce:	803b      	strh	r3, [r7, #0]
  XMC_ASSERT("XMC_DAC_CH_Write: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_Write: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  
  dac->DACDATA[channel] = data;
 80020d0:	78fb      	ldrb	r3, [r7, #3]
 80020d2:	883a      	ldrh	r2, [r7, #0]
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	3304      	adds	r3, #4
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	440b      	add	r3, r1
 80020dc:	605a      	str	r2, [r3, #4]
}
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <XMC_DAC_CH_SetMode>:
 * Sets the operating \e mode for the \e channel by setting the \a MODE bit-field of \a DAC0CFG0 register (for channel 0) / \a DAC1CFG0 register (for channel 1).
 * Different modes of DAC operation are defined by enum XMC_DAC_CH_MODE_t.
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetMode(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_MODE_t mode)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	460b      	mov	r3, r1
 80020f2:	607a      	str	r2, [r7, #4]
 80020f4:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_DAC_CH_SetMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_SetMode: trigger parameter not valid\n", XMC_DAC_IS_MODE_VALID(mode));
    
  dac->DACCFG[channel].low = (dac->DACCFG[channel].low & ~DAC_DAC0CFG0_MODE_Msk) |
 80020f6:	7af8      	ldrb	r0, [r7, #11]
 80020f8:	7afb      	ldrb	r3, [r7, #11]
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	4413      	add	r3, r2
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f423 02e0 	bic.w	r2, r3, #7340032	; 0x700000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	431a      	orrs	r2, r3
 800210a:	68f9      	ldr	r1, [r7, #12]
 800210c:	00c3      	lsls	r3, r0, #3
 800210e:	440b      	add	r3, r1
 8002110:	605a      	str	r2, [r3, #4]
                             mode;
}
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <XMC_DAC_CH_EnableEvent>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_DisableEvent()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_EnableEvent(XMC_DAC_t *const dac, const uint8_t channel)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_DAC_CH_EnableEvent: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_EnableEvent: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
    
  dac->DACCFG[channel].low |= DAC_DAC0CFG0_SREN_Msk;
 8002128:	78f8      	ldrb	r0, [r7, #3]
 800212a:	78fb      	ldrb	r3, [r7, #3]
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	4413      	add	r3, r2
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002138:	6879      	ldr	r1, [r7, #4]
 800213a:	00c3      	lsls	r3, r0, #3
 800213c:	440b      	add	r3, r1
 800213e:	605a      	str	r2, [r3, #4]
}
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop

0800214c <XMC_DAC_CH_SetOutputScale>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_GetOutputScale()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetOutputScale(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_OUTPUT_SCALE_t scale)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	70fb      	strb	r3, [r7, #3]
 8002158:	4613      	mov	r3, r2
 800215a:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_DAC_CH_SetOutputScale: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetOutputScale: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_SetOutputScale: scale parameter not valid\n", XMC_DAC_IS_OUTPUT_SCALE_VALID(scale));

  dac->DACCFG[channel].high = (dac->DACCFG[channel].high & ~(DAC_DAC0CFG1_MULDIV_Msk | DAC_DAC0CFG1_SCALE_Msk)) |
 800215c:	78f8      	ldrb	r0, [r7, #3]
 800215e:	78fb      	ldrb	r3, [r7, #3]
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	4413      	add	r3, r2
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f023 020f 	bic.w	r2, r3, #15
 800216c:	78bb      	ldrb	r3, [r7, #2]
 800216e:	431a      	orrs	r2, r3
 8002170:	6879      	ldr	r1, [r7, #4]
 8002172:	00c3      	lsls	r3, r0, #3
 8002174:	440b      	add	r3, r1
 8002176:	609a      	str	r2, [r3, #8]
                              scale;
}
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop

08002184 <DAC_ModeConfig>:
  XMC_DAC_CH_SetRampStop(HandlePtr->dac_module_ptr, HandlePtr->dac_ch, stop_ramp);
}

/* This API will configure DAC mode depends upon the user configuration */
XMC_DAC_CH_STATUS_t DAC_ModeConfig(const DAC_t * const HandlePtr)
{
 8002184:	b5b0      	push	{r4, r5, r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af02      	add	r7, sp, #8
 800218a:	6078      	str	r0, [r7, #4]
  XMC_DAC_CH_STATUS_t api_status = XMC_DAC_CH_STATUS_OK;
 800218c:	2300      	movs	r3, #0
 800218e:	73fb      	strb	r3, [r7, #15]
  /* Initialize DAC configuration created by the user */
  if ( XMC_DAC_CH_MODE_PATTERN == HandlePtr->dac_mode )
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002198:	d115      	bne.n	80021c6 <DAC_ModeConfig+0x42>
  {
    api_status = XMC_DAC_CH_StartPatternMode(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6818      	ldr	r0, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	7c1c      	ldrb	r4, [r3, #16]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68da      	ldr	r2, [r3, #12]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	695b      	ldr	r3, [r3, #20]
 80021b4:	9200      	str	r2, [sp, #0]
 80021b6:	9301      	str	r3, [sp, #4]
 80021b8:	462a      	mov	r2, r5
 80021ba:	4623      	mov	r3, r4
 80021bc:	f7ff f88e 	bl	80012dc <XMC_DAC_CH_StartPatternMode>
 80021c0:	4603      	mov	r3, r0
 80021c2:	73fb      	strb	r3, [r7, #15]
 80021c4:	e085      	b.n	80022d2 <DAC_ModeConfig+0x14e>
    HandlePtr->dac_pat_table_ptr,HandlePtr->dac_sign_output,
    HandlePtr->dac_input_trigger,HandlePtr->dac_frequency);
  }
  else if ( XMC_DAC_CH_MODE_SINGLE == HandlePtr->dac_mode )
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021ce:	d115      	bne.n	80021fc <DAC_ModeConfig+0x78>
  {
    api_status = XMC_DAC_CH_StartSingleValueMode(HandlePtr->dac_module_ptr,HandlePtr->dac_ch);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80021da:	4610      	mov	r0, r2
 80021dc:	4619      	mov	r1, r3
 80021de:	f7fe fff7 	bl	80011d0 <XMC_DAC_CH_StartSingleValueMode>
 80021e2:	4603      	mov	r3, r0
 80021e4:	73fb      	strb	r3, [r7, #15]
    /*Initialized data register with zero */
    XMC_DAC_CH_Write(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,0U);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80021f0:	4610      	mov	r0, r2
 80021f2:	4619      	mov	r1, r3
 80021f4:	2200      	movs	r2, #0
 80021f6:	f7ff ff63 	bl	80020c0 <XMC_DAC_CH_Write>
 80021fa:	e06a      	b.n	80022d2 <DAC_ModeConfig+0x14e>
  }
  else if ( XMC_DAC_CH_MODE_DATA ==  HandlePtr->dac_mode )
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002204:	d125      	bne.n	8002252 <DAC_ModeConfig+0xce>
  {
    api_status = XMC_DAC_CH_StartDataMode(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6818      	ldr	r0, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	f7fe ffec 	bl	80011f4 <XMC_DAC_CH_StartDataMode>
 800221c:	4603      	mov	r3, r0
 800221e:	73fb      	strb	r3, [r7, #15]
    HandlePtr->dac_input_trigger,HandlePtr->dac_frequency);
    if(1U == HandlePtr->dac_service_request)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d108      	bne.n	800223c <DAC_ModeConfig+0xb8>
    {
      /* Enable Service Request */
      XMC_DAC_CH_EnableEvent(HandlePtr->dac_module_ptr,HandlePtr->dac_ch);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002234:	4610      	mov	r0, r2
 8002236:	4619      	mov	r1, r3
 8002238:	f7ff ff70 	bl	800211c <XMC_DAC_CH_EnableEvent>
    }

    /*Initialized data register with zero */
    XMC_DAC_CH_Write(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,0U);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002246:	4610      	mov	r0, r2
 8002248:	4619      	mov	r1, r3
 800224a:	2200      	movs	r2, #0
 800224c:	f7ff ff38 	bl	80020c0 <XMC_DAC_CH_Write>
 8002250:	e03f      	b.n	80022d2 <DAC_ModeConfig+0x14e>
  }
  else if ( XMC_DAC_CH_MODE_RAMP == HandlePtr->dac_mode )
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800225a:	d125      	bne.n	80022a8 <DAC_ModeConfig+0x124>
  {
    api_status = XMC_DAC_CH_StartRampMode(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6818      	ldr	r0, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	8b1d      	ldrh	r5, [r3, #24]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	8b5c      	ldrh	r4, [r3, #26]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68da      	ldr	r2, [r3, #12]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	9200      	str	r2, [sp, #0]
 8002278:	9301      	str	r3, [sp, #4]
 800227a:	462a      	mov	r2, r5
 800227c:	4623      	mov	r3, r4
 800227e:	f7fe ffe9 	bl	8001254 <XMC_DAC_CH_StartRampMode>
 8002282:	4603      	mov	r3, r0
 8002284:	73fb      	strb	r3, [r7, #15]
    HandlePtr->dac_ramp_start,HandlePtr->dac_ramp_stop,
    HandlePtr->dac_input_trigger,HandlePtr->dac_frequency);

    XMC_DAC_CH_SetOutputScale(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6819      	ldr	r1, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
                       (XMC_DAC_CH_OUTPUT_SCALE_t)HandlePtr->dac_config_ptr->output_scale);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	791b      	ldrb	r3, [r3, #4]
 8002296:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800229a:	b2db      	uxtb	r3, r3
  {
    api_status = XMC_DAC_CH_StartRampMode(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
    HandlePtr->dac_ramp_start,HandlePtr->dac_ramp_stop,
    HandlePtr->dac_input_trigger,HandlePtr->dac_frequency);

    XMC_DAC_CH_SetOutputScale(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
 800229c:	4608      	mov	r0, r1
 800229e:	4611      	mov	r1, r2
 80022a0:	461a      	mov	r2, r3
 80022a2:	f7ff ff53 	bl	800214c <XMC_DAC_CH_SetOutputScale>
 80022a6:	e014      	b.n	80022d2 <DAC_ModeConfig+0x14e>
                       (XMC_DAC_CH_OUTPUT_SCALE_t)HandlePtr->dac_config_ptr->output_scale);
  }
  else if ( XMC_DAC_CH_MODE_NOISE == HandlePtr->dac_mode )
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022b0:	d10d      	bne.n	80022ce <DAC_ModeConfig+0x14a>
  {
    api_status = XMC_DAC_CH_StartNoiseMode(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6818      	ldr	r0, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68da      	ldr	r2, [r3, #12]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	f7ff f852 	bl	800136c <XMC_DAC_CH_StartNoiseMode>
 80022c8:	4603      	mov	r3, r0
 80022ca:	73fb      	strb	r3, [r7, #15]
 80022cc:	e001      	b.n	80022d2 <DAC_ModeConfig+0x14e>
    HandlePtr->dac_input_trigger,HandlePtr->dac_frequency);
  }
  else
  {
    /* DAC Mode Idle */
    api_status = XMC_DAC_CH_STATUS_OK;
 80022ce:	2300      	movs	r3, #0
 80022d0:	73fb      	strb	r3, [r7, #15]
  }
  return api_status;
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bdb0      	pop	{r4, r5, r7, pc}

080022dc <DAC_Init>:
    * This function initializes DAC
    * peripheral as per the user configurations
*/

DAC_STATUS_t DAC_Init(const DAC_t * const HandlePtr)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  DAC_STATUS_t status = DAC_STATUS_SUCCESS;
 80022e4:	2300      	movs	r3, #0
 80022e6:	73fb      	strb	r3, [r7, #15]
  /*Assert variables.*/
  XMC_ASSERT(" DAC_Init: Passing argument DAC HandlePtr of type DAC_t is Null",
             (HandlePtr != (DAC_t *)NULL));

  /* Enable DAC module */
  XMC_DAC_CH_Init(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,HandlePtr->dac_config_ptr);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6819      	ldr	r1, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	4608      	mov	r0, r1
 80022f8:	4611      	mov	r1, r2
 80022fa:	461a      	mov	r2, r3
 80022fc:	f7fe feec 	bl	80010d8 <XMC_DAC_CH_Init>
  /* ANALOG_IO initialization */
  status = (DAC_STATUS_t) ANALOG_IO_Init(HandlePtr->analog_io_config_ptr);
#endif

  /* Configure DAC with user configured mode */
  api_status = DAC_ModeConfig(HandlePtr);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7ff ff3f 	bl	8002184 <DAC_ModeConfig>
 8002306:	4603      	mov	r3, r0
 8002308:	73bb      	strb	r3, [r7, #14]

  /* Check if start after initialization is enabled */
  if(HandlePtr->dac_start_after_init == 0U)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002310:	2b00      	cmp	r3, #0
 8002312:	d109      	bne.n	8002328 <DAC_Init+0x4c>
  {
    XMC_DAC_CH_SetMode(HandlePtr->dac_module_ptr, HandlePtr->dac_ch, XMC_DAC_CH_MODE_IDLE);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800231e:	4610      	mov	r0, r2
 8002320:	4619      	mov	r1, r3
 8002322:	2200      	movs	r2, #0
 8002324:	f7ff fee0 	bl	80020e8 <XMC_DAC_CH_SetMode>
  }

  if(1U == HandlePtr->dac_coupled)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800232e:	2b01      	cmp	r3, #1
 8002330:	d104      	bne.n	800233c <DAC_Init+0x60>
  {
    /* Enable Simultaneous Data Mode */
    XMC_DAC_EnableSimultaneousDataMode(HandlePtr->dac_module_ptr);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff feb2 	bl	80020a0 <XMC_DAC_EnableSimultaneousDataMode>
  }

  if(api_status != XMC_DAC_CH_STATUS_OK)
 800233c:	7bbb      	ldrb	r3, [r7, #14]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <DAC_Init+0x6a>
  {
    status = DAC_STATUS_FAILURE;
 8002342:	2301      	movs	r3, #1
 8002344:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8002346:	7bfb      	ldrb	r3, [r7, #15]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002360:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <__NVIC_SetPriorityGrouping+0x44>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800236c:	4013      	ands	r3, r2
 800236e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8002378:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800237c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002380:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8002382:	4a04      	ldr	r2, [pc, #16]	; (8002394 <__NVIC_SetPriorityGrouping+0x44>)
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	60d3      	str	r3, [r2, #12]
}
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 800239e:	2001      	movs	r0, #1
 80023a0:	f7ff ffd6 	bl	8002350 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023a4:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 80023a6:	4b21      	ldr	r3, [pc, #132]	; (800242c <SystemCoreSetup+0x94>)
 80023a8:	4a21      	ldr	r2, [pc, #132]	; (8002430 <SystemCoreSetup+0x98>)
 80023aa:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80023ac:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80023b0:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 80023b2:	4a1e      	ldr	r2, [pc, #120]	; (800242c <SystemCoreSetup+0x94>)
 80023b4:	4b1d      	ldr	r3, [pc, #116]	; (800242c <SystemCoreSetup+0x94>)
 80023b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ba:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023be:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 80023c2:	4b1c      	ldr	r3, [pc, #112]	; (8002434 <SystemCoreSetup+0x9c>)
 80023c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023c8:	3314      	adds	r3, #20
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f023 030f 	bic.w	r3, r3, #15
 80023d4:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f043 0303 	orr.w	r3, r3, #3
 80023dc:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 80023de:	4b15      	ldr	r3, [pc, #84]	; (8002434 <SystemCoreSetup+0x9c>)
 80023e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023e4:	3314      	adds	r3, #20
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 80023ea:	4a10      	ldr	r2, [pc, #64]	; (800242c <SystemCoreSetup+0x94>)
 80023ec:	4b0f      	ldr	r3, [pc, #60]	; (800242c <SystemCoreSetup+0x94>)
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	f023 0310 	bic.w	r3, r3, #16
 80023f4:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 80023f6:	4a0d      	ldr	r2, [pc, #52]	; (800242c <SystemCoreSetup+0x94>)
 80023f8:	4b0c      	ldr	r3, [pc, #48]	; (800242c <SystemCoreSetup+0x94>)
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	f023 0308 	bic.w	r3, r3, #8
 8002400:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002402:	4a0a      	ldr	r2, [pc, #40]	; (800242c <SystemCoreSetup+0x94>)
 8002404:	4b09      	ldr	r3, [pc, #36]	; (800242c <SystemCoreSetup+0x94>)
 8002406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002408:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800240c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 800240e:	4a07      	ldr	r2, [pc, #28]	; (800242c <SystemCoreSetup+0x94>)
 8002410:	4b06      	ldr	r3, [pc, #24]	; (800242c <SystemCoreSetup+0x94>)
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002418:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 800241a:	4a04      	ldr	r2, [pc, #16]	; (800242c <SystemCoreSetup+0x94>)
 800241c:	4b03      	ldr	r3, [pc, #12]	; (800242c <SystemCoreSetup+0x94>)
 800241e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002420:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002424:	6253      	str	r3, [r2, #36]	; 0x24
}
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	e000ed00 	.word	0xe000ed00
 8002430:	08000000 	.word	0x08000000
 8002434:	58001000 	.word	0x58001000

08002438 <arm_cos_f32>:
 * @return cos(x).
 */

float32_t arm_cos_f32(
  float32_t x)
{
 8002438:	b480      	push	{r7}
 800243a:	b08b      	sub	sp, #44	; 0x2c
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale the input to [0 1] range from [0 2*PI] , divide input by 2*pi, add 0.25 (pi/2) to read sine table */
  in = x * 0.159154943092f + 0.25f;
 8002440:	edd7 7a01 	vldr	s15, [r7, #4]
 8002444:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800251c <arm_cos_f32+0xe4>
 8002448:	ee67 7a87 	vmul.f32	s15, s15, s14
 800244c:	eeb5 7a00 	vmov.f32	s14, #80	; 0x50
 8002450:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002454:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 8002458:	edd7 7a08 	vldr	s15, [r7, #32]
 800245c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002460:	ee17 3a90 	vmov	r3, s15
 8002464:	627b      	str	r3, [r7, #36]	; 0x24

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 8002466:	edd7 7a08 	vldr	s15, [r7, #32]
 800246a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800246e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002472:	d502      	bpl.n	800247a <arm_cos_f32+0x42>
  {
    n--;
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	3b01      	subs	r3, #1
 8002478:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	ee07 3a90 	vmov	s15, r3
 8002480:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002484:	ed97 7a08 	vldr	s14, [r7, #32]
 8002488:	ee77 7a67 	vsub.f32	s15, s14, s15
 800248c:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of index of the table */
  findex = (float32_t) FAST_MATH_TABLE_SIZE * in;
 8002490:	edd7 7a08 	vldr	s15, [r7, #32]
 8002494:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002520 <arm_cos_f32+0xe8>
 8002498:	ee67 7a87 	vmul.f32	s15, s15, s14
 800249c:	edc7 7a07 	vstr	s15, [r7, #28]
  index = ((uint16_t)findex) & 0x1ff;
 80024a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80024a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024a8:	edc7 7a00 	vstr	s15, [r7]
 80024ac:	883b      	ldrh	r3, [r7, #0]
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024b4:	837b      	strh	r3, [r7, #26]

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 80024b6:	8b7b      	ldrh	r3, [r7, #26]
 80024b8:	ee07 3a90 	vmov	s15, r3
 80024bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024c0:	ed97 7a07 	vldr	s14, [r7, #28]
 80024c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024c8:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the cos table */
  a = sinTable_f32[index];
 80024cc:	8b7b      	ldrh	r3, [r7, #26]
 80024ce:	4a15      	ldr	r2, [pc, #84]	; (8002524 <arm_cos_f32+0xec>)
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4413      	add	r3, r2
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 80024d8:	8b7b      	ldrh	r3, [r7, #26]
 80024da:	3301      	adds	r3, #1
 80024dc:	4a11      	ldr	r2, [pc, #68]	; (8002524 <arm_cos_f32+0xec>)
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4413      	add	r3, r2
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  cosVal = (1.0f-fract)*a + fract*b;
 80024e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 80024ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80024ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80024f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024fa:	edd7 6a05 	vldr	s13, [r7, #20]
 80024fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8002502:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002506:	ee77 7a27 	vadd.f32	s15, s14, s15
 800250a:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return the output value */
  return (cosVal);
 800250e:	68bb      	ldr	r3, [r7, #8]
}
 8002510:	4618      	mov	r0, r3
 8002512:	372c      	adds	r7, #44	; 0x2c
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	3e22f983 	.word	0x3e22f983
 8002520:	44000000 	.word	0x44000000
 8002524:	08004834 	.word	0x08004834

08002528 <arm_sin_f32>:
 * @return  sin(x).
 */

float32_t arm_sin_f32(
  float32_t x)
{
 8002528:	b480      	push	{r7}
 800252a:	b08b      	sub	sp, #44	; 0x2c
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  float32_t a, b;                                        /* Two nearest output values */
  int32_t n;
  float32_t findex;

  /* Special case for small negative inputs */
  if ((x < 0.0f) && (x >= -1.9e-7f)) {
 8002530:	edd7 7a01 	vldr	s15, [r7, #4]
 8002534:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800253c:	d50a      	bpl.n	8002554 <arm_sin_f32+0x2c>
 800253e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002542:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002628 <arm_sin_f32+0x100>
 8002546:	eef4 7ac7 	vcmpe.f32	s15, s14
 800254a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800254e:	db01      	blt.n	8002554 <arm_sin_f32+0x2c>
     return x;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	e063      	b.n	800261c <arm_sin_f32+0xf4>
  }

  /* input x is in radians */
  /* Scale the input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 8002554:	edd7 7a01 	vldr	s15, [r7, #4]
 8002558:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800262c <arm_sin_f32+0x104>
 800255c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002560:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 8002564:	edd7 7a08 	vldr	s15, [r7, #32]
 8002568:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800256c:	ee17 3a90 	vmov	r3, s15
 8002570:	627b      	str	r3, [r7, #36]	; 0x24

  /* Make negative values towards -infinity */
  if (x < 0.0f)
 8002572:	edd7 7a01 	vldr	s15, [r7, #4]
 8002576:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800257a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800257e:	d502      	bpl.n	8002586 <arm_sin_f32+0x5e>
  {
    n--;
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	3b01      	subs	r3, #1
 8002584:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	ee07 3a90 	vmov	s15, r3
 800258c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002590:	ed97 7a08 	vldr	s14, [r7, #32]
 8002594:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002598:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of index of the table */
  findex = (float32_t) FAST_MATH_TABLE_SIZE * in;
 800259c:	edd7 7a08 	vldr	s15, [r7, #32]
 80025a0:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002630 <arm_sin_f32+0x108>
 80025a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025a8:	edc7 7a07 	vstr	s15, [r7, #28]

  index = ((uint16_t)findex) & 0x1ff;
 80025ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80025b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025b4:	edc7 7a00 	vstr	s15, [r7]
 80025b8:	883b      	ldrh	r3, [r7, #0]
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025c0:	837b      	strh	r3, [r7, #26]

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 80025c2:	8b7b      	ldrh	r3, [r7, #26]
 80025c4:	ee07 3a90 	vmov	s15, r3
 80025c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025cc:	ed97 7a07 	vldr	s14, [r7, #28]
 80025d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025d4:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 80025d8:	8b7b      	ldrh	r3, [r7, #26]
 80025da:	4a16      	ldr	r2, [pc, #88]	; (8002634 <arm_sin_f32+0x10c>)
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4413      	add	r3, r2
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 80025e4:	8b7b      	ldrh	r3, [r7, #26]
 80025e6:	3301      	adds	r3, #1
 80025e8:	4a12      	ldr	r2, [pc, #72]	; (8002634 <arm_sin_f32+0x10c>)
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f-fract)*a + fract*b;
 80025f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 80025f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80025fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8002602:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002606:	edd7 6a05 	vldr	s13, [r7, #20]
 800260a:	edd7 7a03 	vldr	s15, [r7, #12]
 800260e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002612:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002616:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return the output value */
  return (sinVal);
 800261a:	68bb      	ldr	r3, [r7, #8]
}
 800261c:	4618      	mov	r0, r3
 800261e:	372c      	adds	r7, #44	; 0x2c
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	b44c02cd 	.word	0xb44c02cd
 800262c:	3e22f983 	.word	0x3e22f983
 8002630:	44000000 	.word	0x44000000
 8002634:	08004834 	.word	0x08004834

08002638 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8002640:	2300      	movs	r3, #0
 8002642:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	701a      	strb	r2, [r3, #0]

  return (status);
 800264a:	7bfb      	ldrb	r3, [r7, #15]
}
 800264c:	4618      	mov	r0, r3
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 800265c:	4b02      	ldr	r3, [pc, #8]	; (8002668 <OSCHP_GetFrequency+0x10>)
}
 800265e:	4618      	mov	r0, r3
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	00b71b00 	.word	0x00b71b00

0800266c <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 800266c:	b5b0      	push	{r4, r5, r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8002672:	4b12      	ldr	r3, [pc, #72]	; (80026bc <SystemCoreClockSetup+0x50>)
 8002674:	1d3c      	adds	r4, r7, #4
 8002676:	461d      	mov	r5, r3
 8002678:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800267a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800267c:	682b      	ldr	r3, [r5, #0]
 800267e:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8002680:	1d3b      	adds	r3, r7, #4
 8002682:	4618      	mov	r0, r3
 8002684:	f7fd ff5e 	bl	8000544 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8002688:	2000      	movs	r0, #0
 800268a:	f7fe f877 	bl	800077c <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 800268e:	2000      	movs	r0, #0
 8002690:	f7fe f82c 	bl	80006ec <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 8002694:	2004      	movs	r0, #4
 8002696:	f7fe f8fd 	bl	8000894 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 800269a:	2001      	movs	r0, #1
 800269c:	2120      	movs	r1, #32
 800269e:	f7fe f945 	bl	800092c <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 80026a2:	2000      	movs	r0, #0
 80026a4:	f7fe f836 	bl	8000714 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 80026a8:	2001      	movs	r0, #1
 80026aa:	f7fe f91b 	bl	80008e4 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 80026ae:	2001      	movs	r0, #1
 80026b0:	f7fe f904 	bl	80008bc <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bdb0      	pop	{r4, r5, r7, pc}
 80026ba:	bf00      	nop
 80026bc:	08005038 	.word	0x08005038

080026c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026c4:	4b04      	ldr	r3, [pc, #16]	; (80026d8 <__NVIC_GetPriorityGrouping+0x18>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80026cc:	0a1b      	lsrs	r3, r3, #8
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	e000ed00 	.word	0xe000ed00

080026dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	db0b      	blt.n	8002706 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80026ee:	4908      	ldr	r1, [pc, #32]	; (8002710 <__NVIC_EnableIRQ+0x34>)
 80026f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f4:	095b      	lsrs	r3, r3, #5
 80026f6:	79fa      	ldrb	r2, [r7, #7]
 80026f8:	f002 021f 	and.w	r2, r2, #31
 80026fc:	2001      	movs	r0, #1
 80026fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	e000e100 	.word	0xe000e100

08002714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	6039      	str	r1, [r7, #0]
 800271e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002724:	2b00      	cmp	r3, #0
 8002726:	db0a      	blt.n	800273e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002728:	490d      	ldr	r1, [pc, #52]	; (8002760 <__NVIC_SetPriority+0x4c>)
 800272a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	0092      	lsls	r2, r2, #2
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	440b      	add	r3, r1
 8002738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800273c:	e00a      	b.n	8002754 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800273e:	4909      	ldr	r1, [pc, #36]	; (8002764 <__NVIC_SetPriority+0x50>)
 8002740:	79fb      	ldrb	r3, [r7, #7]
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	3b04      	subs	r3, #4
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	0092      	lsls	r2, r2, #2
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	440b      	add	r3, r1
 8002752:	761a      	strb	r2, [r3, #24]
  }
}
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	e000e100 	.word	0xe000e100
 8002764:	e000ed00 	.word	0xe000ed00

08002768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002768:	b480      	push	{r7}
 800276a:	b089      	sub	sp, #36	; 0x24
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	f1c3 0307 	rsb	r3, r3, #7
 8002782:	2b06      	cmp	r3, #6
 8002784:	bf28      	it	cs
 8002786:	2306      	movcs	r3, #6
 8002788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	3306      	adds	r3, #6
 800278e:	2b06      	cmp	r3, #6
 8002790:	d902      	bls.n	8002798 <NVIC_EncodePriority+0x30>
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	3b01      	subs	r3, #1
 8002796:	e000      	b.n	800279a <NVIC_EncodePriority+0x32>
 8002798:	2300      	movs	r3, #0
 800279a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	2201      	movs	r2, #1
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	1e5a      	subs	r2, r3, #1
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	401a      	ands	r2, r3
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	2101      	movs	r1, #1
 80027b2:	fa01 f303 	lsl.w	r3, r1, r3
 80027b6:	1e59      	subs	r1, r3, #1
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80027bc:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3724      	adds	r7, #36	; 0x24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop

080027cc <XMC_VADC_GROUP_QueueEnableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_QueueEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr));
  group_ptr->ARBPR |= (uint32_t)((uint32_t)1 << VADC_G_ARBPR_ASEN0_Pos);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027da:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop

080027f0 <XMC_VADC_GROUP_QueueDisableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_QueueDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr));
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN0_Msk);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027fe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop

08002814 <XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueEnableArbitrationSlot(),<BR>  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE bool XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled(XMC_VADC_GROUP_t *const group_ptr)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  return ((group_ptr->ARBPR & (uint32_t)VADC_G_ARBPR_ASEN0_Msk) >> VADC_G_ARBPR_ASEN0_Pos);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002822:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002826:	0e1b      	lsrs	r3, r3, #24
 8002828:	2b00      	cmp	r3, #0
 800282a:	bf14      	ite	ne
 800282c:	2301      	movne	r3, #1
 800282e:	2300      	moveq	r3, #0
 8002830:	b2db      	uxtb	r3, r3
}
 8002832:	4618      	mov	r0, r3
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop

08002840 <XMC_VADC_GROUP_QueueSetGatingMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_VADC_GROUP_QueueSelectGating();
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueSetGatingMode(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_GATEMODE_t mode_sel)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_GATEMODE_ACTIVELOW))

  /* Clear the existing gate configuration */
  group_ptr->QMR0 &= (uint32_t)(~((uint32_t) VADC_G_QMR0_ENGT_Msk));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8002852:	f023 0203 	bic.w	r2, r3, #3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  /* Set the new gating mode */
  group_ptr->QMR0 |= (uint32_t)((uint32_t)mode_sel << VADC_G_QMR0_ENGT_Pos);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8002862:	78fb      	ldrb	r3, [r7, #3]
 8002864:	431a      	orrs	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
}
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop

08002878 <XMC_VADC_GROUP_QueueInsertChannel>:
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueRemoveChannel()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueInsertChannel(XMC_VADC_GROUP_t *const group_ptr,
                                                       const XMC_VADC_QUEUE_ENTRY_t entry)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_QueueInsertChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  /* Insert the channel physically and get the length of the queue*/
  group_ptr->QINR0 = entry.qinr0;
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <XMC_VADC_GROUP_ResultInit>:
 * XMC_VADC_GROUP_AddResultToFifo()<BR> XMC_VADC_GROUP_EnableResultEvent()<br> XMC_VADC_GROUP_DisableResultEvent()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_ResultInit(XMC_VADC_GROUP_t *const group_ptr,
                                               const uint32_t res_reg_num,
                                               const XMC_VADC_RESULT_CONFIG_t *config)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_ResultInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->RCR[res_reg_num] = config->g_rcr;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6819      	ldr	r1, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	68ba      	ldr	r2, [r7, #8]
 80028a8:	32a0      	adds	r2, #160	; 0xa0
 80028aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <ADC_MEASUREMENT_ADV_lQueueInit>:
#endif
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
#ifdef ADC_MEASUREMENT_ADV_LOCAL_QUEUE_USED
__STATIC_INLINE ADC_MEASUREMENT_ADV_STATUS_t ADC_MEASUREMENT_ADV_lQueueInit(ADC_MEASUREMENT_ADV_QUEUE_t *const handle_ptr,
                                                           uint8_t group_index)
{
 80028b8:	b590      	push	{r4, r7, lr}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	460b      	mov	r3, r1
 80028c2:	70fb      	strb	r3, [r7, #3]
  ADC_MEASUREMENT_ADV_STATUS_t status;

  /*Initialization of APP 'GLOBAL_ADC'*/
  status = (ADC_MEASUREMENT_ADV_STATUS_t) GLOBAL_ADC_Init(ADC_MEASUREMENT_ADV_GLOBAL_HANDLE);
 80028c4:	4827      	ldr	r0, [pc, #156]	; (8002964 <ADC_MEASUREMENT_ADV_lQueueInit+0xac>)
 80028c6:	f7ff fb73 	bl	8001fb0 <GLOBAL_ADC_Init>
 80028ca:	4603      	mov	r3, r0
 80028cc:	73fb      	strb	r3, [r7, #15]

  /*Class Configuration*/
  XMC_VADC_GROUP_InputClassInit(group_ptrs[group_index],handle_ptr->iclass_config_handle,
 80028ce:	78fb      	ldrb	r3, [r7, #3]
 80028d0:	4a25      	ldr	r2, [pc, #148]	; (8002968 <ADC_MEASUREMENT_ADV_lQueueInit+0xb0>)
 80028d2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
                                XMC_VADC_GROUP_CONV_STD,handle_ptr->iclass_num);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	7e9b      	ldrb	r3, [r3, #26]

  /*Initialization of APP 'GLOBAL_ADC'*/
  status = (ADC_MEASUREMENT_ADV_STATUS_t) GLOBAL_ADC_Init(ADC_MEASUREMENT_ADV_GLOBAL_HANDLE);

  /*Class Configuration*/
  XMC_VADC_GROUP_InputClassInit(group_ptrs[group_index],handle_ptr->iclass_config_handle,
 80028da:	461c      	mov	r4, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4610      	mov	r0, r2
 80028e0:	6919      	ldr	r1, [r3, #16]
 80028e2:	2200      	movs	r2, #0
 80028e4:	4623      	mov	r3, r4
 80028e6:	f7fe fed1 	bl	800168c <XMC_VADC_GROUP_InputClassInit>
                                XMC_VADC_GROUP_CONV_STD,handle_ptr->iclass_num);

  /* Initialize the Queue hardware */
  XMC_VADC_GROUP_QueueInit(group_ptrs[group_index],handle_ptr->queue_config_handle);
 80028ea:	78fb      	ldrb	r3, [r7, #3]
 80028ec:	4a1e      	ldr	r2, [pc, #120]	; (8002968 <ADC_MEASUREMENT_ADV_lQueueInit+0xb0>)
 80028ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	4610      	mov	r0, r2
 80028f8:	4619      	mov	r1, r3
 80028fa:	f7fe ffab 	bl	8001854 <XMC_VADC_GROUP_QueueInit>

  /* Configure the gating mode for queue*/
  XMC_VADC_GROUP_QueueSetGatingMode(group_ptrs[group_index], handle_ptr->gating_mode);
 80028fe:	78fb      	ldrb	r3, [r7, #3]
 8002900:	4a19      	ldr	r2, [pc, #100]	; (8002968 <ADC_MEASUREMENT_ADV_lQueueInit+0xb0>)
 8002902:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	7e1b      	ldrb	r3, [r3, #24]
 800290a:	4610      	mov	r0, r2
 800290c:	4619      	mov	r1, r3
 800290e:	f7ff ff97 	bl	8002840 <XMC_VADC_GROUP_QueueSetGatingMode>

  /*Interrupt Configuration*/
  if ((bool)true == handle_ptr->rs_intr_handle.interrupt_enable)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	7b1b      	ldrb	r3, [r3, #12]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d01e      	beq.n	8002958 <ADC_MEASUREMENT_ADV_lQueueInit+0xa0>
  {
#if (UC_FAMILY == XMC1)
    NVIC_SetPriority((IRQn_Type)handle_ptr->rs_intr_handle.node_id, handle_ptr->rs_intr_handle.priority);
#else
    NVIC_SetPriority((IRQn_Type)handle_ptr->rs_intr_handle.node_id,
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	b2dc      	uxtb	r4, r3
 8002920:	f7ff fece 	bl	80026c0 <__NVIC_GetPriorityGrouping>
 8002924:	4601      	mov	r1, r0
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	4608      	mov	r0, r1
 8002930:	4611      	mov	r1, r2
 8002932:	461a      	mov	r2, r3
 8002934:	f7ff ff18 	bl	8002768 <NVIC_EncodePriority>
 8002938:	4602      	mov	r2, r0
 800293a:	b263      	sxtb	r3, r4
 800293c:	4618      	mov	r0, r3
 800293e:	4611      	mov	r1, r2
 8002940:	f7ff fee8 	bl	8002714 <__NVIC_SetPriority>
    XMC_SCU_SetInterruptControl(handle_ptr->rs_intr_handle.node_id,
                                ((handle_ptr->rs_intr_handle.node_id << 8) | handle_ptr->rs_intr_handle.irqctrl));
#endif

    /* Connect RS Events to NVIC nodes */
    XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode(group_ptrs[group_index], (XMC_VADC_SR_t)handle_ptr->srv_req_node);
 8002944:	78fb      	ldrb	r3, [r7, #3]
 8002946:	4a08      	ldr	r2, [pc, #32]	; (8002968 <ADC_MEASUREMENT_ADV_lQueueInit+0xb0>)
 8002948:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	7e5b      	ldrb	r3, [r3, #25]
 8002950:	4610      	mov	r0, r2
 8002952:	4619      	mov	r1, r3
 8002954:	f7fe ffcc 	bl	80018f0 <XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode>
  }

  return (status);
 8002958:	7bfb      	ldrb	r3, [r7, #15]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	bd90      	pop	{r4, r7, pc}
 8002962:	bf00      	nop
 8002964:	20000110 	.word	0x20000110
 8002968:	0800504c 	.word	0x0800504c

0800296c <ADC_MEASUREMENT_ADV_lRequestSrcInit>:
#endif
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Local function to do the request source initialization.*/
__STATIC_INLINE ADC_MEASUREMENT_ADV_STATUS_t ADC_MEASUREMENT_ADV_lRequestSrcInit(const ADC_MEASUREMENT_ADV_t
                                                                                 *const handle_ptr)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
#ifdef ADC_MEASUREMENT_ADV_LOCAL_QUEUE_USED
  #ifdef ADC_MEASUREMENT_ADV_ADC_QUEUE_USED
      if ( ADC_MEASUREMENT_ADV_REQUEST_SOURCE_QUEUE != handle_ptr->req_src)
  #endif
      {
        status = ADC_MEASUREMENT_ADV_lQueueInit(handle_ptr->local_queue_handle,handle_ptr->group_index);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68da      	ldr	r2, [r3, #12]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	7d5b      	ldrb	r3, [r3, #21]
 800297c:	4610      	mov	r0, r2
 800297e:	4619      	mov	r1, r3
 8002980:	f7ff ff9a 	bl	80028b8 <ADC_MEASUREMENT_ADV_lQueueInit>
 8002984:	4603      	mov	r3, r0
 8002986:	73fb      	strb	r3, [r7, #15]
        status = (ADC_MEASUREMENT_ADV_STATUS_t) ADC_QUEUE_Init(handle_ptr->queue_handle);
      }
#endif
    }
#endif
    return (status);
 8002988:	7bfb      	ldrb	r3, [r7, #15]
}
 800298a:	4618      	mov	r0, r3
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop

08002994 <ADC_MEASUREMENT_ADV_lQueueInsertEntries>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
#ifdef ADC_MEASUREMENT_ADV_LOCAL_QUEUE_USED
/* Local function to insert the queue entries into the hardware.*/
__STATIC_INLINE void ADC_MEASUREMENT_ADV_lQueueInsertEntries(const ADC_MEASUREMENT_ADV_t *const handle_ptr)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t entry_index;

  XMC_VADC_GROUP_t *queue_group_ptr = group_ptrs[handle_ptr->group_index];
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	7d5b      	ldrb	r3, [r3, #21]
 80029a0:	461a      	mov	r2, r3
 80029a2:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <ADC_MEASUREMENT_ADV_lQueueInsertEntries+0x4c>)
 80029a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029a8:	613b      	str	r3, [r7, #16]
  const XMC_VADC_QUEUE_ENTRY_t **const entries_array = handle_ptr->local_queue_entries;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	60fb      	str	r3, [r7, #12]

  for(entry_index = 0; entry_index < handle_ptr->total_number_of_entries; entry_index++)
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]
 80029b4:	e00b      	b.n	80029ce <ADC_MEASUREMENT_ADV_lQueueInsertEntries+0x3a>
  {
    XMC_VADC_GROUP_QueueInsertChannel(queue_group_ptr, *entries_array[entry_index]);
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	4413      	add	r3, r2
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6938      	ldr	r0, [r7, #16]
 80029c2:	6819      	ldr	r1, [r3, #0]
 80029c4:	f7ff ff58 	bl	8002878 <XMC_VADC_GROUP_QueueInsertChannel>
  uint32_t entry_index;

  XMC_VADC_GROUP_t *queue_group_ptr = group_ptrs[handle_ptr->group_index];
  const XMC_VADC_QUEUE_ENTRY_t **const entries_array = handle_ptr->local_queue_entries;

  for(entry_index = 0; entry_index < handle_ptr->total_number_of_entries; entry_index++)
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	3301      	adds	r3, #1
 80029cc:	617b      	str	r3, [r7, #20]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	7d9b      	ldrb	r3, [r3, #22]
 80029d2:	461a      	mov	r2, r3
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d8ed      	bhi.n	80029b6 <ADC_MEASUREMENT_ADV_lQueueInsertEntries+0x22>
  {
    XMC_VADC_GROUP_QueueInsertChannel(queue_group_ptr, *entries_array[entry_index]);
  }
}
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	0800504c 	.word	0x0800504c

080029e4 <ADC_MEASUREMENT_ADV_lArbitrationStatus>:
#endif

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
__STATIC_INLINE bool ADC_MEASUREMENT_ADV_lArbitrationStatus(const ADC_MEASUREMENT_ADV_t *const handle_ptr)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  bool clock_reset_check;
  bool arbitration_status;

#if !defined(CLOCK_GATING_SUPPORTED) || !defined(ADC_MEASUREMENT_ADV_CHECK_CLOCK_GATING)
  clock_reset_check = (bool)false;
 80029ec:	2300      	movs	r3, #0
 80029ee:	73bb      	strb	r3, [r7, #14]
#endif
  arbitration_status = (bool)false;
 80029f0:	2300      	movs	r3, #0
 80029f2:	73fb      	strb	r3, [r7, #15]
  /* To check if the arbiter is already enabled. Before checking this ensure that clock and reset states are correct */
#if defined(CLOCK_GATING_SUPPORTED) && defined(ADC_MEASUREMENT_ADV_CHECK_CLOCK_GATING)
  clock_reset_check = !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_VADC);
#endif
#ifdef PERIPHERAL_RESET_SUPPORTED
  clock_reset_check |= !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_VADC);
 80029f4:	2001      	movs	r0, #1
 80029f6:	f7fd fe31 	bl	800065c <XMC_SCU_RESET_IsPeripheralResetAsserted>
 80029fa:	4603      	mov	r3, r0
 80029fc:	f083 0301 	eor.w	r3, r3, #1
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	461a      	mov	r2, r3
 8002a04:	7bbb      	ldrb	r3, [r7, #14]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	bf14      	ite	ne
 8002a0c:	2301      	movne	r3, #1
 8002a0e:	2300      	moveq	r3, #0
 8002a10:	73bb      	strb	r3, [r7, #14]
#endif
  if(clock_reset_check != (bool)false)
 8002a12:	7bbb      	ldrb	r3, [r7, #14]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00a      	beq.n	8002a2e <ADC_MEASUREMENT_ADV_lArbitrationStatus+0x4a>
#ifdef ADC_MEASUREMENT_ADV_QUEUE_USED
  #ifdef ADC_MEASUREMENT_ADV_SCAN_USED
      else
  #endif
      {
        arbitration_status = XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled(group_ptrs[handle_ptr->group_index]);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	7d5b      	ldrb	r3, [r3, #21]
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <ADC_MEASUREMENT_ADV_lArbitrationStatus+0x54>)
 8002a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff fef5 	bl	8002814 <XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	73fb      	strb	r3, [r7, #15]
      }
#endif
  }
  return (arbitration_status);
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	0800504c 	.word	0x0800504c

08002a3c <ADC_MEASUREMENT_ADV_lDisableArbitration>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
__STATIC_INLINE void ADC_MEASUREMENT_ADV_lDisableArbitration(const ADC_MEASUREMENT_ADV_t *const handle_ptr,
                                                             bool arbitration_status)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	460b      	mov	r3, r1
 8002a46:	70fb      	strb	r3, [r7, #3]
  if(arbitration_status == (bool)false)
 8002a48:	78fb      	ldrb	r3, [r7, #3]
 8002a4a:	f083 0301 	eor.w	r3, r3, #1
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d008      	beq.n	8002a66 <ADC_MEASUREMENT_ADV_lDisableArbitration+0x2a>
#ifdef ADC_MEASUREMENT_ADV_QUEUE_USED
  #ifdef ADC_MEASUREMENT_ADV_SCAN_USED
      else
  #endif
      {
        XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptrs[handle_ptr->group_index]);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	7d5b      	ldrb	r3, [r3, #21]
 8002a58:	461a      	mov	r2, r3
 8002a5a:	4b04      	ldr	r3, [pc, #16]	; (8002a6c <ADC_MEASUREMENT_ADV_lDisableArbitration+0x30>)
 8002a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff fec5 	bl	80027f0 <XMC_VADC_GROUP_QueueDisableArbitrationSlot>
      }
#endif
  }
}
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	0800504c 	.word	0x0800504c

08002a70 <ADC_MEASUREMENT_ADV_lInsertChannels>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Insert channels into the hardware*/
void ADC_MEASUREMENT_ADV_lInsertChannels(const ADC_MEASUREMENT_ADV_t *const handle_ptr)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
#ifdef ADC_MEASUREMENT_ADV_LOCAL_QUEUE_USED
  #ifdef ADC_MEASUREMENT_ADV_ADC_QUEUE_USED
      if ( ADC_MEASUREMENT_ADV_REQUEST_SOURCE_QUEUE != handle_ptr->req_src)
  #endif
      {
        ADC_MEASUREMENT_ADV_lQueueInsertEntries(handle_ptr);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f7ff ff8b 	bl	8002994 <ADC_MEASUREMENT_ADV_lQueueInsertEntries>
        ADC_QUEUE_AllEntriesInserted(handle_ptr->queue_handle);
      }
#endif
    }
#endif
}
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <ADC_MEASUREMENT_ADV_lSyncADCClocks>:
}
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
#ifndef ADC_MEASUREMENT_ADV_SYNC_USED
/* Address the errata for the incorrect conversion.*/
void ADC_MEASUREMENT_ADV_lSyncADCClocks(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
  int32_t group_index;

  for (group_index = (int32_t)XMC_VADC_MAXIMUM_NUM_GROUPS - (int32_t)1; group_index >= (int32_t)0  ; group_index--)
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	607b      	str	r3, [r7, #4]
 8002a8e:	e00a      	b.n	8002aa6 <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x22>
  {
    XMC_VADC_GROUP_SetPowerMode(group_ptrs[group_index],XMC_VADC_GROUP_POWERMODE_OFF);
 8002a90:	4a19      	ldr	r2, [pc, #100]	; (8002af8 <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x74>)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	f7fe fe52 	bl	8001744 <XMC_VADC_GROUP_SetPowerMode>
/* Address the errata for the incorrect conversion.*/
void ADC_MEASUREMENT_ADV_lSyncADCClocks(void)
{
  int32_t group_index;

  for (group_index = (int32_t)XMC_VADC_MAXIMUM_NUM_GROUPS - (int32_t)1; group_index >= (int32_t)0  ; group_index--)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	607b      	str	r3, [r7, #4]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	daf1      	bge.n	8002a90 <ADC_MEASUREMENT_ADV_lSyncADCClocks+0xc>
  {
    XMC_VADC_GROUP_SetPowerMode(group_ptrs[group_index],XMC_VADC_GROUP_POWERMODE_OFF);
  }

  for (group_index = (int32_t)XMC_VADC_MAXIMUM_NUM_GROUPS - (int32_t)1; group_index > (int32_t)0  ; group_index--)
 8002aac:	2303      	movs	r3, #3
 8002aae:	607b      	str	r3, [r7, #4]
 8002ab0:	e012      	b.n	8002ad8 <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x54>
  {
    XMC_VADC_GROUP_SetSyncSlave(group_ptrs[group_index], (uint32_t)0, (uint32_t)group_index);
 8002ab2:	4a11      	ldr	r2, [pc, #68]	; (8002af8 <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x74>)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4610      	mov	r0, r2
 8002abe:	2100      	movs	r1, #0
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	f7fe fe5b 	bl	800177c <XMC_VADC_GROUP_SetSyncSlave>

    XMC_VADC_GROUP_CheckSlaveReadiness(group_ptrs[0U], (uint32_t)group_index);
 8002ac6:	4a0d      	ldr	r2, [pc, #52]	; (8002afc <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x78>)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4610      	mov	r0, r2
 8002acc:	4619      	mov	r1, r3
 8002ace:	f7fe fe8d 	bl	80017ec <XMC_VADC_GROUP_CheckSlaveReadiness>
  for (group_index = (int32_t)XMC_VADC_MAXIMUM_NUM_GROUPS - (int32_t)1; group_index >= (int32_t)0  ; group_index--)
  {
    XMC_VADC_GROUP_SetPowerMode(group_ptrs[group_index],XMC_VADC_GROUP_POWERMODE_OFF);
  }

  for (group_index = (int32_t)XMC_VADC_MAXIMUM_NUM_GROUPS - (int32_t)1; group_index > (int32_t)0  ; group_index--)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	607b      	str	r3, [r7, #4]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	dce9      	bgt.n	8002ab2 <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x2e>
    XMC_VADC_GROUP_SetSyncSlave(group_ptrs[group_index], (uint32_t)0, (uint32_t)group_index);

    XMC_VADC_GROUP_CheckSlaveReadiness(group_ptrs[0U], (uint32_t)group_index);
  }

  XMC_VADC_GROUP_SetSyncMaster(group_ptrs[0U]);
 8002ade:	4b07      	ldr	r3, [pc, #28]	; (8002afc <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x78>)
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7fe fe6d 	bl	80017c0 <XMC_VADC_GROUP_SetSyncMaster>

  XMC_VADC_GROUP_SetPowerMode(group_ptrs[0U],XMC_VADC_GROUP_POWERMODE_NORMAL);
 8002ae6:	4b05      	ldr	r3, [pc, #20]	; (8002afc <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x78>)
 8002ae8:	4618      	mov	r0, r3
 8002aea:	2103      	movs	r1, #3
 8002aec:	f7fe fe2a 	bl	8001744 <XMC_VADC_GROUP_SetPowerMode>
}
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	0800504c 	.word	0x0800504c
 8002afc:	40004400 	.word	0x40004400

08002b00 <ADC_MEASUREMENT_ADV_StartADC>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Enables the arbiter of the selected request source*/
void ADC_MEASUREMENT_ADV_StartADC(const ADC_MEASUREMENT_ADV_t *const handle_ptr)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
#ifdef ADC_MEASUREMENT_ADV_QUEUE_USED
  #ifdef ADC_MEASUREMENT_ADV_SCAN_USED
      else
  #endif
      {
        XMC_VADC_GROUP_QueueEnableArbitrationSlot(group_ptrs[handle_ptr->group_index]);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	7d5b      	ldrb	r3, [r3, #21]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	4b04      	ldr	r3, [pc, #16]	; (8002b20 <ADC_MEASUREMENT_ADV_StartADC+0x20>)
 8002b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff fe59 	bl	80027cc <XMC_VADC_GROUP_QueueEnableArbitrationSlot>
      }
#endif
}
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	0800504c 	.word	0x0800504c

08002b24 <ADC_MEASUREMENT_ADC_lNvicEnable>:


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Enables the NVIC(if needed) when scan/queue request source is consumed internally in the APP. */
void ADC_MEASUREMENT_ADC_lNvicEnable(const ADC_MEASUREMENT_ADV_t *const handle_ptr)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
    {
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->local_scan_handle->rs_intr_handle.node_id);
    }
#endif
#ifdef ADC_MEASUREMENT_ADV_LOCAL_QUEUE_USED
    if (((bool)true == handle_ptr->local_queue_handle->rs_intr_handle.interrupt_enable) &&
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	7b1b      	ldrb	r3, [r3, #12]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00b      	beq.n	8002b4e <ADC_MEASUREMENT_ADC_lNvicEnable+0x2a>
        (ADC_MEASUREMENT_ADV_REQUEST_SOURCE_LOCAL_QUEUE == handle_ptr->req_src))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	7d1b      	ldrb	r3, [r3, #20]
    {
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->local_scan_handle->rs_intr_handle.node_id);
    }
#endif
#ifdef ADC_MEASUREMENT_ADV_LOCAL_QUEUE_USED
    if (((bool)true == handle_ptr->local_queue_handle->rs_intr_handle.interrupt_enable) &&
 8002b3a:	2b03      	cmp	r3, #3
 8002b3c:	d107      	bne.n	8002b4e <ADC_MEASUREMENT_ADC_lNvicEnable+0x2a>
        (ADC_MEASUREMENT_ADV_REQUEST_SOURCE_LOCAL_QUEUE == handle_ptr->req_src))
    {
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->local_queue_handle->rs_intr_handle.node_id);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	b25b      	sxtb	r3, r3
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff fdc7 	bl	80026dc <__NVIC_EnableIRQ>
    }
#endif
}
 8002b4e:	3708      	adds	r7, #8
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <ADC_MEASUREMENT_ADC_lResultInit>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Configures the result results . */
__STATIC_INLINE void ADC_MEASUREMENT_ADC_lResultInit(const ADC_MEASUREMENT_ADV_CHANNEL_t *indexed)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
      XMC_VADC_GROUP_ResultInit(group_ptrs[indexed->group_index], (uint32_t)indexed->result_fifo_tail_number,
                                indexed->res_handle[ADC_MEASUREMENT_ADV_TAIL_RESULT_REG_CONFIG]);
  }
#endif
      /* Initialize for configured result registers For FIFO Head configuration*/
      XMC_VADC_GROUP_ResultInit(group_ptrs[indexed->group_index], (uint32_t)indexed->ch_handle->result_reg_number,
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	7a1b      	ldrb	r3, [r3, #8]
 8002b60:	461a      	mov	r2, r3
 8002b62:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <ADC_MEASUREMENT_ADC_lResultInit+0x34>)
 8002b64:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	789b      	ldrb	r3, [r3, #2]
 8002b6e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	4619      	mov	r1, r3
                                indexed->res_handle[ADC_MEASUREMENT_ADV_HEAD_RESULT_REG_CONFIG]);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
      XMC_VADC_GROUP_ResultInit(group_ptrs[indexed->group_index], (uint32_t)indexed->result_fifo_tail_number,
                                indexed->res_handle[ADC_MEASUREMENT_ADV_TAIL_RESULT_REG_CONFIG]);
  }
#endif
      /* Initialize for configured result registers For FIFO Head configuration*/
      XMC_VADC_GROUP_ResultInit(group_ptrs[indexed->group_index], (uint32_t)indexed->ch_handle->result_reg_number,
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	f7ff fe89 	bl	8002894 <XMC_VADC_GROUP_ResultInit>
                                indexed->res_handle[ADC_MEASUREMENT_ADV_HEAD_RESULT_REG_CONFIG]);
}
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	0800504c 	.word	0x0800504c

08002b8c <ADC_MEASUREMENT_ADV_Init>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialization routine to call ADC LLD API's */
ADC_MEASUREMENT_ADV_STATUS_t ADC_MEASUREMENT_ADV_Init(const ADC_MEASUREMENT_ADV_t *const handle_ptr)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint8_t total_number_of_channels;
  ADC_MEASUREMENT_ADV_STATUS_t status;
#ifdef ADC_MEASUREMENT_ADV_SHS_GAIN_NON_DEFAULT
  uint8_t channel_number;
#endif
  bool arbitration_status = (bool)false;
 8002b94:	2300      	movs	r3, #0
 8002b96:	73bb      	strb	r3, [r7, #14]

  if (ADC_MEASUREMENT_ADV_STATUS_UNINITIALIZED == *handle_ptr->init_state)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d143      	bne.n	8002c2a <ADC_MEASUREMENT_ADV_Init+0x9e>
  {

    arbitration_status = ADC_MEASUREMENT_ADV_lArbitrationStatus(handle_ptr);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7ff ff1e 	bl	80029e4 <ADC_MEASUREMENT_ADV_lArbitrationStatus>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	73bb      	strb	r3, [r7, #14]

   /* Initialize the scan/queue request source.*/
   status = ADC_MEASUREMENT_ADV_lRequestSrcInit(handle_ptr);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f7ff fedd 	bl	800296c <ADC_MEASUREMENT_ADV_lRequestSrcInit>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	737b      	strb	r3, [r7, #13]

   /* Disable the Arbitration if no other instance has enabled it*/
   ADC_MEASUREMENT_ADV_lDisableArbitration(handle_ptr,arbitration_status);
 8002bb6:	7bbb      	ldrb	r3, [r7, #14]
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	4619      	mov	r1, r3
 8002bbc:	f7ff ff3e 	bl	8002a3c <ADC_MEASUREMENT_ADV_lDisableArbitration>
    {
      /*  Configure the Sync conversion operation */
      ADC_MEASUREMENT_ADV_lSyncInit(handle_ptr);
    }
#else
   ADC_MEASUREMENT_ADV_lSyncADCClocks();
 8002bc0:	f7ff ff60 	bl	8002a84 <ADC_MEASUREMENT_ADV_lSyncADCClocks>
    {
      (handle_ptr->event_config)();
    }
#endif

    total_number_of_channels = (uint8_t)handle_ptr->total_number_of_channels;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	7ddb      	ldrb	r3, [r3, #23]
 8002bc8:	733b      	strb	r3, [r7, #12]
    for (ch_num = (uint8_t)0; ch_num < (uint8_t)total_number_of_channels; ch_num++)
 8002bca:	2300      	movs	r3, #0
 8002bcc:	73fb      	strb	r3, [r7, #15]
 8002bce:	e01b      	b.n	8002c08 <ADC_MEASUREMENT_ADV_Init+0x7c>
    {
      indexed = handle_ptr->channel_array[ch_num];
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	7bfb      	ldrb	r3, [r7, #15]
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	60bb      	str	r3, [r7, #8]

      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(group_ptrs[indexed->group_index],(uint32_t)indexed->ch_num, indexed->ch_handle);
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	7a1b      	ldrb	r3, [r3, #8]
 8002be2:	461a      	mov	r2, r3
 8002be4:	4b14      	ldr	r3, [pc, #80]	; (8002c38 <ADC_MEASUREMENT_ADV_Init+0xac>)
 8002be6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	7a5b      	ldrb	r3, [r3, #9]
 8002bee:	4619      	mov	r1, r3
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4610      	mov	r0, r2
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	f7fe fe96 	bl	8001928 <XMC_VADC_GROUP_ChannelInit>
                                        channel_number);
  #endif
#endif

      /* Result Init both with and without FIFO */
      ADC_MEASUREMENT_ADC_lResultInit(indexed);
 8002bfc:	68b8      	ldr	r0, [r7, #8]
 8002bfe:	f7ff ffa9 	bl	8002b54 <ADC_MEASUREMENT_ADC_lResultInit>
      (handle_ptr->event_config)();
    }
#endif

    total_number_of_channels = (uint8_t)handle_ptr->total_number_of_channels;
    for (ch_num = (uint8_t)0; ch_num < (uint8_t)total_number_of_channels; ch_num++)
 8002c02:	7bfb      	ldrb	r3, [r7, #15]
 8002c04:	3301      	adds	r3, #1
 8002c06:	73fb      	strb	r3, [r7, #15]
 8002c08:	7bfa      	ldrb	r2, [r7, #15]
 8002c0a:	7b3b      	ldrb	r3, [r7, #12]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d3df      	bcc.n	8002bd0 <ADC_MEASUREMENT_ADV_Init+0x44>
      }
    }
#endif

    /* Enables the NVIC node if NVIC node is consumed inside the APP*/
    ADC_MEASUREMENT_ADC_lNvicEnable(handle_ptr);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f7ff ff87 	bl	8002b24 <ADC_MEASUREMENT_ADC_lNvicEnable>

    /* Load the queue/scan entries into the hardware */
    ADC_MEASUREMENT_ADV_lInsertChannels(handle_ptr);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7ff ff2a 	bl	8002a70 <ADC_MEASUREMENT_ADV_lInsertChannels>
#ifdef ADC_MEASUREMENT_ADV_START_ADC
  #ifdef ADC_MEASUREMENT_ADV_NOT_ALL_REQ_START
    if ((bool)false  != handle_ptr->start_at_initialization)
  #endif
    {
      ADC_MEASUREMENT_ADV_StartADC(handle_ptr);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f7ff ff6f 	bl	8002b00 <ADC_MEASUREMENT_ADV_StartADC>
    }
#endif

    *handle_ptr->init_state = status;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	7b7a      	ldrb	r2, [r7, #13]
 8002c28:	701a      	strb	r2, [r3, #0]
  }
  return (*handle_ptr->init_state);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	781b      	ldrb	r3, [r3, #0]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	0800504c 	.word	0x0800504c

08002c3c <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
DAVE_STATUS_t DAVE_Init(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 8002c42:	2300      	movs	r3, #0
 8002c44:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8002c46:	484d      	ldr	r0, [pc, #308]	; (8002d7c <DAVE_Init+0x140>)
 8002c48:	f7ff fcf6 	bl	8002638 <CLOCK_XMC4_Init>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8002c50:	79fb      	ldrb	r3, [r7, #7]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d104      	bne.n	8002c60 <DAVE_Init+0x24>
  {
	 /**  Initialization of PWM APP instance PWM_a */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_a); 
 8002c56:	484a      	ldr	r0, [pc, #296]	; (8002d80 <DAVE_Init+0x144>)
 8002c58:	f7ff f85c 	bl	8001d14 <PWM_Init>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002c60:	79fb      	ldrb	r3, [r7, #7]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d104      	bne.n	8002c70 <DAVE_Init+0x34>
  {
	 /**  Initialization of PWM APP instance PWM_c */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_c); 
 8002c66:	4847      	ldr	r0, [pc, #284]	; (8002d84 <DAVE_Init+0x148>)
 8002c68:	f7ff f854 	bl	8001d14 <PWM_Init>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002c70:	79fb      	ldrb	r3, [r7, #7]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d104      	bne.n	8002c80 <DAVE_Init+0x44>
  {
	 /**  Initialization of PWM APP instance PWM_b */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_b); 
 8002c76:	4844      	ldr	r0, [pc, #272]	; (8002d88 <DAVE_Init+0x14c>)
 8002c78:	f7ff f84c 	bl	8001d14 <PWM_Init>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002c80:	79fb      	ldrb	r3, [r7, #7]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d104      	bne.n	8002c90 <DAVE_Init+0x54>
  {
	 /**  Initialization of INTERRUPT APP instance LOOP_CYCLE */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&LOOP_CYCLE); 
 8002c86:	4841      	ldr	r0, [pc, #260]	; (8002d8c <DAVE_Init+0x150>)
 8002c88:	f7ff f926 	bl	8001ed8 <INTERRUPT_Init>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002c90:	79fb      	ldrb	r3, [r7, #7]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d104      	bne.n	8002ca0 <DAVE_Init+0x64>
  {
	 /**  Initialization of PWM APP instance PWM_update */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_update); 
 8002c96:	483e      	ldr	r0, [pc, #248]	; (8002d90 <DAVE_Init+0x154>)
 8002c98:	f7ff f83c 	bl	8001d14 <PWM_Init>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002ca0:	79fb      	ldrb	r3, [r7, #7]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d104      	bne.n	8002cb0 <DAVE_Init+0x74>
  {
	 /**  Initialization of DIGITAL_IO APP instance P_1_0 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&P_1_0); 
 8002ca6:	483b      	ldr	r0, [pc, #236]	; (8002d94 <DAVE_Init+0x158>)
 8002ca8:	f7ff f9da 	bl	8002060 <DIGITAL_IO_Init>
 8002cac:	4603      	mov	r3, r0
 8002cae:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002cb0:	79fb      	ldrb	r3, [r7, #7]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d104      	bne.n	8002cc0 <DAVE_Init+0x84>
  {
	 /**  Initialization of ADC_MEASUREMENT_ADV APP instance ADC_MEASUREMENT_1 */
	 init_status = (DAVE_STATUS_t)ADC_MEASUREMENT_ADV_Init(&ADC_MEASUREMENT_1); 
 8002cb6:	4838      	ldr	r0, [pc, #224]	; (8002d98 <DAVE_Init+0x15c>)
 8002cb8:	f7ff ff68 	bl	8002b8c <ADC_MEASUREMENT_ADV_Init>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002cc0:	79fb      	ldrb	r3, [r7, #7]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d104      	bne.n	8002cd0 <DAVE_Init+0x94>
  {
	 /**  Initialization of DIGITAL_IO APP instance P_1_1 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&P_1_1); 
 8002cc6:	4835      	ldr	r0, [pc, #212]	; (8002d9c <DAVE_Init+0x160>)
 8002cc8:	f7ff f9ca 	bl	8002060 <DIGITAL_IO_Init>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002cd0:	79fb      	ldrb	r3, [r7, #7]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d104      	bne.n	8002ce0 <DAVE_Init+0xa4>
  {
	 /**  Initialization of DAC APP instance DAC_0 */
	 init_status = (DAVE_STATUS_t)DAC_Init(&DAC_0); 
 8002cd6:	4832      	ldr	r0, [pc, #200]	; (8002da0 <DAVE_Init+0x164>)
 8002cd8:	f7ff fb00 	bl	80022dc <DAC_Init>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002ce0:	79fb      	ldrb	r3, [r7, #7]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d104      	bne.n	8002cf0 <DAVE_Init+0xb4>
  {
	 /**  Initialization of DIGITAL_IO APP instance ENABLE */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&ENABLE); 
 8002ce6:	482f      	ldr	r0, [pc, #188]	; (8002da4 <DAVE_Init+0x168>)
 8002ce8:	f7ff f9ba 	bl	8002060 <DIGITAL_IO_Init>
 8002cec:	4603      	mov	r3, r0
 8002cee:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002cf0:	79fb      	ldrb	r3, [r7, #7]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d104      	bne.n	8002d00 <DAVE_Init+0xc4>
  {
	 /**  Initialization of DIGITAL_IO APP instance Button_1 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&Button_1); 
 8002cf6:	482c      	ldr	r0, [pc, #176]	; (8002da8 <DAVE_Init+0x16c>)
 8002cf8:	f7ff f9b2 	bl	8002060 <DIGITAL_IO_Init>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002d00:	79fb      	ldrb	r3, [r7, #7]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d104      	bne.n	8002d10 <DAVE_Init+0xd4>
  {
	 /**  Initialization of DIGITAL_IO APP instance P_0_9 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&P_0_9); 
 8002d06:	4829      	ldr	r0, [pc, #164]	; (8002dac <DAVE_Init+0x170>)
 8002d08:	f7ff f9aa 	bl	8002060 <DIGITAL_IO_Init>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002d10:	79fb      	ldrb	r3, [r7, #7]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d104      	bne.n	8002d20 <DAVE_Init+0xe4>
  {
	 /**  Initialization of DIGITAL_IO APP instance EN_1 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&EN_1); 
 8002d16:	4826      	ldr	r0, [pc, #152]	; (8002db0 <DAVE_Init+0x174>)
 8002d18:	f7ff f9a2 	bl	8002060 <DIGITAL_IO_Init>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002d20:	79fb      	ldrb	r3, [r7, #7]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d104      	bne.n	8002d30 <DAVE_Init+0xf4>
  {
	 /**  Initialization of DIGITAL_IO APP instance EN_2 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&EN_2); 
 8002d26:	4823      	ldr	r0, [pc, #140]	; (8002db4 <DAVE_Init+0x178>)
 8002d28:	f7ff f99a 	bl	8002060 <DIGITAL_IO_Init>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002d30:	79fb      	ldrb	r3, [r7, #7]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d104      	bne.n	8002d40 <DAVE_Init+0x104>
  {
	 /**  Initialization of DIGITAL_IO APP instance EN_3 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&EN_3); 
 8002d36:	4820      	ldr	r0, [pc, #128]	; (8002db8 <DAVE_Init+0x17c>)
 8002d38:	f7ff f992 	bl	8002060 <DIGITAL_IO_Init>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002d40:	79fb      	ldrb	r3, [r7, #7]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d104      	bne.n	8002d50 <DAVE_Init+0x114>
  {
	 /**  Initialization of DIGITAL_IO APP instance FAULT_IN */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&FAULT_IN); 
 8002d46:	481d      	ldr	r0, [pc, #116]	; (8002dbc <DAVE_Init+0x180>)
 8002d48:	f7ff f98a 	bl	8002060 <DIGITAL_IO_Init>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002d50:	79fb      	ldrb	r3, [r7, #7]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d104      	bne.n	8002d60 <DAVE_Init+0x124>
  {
	 /**  Initialization of DIGITAL_IO APP instance FAULT_RST */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&FAULT_RST); 
 8002d56:	481a      	ldr	r0, [pc, #104]	; (8002dc0 <DAVE_Init+0x184>)
 8002d58:	f7ff f982 	bl	8002060 <DIGITAL_IO_Init>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002d60:	79fb      	ldrb	r3, [r7, #7]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d104      	bne.n	8002d70 <DAVE_Init+0x134>
  {
	 /**  Initialization of ADC_MEASUREMENT_ADV APP instance ADC_MEASUREMENT_2 */
	 init_status = (DAVE_STATUS_t)ADC_MEASUREMENT_ADV_Init(&ADC_MEASUREMENT_2); 
 8002d66:	4817      	ldr	r0, [pc, #92]	; (8002dc4 <DAVE_Init+0x188>)
 8002d68:	f7ff ff10 	bl	8002b8c <ADC_MEASUREMENT_ADV_Init>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 8002d70:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 8002d72:	4618      	mov	r0, r3
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	200001bc 	.word	0x200001bc
 8002d80:	20000000 	.word	0x20000000
 8002d84:	20000034 	.word	0x20000034
 8002d88:	20000068 	.word	0x20000068
 8002d8c:	08004700 	.word	0x08004700
 8002d90:	2000009c 	.word	0x2000009c
 8002d94:	0800476c 	.word	0x0800476c
 8002d98:	08005104 	.word	0x08005104
 8002d9c:	08004780 	.word	0x08004780
 8002da0:	20000134 	.word	0x20000134
 8002da4:	08004794 	.word	0x08004794
 8002da8:	080047a8 	.word	0x080047a8
 8002dac:	080047bc 	.word	0x080047bc
 8002db0:	080047d0 	.word	0x080047d0
 8002db4:	080047e4 	.word	0x080047e4
 8002db8:	080047f8 	.word	0x080047f8
 8002dbc:	0800480c 	.word	0x0800480c
 8002dc0:	08004820 	.word	0x08004820
 8002dc4:	080051a8 	.word	0x080051a8

08002dc8 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8002dd4:	78fb      	ldrb	r3, [r7, #3]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	409a      	lsls	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	605a      	str	r2, [r3, #4]
}
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	460b      	mov	r3, r1
 8002df2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8002df4:	78fb      	ldrb	r3, [r7, #3]
 8002df6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002dfa:	409a      	lsls	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	605a      	str	r2, [r3, #4]
}
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop

08002e0c <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	7c1b      	ldrb	r3, [r3, #16]
 8002e1c:	4610      	mov	r0, r2
 8002e1e:	4619      	mov	r1, r3
 8002e20:	f7ff ffd2 	bl	8002dc8 <XMC_GPIO_SetOutputHigh>
}
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop

08002e2c <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	7c1b      	ldrb	r3, [r3, #16]
 8002e3c:	4610      	mov	r0, r2
 8002e3e:	4619      	mov	r1, r3
 8002e40:	f7ff ffd2 	bl	8002de8 <XMC_GPIO_SetOutputLow>
}
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop

08002e4c <XMC_VADC_GROUP_GetResult>:
 * \par<b>Related APIs:</b><br>
 * XMC_VADC_GROUP_GetDetailedResult().
 */
__STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GROUP_GetResult(XMC_VADC_GROUP_t *const group_ptr, 
                                                                const uint32_t res_reg)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))

  return ((XMC_VADC_RESULT_SIZE_t)group_ptr->RES[res_reg]);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	32c0      	adds	r2, #192	; 0xc0
 8002e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e60:	b29b      	uxth	r3, r3
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop

08002e70 <ADC_MEASUREMENT_ADV_GetResult>:
  }
}
 * @endcode
 */
__STATIC_INLINE uint16_t ADC_MEASUREMENT_ADV_GetResult(const ADC_MEASUREMENT_ADV_CHANNEL_t *const handle_ptr)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint16_t result;
  extern XMC_VADC_GROUP_t *const group_ptrs[XMC_VADC_MAXIMUM_NUM_GROUPS];
  XMC_ASSERT("ADC_MEASUREMENT_ADV_GetResult:Invalid handle_ptr", (handle_ptr != NULL))

  result = XMC_VADC_GROUP_GetResult(group_ptrs[handle_ptr->group_index],
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	7a1b      	ldrb	r3, [r3, #8]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ea8 <ADC_MEASUREMENT_ADV_GetResult+0x38>)
 8002e80:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                                    (uint32_t) handle_ptr->ch_handle->result_reg_number);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	789b      	ldrb	r3, [r3, #2]
 8002e8a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002e8e:	b2db      	uxtb	r3, r3
{
  uint16_t result;
  extern XMC_VADC_GROUP_t *const group_ptrs[XMC_VADC_MAXIMUM_NUM_GROUPS];
  XMC_ASSERT("ADC_MEASUREMENT_ADV_GetResult:Invalid handle_ptr", (handle_ptr != NULL))

  result = XMC_VADC_GROUP_GetResult(group_ptrs[handle_ptr->group_index],
 8002e90:	4610      	mov	r0, r2
 8002e92:	4619      	mov	r1, r3
 8002e94:	f7ff ffda 	bl	8002e4c <XMC_VADC_GROUP_GetResult>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	81fb      	strh	r3, [r7, #14]
                                    (uint32_t) handle_ptr->ch_handle->result_reg_number);
  return(result);
 8002e9c:	89fb      	ldrh	r3, [r7, #14]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	0800504c 	.word	0x0800504c

08002eac <fw_integ>:
	*HPF_buff=res;
	*(HPF_buff+1)=val;
	return res;
}

float fw_integ(float val, float *buff, float Ti, float rst){
 8002eac:	b480      	push	{r7}
 8002eae:	b087      	sub	sp, #28
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
 8002eb8:	603b      	str	r3, [r7, #0]
	float out=*buff+val*Ti;
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	ed93 7a00 	vldr	s14, [r3]
 8002ec0:	edd7 6a03 	vldr	s13, [r7, #12]
 8002ec4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ec8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ecc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ed0:	edc7 7a05 	vstr	s15, [r7, #20]
	if (rst!=0.0f){
 8002ed4:	edd7 7a00 	vldr	s15, [r7]
 8002ed8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee0:	d030      	beq.n	8002f44 <fw_integ+0x98>
		if (out>rst){
 8002ee2:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ee6:	edd7 7a00 	vldr	s15, [r7]
 8002eea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef2:	dd10      	ble.n	8002f16 <fw_integ+0x6a>
			out=out-rst+out*Ti;
 8002ef4:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ef8:	edd7 7a00 	vldr	s15, [r7]
 8002efc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f00:	edd7 6a05 	vldr	s13, [r7, #20]
 8002f04:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f10:	edc7 7a05 	vstr	s15, [r7, #20]
 8002f14:	e016      	b.n	8002f44 <fw_integ+0x98>
		}
		else if (out<0.0f){
 8002f16:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f22:	d50f      	bpl.n	8002f44 <fw_integ+0x98>
			out=out+rst-out*Ti;
 8002f24:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f28:	edd7 7a00 	vldr	s15, [r7]
 8002f2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f30:	edd7 6a05 	vldr	s13, [r7, #20]
 8002f34:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f40:	edc7 7a05 	vstr	s15, [r7, #20]
		}
	}
	*buff=out;
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	601a      	str	r2, [r3, #0]
	return out;
 8002f4a:	697b      	ldr	r3, [r7, #20]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	371c      	adds	r7, #28
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <dq_AB>:
	// Conventional conversion into orthogonal components
	*dq=*AB*arm_cos_f32(wt)+*(AB+1)*arm_sin_f32(wt);
	*(dq+1)=-*AB*arm_sin_f32(wt)+*(AB+1)*arm_cos_f32(wt);
}

void dq_AB(float *dq, float *AB, float wt){
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
	// Conventional conversion into orthogonal components
	float C=arm_cos_f32(wt);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f7ff fa67 	bl	8002438 <arm_cos_f32>
 8002f6a:	6178      	str	r0, [r7, #20]
	float S=arm_sin_f32(wt);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f7ff fadb 	bl	8002528 <arm_sin_f32>
 8002f72:	6138      	str	r0, [r7, #16]
	*AB=C**dq-S**(dq+1);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	ed93 7a00 	vldr	s14, [r3]
 8002f7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	3304      	adds	r3, #4
 8002f86:	edd3 6a00 	vldr	s13, [r3]
 8002f8a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	edc3 7a00 	vstr	s15, [r3]
	*(AB+1)=S**dq+C**(dq+1);
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	3304      	adds	r3, #4
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	ed92 7a00 	vldr	s14, [r2]
 8002fa6:	edd7 7a04 	vldr	s15, [r7, #16]
 8002faa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	3204      	adds	r2, #4
 8002fb2:	edd2 6a00 	vldr	s13, [r2]
 8002fb6:	edd7 7a05 	vldr	s15, [r7, #20]
 8002fba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fc2:	edc3 7a00 	vstr	s15, [r3]
}
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <AB_abc>:

void AB_abc(float *AB, float *abc){
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
	// Conventional conversion into orthogonal components
	*abc=*AB;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	601a      	str	r2, [r3, #0]
	*(abc+1)=-0.5f**(AB)+Ksqr32**(AB+1);
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	3304      	adds	r3, #4
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	edd2 7a00 	vldr	s15, [r2]
 8002fe8:	eebe 7a00 	vmov.f32	s14, #224	; 0xe0
 8002fec:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	3204      	adds	r2, #4
 8002ff4:	edd2 7a00 	vldr	s15, [r2]
 8002ff8:	eddf 6a10 	vldr	s13, [pc, #64]	; 800303c <AB_abc+0x70>
 8002ffc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003000:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003004:	edc3 7a00 	vstr	s15, [r3]
	*(abc+2)=-0.5f**(AB)-Ksqr32**(AB+1);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	3308      	adds	r3, #8
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	edd2 7a00 	vldr	s15, [r2]
 8003012:	eebe 7a00 	vmov.f32	s14, #224	; 0xe0
 8003016:	ee27 7a87 	vmul.f32	s14, s15, s14
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	3204      	adds	r2, #4
 800301e:	edd2 7a00 	vldr	s15, [r2]
 8003022:	eddf 6a06 	vldr	s13, [pc, #24]	; 800303c <AB_abc+0x70>
 8003026:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800302a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800302e:	edc3 7a00 	vstr	s15, [r3]
}
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	3f5db3d7 	.word	0x3f5db3d7

08003040 <CCU80_3_IRQHandler>:

////  vítor
float scope_adc1, scope_adc2, scope_adc3, scope_adc4, scope_adc5, scope_adc6, scope_adc7;


void Update_PWM(void){
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
	DIGITAL_IO_SetOutputHigh(&P_1_0);
 8003046:	48a3      	ldr	r0, [pc, #652]	; (80032d4 <CCU80_3_IRQHandler+0x294>)
 8003048:	f7ff fee0 	bl	8002e0c <DIGITAL_IO_SetOutputHigh>

	/// ADC acquisition
	V_abc_adc[0]=ADC_MEASUREMENT_ADV_GetResult(&ADC_MEASUREMENT_1_V1_1);
 800304c:	48a2      	ldr	r0, [pc, #648]	; (80032d8 <CCU80_3_IRQHandler+0x298>)
 800304e:	f7ff ff0f 	bl	8002e70 <ADC_MEASUREMENT_ADV_GetResult>
 8003052:	4603      	mov	r3, r0
 8003054:	461a      	mov	r2, r3
 8003056:	4ba1      	ldr	r3, [pc, #644]	; (80032dc <CCU80_3_IRQHandler+0x29c>)
 8003058:	801a      	strh	r2, [r3, #0]
	V_abc_adc[1]=ADC_MEASUREMENT_ADV_GetResult(&ADC_MEASUREMENT_2_V2_1);
 800305a:	48a1      	ldr	r0, [pc, #644]	; (80032e0 <CCU80_3_IRQHandler+0x2a0>)
 800305c:	f7ff ff08 	bl	8002e70 <ADC_MEASUREMENT_ADV_GetResult>
 8003060:	4603      	mov	r3, r0
 8003062:	461a      	mov	r2, r3
 8003064:	4b9d      	ldr	r3, [pc, #628]	; (80032dc <CCU80_3_IRQHandler+0x29c>)
 8003066:	805a      	strh	r2, [r3, #2]
	V_abc_adc[2]=ADC_MEASUREMENT_ADV_GetResult(&ADC_MEASUREMENT_2_V2_3);
 8003068:	489e      	ldr	r0, [pc, #632]	; (80032e4 <CCU80_3_IRQHandler+0x2a4>)
 800306a:	f7ff ff01 	bl	8002e70 <ADC_MEASUREMENT_ADV_GetResult>
 800306e:	4603      	mov	r3, r0
 8003070:	461a      	mov	r2, r3
 8003072:	4b9a      	ldr	r3, [pc, #616]	; (80032dc <CCU80_3_IRQHandler+0x29c>)
 8003074:	809a      	strh	r2, [r3, #4]

	V_abc[0]=(V_abc_adc[0]-1814.820f) * 0.720f;//*ADC.toVac*3.00000f;
 8003076:	4b99      	ldr	r3, [pc, #612]	; (80032dc <CCU80_3_IRQHandler+0x29c>)
 8003078:	881b      	ldrh	r3, [r3, #0]
 800307a:	ee07 3a90 	vmov	s15, r3
 800307e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003082:	ed9f 7a99 	vldr	s14, [pc, #612]	; 80032e8 <CCU80_3_IRQHandler+0x2a8>
 8003086:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800308a:	ed9f 7a98 	vldr	s14, [pc, #608]	; 80032ec <CCU80_3_IRQHandler+0x2ac>
 800308e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003092:	4b97      	ldr	r3, [pc, #604]	; (80032f0 <CCU80_3_IRQHandler+0x2b0>)
 8003094:	edc3 7a00 	vstr	s15, [r3]
	V_abc[1]=(V_abc_adc[1]-1804.70f)  * 0.720f;//*ADC.toVac*3.00000f;
 8003098:	4b90      	ldr	r3, [pc, #576]	; (80032dc <CCU80_3_IRQHandler+0x29c>)
 800309a:	885b      	ldrh	r3, [r3, #2]
 800309c:	ee07 3a90 	vmov	s15, r3
 80030a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030a4:	ed9f 7a93 	vldr	s14, [pc, #588]	; 80032f4 <CCU80_3_IRQHandler+0x2b4>
 80030a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80030ac:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 80032ec <CCU80_3_IRQHandler+0x2ac>
 80030b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030b4:	4b8e      	ldr	r3, [pc, #568]	; (80032f0 <CCU80_3_IRQHandler+0x2b0>)
 80030b6:	edc3 7a01 	vstr	s15, [r3, #4]
	V_abc[2]=(V_abc_adc[2]-1818.330f) * 0.720f;//*ADC.toVac*3.00000f;
 80030ba:	4b88      	ldr	r3, [pc, #544]	; (80032dc <CCU80_3_IRQHandler+0x29c>)
 80030bc:	889b      	ldrh	r3, [r3, #4]
 80030be:	ee07 3a90 	vmov	s15, r3
 80030c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030c6:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80032f8 <CCU80_3_IRQHandler+0x2b8>
 80030ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80030ce:	ed9f 7a87 	vldr	s14, [pc, #540]	; 80032ec <CCU80_3_IRQHandler+0x2ac>
 80030d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030d6:	4b86      	ldr	r3, [pc, #536]	; (80032f0 <CCU80_3_IRQHandler+0x2b0>)
 80030d8:	edc3 7a02 	vstr	s15, [r3, #8]

	I_abc_adc[0]=ADC_MEASUREMENT_ADV_GetResult(&ADC_MEASUREMENT_2_V2_2);
 80030dc:	4887      	ldr	r0, [pc, #540]	; (80032fc <CCU80_3_IRQHandler+0x2bc>)
 80030de:	f7ff fec7 	bl	8002e70 <ADC_MEASUREMENT_ADV_GetResult>
 80030e2:	4603      	mov	r3, r0
 80030e4:	461a      	mov	r2, r3
 80030e6:	4b86      	ldr	r3, [pc, #536]	; (8003300 <CCU80_3_IRQHandler+0x2c0>)
 80030e8:	801a      	strh	r2, [r3, #0]
	I_abc_adc[1]=ADC_MEASUREMENT_ADV_GetResult(&ADC_MEASUREMENT_1_V1_4);
 80030ea:	4886      	ldr	r0, [pc, #536]	; (8003304 <CCU80_3_IRQHandler+0x2c4>)
 80030ec:	f7ff fec0 	bl	8002e70 <ADC_MEASUREMENT_ADV_GetResult>
 80030f0:	4603      	mov	r3, r0
 80030f2:	461a      	mov	r2, r3
 80030f4:	4b82      	ldr	r3, [pc, #520]	; (8003300 <CCU80_3_IRQHandler+0x2c0>)
 80030f6:	805a      	strh	r2, [r3, #2]
	I_abc_adc[2]=ADC_MEASUREMENT_ADV_GetResult(&ADC_MEASUREMENT_1_V1_3);
 80030f8:	4883      	ldr	r0, [pc, #524]	; (8003308 <CCU80_3_IRQHandler+0x2c8>)
 80030fa:	f7ff feb9 	bl	8002e70 <ADC_MEASUREMENT_ADV_GetResult>
 80030fe:	4603      	mov	r3, r0
 8003100:	461a      	mov	r2, r3
 8003102:	4b7f      	ldr	r3, [pc, #508]	; (8003300 <CCU80_3_IRQHandler+0x2c0>)
 8003104:	809a      	strh	r2, [r3, #4]

	float my_vdc = ADC_MEASUREMENT_ADV_GetResult(&ADC_MEASUREMENT_1_V1_2);
 8003106:	4881      	ldr	r0, [pc, #516]	; (800330c <CCU80_3_IRQHandler+0x2cc>)
 8003108:	f7ff feb2 	bl	8002e70 <ADC_MEASUREMENT_ADV_GetResult>
 800310c:	4603      	mov	r3, r0
 800310e:	ee07 3a90 	vmov	s15, r3
 8003112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003116:	edc7 7a01 	vstr	s15, [r7, #4]
	scope_adc7 = my_vdc;
 800311a:	4a7d      	ldr	r2, [pc, #500]	; (8003310 <CCU80_3_IRQHandler+0x2d0>)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6013      	str	r3, [r2, #0]

	scope_adc1 = V_abc_adc[0];
 8003120:	4b6e      	ldr	r3, [pc, #440]	; (80032dc <CCU80_3_IRQHandler+0x29c>)
 8003122:	881b      	ldrh	r3, [r3, #0]
 8003124:	ee07 3a90 	vmov	s15, r3
 8003128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800312c:	4b79      	ldr	r3, [pc, #484]	; (8003314 <CCU80_3_IRQHandler+0x2d4>)
 800312e:	edc3 7a00 	vstr	s15, [r3]
	scope_adc2 = V_abc_adc[1];
 8003132:	4b6a      	ldr	r3, [pc, #424]	; (80032dc <CCU80_3_IRQHandler+0x29c>)
 8003134:	885b      	ldrh	r3, [r3, #2]
 8003136:	ee07 3a90 	vmov	s15, r3
 800313a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800313e:	4b76      	ldr	r3, [pc, #472]	; (8003318 <CCU80_3_IRQHandler+0x2d8>)
 8003140:	edc3 7a00 	vstr	s15, [r3]
	scope_adc3 = V_abc_adc[2];
 8003144:	4b65      	ldr	r3, [pc, #404]	; (80032dc <CCU80_3_IRQHandler+0x29c>)
 8003146:	889b      	ldrh	r3, [r3, #4]
 8003148:	ee07 3a90 	vmov	s15, r3
 800314c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003150:	4b72      	ldr	r3, [pc, #456]	; (800331c <CCU80_3_IRQHandler+0x2dc>)
 8003152:	edc3 7a00 	vstr	s15, [r3]

	scope_adc4 = V_abc[0];
 8003156:	4b66      	ldr	r3, [pc, #408]	; (80032f0 <CCU80_3_IRQHandler+0x2b0>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a71      	ldr	r2, [pc, #452]	; (8003320 <CCU80_3_IRQHandler+0x2e0>)
 800315c:	6013      	str	r3, [r2, #0]
	scope_adc5 = V_abc[1];
 800315e:	4b64      	ldr	r3, [pc, #400]	; (80032f0 <CCU80_3_IRQHandler+0x2b0>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	4a70      	ldr	r2, [pc, #448]	; (8003324 <CCU80_3_IRQHandler+0x2e4>)
 8003164:	6013      	str	r3, [r2, #0]
	scope_adc6 = V_abc[2];
 8003166:	4b62      	ldr	r3, [pc, #392]	; (80032f0 <CCU80_3_IRQHandler+0x2b0>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	4a6f      	ldr	r2, [pc, #444]	; (8003328 <CCU80_3_IRQHandler+0x2e8>)
 800316c:	6013      	str	r3, [r2, #0]

	// Ensure variables interval
	vDQp_ref[0]=fminf(vDQp_ref[0],1.0f);
 800316e:	4b6f      	ldr	r3, [pc, #444]	; (800332c <CCU80_3_IRQHandler+0x2ec>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003178:	f001 fa1c 	bl	80045b4 <fminf>
 800317c:	4602      	mov	r2, r0
 800317e:	4b6b      	ldr	r3, [pc, #428]	; (800332c <CCU80_3_IRQHandler+0x2ec>)
 8003180:	601a      	str	r2, [r3, #0]
	vDQp_ref[0]=fmaxf(vDQp_ref[0],-1.0f);
 8003182:	4b6a      	ldr	r3, [pc, #424]	; (800332c <CCU80_3_IRQHandler+0x2ec>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	4969      	ldr	r1, [pc, #420]	; (8003330 <CCU80_3_IRQHandler+0x2f0>)
 800318a:	f001 f9ed 	bl	8004568 <fmaxf>
 800318e:	4602      	mov	r2, r0
 8003190:	4b66      	ldr	r3, [pc, #408]	; (800332c <CCU80_3_IRQHandler+0x2ec>)
 8003192:	601a      	str	r2, [r3, #0]
	vDQp_ref[1]=fminf(vDQp_ref[1],1.0f);
 8003194:	4b65      	ldr	r3, [pc, #404]	; (800332c <CCU80_3_IRQHandler+0x2ec>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	4618      	mov	r0, r3
 800319a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800319e:	f001 fa09 	bl	80045b4 <fminf>
 80031a2:	4602      	mov	r2, r0
 80031a4:	4b61      	ldr	r3, [pc, #388]	; (800332c <CCU80_3_IRQHandler+0x2ec>)
 80031a6:	605a      	str	r2, [r3, #4]
	vDQp_ref[1]=fmaxf(vDQp_ref[1],-1.0f);
 80031a8:	4b60      	ldr	r3, [pc, #384]	; (800332c <CCU80_3_IRQHandler+0x2ec>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	4618      	mov	r0, r3
 80031ae:	4960      	ldr	r1, [pc, #384]	; (8003330 <CCU80_3_IRQHandler+0x2f0>)
 80031b0:	f001 f9da 	bl	8004568 <fmaxf>
 80031b4:	4602      	mov	r2, r0
 80031b6:	4b5d      	ldr	r3, [pc, #372]	; (800332c <CCU80_3_IRQHandler+0x2ec>)
 80031b8:	605a      	str	r2, [r3, #4]
	vDQn_ref[0]=fminf(vDQn_ref[0],1.0f);
 80031ba:	4b5e      	ldr	r3, [pc, #376]	; (8003334 <CCU80_3_IRQHandler+0x2f4>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4618      	mov	r0, r3
 80031c0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80031c4:	f001 f9f6 	bl	80045b4 <fminf>
 80031c8:	4602      	mov	r2, r0
 80031ca:	4b5a      	ldr	r3, [pc, #360]	; (8003334 <CCU80_3_IRQHandler+0x2f4>)
 80031cc:	601a      	str	r2, [r3, #0]
	vDQn_ref[0]=fmaxf(vDQn_ref[0],-1.0f);
 80031ce:	4b59      	ldr	r3, [pc, #356]	; (8003334 <CCU80_3_IRQHandler+0x2f4>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	4956      	ldr	r1, [pc, #344]	; (8003330 <CCU80_3_IRQHandler+0x2f0>)
 80031d6:	f001 f9c7 	bl	8004568 <fmaxf>
 80031da:	4602      	mov	r2, r0
 80031dc:	4b55      	ldr	r3, [pc, #340]	; (8003334 <CCU80_3_IRQHandler+0x2f4>)
 80031de:	601a      	str	r2, [r3, #0]
	vDQn_ref[1]=fminf(vDQn_ref[1],1.0f);
 80031e0:	4b54      	ldr	r3, [pc, #336]	; (8003334 <CCU80_3_IRQHandler+0x2f4>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80031ea:	f001 f9e3 	bl	80045b4 <fminf>
 80031ee:	4602      	mov	r2, r0
 80031f0:	4b50      	ldr	r3, [pc, #320]	; (8003334 <CCU80_3_IRQHandler+0x2f4>)
 80031f2:	605a      	str	r2, [r3, #4]
	vDQn_ref[1]=fmaxf(vDQn_ref[1],-1.0f);
 80031f4:	4b4f      	ldr	r3, [pc, #316]	; (8003334 <CCU80_3_IRQHandler+0x2f4>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	4618      	mov	r0, r3
 80031fa:	494d      	ldr	r1, [pc, #308]	; (8003330 <CCU80_3_IRQHandler+0x2f0>)
 80031fc:	f001 f9b4 	bl	8004568 <fmaxf>
 8003200:	4602      	mov	r2, r0
 8003202:	4b4c      	ldr	r3, [pc, #304]	; (8003334 <CCU80_3_IRQHandler+0x2f4>)
 8003204:	605a      	str	r2, [r3, #4]
	Vn=fminf(Vn,1.0f);
 8003206:	4b4c      	ldr	r3, [pc, #304]	; (8003338 <CCU80_3_IRQHandler+0x2f8>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003210:	f001 f9d0 	bl	80045b4 <fminf>
 8003214:	4602      	mov	r2, r0
 8003216:	4b48      	ldr	r3, [pc, #288]	; (8003338 <CCU80_3_IRQHandler+0x2f8>)
 8003218:	601a      	str	r2, [r3, #0]
	Vn=fmaxf(Vn,0.0f);
 800321a:	4b47      	ldr	r3, [pc, #284]	; (8003338 <CCU80_3_IRQHandler+0x2f8>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f04f 0100 	mov.w	r1, #0
 8003224:	f001 f9a0 	bl	8004568 <fmaxf>
 8003228:	4602      	mov	r2, r0
 800322a:	4b43      	ldr	r3, [pc, #268]	; (8003338 <CCU80_3_IRQHandler+0x2f8>)
 800322c:	601a      	str	r2, [r3, #0]
	V5=fminf(V5,1.0f);
 800322e:	4b43      	ldr	r3, [pc, #268]	; (800333c <CCU80_3_IRQHandler+0x2fc>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003238:	f001 f9bc 	bl	80045b4 <fminf>
 800323c:	4602      	mov	r2, r0
 800323e:	4b3f      	ldr	r3, [pc, #252]	; (800333c <CCU80_3_IRQHandler+0x2fc>)
 8003240:	601a      	str	r2, [r3, #0]
	V5=fmaxf(V5,0.0f);
 8003242:	4b3e      	ldr	r3, [pc, #248]	; (800333c <CCU80_3_IRQHandler+0x2fc>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f04f 0100 	mov.w	r1, #0
 800324c:	f001 f98c 	bl	8004568 <fmaxf>
 8003250:	4602      	mov	r2, r0
 8003252:	4b3a      	ldr	r3, [pc, #232]	; (800333c <CCU80_3_IRQHandler+0x2fc>)
 8003254:	601a      	str	r2, [r3, #0]
	V7=fminf(V7,1.0f);
 8003256:	4b3a      	ldr	r3, [pc, #232]	; (8003340 <CCU80_3_IRQHandler+0x300>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4618      	mov	r0, r3
 800325c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003260:	f001 f9a8 	bl	80045b4 <fminf>
 8003264:	4602      	mov	r2, r0
 8003266:	4b36      	ldr	r3, [pc, #216]	; (8003340 <CCU80_3_IRQHandler+0x300>)
 8003268:	601a      	str	r2, [r3, #0]
	V7=fmaxf(V7,0.0f);
 800326a:	4b35      	ldr	r3, [pc, #212]	; (8003340 <CCU80_3_IRQHandler+0x300>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f04f 0100 	mov.w	r1, #0
 8003274:	f001 f978 	bl	8004568 <fmaxf>
 8003278:	4602      	mov	r2, r0
 800327a:	4b31      	ldr	r3, [pc, #196]	; (8003340 <CCU80_3_IRQHandler+0x300>)
 800327c:	601a      	str	r2, [r3, #0]
	V11=fminf(V11,1.0f);
 800327e:	4b31      	ldr	r3, [pc, #196]	; (8003344 <CCU80_3_IRQHandler+0x304>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003288:	f001 f994 	bl	80045b4 <fminf>
 800328c:	4602      	mov	r2, r0
 800328e:	4b2d      	ldr	r3, [pc, #180]	; (8003344 <CCU80_3_IRQHandler+0x304>)
 8003290:	601a      	str	r2, [r3, #0]
	V11=fmaxf(V11,0.0f);
 8003292:	4b2c      	ldr	r3, [pc, #176]	; (8003344 <CCU80_3_IRQHandler+0x304>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f04f 0100 	mov.w	r1, #0
 800329c:	f001 f964 	bl	8004568 <fmaxf>
 80032a0:	4602      	mov	r2, r0
 80032a2:	4b28      	ldr	r3, [pc, #160]	; (8003344 <CCU80_3_IRQHandler+0x304>)
 80032a4:	601a      	str	r2, [r3, #0]
	V13=fminf(V13,1.0f);
 80032a6:	4b28      	ldr	r3, [pc, #160]	; (8003348 <CCU80_3_IRQHandler+0x308>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80032b0:	f001 f980 	bl	80045b4 <fminf>
 80032b4:	4602      	mov	r2, r0
 80032b6:	4b24      	ldr	r3, [pc, #144]	; (8003348 <CCU80_3_IRQHandler+0x308>)
 80032b8:	601a      	str	r2, [r3, #0]
	V13=fmaxf(V13,0.0f);
 80032ba:	4b23      	ldr	r3, [pc, #140]	; (8003348 <CCU80_3_IRQHandler+0x308>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f04f 0100 	mov.w	r1, #0
 80032c4:	f001 f950 	bl	8004568 <fmaxf>
 80032c8:	4602      	mov	r2, r0
 80032ca:	4b1f      	ldr	r3, [pc, #124]	; (8003348 <CCU80_3_IRQHandler+0x308>)
 80032cc:	601a      	str	r2, [r3, #0]
	//w=fminf(w,345.5752f);
	//w=fmaxf(w,282.7433f);

// PLL or emulated phase angle
	for (uint8_t i=0; i<2; i++){
 80032ce:	2300      	movs	r3, #0
 80032d0:	73fb      	strb	r3, [r7, #15]
 80032d2:	e060      	b.n	8003396 <CCU80_3_IRQHandler+0x356>
 80032d4:	0800476c 	.word	0x0800476c
 80032d8:	0800506c 	.word	0x0800506c
 80032dc:	200001cc 	.word	0x200001cc
 80032e0:	08005130 	.word	0x08005130
 80032e4:	08005168 	.word	0x08005168
 80032e8:	44e2da3d 	.word	0x44e2da3d
 80032ec:	3f3851ec 	.word	0x3f3851ec
 80032f0:	200001dc 	.word	0x200001dc
 80032f4:	44e19666 	.word	0x44e19666
 80032f8:	44e34a8f 	.word	0x44e34a8f
 80032fc:	0800514c 	.word	0x0800514c
 8003300:	200001d4 	.word	0x200001d4
 8003304:	080050c0 	.word	0x080050c0
 8003308:	080050a4 	.word	0x080050a4
 800330c:	08005088 	.word	0x08005088
 8003310:	200080c0 	.word	0x200080c0
 8003314:	200080d0 	.word	0x200080d0
 8003318:	200080bc 	.word	0x200080bc
 800331c:	200080ec 	.word	0x200080ec
 8003320:	200080cc 	.word	0x200080cc
 8003324:	200080e4 	.word	0x200080e4
 8003328:	200080d4 	.word	0x200080d4
 800332c:	200001a4 	.word	0x200001a4
 8003330:	bf800000 	.word	0xbf800000
 8003334:	20000200 	.word	0x20000200
 8003338:	200001ac 	.word	0x200001ac
 800333c:	20000218 	.word	0x20000218
 8003340:	2000021c 	.word	0x2000021c
 8003344:	20000220 	.word	0x20000220
 8003348:	20000224 	.word	0x20000224
		vDQp[i]=vDQp_ref[i]*Vn;
 800334c:	7bfb      	ldrb	r3, [r7, #15]
 800334e:	7bfa      	ldrb	r2, [r7, #15]
 8003350:	4993      	ldr	r1, [pc, #588]	; (80035a0 <CCU80_3_IRQHandler+0x560>)
 8003352:	0092      	lsls	r2, r2, #2
 8003354:	440a      	add	r2, r1
 8003356:	ed92 7a00 	vldr	s14, [r2]
 800335a:	4a92      	ldr	r2, [pc, #584]	; (80035a4 <CCU80_3_IRQHandler+0x564>)
 800335c:	edd2 7a00 	vldr	s15, [r2]
 8003360:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003364:	4a90      	ldr	r2, [pc, #576]	; (80035a8 <CCU80_3_IRQHandler+0x568>)
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	edc3 7a00 	vstr	s15, [r3]
		vDQn[i]=vDQn_ref[i]*Vn;
 800336e:	7bfb      	ldrb	r3, [r7, #15]
 8003370:	7bfa      	ldrb	r2, [r7, #15]
 8003372:	498e      	ldr	r1, [pc, #568]	; (80035ac <CCU80_3_IRQHandler+0x56c>)
 8003374:	0092      	lsls	r2, r2, #2
 8003376:	440a      	add	r2, r1
 8003378:	ed92 7a00 	vldr	s14, [r2]
 800337c:	4a89      	ldr	r2, [pc, #548]	; (80035a4 <CCU80_3_IRQHandler+0x564>)
 800337e:	edd2 7a00 	vldr	s15, [r2]
 8003382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003386:	4a8a      	ldr	r2, [pc, #552]	; (80035b0 <CCU80_3_IRQHandler+0x570>)
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4413      	add	r3, r2
 800338c:	edc3 7a00 	vstr	s15, [r3]
	V13=fmaxf(V13,0.0f);
	//w=fminf(w,345.5752f);
	//w=fmaxf(w,282.7433f);

// PLL or emulated phase angle
	for (uint8_t i=0; i<2; i++){
 8003390:	7bfb      	ldrb	r3, [r7, #15]
 8003392:	3301      	adds	r3, #1
 8003394:	73fb      	strb	r3, [r7, #15]
 8003396:	7bfb      	ldrb	r3, [r7, #15]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d9d7      	bls.n	800334c <CCU80_3_IRQHandler+0x30c>
		vDQp[i]=vDQp_ref[i]*Vn;
		vDQn[i]=vDQn_ref[i]*Vn;
	}
	vDQ5[0]=V5*Vn;
 800339c:	4b85      	ldr	r3, [pc, #532]	; (80035b4 <CCU80_3_IRQHandler+0x574>)
 800339e:	ed93 7a00 	vldr	s14, [r3]
 80033a2:	4b80      	ldr	r3, [pc, #512]	; (80035a4 <CCU80_3_IRQHandler+0x564>)
 80033a4:	edd3 7a00 	vldr	s15, [r3]
 80033a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ac:	4b82      	ldr	r3, [pc, #520]	; (80035b8 <CCU80_3_IRQHandler+0x578>)
 80033ae:	edc3 7a00 	vstr	s15, [r3]
	vDQ7[0]=V7*Vn;
 80033b2:	4b82      	ldr	r3, [pc, #520]	; (80035bc <CCU80_3_IRQHandler+0x57c>)
 80033b4:	ed93 7a00 	vldr	s14, [r3]
 80033b8:	4b7a      	ldr	r3, [pc, #488]	; (80035a4 <CCU80_3_IRQHandler+0x564>)
 80033ba:	edd3 7a00 	vldr	s15, [r3]
 80033be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033c2:	4b7f      	ldr	r3, [pc, #508]	; (80035c0 <CCU80_3_IRQHandler+0x580>)
 80033c4:	edc3 7a00 	vstr	s15, [r3]
	vDQ11[0]=V11*Vn;
 80033c8:	4b7e      	ldr	r3, [pc, #504]	; (80035c4 <CCU80_3_IRQHandler+0x584>)
 80033ca:	ed93 7a00 	vldr	s14, [r3]
 80033ce:	4b75      	ldr	r3, [pc, #468]	; (80035a4 <CCU80_3_IRQHandler+0x564>)
 80033d0:	edd3 7a00 	vldr	s15, [r3]
 80033d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033d8:	4b7b      	ldr	r3, [pc, #492]	; (80035c8 <CCU80_3_IRQHandler+0x588>)
 80033da:	edc3 7a00 	vstr	s15, [r3]
	vDQ13[0]=V13*Vn;
 80033de:	4b7b      	ldr	r3, [pc, #492]	; (80035cc <CCU80_3_IRQHandler+0x58c>)
 80033e0:	ed93 7a00 	vldr	s14, [r3]
 80033e4:	4b6f      	ldr	r3, [pc, #444]	; (80035a4 <CCU80_3_IRQHandler+0x564>)
 80033e6:	edd3 7a00 	vldr	s15, [r3]
 80033ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ee:	4b78      	ldr	r3, [pc, #480]	; (80035d0 <CCU80_3_IRQHandler+0x590>)
 80033f0:	edc3 7a00 	vstr	s15, [r3]

	wt=fw_integ(w, &wt_buff, Ts, PI2)+wt_jump;
 80033f4:	4b77      	ldr	r3, [pc, #476]	; (80035d4 <CCU80_3_IRQHandler+0x594>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4618      	mov	r0, r3
 80033fa:	4977      	ldr	r1, [pc, #476]	; (80035d8 <CCU80_3_IRQHandler+0x598>)
 80033fc:	4a77      	ldr	r2, [pc, #476]	; (80035dc <CCU80_3_IRQHandler+0x59c>)
 80033fe:	4b78      	ldr	r3, [pc, #480]	; (80035e0 <CCU80_3_IRQHandler+0x5a0>)
 8003400:	f7ff fd54 	bl	8002eac <fw_integ>
 8003404:	ee07 0a10 	vmov	s14, r0
 8003408:	4b76      	ldr	r3, [pc, #472]	; (80035e4 <CCU80_3_IRQHandler+0x5a4>)
 800340a:	edd3 7a00 	vldr	s15, [r3]
 800340e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003412:	4b75      	ldr	r3, [pc, #468]	; (80035e8 <CCU80_3_IRQHandler+0x5a8>)
 8003414:	edc3 7a00 	vstr	s15, [r3]
	wt5=fw_integ(5.0f*w, &wt_buff5, Ts, PI2)+wt_jump;
 8003418:	4b6e      	ldr	r3, [pc, #440]	; (80035d4 <CCU80_3_IRQHandler+0x594>)
 800341a:	edd3 7a00 	vldr	s15, [r3]
 800341e:	eeb1 7a04 	vmov.f32	s14, #20
 8003422:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003426:	ee17 0a90 	vmov	r0, s15
 800342a:	4970      	ldr	r1, [pc, #448]	; (80035ec <CCU80_3_IRQHandler+0x5ac>)
 800342c:	4a6b      	ldr	r2, [pc, #428]	; (80035dc <CCU80_3_IRQHandler+0x59c>)
 800342e:	4b6c      	ldr	r3, [pc, #432]	; (80035e0 <CCU80_3_IRQHandler+0x5a0>)
 8003430:	f7ff fd3c 	bl	8002eac <fw_integ>
 8003434:	ee07 0a10 	vmov	s14, r0
 8003438:	4b6a      	ldr	r3, [pc, #424]	; (80035e4 <CCU80_3_IRQHandler+0x5a4>)
 800343a:	edd3 7a00 	vldr	s15, [r3]
 800343e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003442:	4b6b      	ldr	r3, [pc, #428]	; (80035f0 <CCU80_3_IRQHandler+0x5b0>)
 8003444:	edc3 7a00 	vstr	s15, [r3]
	wt7=fw_integ(7.0f*w, &wt_buff7, Ts, PI2)+wt_jump;
 8003448:	4b62      	ldr	r3, [pc, #392]	; (80035d4 <CCU80_3_IRQHandler+0x594>)
 800344a:	edd3 7a00 	vldr	s15, [r3]
 800344e:	eeb1 7a0c 	vmov.f32	s14, #28
 8003452:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003456:	ee17 0a90 	vmov	r0, s15
 800345a:	4966      	ldr	r1, [pc, #408]	; (80035f4 <CCU80_3_IRQHandler+0x5b4>)
 800345c:	4a5f      	ldr	r2, [pc, #380]	; (80035dc <CCU80_3_IRQHandler+0x59c>)
 800345e:	4b60      	ldr	r3, [pc, #384]	; (80035e0 <CCU80_3_IRQHandler+0x5a0>)
 8003460:	f7ff fd24 	bl	8002eac <fw_integ>
 8003464:	ee07 0a10 	vmov	s14, r0
 8003468:	4b5e      	ldr	r3, [pc, #376]	; (80035e4 <CCU80_3_IRQHandler+0x5a4>)
 800346a:	edd3 7a00 	vldr	s15, [r3]
 800346e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003472:	4b61      	ldr	r3, [pc, #388]	; (80035f8 <CCU80_3_IRQHandler+0x5b8>)
 8003474:	edc3 7a00 	vstr	s15, [r3]
	wt11=fw_integ(11.0f*w, &wt_buff11, Ts, PI2)+wt_jump;
 8003478:	4b56      	ldr	r3, [pc, #344]	; (80035d4 <CCU80_3_IRQHandler+0x594>)
 800347a:	edd3 7a00 	vldr	s15, [r3]
 800347e:	eeb2 7a06 	vmov.f32	s14, #38	; 0x26
 8003482:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003486:	ee17 0a90 	vmov	r0, s15
 800348a:	495c      	ldr	r1, [pc, #368]	; (80035fc <CCU80_3_IRQHandler+0x5bc>)
 800348c:	4a53      	ldr	r2, [pc, #332]	; (80035dc <CCU80_3_IRQHandler+0x59c>)
 800348e:	4b54      	ldr	r3, [pc, #336]	; (80035e0 <CCU80_3_IRQHandler+0x5a0>)
 8003490:	f7ff fd0c 	bl	8002eac <fw_integ>
 8003494:	ee07 0a10 	vmov	s14, r0
 8003498:	4b52      	ldr	r3, [pc, #328]	; (80035e4 <CCU80_3_IRQHandler+0x5a4>)
 800349a:	edd3 7a00 	vldr	s15, [r3]
 800349e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034a2:	4b57      	ldr	r3, [pc, #348]	; (8003600 <CCU80_3_IRQHandler+0x5c0>)
 80034a4:	edc3 7a00 	vstr	s15, [r3]
	wt13=fw_integ(13.0f*w, &wt_buff13, Ts, PI2)+wt_jump;
 80034a8:	4b4a      	ldr	r3, [pc, #296]	; (80035d4 <CCU80_3_IRQHandler+0x594>)
 80034aa:	edd3 7a00 	vldr	s15, [r3]
 80034ae:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x2a
 80034b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034b6:	ee17 0a90 	vmov	r0, s15
 80034ba:	4952      	ldr	r1, [pc, #328]	; (8003604 <CCU80_3_IRQHandler+0x5c4>)
 80034bc:	4a47      	ldr	r2, [pc, #284]	; (80035dc <CCU80_3_IRQHandler+0x59c>)
 80034be:	4b48      	ldr	r3, [pc, #288]	; (80035e0 <CCU80_3_IRQHandler+0x5a0>)
 80034c0:	f7ff fcf4 	bl	8002eac <fw_integ>
 80034c4:	ee07 0a10 	vmov	s14, r0
 80034c8:	4b46      	ldr	r3, [pc, #280]	; (80035e4 <CCU80_3_IRQHandler+0x5a4>)
 80034ca:	edd3 7a00 	vldr	s15, [r3]
 80034ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034d2:	4b4d      	ldr	r3, [pc, #308]	; (8003608 <CCU80_3_IRQHandler+0x5c8>)
 80034d4:	edc3 7a00 	vstr	s15, [r3]

	dq_AB(vDQp, vABp, wt);
 80034d8:	4b43      	ldr	r3, [pc, #268]	; (80035e8 <CCU80_3_IRQHandler+0x5a8>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4832      	ldr	r0, [pc, #200]	; (80035a8 <CCU80_3_IRQHandler+0x568>)
 80034de:	494b      	ldr	r1, [pc, #300]	; (800360c <CCU80_3_IRQHandler+0x5cc>)
 80034e0:	461a      	mov	r2, r3
 80034e2:	f7ff fd39 	bl	8002f58 <dq_AB>
	dq_AB(vDQn, vABn, -wt);
 80034e6:	4b40      	ldr	r3, [pc, #256]	; (80035e8 <CCU80_3_IRQHandler+0x5a8>)
 80034e8:	edd3 7a00 	vldr	s15, [r3]
 80034ec:	eef1 7a67 	vneg.f32	s15, s15
 80034f0:	ee17 3a90 	vmov	r3, s15
 80034f4:	482e      	ldr	r0, [pc, #184]	; (80035b0 <CCU80_3_IRQHandler+0x570>)
 80034f6:	4946      	ldr	r1, [pc, #280]	; (8003610 <CCU80_3_IRQHandler+0x5d0>)
 80034f8:	461a      	mov	r2, r3
 80034fa:	f7ff fd2d 	bl	8002f58 <dq_AB>

	dq_AB(vDQ5, vAB5, wt5);
 80034fe:	4b3c      	ldr	r3, [pc, #240]	; (80035f0 <CCU80_3_IRQHandler+0x5b0>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	482d      	ldr	r0, [pc, #180]	; (80035b8 <CCU80_3_IRQHandler+0x578>)
 8003504:	4943      	ldr	r1, [pc, #268]	; (8003614 <CCU80_3_IRQHandler+0x5d4>)
 8003506:	461a      	mov	r2, r3
 8003508:	f7ff fd26 	bl	8002f58 <dq_AB>
	dq_AB(vDQ7, vAB7, wt7);
 800350c:	4b3a      	ldr	r3, [pc, #232]	; (80035f8 <CCU80_3_IRQHandler+0x5b8>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	482b      	ldr	r0, [pc, #172]	; (80035c0 <CCU80_3_IRQHandler+0x580>)
 8003512:	4941      	ldr	r1, [pc, #260]	; (8003618 <CCU80_3_IRQHandler+0x5d8>)
 8003514:	461a      	mov	r2, r3
 8003516:	f7ff fd1f 	bl	8002f58 <dq_AB>
	dq_AB(vDQ11, vAB11, wt11);
 800351a:	4b39      	ldr	r3, [pc, #228]	; (8003600 <CCU80_3_IRQHandler+0x5c0>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	482a      	ldr	r0, [pc, #168]	; (80035c8 <CCU80_3_IRQHandler+0x588>)
 8003520:	493e      	ldr	r1, [pc, #248]	; (800361c <CCU80_3_IRQHandler+0x5dc>)
 8003522:	461a      	mov	r2, r3
 8003524:	f7ff fd18 	bl	8002f58 <dq_AB>
	dq_AB(vDQ13, vAB13, wt13);
 8003528:	4b37      	ldr	r3, [pc, #220]	; (8003608 <CCU80_3_IRQHandler+0x5c8>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4828      	ldr	r0, [pc, #160]	; (80035d0 <CCU80_3_IRQHandler+0x590>)
 800352e:	493c      	ldr	r1, [pc, #240]	; (8003620 <CCU80_3_IRQHandler+0x5e0>)
 8003530:	461a      	mov	r2, r3
 8003532:	f7ff fd11 	bl	8002f58 <dq_AB>
	AB_abc(vAB5, vabc5);
 8003536:	4837      	ldr	r0, [pc, #220]	; (8003614 <CCU80_3_IRQHandler+0x5d4>)
 8003538:	493a      	ldr	r1, [pc, #232]	; (8003624 <CCU80_3_IRQHandler+0x5e4>)
 800353a:	f7ff fd47 	bl	8002fcc <AB_abc>
	AB_abc(vAB7, vabc7);
 800353e:	4836      	ldr	r0, [pc, #216]	; (8003618 <CCU80_3_IRQHandler+0x5d8>)
 8003540:	4939      	ldr	r1, [pc, #228]	; (8003628 <CCU80_3_IRQHandler+0x5e8>)
 8003542:	f7ff fd43 	bl	8002fcc <AB_abc>
	AB_abc(vAB11, vabc11);
 8003546:	4835      	ldr	r0, [pc, #212]	; (800361c <CCU80_3_IRQHandler+0x5dc>)
 8003548:	4938      	ldr	r1, [pc, #224]	; (800362c <CCU80_3_IRQHandler+0x5ec>)
 800354a:	f7ff fd3f 	bl	8002fcc <AB_abc>
	AB_abc(vAB13, vabc13);
 800354e:	4834      	ldr	r0, [pc, #208]	; (8003620 <CCU80_3_IRQHandler+0x5e0>)
 8003550:	4937      	ldr	r1, [pc, #220]	; (8003630 <CCU80_3_IRQHandler+0x5f0>)
 8003552:	f7ff fd3b 	bl	8002fcc <AB_abc>


	vmAB[0]=vABp[0]+vABn[0];
 8003556:	4b2d      	ldr	r3, [pc, #180]	; (800360c <CCU80_3_IRQHandler+0x5cc>)
 8003558:	ed93 7a00 	vldr	s14, [r3]
 800355c:	4b2c      	ldr	r3, [pc, #176]	; (8003610 <CCU80_3_IRQHandler+0x5d0>)
 800355e:	edd3 7a00 	vldr	s15, [r3]
 8003562:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003566:	4b33      	ldr	r3, [pc, #204]	; (8003634 <CCU80_3_IRQHandler+0x5f4>)
 8003568:	edc3 7a00 	vstr	s15, [r3]
	vmAB[1]=vABp[1]+vABn[1];
 800356c:	4b27      	ldr	r3, [pc, #156]	; (800360c <CCU80_3_IRQHandler+0x5cc>)
 800356e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003572:	4b27      	ldr	r3, [pc, #156]	; (8003610 <CCU80_3_IRQHandler+0x5d0>)
 8003574:	edd3 7a01 	vldr	s15, [r3, #4]
 8003578:	ee77 7a27 	vadd.f32	s15, s14, s15
 800357c:	4b2d      	ldr	r3, [pc, #180]	; (8003634 <CCU80_3_IRQHandler+0x5f4>)
 800357e:	edc3 7a01 	vstr	s15, [r3, #4]
	scope1=vmAB[0];
 8003582:	4b2c      	ldr	r3, [pc, #176]	; (8003634 <CCU80_3_IRQHandler+0x5f4>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a2c      	ldr	r2, [pc, #176]	; (8003638 <CCU80_3_IRQHandler+0x5f8>)
 8003588:	6013      	str	r3, [r2, #0]
	scope2=vmAB[1];
 800358a:	4b2a      	ldr	r3, [pc, #168]	; (8003634 <CCU80_3_IRQHandler+0x5f4>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	4a2b      	ldr	r2, [pc, #172]	; (800363c <CCU80_3_IRQHandler+0x5fc>)
 8003590:	6013      	str	r3, [r2, #0]
// Loop during switching
	AB_abc(vmAB, vmabc);
 8003592:	4828      	ldr	r0, [pc, #160]	; (8003634 <CCU80_3_IRQHandler+0x5f4>)
 8003594:	492a      	ldr	r1, [pc, #168]	; (8003640 <CCU80_3_IRQHandler+0x600>)
 8003596:	f7ff fd19 	bl	8002fcc <AB_abc>
	for (int i=0; i<3; i++){
 800359a:	2300      	movs	r3, #0
 800359c:	60bb      	str	r3, [r7, #8]
 800359e:	e0b4      	b.n	800370a <CCU80_3_IRQHandler+0x6ca>
 80035a0:	200001a4 	.word	0x200001a4
 80035a4:	200001ac 	.word	0x200001ac
 80035a8:	200001f0 	.word	0x200001f0
 80035ac:	20000200 	.word	0x20000200
 80035b0:	20000208 	.word	0x20000208
 80035b4:	20000218 	.word	0x20000218
 80035b8:	20000228 	.word	0x20000228
 80035bc:	2000021c 	.word	0x2000021c
 80035c0:	20000244 	.word	0x20000244
 80035c4:	20000220 	.word	0x20000220
 80035c8:	20000260 	.word	0x20000260
 80035cc:	20000224 	.word	0x20000224
 80035d0:	2000027c 	.word	0x2000027c
 80035d4:	200001a0 	.word	0x200001a0
 80035d8:	200001ec 	.word	0x200001ec
 80035dc:	38d1b717 	.word	0x38d1b717
 80035e0:	40c90fdb 	.word	0x40c90fdb
 80035e4:	200002cc 	.word	0x200002cc
 80035e8:	200001e8 	.word	0x200001e8
 80035ec:	200002ac 	.word	0x200002ac
 80035f0:	200002bc 	.word	0x200002bc
 80035f4:	200002b0 	.word	0x200002b0
 80035f8:	200002c0 	.word	0x200002c0
 80035fc:	200002b4 	.word	0x200002b4
 8003600:	200002c4 	.word	0x200002c4
 8003604:	200002b8 	.word	0x200002b8
 8003608:	200002c8 	.word	0x200002c8
 800360c:	200001f8 	.word	0x200001f8
 8003610:	20000210 	.word	0x20000210
 8003614:	20000230 	.word	0x20000230
 8003618:	2000024c 	.word	0x2000024c
 800361c:	20000268 	.word	0x20000268
 8003620:	20000284 	.word	0x20000284
 8003624:	20000238 	.word	0x20000238
 8003628:	20000254 	.word	0x20000254
 800362c:	20000270 	.word	0x20000270
 8003630:	2000028c 	.word	0x2000028c
 8003634:	20000298 	.word	0x20000298
 8003638:	200080dc 	.word	0x200080dc
 800363c:	200080b8 	.word	0x200080b8
 8003640:	200002a0 	.word	0x200002a0
		// THI, comment line for sinusoidal PWM
		// Vm_abc[i]=1.5f*Vm_abc[i]-K23*Vm_abc[i]*Vm_abc[i]*Vm_abc[i]/Vm_AB2;
		vmabc[i]=vmabc[i]+vabc5[i]+vabc7[i]+vabc11[i]+vabc13[i];
 8003644:	4a44      	ldr	r2, [pc, #272]	; (8003758 <CCU80_3_IRQHandler+0x718>)
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4413      	add	r3, r2
 800364c:	ed93 7a00 	vldr	s14, [r3]
 8003650:	4a42      	ldr	r2, [pc, #264]	; (800375c <CCU80_3_IRQHandler+0x71c>)
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4413      	add	r3, r2
 8003658:	edd3 7a00 	vldr	s15, [r3]
 800365c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003660:	4a3f      	ldr	r2, [pc, #252]	; (8003760 <CCU80_3_IRQHandler+0x720>)
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	4413      	add	r3, r2
 8003668:	edd3 7a00 	vldr	s15, [r3]
 800366c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003670:	4a3c      	ldr	r2, [pc, #240]	; (8003764 <CCU80_3_IRQHandler+0x724>)
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	4413      	add	r3, r2
 8003678:	edd3 7a00 	vldr	s15, [r3]
 800367c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003680:	4a39      	ldr	r2, [pc, #228]	; (8003768 <CCU80_3_IRQHandler+0x728>)
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4413      	add	r3, r2
 8003688:	edd3 7a00 	vldr	s15, [r3]
 800368c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003690:	4a31      	ldr	r2, [pc, #196]	; (8003758 <CCU80_3_IRQHandler+0x718>)
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4413      	add	r3, r2
 8003698:	edc3 7a00 	vstr	s15, [r3]
		vmabc[i]=fminf(vmabc[i],0.97f);
 800369c:	4a2e      	ldr	r2, [pc, #184]	; (8003758 <CCU80_3_IRQHandler+0x718>)
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4413      	add	r3, r2
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4618      	mov	r0, r3
 80036a8:	4930      	ldr	r1, [pc, #192]	; (800376c <CCU80_3_IRQHandler+0x72c>)
 80036aa:	f000 ff83 	bl	80045b4 <fminf>
 80036ae:	4601      	mov	r1, r0
 80036b0:	4a29      	ldr	r2, [pc, #164]	; (8003758 <CCU80_3_IRQHandler+0x718>)
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4413      	add	r3, r2
 80036b8:	6019      	str	r1, [r3, #0]
		vmabc[i]=fmaxf(vmabc[i],-0.97f);
 80036ba:	4a27      	ldr	r2, [pc, #156]	; (8003758 <CCU80_3_IRQHandler+0x718>)
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4618      	mov	r0, r3
 80036c6:	492a      	ldr	r1, [pc, #168]	; (8003770 <CCU80_3_IRQHandler+0x730>)
 80036c8:	f000 ff4e 	bl	8004568 <fmaxf>
 80036cc:	4601      	mov	r1, r0
 80036ce:	4a22      	ldr	r2, [pc, #136]	; (8003758 <CCU80_3_IRQHandler+0x718>)
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4413      	add	r3, r2
 80036d6:	6019      	str	r1, [r3, #0]
		// Convert float to uint32 voltage modulator wave
		m_abc[i]=((int32_t)(10000.0f*vmabc[i])>>1)+5000u;
 80036d8:	4a1f      	ldr	r2, [pc, #124]	; (8003758 <CCU80_3_IRQHandler+0x718>)
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4413      	add	r3, r2
 80036e0:	edd3 7a00 	vldr	s15, [r3]
 80036e4:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003774 <CCU80_3_IRQHandler+0x734>
 80036e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036f0:	ee17 3a90 	vmov	r3, s15
 80036f4:	105b      	asrs	r3, r3, #1
 80036f6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80036fa:	3308      	adds	r3, #8
 80036fc:	491e      	ldr	r1, [pc, #120]	; (8003778 <CCU80_3_IRQHandler+0x738>)
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	vmAB[1]=vABp[1]+vABn[1];
	scope1=vmAB[0];
	scope2=vmAB[1];
// Loop during switching
	AB_abc(vmAB, vmabc);
	for (int i=0; i<3; i++){
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	3301      	adds	r3, #1
 8003708:	60bb      	str	r3, [r7, #8]
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	2b02      	cmp	r3, #2
 800370e:	dd99      	ble.n	8003644 <CCU80_3_IRQHandler+0x604>
		vmabc[i]=fminf(vmabc[i],0.97f);
		vmabc[i]=fmaxf(vmabc[i],-0.97f);
		// Convert float to uint32 voltage modulator wave
		m_abc[i]=((int32_t)(10000.0f*vmabc[i])>>1)+5000u;
	}
	scopeu1=m_abc[0];
 8003710:	4b19      	ldr	r3, [pc, #100]	; (8003778 <CCU80_3_IRQHandler+0x738>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a19      	ldr	r2, [pc, #100]	; (800377c <CCU80_3_IRQHandler+0x73c>)
 8003716:	6013      	str	r3, [r2, #0]
	scopeu2=m_abc[1];
 8003718:	4b17      	ldr	r3, [pc, #92]	; (8003778 <CCU80_3_IRQHandler+0x738>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	4a18      	ldr	r2, [pc, #96]	; (8003780 <CCU80_3_IRQHandler+0x740>)
 800371e:	6013      	str	r3, [r2, #0]
	scopeu3=m_abc[2];
 8003720:	4b15      	ldr	r3, [pc, #84]	; (8003778 <CCU80_3_IRQHandler+0x738>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	4a17      	ldr	r2, [pc, #92]	; (8003784 <CCU80_3_IRQHandler+0x744>)
 8003726:	6013      	str	r3, [r2, #0]
	// update PWM duty cycles
	PWM_SetDutyCycle(&PWM_a,m_abc[0]);
 8003728:	4b13      	ldr	r3, [pc, #76]	; (8003778 <CCU80_3_IRQHandler+0x738>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4816      	ldr	r0, [pc, #88]	; (8003788 <CCU80_3_IRQHandler+0x748>)
 800372e:	4619      	mov	r1, r3
 8003730:	f7fe fb26 	bl	8001d80 <PWM_SetDutyCycle>
	PWM_SetDutyCycle(&PWM_b,m_abc[1]);
 8003734:	4b10      	ldr	r3, [pc, #64]	; (8003778 <CCU80_3_IRQHandler+0x738>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	4814      	ldr	r0, [pc, #80]	; (800378c <CCU80_3_IRQHandler+0x74c>)
 800373a:	4619      	mov	r1, r3
 800373c:	f7fe fb20 	bl	8001d80 <PWM_SetDutyCycle>
	PWM_SetDutyCycle(&PWM_c,m_abc[2]);
 8003740:	4b0d      	ldr	r3, [pc, #52]	; (8003778 <CCU80_3_IRQHandler+0x738>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	4812      	ldr	r0, [pc, #72]	; (8003790 <CCU80_3_IRQHandler+0x750>)
 8003746:	4619      	mov	r1, r3
 8003748:	f7fe fb1a 	bl	8001d80 <PWM_SetDutyCycle>

	DIGITAL_IO_SetOutputLow(&P_1_0);
 800374c:	4811      	ldr	r0, [pc, #68]	; (8003794 <CCU80_3_IRQHandler+0x754>)
 800374e:	f7ff fb6d 	bl	8002e2c <DIGITAL_IO_SetOutputLow>
}
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	200002a0 	.word	0x200002a0
 800375c:	20000238 	.word	0x20000238
 8003760:	20000254 	.word	0x20000254
 8003764:	20000270 	.word	0x20000270
 8003768:	2000028c 	.word	0x2000028c
 800376c:	3f7851ec 	.word	0x3f7851ec
 8003770:	bf7851ec 	.word	0xbf7851ec
 8003774:	461c4000 	.word	0x461c4000
 8003778:	200001c0 	.word	0x200001c0
 800377c:	200080d8 	.word	0x200080d8
 8003780:	200080e0 	.word	0x200080e0
 8003784:	200080c8 	.word	0x200080c8
 8003788:	20000000 	.word	0x20000000
 800378c:	20000068 	.word	0x20000068
 8003790:	20000034 	.word	0x20000034
 8003794:	0800476c 	.word	0x0800476c

08003798 <main>:

int main(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
  DAVE_STATUS_t status;
  status = DAVE_Init();           /* Initialization of DAVE APPs  */
 800379e:	f7ff fa4d 	bl	8002c3c <DAVE_Init>
 80037a2:	4603      	mov	r3, r0
 80037a4:	71fb      	strb	r3, [r7, #7]
  if(status != DAVE_STATUS_SUCCESS)
 80037a6:	79fb      	ldrb	r3, [r7, #7]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d000      	beq.n	80037ae <main+0x16>
  {
    /* Placeholder for error handler code. The while loop below can be replaced
     * with an user error handler. */
    XMC_DEBUG("DAVE APPs initialisation failed\n");
    while(1U){}
 80037ac:	e7fe      	b.n	80037ac <main+0x14>
  }
  ProbeScope_Init(SystemCoreClock/TICKS_PER_SECOND);
 80037ae:	4b1e      	ldr	r3, [pc, #120]	; (8003828 <main+0x90>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a1e      	ldr	r2, [pc, #120]	; (800382c <main+0x94>)
 80037b4:	fba2 2303 	umull	r2, r3, r2, r3
 80037b8:	0b5b      	lsrs	r3, r3, #13
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 f84e 	bl	800385c <ProbeScope_Init>
  DIGITAL_IO_SetOutputLow(&ENABLE);
 80037c0:	481b      	ldr	r0, [pc, #108]	; (8003830 <main+0x98>)
 80037c2:	f7ff fb33 	bl	8002e2c <DIGITAL_IO_SetOutputLow>
  DIGITAL_IO_SetOutputLow(&FAULT_RST);
 80037c6:	481b      	ldr	r0, [pc, #108]	; (8003834 <main+0x9c>)
 80037c8:	f7ff fb30 	bl	8002e2c <DIGITAL_IO_SetOutputLow>
  DIGITAL_IO_SetOutputLow(&EN_1);
 80037cc:	481a      	ldr	r0, [pc, #104]	; (8003838 <main+0xa0>)
 80037ce:	f7ff fb2d 	bl	8002e2c <DIGITAL_IO_SetOutputLow>
  DIGITAL_IO_SetOutputLow(&EN_2);
 80037d2:	481a      	ldr	r0, [pc, #104]	; (800383c <main+0xa4>)
 80037d4:	f7ff fb2a 	bl	8002e2c <DIGITAL_IO_SetOutputLow>
  DIGITAL_IO_SetOutputLow(&EN_3);
 80037d8:	4819      	ldr	r0, [pc, #100]	; (8003840 <main+0xa8>)
 80037da:	f7ff fb27 	bl	8002e2c <DIGITAL_IO_SetOutputLow>
  PWM_Stop(&PWM_a);
 80037de:	4819      	ldr	r0, [pc, #100]	; (8003844 <main+0xac>)
 80037e0:	f7fe fabe 	bl	8001d60 <PWM_Stop>
  PWM_Stop(&PWM_b);
 80037e4:	4818      	ldr	r0, [pc, #96]	; (8003848 <main+0xb0>)
 80037e6:	f7fe fabb 	bl	8001d60 <PWM_Stop>
  PWM_Stop(&PWM_c);
 80037ea:	4818      	ldr	r0, [pc, #96]	; (800384c <main+0xb4>)
 80037ec:	f7fe fab8 	bl	8001d60 <PWM_Stop>
  PWM_Start(&PWM_update);
 80037f0:	4817      	ldr	r0, [pc, #92]	; (8003850 <main+0xb8>)
 80037f2:	f7fe faa5 	bl	8001d40 <PWM_Start>
  w=100.0f*PI;
 80037f6:	4b17      	ldr	r3, [pc, #92]	; (8003854 <main+0xbc>)
 80037f8:	4a17      	ldr	r2, [pc, #92]	; (8003858 <main+0xc0>)
 80037fa:	601a      	str	r2, [r3, #0]
  /* Placeholder for user application code. The while loop below can be replaced
   * with user application code. */
  while(1U)
  {
	  //if (state==1u){		// Initialisation state
		  PWM_Start(&PWM_a);
 80037fc:	4811      	ldr	r0, [pc, #68]	; (8003844 <main+0xac>)
 80037fe:	f7fe fa9f 	bl	8001d40 <PWM_Start>
		  PWM_Start(&PWM_b);
 8003802:	4811      	ldr	r0, [pc, #68]	; (8003848 <main+0xb0>)
 8003804:	f7fe fa9c 	bl	8001d40 <PWM_Start>
		  PWM_Start(&PWM_c);
 8003808:	4810      	ldr	r0, [pc, #64]	; (800384c <main+0xb4>)
 800380a:	f7fe fa99 	bl	8001d40 <PWM_Start>
		  DIGITAL_IO_SetOutputHigh(&EN_1);
 800380e:	480a      	ldr	r0, [pc, #40]	; (8003838 <main+0xa0>)
 8003810:	f7ff fafc 	bl	8002e0c <DIGITAL_IO_SetOutputHigh>
		  DIGITAL_IO_SetOutputHigh(&EN_2);
 8003814:	4809      	ldr	r0, [pc, #36]	; (800383c <main+0xa4>)
 8003816:	f7ff faf9 	bl	8002e0c <DIGITAL_IO_SetOutputHigh>
		  DIGITAL_IO_SetOutputHigh(&EN_3);
 800381a:	4809      	ldr	r0, [pc, #36]	; (8003840 <main+0xa8>)
 800381c:	f7ff faf6 	bl	8002e0c <DIGITAL_IO_SetOutputHigh>
		  PWM_Stop(&PWM_a);
		  PWM_Stop(&PWM_b);
		  PWM_Stop(&PWM_c);
	  }
	  */
	  ProbeScope_Sampling();
 8003820:	f000 f8cc 	bl	80039bc <ProbeScope_Sampling>
  }
 8003824:	e7ea      	b.n	80037fc <main+0x64>
 8003826:	bf00      	nop
 8003828:	2000ffc0 	.word	0x2000ffc0
 800382c:	d1b71759 	.word	0xd1b71759
 8003830:	08004794 	.word	0x08004794
 8003834:	08004820 	.word	0x08004820
 8003838:	080047d0 	.word	0x080047d0
 800383c:	080047e4 	.word	0x080047e4
 8003840:	080047f8 	.word	0x080047f8
 8003844:	20000000 	.word	0x20000000
 8003848:	20000068 	.word	0x20000068
 800384c:	20000034 	.word	0x20000034
 8003850:	2000009c 	.word	0x2000009c
 8003854:	200001a0 	.word	0x200001a0
 8003858:	439d1463 	.word	0x439d1463

0800385c <ProbeScope_Init>:
* Returns    : none
************************************************************************************************************************
*/

void  ProbeScope_Init (uint32_t  sampling_clk_hz)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
    static  CPU_INT32U  temp = 0;


    ProbeScope_Ch1.En             = 0;
 8003864:	4b37      	ldr	r3, [pc, #220]	; (8003944 <ProbeScope_Init+0xe8>)
 8003866:	2200      	movs	r2, #0
 8003868:	601a      	str	r2, [r3, #0]
#if PROBE_SCOPE_MAX_CH >= 2       
    ProbeScope_Ch2.En             = 0;
 800386a:	4b37      	ldr	r3, [pc, #220]	; (8003948 <ProbeScope_Init+0xec>)
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]
#endif                            
#if PROBE_SCOPE_MAX_CH >= 3       
    ProbeScope_Ch3.En             = 0;
 8003870:	4b36      	ldr	r3, [pc, #216]	; (800394c <ProbeScope_Init+0xf0>)
 8003872:	2200      	movs	r2, #0
 8003874:	601a      	str	r2, [r3, #0]
#endif                            
#if PROBE_SCOPE_MAX_CH >= 4       
    ProbeScope_Ch4.En             = 0;
 8003876:	4b36      	ldr	r3, [pc, #216]	; (8003950 <ProbeScope_Init+0xf4>)
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
#endif                            
#if PROBE_SCOPE_MAX_CH >= 5       
    ProbeScope_Ch5.En             = 0;
 800387c:	4b35      	ldr	r3, [pc, #212]	; (8003954 <ProbeScope_Init+0xf8>)
 800387e:	2200      	movs	r2, #0
 8003880:	601a      	str	r2, [r3, #0]
#endif                            
#if PROBE_SCOPE_MAX_CH >= 6       
    ProbeScope_Ch6.En             = 0;
 8003882:	4b35      	ldr	r3, [pc, #212]	; (8003958 <ProbeScope_Init+0xfc>)
 8003884:	2200      	movs	r2, #0
 8003886:	601a      	str	r2, [r3, #0]
#endif                            
#if PROBE_SCOPE_MAX_CH >= 7       
    ProbeScope_Ch7.En             = 0;
 8003888:	4b34      	ldr	r3, [pc, #208]	; (800395c <ProbeScope_Init+0x100>)
 800388a:	2200      	movs	r2, #0
 800388c:	601a      	str	r2, [r3, #0]
#endif                            
#if PROBE_SCOPE_MAX_CH >= 8       
    ProbeScope_Ch8.En             = 0;
 800388e:	4b34      	ldr	r3, [pc, #208]	; (8003960 <ProbeScope_Init+0x104>)
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]
#endif

    ProbeScope_Mode               = PROBE_SCOPE_MODE_OFF;
 8003894:	4b33      	ldr	r3, [pc, #204]	; (8003964 <ProbeScope_Init+0x108>)
 8003896:	2200      	movs	r2, #0
 8003898:	701a      	strb	r2, [r3, #0]
    ProbeScope_State              = PROBE_SCOPE_STATE_START;
 800389a:	4b33      	ldr	r3, [pc, #204]	; (8003968 <ProbeScope_Init+0x10c>)
 800389c:	2200      	movs	r2, #0
 800389e:	701a      	strb	r2, [r3, #0]
    ProbeScope_TrigChSel          = PROBE_SCOPE_CH1;                         // Default trigger channel
 80038a0:	4b32      	ldr	r3, [pc, #200]	; (800396c <ProbeScope_Init+0x110>)
 80038a2:	2201      	movs	r2, #1
 80038a4:	701a      	strb	r2, [r3, #0]
    ProbeScope_SampleIxPrev       = 0;
 80038a6:	4b32      	ldr	r3, [pc, #200]	; (8003970 <ProbeScope_Init+0x114>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]
    ProbeScope_SampleIxCur        = 0;
 80038ac:	4b31      	ldr	r3, [pc, #196]	; (8003974 <ProbeScope_Init+0x118>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	601a      	str	r2, [r3, #0]
    ProbeScope_TrigFlag           = 0;
 80038b2:	4b31      	ldr	r3, [pc, #196]	; (8003978 <ProbeScope_Init+0x11c>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]
    ProbeScope_TrigDispPos        = 0;
 80038b8:	4b30      	ldr	r3, [pc, #192]	; (800397c <ProbeScope_Init+0x120>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	601a      	str	r2, [r3, #0]
    ProbeScope_TrigHoldOff        = 0;
 80038be:	4b30      	ldr	r3, [pc, #192]	; (8003980 <ProbeScope_Init+0x124>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]
    ProbeScope_TrigHoldOffCtr     = 0;
 80038c4:	4b2f      	ldr	r3, [pc, #188]	; (8003984 <ProbeScope_Init+0x128>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	601a      	str	r2, [r3, #0]
    ProbeScope_DataRdyFlag        = 0;
 80038ca:	4b2f      	ldr	r3, [pc, #188]	; (8003988 <ProbeScope_Init+0x12c>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]
    ProbeScope_SamplesPreTrigCtr  = ProbeScope_TrigDispPos;
 80038d0:	4b2a      	ldr	r3, [pc, #168]	; (800397c <ProbeScope_Init+0x120>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a2d      	ldr	r2, [pc, #180]	; (800398c <ProbeScope_Init+0x130>)
 80038d6:	6013      	str	r3, [r2, #0]
    ProbeScope_SamplesPostTrigCtr = PROBE_SCOPE_MAX_SAMPLES;
 80038d8:	4b2d      	ldr	r3, [pc, #180]	; (8003990 <ProbeScope_Init+0x134>)
 80038da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038de:	601a      	str	r2, [r3, #0]
    ProbeScope_TrigSlope          = PROBE_SCOPE_TRIG_POS;                    // We assume a positive going signal by default
 80038e0:	4b2c      	ldr	r3, [pc, #176]	; (8003994 <ProbeScope_Init+0x138>)
 80038e2:	2201      	movs	r2, #1
 80038e4:	601a      	str	r2, [r3, #0]
    temp                          = ProbeScopeDbg_MaxSamples;
 80038e6:	4b2c      	ldr	r3, [pc, #176]	; (8003998 <ProbeScope_Init+0x13c>)
 80038e8:	881b      	ldrh	r3, [r3, #0]
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	461a      	mov	r2, r3
 80038ee:	4b2b      	ldr	r3, [pc, #172]	; (800399c <ProbeScope_Init+0x140>)
 80038f0:	601a      	str	r2, [r3, #0]
    temp                         += ProbeScopeDbg_MaxCh;
 80038f2:	4b2b      	ldr	r3, [pc, #172]	; (80039a0 <ProbeScope_Init+0x144>)
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	461a      	mov	r2, r3
 80038fa:	4b28      	ldr	r3, [pc, #160]	; (800399c <ProbeScope_Init+0x140>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4413      	add	r3, r2
 8003900:	4a26      	ldr	r2, [pc, #152]	; (800399c <ProbeScope_Init+0x140>)
 8003902:	6013      	str	r3, [r2, #0]
    temp                         += ProbeScopeDbg_16BitEn;
 8003904:	4b27      	ldr	r3, [pc, #156]	; (80039a4 <ProbeScope_Init+0x148>)
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	4b24      	ldr	r3, [pc, #144]	; (800399c <ProbeScope_Init+0x140>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4413      	add	r3, r2
 800390e:	4a23      	ldr	r2, [pc, #140]	; (800399c <ProbeScope_Init+0x140>)
 8003910:	6013      	str	r3, [r2, #0]
    temp                         += ProbeScopeDbg_32BitEn;
 8003912:	4b25      	ldr	r3, [pc, #148]	; (80039a8 <ProbeScope_Init+0x14c>)
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	4b21      	ldr	r3, [pc, #132]	; (800399c <ProbeScope_Init+0x140>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4413      	add	r3, r2
 800391c:	4a1f      	ldr	r2, [pc, #124]	; (800399c <ProbeScope_Init+0x140>)
 800391e:	6013      	str	r3, [r2, #0]
    ProbeScope_SamplingClkDiv     =    1;
 8003920:	4b22      	ldr	r3, [pc, #136]	; (80039ac <ProbeScope_Init+0x150>)
 8003922:	2201      	movs	r2, #1
 8003924:	801a      	strh	r2, [r3, #0]
    ProbeScope_SamplingClkDivCtr  =    0;
 8003926:	4b22      	ldr	r3, [pc, #136]	; (80039b0 <ProbeScope_Init+0x154>)
 8003928:	2200      	movs	r2, #0
 800392a:	801a      	strh	r2, [r3, #0]
    ProbeScope_SamplingClkHz      = sampling_clk_hz;
 800392c:	4a21      	ldr	r2, [pc, #132]	; (80039b4 <ProbeScope_Init+0x158>)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6013      	str	r3, [r2, #0]
    ProbeScope_InitFlag           =    1;
 8003932:	4b21      	ldr	r3, [pc, #132]	; (80039b8 <ProbeScope_Init+0x15c>)
 8003934:	2201      	movs	r2, #1
 8003936:	601a      	str	r2, [r3, #0]
}
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	200002d0 	.word	0x200002d0
 8003948:	20001288 	.word	0x20001288
 800394c:	20002240 	.word	0x20002240
 8003950:	200031f8 	.word	0x200031f8
 8003954:	200041b0 	.word	0x200041b0
 8003958:	20005168 	.word	0x20005168
 800395c:	20006120 	.word	0x20006120
 8003960:	200070d8 	.word	0x200070d8
 8003964:	20008090 	.word	0x20008090
 8003968:	200080b0 	.word	0x200080b0
 800396c:	20008091 	.word	0x20008091
 8003970:	2000809c 	.word	0x2000809c
 8003974:	200080a0 	.word	0x200080a0
 8003978:	200080f0 	.word	0x200080f0
 800397c:	200080fc 	.word	0x200080fc
 8003980:	20008100 	.word	0x20008100
 8003984:	20008094 	.word	0x20008094
 8003988:	20008108 	.word	0x20008108
 800398c:	200080a4 	.word	0x200080a4
 8003990:	200080a8 	.word	0x200080a8
 8003994:	20008098 	.word	0x20008098
 8003998:	200001b0 	.word	0x200001b0
 800399c:	200080b4 	.word	0x200080b4
 80039a0:	200001b2 	.word	0x200001b2
 80039a4:	200001b4 	.word	0x200001b4
 80039a8:	200001b8 	.word	0x200001b8
 80039ac:	200080ac 	.word	0x200080ac
 80039b0:	200080ae 	.word	0x200080ae
 80039b4:	200080f4 	.word	0x200080f4
 80039b8:	20008104 	.word	0x20008104

080039bc <ProbeScope_Sampling>:
* Returns    : none
************************************************************************************************************************
*/

void  ProbeScope_Sampling (void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
    switch (ProbeScope_Mode) {
 80039c0:	4b0e      	ldr	r3, [pc, #56]	; (80039fc <ProbeScope_Sampling+0x40>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	2b03      	cmp	r3, #3
 80039c6:	d817      	bhi.n	80039f8 <ProbeScope_Sampling+0x3c>
 80039c8:	a201      	add	r2, pc, #4	; (adr r2, 80039d0 <ProbeScope_Sampling+0x14>)
 80039ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ce:	bf00      	nop
 80039d0:	080039e1 	.word	0x080039e1
 80039d4:	080039e7 	.word	0x080039e7
 80039d8:	080039ed 	.word	0x080039ed
 80039dc:	080039f3 	.word	0x080039f3
        case PROBE_SCOPE_MODE_OFF:
             ProbeScope_ModeOff();
 80039e0:	f000 f80e 	bl	8003a00 <ProbeScope_ModeOff>
             break;
 80039e4:	e008      	b.n	80039f8 <ProbeScope_Sampling+0x3c>
    
        case PROBE_SCOPE_MODE_SINGLE:
             ProbeScope_ModeTrig();
 80039e6:	f000 f85d 	bl	8003aa4 <ProbeScope_ModeTrig>
             break;
 80039ea:	e005      	b.n	80039f8 <ProbeScope_Sampling+0x3c>
    
        case PROBE_SCOPE_MODE_CONTINUOUS:
             ProbeScope_ModeContinuous();
 80039ec:	f000 f81c 	bl	8003a28 <ProbeScope_ModeContinuous>
             break;
 80039f0:	e002      	b.n	80039f8 <ProbeScope_Sampling+0x3c>
    
        case PROBE_SCOPE_MODE_TRIG:
             ProbeScope_ModeTrig(); 
 80039f2:	f000 f857 	bl	8003aa4 <ProbeScope_ModeTrig>
             break;
 80039f6:	bf00      	nop
    }
}
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	20008090 	.word	0x20008090

08003a00 <ProbeScope_ModeOff>:
* Returns    : none
************************************************************************************************************************
*/

static  void  ProbeScope_ModeOff (void)
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
    ProbeScope_State = PROBE_SCOPE_STATE_START;                                // Force Triggered mode state to START
 8003a04:	4b06      	ldr	r3, [pc, #24]	; (8003a20 <ProbeScope_ModeOff+0x20>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	701a      	strb	r2, [r3, #0]
    if (ProbeScope_SamplingClkDiv == 0) {
 8003a0a:	4b06      	ldr	r3, [pc, #24]	; (8003a24 <ProbeScope_ModeOff+0x24>)
 8003a0c:	881b      	ldrh	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d102      	bne.n	8003a18 <ProbeScope_ModeOff+0x18>
        ProbeScope_SamplingClkDiv =  1;
 8003a12:	4b04      	ldr	r3, [pc, #16]	; (8003a24 <ProbeScope_ModeOff+0x24>)
 8003a14:	2201      	movs	r2, #1
 8003a16:	801a      	strh	r2, [r3, #0]
    }
}
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	200080b0 	.word	0x200080b0
 8003a24:	200080ac 	.word	0x200080ac

08003a28 <ProbeScope_ModeContinuous>:
* Returns    : none
************************************************************************************************************************
*/

static  void  ProbeScope_ModeContinuous (void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
    if (ProbeScope_DataRdyFlag == 0) {                                          // Read one buffer's worth of data
 8003a2c:	4b17      	ldr	r3, [pc, #92]	; (8003a8c <ProbeScope_ModeContinuous+0x64>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d126      	bne.n	8003a82 <ProbeScope_ModeContinuous+0x5a>
        ProbeScope_TrigFlag = 0;
 8003a34:	4b16      	ldr	r3, [pc, #88]	; (8003a90 <ProbeScope_ModeContinuous+0x68>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	601a      	str	r2, [r3, #0]
        if (ProbeScope_SamplingClkDivCtr > 1) {
 8003a3a:	4b16      	ldr	r3, [pc, #88]	; (8003a94 <ProbeScope_ModeContinuous+0x6c>)
 8003a3c:	881b      	ldrh	r3, [r3, #0]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d906      	bls.n	8003a50 <ProbeScope_ModeContinuous+0x28>
            ProbeScope_SamplingClkDivCtr--;
 8003a42:	4b14      	ldr	r3, [pc, #80]	; (8003a94 <ProbeScope_ModeContinuous+0x6c>)
 8003a44:	881b      	ldrh	r3, [r3, #0]
 8003a46:	3b01      	subs	r3, #1
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	4b12      	ldr	r3, [pc, #72]	; (8003a94 <ProbeScope_ModeContinuous+0x6c>)
 8003a4c:	801a      	strh	r2, [r3, #0]
 8003a4e:	e018      	b.n	8003a82 <ProbeScope_ModeContinuous+0x5a>
        } else {
            if (ProbeScope_SamplingClkDiv == 0) {                               // Make sure clock divider is not 0
 8003a50:	4b11      	ldr	r3, [pc, #68]	; (8003a98 <ProbeScope_ModeContinuous+0x70>)
 8003a52:	881b      	ldrh	r3, [r3, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d102      	bne.n	8003a5e <ProbeScope_ModeContinuous+0x36>
                ProbeScope_SamplingClkDiv =  1;
 8003a58:	4b0f      	ldr	r3, [pc, #60]	; (8003a98 <ProbeScope_ModeContinuous+0x70>)
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	801a      	strh	r2, [r3, #0]
            }
            ProbeScope_SamplingClkDivCtr  = ProbeScope_SamplingClkDiv;
 8003a5e:	4b0e      	ldr	r3, [pc, #56]	; (8003a98 <ProbeScope_ModeContinuous+0x70>)
 8003a60:	881a      	ldrh	r2, [r3, #0]
 8003a62:	4b0c      	ldr	r3, [pc, #48]	; (8003a94 <ProbeScope_ModeContinuous+0x6c>)
 8003a64:	801a      	strh	r2, [r3, #0]
            ProbeScope_SampleChAll();                                           // Get the first sample to create a 'previous' value for triggering
 8003a66:	f000 f8e5 	bl	8003c34 <ProbeScope_SampleChAll>
            ProbeScope_SamplePosNext();                                         // Position to next sample
 8003a6a:	f000 fa0b 	bl	8003e84 <ProbeScope_SamplePosNext>
            if (ProbeScope_SampleIxCur == 0) {                                  // Read one buffer's worth of data
 8003a6e:	4b0b      	ldr	r3, [pc, #44]	; (8003a9c <ProbeScope_ModeContinuous+0x74>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d105      	bne.n	8003a82 <ProbeScope_ModeContinuous+0x5a>
                ProbeScope_DataRdyFlag = 1;   
 8003a76:	4b05      	ldr	r3, [pc, #20]	; (8003a8c <ProbeScope_ModeContinuous+0x64>)
 8003a78:	2201      	movs	r2, #1
 8003a7a:	601a      	str	r2, [r3, #0]
                ProbeScope_TrigFlag    = 1;
 8003a7c:	4b04      	ldr	r3, [pc, #16]	; (8003a90 <ProbeScope_ModeContinuous+0x68>)
 8003a7e:	2201      	movs	r2, #1
 8003a80:	601a      	str	r2, [r3, #0]
            }
        }
    }
    ProbeScope_State = PROBE_SCOPE_STATE_START;                                 // Force Triggered mode state to START
 8003a82:	4b07      	ldr	r3, [pc, #28]	; (8003aa0 <ProbeScope_ModeContinuous+0x78>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	701a      	strb	r2, [r3, #0]
}
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	20008108 	.word	0x20008108
 8003a90:	200080f0 	.word	0x200080f0
 8003a94:	200080ae 	.word	0x200080ae
 8003a98:	200080ac 	.word	0x200080ac
 8003a9c:	200080a0 	.word	0x200080a0
 8003aa0:	200080b0 	.word	0x200080b0

08003aa4 <ProbeScope_ModeTrig>:
* Returns    : none
************************************************************************************************************************
*/

static  void  ProbeScope_ModeTrig (void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
    if (ProbeScope_SamplingClkDivCtr > 1) {
 8003aa8:	4b55      	ldr	r3, [pc, #340]	; (8003c00 <ProbeScope_ModeTrig+0x15c>)
 8003aaa:	881b      	ldrh	r3, [r3, #0]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d906      	bls.n	8003abe <ProbeScope_ModeTrig+0x1a>
        ProbeScope_SamplingClkDivCtr--;
 8003ab0:	4b53      	ldr	r3, [pc, #332]	; (8003c00 <ProbeScope_ModeTrig+0x15c>)
 8003ab2:	881b      	ldrh	r3, [r3, #0]
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	4b51      	ldr	r3, [pc, #324]	; (8003c00 <ProbeScope_ModeTrig+0x15c>)
 8003aba:	801a      	strh	r2, [r3, #0]
 8003abc:	e09e      	b.n	8003bfc <ProbeScope_ModeTrig+0x158>
    } else { 
        if (ProbeScope_SamplingClkDiv == 0) {                                        // Make sure clock divider is not 0
 8003abe:	4b51      	ldr	r3, [pc, #324]	; (8003c04 <ProbeScope_ModeTrig+0x160>)
 8003ac0:	881b      	ldrh	r3, [r3, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d102      	bne.n	8003acc <ProbeScope_ModeTrig+0x28>
            ProbeScope_SamplingClkDiv =  1;
 8003ac6:	4b4f      	ldr	r3, [pc, #316]	; (8003c04 <ProbeScope_ModeTrig+0x160>)
 8003ac8:	2201      	movs	r2, #1
 8003aca:	801a      	strh	r2, [r3, #0]
        }
        ProbeScope_SamplingClkDivCtr = ProbeScope_SamplingClkDiv;
 8003acc:	4b4d      	ldr	r3, [pc, #308]	; (8003c04 <ProbeScope_ModeTrig+0x160>)
 8003ace:	881a      	ldrh	r2, [r3, #0]
 8003ad0:	4b4b      	ldr	r3, [pc, #300]	; (8003c00 <ProbeScope_ModeTrig+0x15c>)
 8003ad2:	801a      	strh	r2, [r3, #0]
        switch (ProbeScope_State) {
 8003ad4:	4b4c      	ldr	r3, [pc, #304]	; (8003c08 <ProbeScope_ModeTrig+0x164>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	2b03      	cmp	r3, #3
 8003ada:	f200 808b 	bhi.w	8003bf4 <ProbeScope_ModeTrig+0x150>
 8003ade:	a201      	add	r2, pc, #4	; (adr r2, 8003ae4 <ProbeScope_ModeTrig+0x40>)
 8003ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae4:	08003af5 	.word	0x08003af5
 8003ae8:	08003b31 	.word	0x08003b31
 8003aec:	08003b71 	.word	0x08003b71
 8003af0:	08003bb9 	.word	0x08003bb9
            case PROBE_SCOPE_STATE_START:
                 ProbeScope_DataRdyFlag        = 0;
 8003af4:	4b45      	ldr	r3, [pc, #276]	; (8003c0c <ProbeScope_ModeTrig+0x168>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	601a      	str	r2, [r3, #0]
                 ProbeScope_TrigFlag           = 0;
 8003afa:	4b45      	ldr	r3, [pc, #276]	; (8003c10 <ProbeScope_ModeTrig+0x16c>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	601a      	str	r2, [r3, #0]
                 ProbeScope_SampleIxPrev       = 0;
 8003b00:	4b44      	ldr	r3, [pc, #272]	; (8003c14 <ProbeScope_ModeTrig+0x170>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	601a      	str	r2, [r3, #0]
                 ProbeScope_SampleIxCur        = 0;
 8003b06:	4b44      	ldr	r3, [pc, #272]	; (8003c18 <ProbeScope_ModeTrig+0x174>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]
                 ProbeScope_TrigHoldOffCtr     = 0;
 8003b0c:	4b43      	ldr	r3, [pc, #268]	; (8003c1c <ProbeScope_ModeTrig+0x178>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	601a      	str	r2, [r3, #0]
                 ProbeScope_SamplesPostTrigCtr = 0;
 8003b12:	4b43      	ldr	r3, [pc, #268]	; (8003c20 <ProbeScope_ModeTrig+0x17c>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]
                 ProbeScope_SamplesPreTrigCtr  = ProbeScope_TrigDispPos;            // Minimum number of samples pre-trigger
 8003b18:	4b42      	ldr	r3, [pc, #264]	; (8003c24 <ProbeScope_ModeTrig+0x180>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a42      	ldr	r2, [pc, #264]	; (8003c28 <ProbeScope_ModeTrig+0x184>)
 8003b1e:	6013      	str	r3, [r2, #0]
                 ProbeScope_SampleChAll();                                          // Get the first sample to create a 'previous' value for triggering
 8003b20:	f000 f888 	bl	8003c34 <ProbeScope_SampleChAll>
                 ProbeScope_SamplePosNext();
 8003b24:	f000 f9ae 	bl	8003e84 <ProbeScope_SamplePosNext>
                 ProbeScope_State              = PROBE_SCOPE_STATE_SAMPLING_PRE_TRIG;
 8003b28:	4b37      	ldr	r3, [pc, #220]	; (8003c08 <ProbeScope_ModeTrig+0x164>)
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	701a      	strb	r2, [r3, #0]
                 break;
 8003b2e:	e065      	b.n	8003bfc <ProbeScope_ModeTrig+0x158>
                 
            case PROBE_SCOPE_STATE_SAMPLING_PRE_TRIG:
                 ProbeScope_SampleChAll();                                          // Get the next sample
 8003b30:	f000 f880 	bl	8003c34 <ProbeScope_SampleChAll>
                 if (ProbeScope_SamplesPreTrigCtr > 0) {                            // We need a minimum number of samples before the trigger
 8003b34:	4b3c      	ldr	r3, [pc, #240]	; (8003c28 <ProbeScope_ModeTrig+0x184>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d005      	beq.n	8003b48 <ProbeScope_ModeTrig+0xa4>
                     ProbeScope_SamplesPreTrigCtr--;                               
 8003b3c:	4b3a      	ldr	r3, [pc, #232]	; (8003c28 <ProbeScope_ModeTrig+0x184>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	3b01      	subs	r3, #1
 8003b42:	4a39      	ldr	r2, [pc, #228]	; (8003c28 <ProbeScope_ModeTrig+0x184>)
 8003b44:	6013      	str	r3, [r2, #0]
 8003b46:	e001      	b.n	8003b4c <ProbeScope_ModeTrig+0xa8>
                 } else {
                     ProbeScope_IsTrig();                                           // See if we detected the trigger
 8003b48:	f000 f9b8 	bl	8003ebc <ProbeScope_IsTrig>
                 }
                 ProbeScope_SamplePosNext();
 8003b4c:	f000 f99a 	bl	8003e84 <ProbeScope_SamplePosNext>
                 if (ProbeScope_TrigFlag == 1) {                                    // Remaining number of samples to collect before data available
 8003b50:	4b2f      	ldr	r3, [pc, #188]	; (8003c10 <ProbeScope_ModeTrig+0x16c>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d10a      	bne.n	8003b6e <ProbeScope_ModeTrig+0xca>
                     ProbeScope_SamplesPostTrigCtr = PROBE_SCOPE_MAX_SAMPLES - ProbeScope_TrigDispPos - 2;  
 8003b58:	4b32      	ldr	r3, [pc, #200]	; (8003c24 <ProbeScope_ModeTrig+0x180>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f5c3 7379 	rsb	r3, r3, #996	; 0x3e4
 8003b60:	3302      	adds	r3, #2
 8003b62:	4a2f      	ldr	r2, [pc, #188]	; (8003c20 <ProbeScope_ModeTrig+0x17c>)
 8003b64:	6013      	str	r3, [r2, #0]
                     ProbeScope_State              = PROBE_SCOPE_STATE_SAMPLING_POST_TRIG;
 8003b66:	4b28      	ldr	r3, [pc, #160]	; (8003c08 <ProbeScope_ModeTrig+0x164>)
 8003b68:	2202      	movs	r2, #2
 8003b6a:	701a      	strb	r2, [r3, #0]
                 }
                 break;
 8003b6c:	e046      	b.n	8003bfc <ProbeScope_ModeTrig+0x158>
 8003b6e:	e045      	b.n	8003bfc <ProbeScope_ModeTrig+0x158>
                 
            case PROBE_SCOPE_STATE_SAMPLING_POST_TRIG:
                 ProbeScope_SampleChAll();                                          // Get the next sample
 8003b70:	f000 f860 	bl	8003c34 <ProbeScope_SampleChAll>
                 ProbeScope_SamplePosNext();
 8003b74:	f000 f986 	bl	8003e84 <ProbeScope_SamplePosNext>
                 if (ProbeScope_SamplesPostTrigCtr > 0) {
 8003b78:	4b29      	ldr	r3, [pc, #164]	; (8003c20 <ProbeScope_ModeTrig+0x17c>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d005      	beq.n	8003b8c <ProbeScope_ModeTrig+0xe8>
                     ProbeScope_SamplesPostTrigCtr--;
 8003b80:	4b27      	ldr	r3, [pc, #156]	; (8003c20 <ProbeScope_ModeTrig+0x17c>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	3b01      	subs	r3, #1
 8003b86:	4a26      	ldr	r2, [pc, #152]	; (8003c20 <ProbeScope_ModeTrig+0x17c>)
 8003b88:	6013      	str	r3, [r2, #0]
                         ProbeScope_TrigHoldOffCtr = ProbeScope_TrigHoldOff;        // Load hold-off counter
                         ProbeScope_State          = PROBE_SCOPE_STATE_DATA_RDY;    
                     }                                                              
                     ProbeScope_DataRdyFlag = 1;                                    // Trace is available in the buffer
                 }                                                                  
                 break;                                                             
 8003b8a:	e037      	b.n	8003bfc <ProbeScope_ModeTrig+0x158>
                 ProbeScope_SampleChAll();                                          // Get the next sample
                 ProbeScope_SamplePosNext();
                 if (ProbeScope_SamplesPostTrigCtr > 0) {
                     ProbeScope_SamplesPostTrigCtr--;
                 } else {
                     if (ProbeScope_Mode == PROBE_SCOPE_MODE_SINGLE) {
 8003b8c:	4b27      	ldr	r3, [pc, #156]	; (8003c2c <ProbeScope_ModeTrig+0x188>)
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d106      	bne.n	8003ba2 <ProbeScope_ModeTrig+0xfe>
                         ProbeScope_Mode           = PROBE_SCOPE_MODE_OFF;
 8003b94:	4b25      	ldr	r3, [pc, #148]	; (8003c2c <ProbeScope_ModeTrig+0x188>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	701a      	strb	r2, [r3, #0]
                         ProbeScope_State          = PROBE_SCOPE_STATE_START;
 8003b9a:	4b1b      	ldr	r3, [pc, #108]	; (8003c08 <ProbeScope_ModeTrig+0x164>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	701a      	strb	r2, [r3, #0]
 8003ba0:	e006      	b.n	8003bb0 <ProbeScope_ModeTrig+0x10c>
                     } else {
                         ProbeScope_TrigHoldOffCtr = ProbeScope_TrigHoldOff;        // Load hold-off counter
 8003ba2:	4b23      	ldr	r3, [pc, #140]	; (8003c30 <ProbeScope_ModeTrig+0x18c>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a1d      	ldr	r2, [pc, #116]	; (8003c1c <ProbeScope_ModeTrig+0x178>)
 8003ba8:	6013      	str	r3, [r2, #0]
                         ProbeScope_State          = PROBE_SCOPE_STATE_DATA_RDY;    
 8003baa:	4b17      	ldr	r3, [pc, #92]	; (8003c08 <ProbeScope_ModeTrig+0x164>)
 8003bac:	2203      	movs	r2, #3
 8003bae:	701a      	strb	r2, [r3, #0]
                     }                                                              
                     ProbeScope_DataRdyFlag = 1;                                    // Trace is available in the buffer
 8003bb0:	4b16      	ldr	r3, [pc, #88]	; (8003c0c <ProbeScope_ModeTrig+0x168>)
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	601a      	str	r2, [r3, #0]
                 }                                                                  
                 break;                                                             
 8003bb6:	e021      	b.n	8003bfc <ProbeScope_ModeTrig+0x158>
                                                                                    
            case PROBE_SCOPE_STATE_DATA_RDY:                                        
                 if (ProbeScope_TrigHoldOffCtr > 0) {                               // Hold-off before beeing able to re-trigger
 8003bb8:	4b18      	ldr	r3, [pc, #96]	; (8003c1c <ProbeScope_ModeTrig+0x178>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d005      	beq.n	8003bcc <ProbeScope_ModeTrig+0x128>
                     ProbeScope_TrigHoldOffCtr--;                                   
 8003bc0:	4b16      	ldr	r3, [pc, #88]	; (8003c1c <ProbeScope_ModeTrig+0x178>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	4a15      	ldr	r2, [pc, #84]	; (8003c1c <ProbeScope_ModeTrig+0x178>)
 8003bc8:	6013      	str	r3, [r2, #0]
 8003bca:	e012      	b.n	8003bf2 <ProbeScope_ModeTrig+0x14e>
                 } else {                                                           
                     if (ProbeScope_DataRdyFlag == 0) {                             // Give Probe time to collect and display the waveform(s)
 8003bcc:	4b0f      	ldr	r3, [pc, #60]	; (8003c0c <ProbeScope_ModeTrig+0x168>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10e      	bne.n	8003bf2 <ProbeScope_ModeTrig+0x14e>
                         ProbeScope_TrigFlag          = 0;
 8003bd4:	4b0e      	ldr	r3, [pc, #56]	; (8003c10 <ProbeScope_ModeTrig+0x16c>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	601a      	str	r2, [r3, #0]
                         ProbeScope_SamplesPreTrigCtr = ProbeScope_TrigDispPos;     // Minimum number of samples pre-trigger
 8003bda:	4b12      	ldr	r3, [pc, #72]	; (8003c24 <ProbeScope_ModeTrig+0x180>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a12      	ldr	r2, [pc, #72]	; (8003c28 <ProbeScope_ModeTrig+0x184>)
 8003be0:	6013      	str	r3, [r2, #0]
                         ProbeScope_State             = PROBE_SCOPE_STATE_SAMPLING_PRE_TRIG;
 8003be2:	4b09      	ldr	r3, [pc, #36]	; (8003c08 <ProbeScope_ModeTrig+0x164>)
 8003be4:	2201      	movs	r2, #1
 8003be6:	701a      	strb	r2, [r3, #0]
                         ProbeScope_SampleChAll();                                  // Get the first sample to create a 'previous' value for triggering
 8003be8:	f000 f824 	bl	8003c34 <ProbeScope_SampleChAll>
                         ProbeScope_SamplePosNext();
 8003bec:	f000 f94a 	bl	8003e84 <ProbeScope_SamplePosNext>
                     }
                 }
                 break;
 8003bf0:	e004      	b.n	8003bfc <ProbeScope_ModeTrig+0x158>
 8003bf2:	e003      	b.n	8003bfc <ProbeScope_ModeTrig+0x158>
                 
            default:
                 ProbeScope_State = PROBE_SCOPE_STATE_START;
 8003bf4:	4b04      	ldr	r3, [pc, #16]	; (8003c08 <ProbeScope_ModeTrig+0x164>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	701a      	strb	r2, [r3, #0]
                 break;
 8003bfa:	bf00      	nop
        }
    }
}
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	200080ae 	.word	0x200080ae
 8003c04:	200080ac 	.word	0x200080ac
 8003c08:	200080b0 	.word	0x200080b0
 8003c0c:	20008108 	.word	0x20008108
 8003c10:	200080f0 	.word	0x200080f0
 8003c14:	2000809c 	.word	0x2000809c
 8003c18:	200080a0 	.word	0x200080a0
 8003c1c:	20008094 	.word	0x20008094
 8003c20:	200080a8 	.word	0x200080a8
 8003c24:	200080fc 	.word	0x200080fc
 8003c28:	200080a4 	.word	0x200080a4
 8003c2c:	20008090 	.word	0x20008090
 8003c30:	20008100 	.word	0x20008100

08003c34 <ProbeScope_SampleChAll>:
* Returns    : none
************************************************************************************************************************
*/

static  void  ProbeScope_SampleChAll (void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
    ProbeScope_SampleCh(&ProbeScope_Ch1);
 8003c38:	480c      	ldr	r0, [pc, #48]	; (8003c6c <ProbeScope_SampleChAll+0x38>)
 8003c3a:	f000 f827 	bl	8003c8c <ProbeScope_SampleCh>

#if PROBE_SCOPE_MAX_CH >= 2
    ProbeScope_SampleCh(&ProbeScope_Ch2);
 8003c3e:	480c      	ldr	r0, [pc, #48]	; (8003c70 <ProbeScope_SampleChAll+0x3c>)
 8003c40:	f000 f824 	bl	8003c8c <ProbeScope_SampleCh>
#endif

#if PROBE_SCOPE_MAX_CH >= 3                     
    ProbeScope_SampleCh(&ProbeScope_Ch3);
 8003c44:	480b      	ldr	r0, [pc, #44]	; (8003c74 <ProbeScope_SampleChAll+0x40>)
 8003c46:	f000 f821 	bl	8003c8c <ProbeScope_SampleCh>
#endif

#if PROBE_SCOPE_MAX_CH >= 4                     
    ProbeScope_SampleCh(&ProbeScope_Ch4);
 8003c4a:	480b      	ldr	r0, [pc, #44]	; (8003c78 <ProbeScope_SampleChAll+0x44>)
 8003c4c:	f000 f81e 	bl	8003c8c <ProbeScope_SampleCh>
#endif                     

#if PROBE_SCOPE_MAX_CH >= 5
    ProbeScope_SampleCh(&ProbeScope_Ch5);
 8003c50:	480a      	ldr	r0, [pc, #40]	; (8003c7c <ProbeScope_SampleChAll+0x48>)
 8003c52:	f000 f81b 	bl	8003c8c <ProbeScope_SampleCh>
#endif

#if PROBE_SCOPE_MAX_CH >= 6                     
    ProbeScope_SampleCh(&ProbeScope_Ch6);
 8003c56:	480a      	ldr	r0, [pc, #40]	; (8003c80 <ProbeScope_SampleChAll+0x4c>)
 8003c58:	f000 f818 	bl	8003c8c <ProbeScope_SampleCh>
#endif

#if PROBE_SCOPE_MAX_CH >= 7                     
    ProbeScope_SampleCh(&ProbeScope_Ch7);
 8003c5c:	4809      	ldr	r0, [pc, #36]	; (8003c84 <ProbeScope_SampleChAll+0x50>)
 8003c5e:	f000 f815 	bl	8003c8c <ProbeScope_SampleCh>
#endif                     

#if PROBE_SCOPE_MAX_CH >= 8                     
    ProbeScope_SampleCh(&ProbeScope_Ch8);
 8003c62:	4809      	ldr	r0, [pc, #36]	; (8003c88 <ProbeScope_SampleChAll+0x54>)
 8003c64:	f000 f812 	bl	8003c8c <ProbeScope_SampleCh>
#endif                     
}
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	200002d0 	.word	0x200002d0
 8003c70:	20001288 	.word	0x20001288
 8003c74:	20002240 	.word	0x20002240
 8003c78:	200031f8 	.word	0x200031f8
 8003c7c:	200041b0 	.word	0x200041b0
 8003c80:	20005168 	.word	0x20005168
 8003c84:	20006120 	.word	0x20006120
 8003c88:	200070d8 	.word	0x200070d8

08003c8c <ProbeScope_SampleCh>:
* Returns    : none
************************************************************************************************************************
*/

static  void  ProbeScope_SampleCh (PROBE_SCOPE_CH  *p_ch)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
    PROBE_SCOPE_CH_SAMPLE   msk;                                    // Mask used to select desired bit when in bit mode.
    PROBE_SCOPE_CH_SAMPLE  *p_sample;                               // Pointer to where the sample will be stored


    if (p_ch->En == 1) {
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	f040 80eb 	bne.w	8003e74 <ProbeScope_SampleCh+0x1e8>
        p_sample = &p_ch->Samples[ProbeScope_SampleIxCur];          // Point to current position in sampling buffer
 8003c9e:	4b78      	ldr	r3, [pc, #480]	; (8003e80 <ProbeScope_SampleCh+0x1f4>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	3306      	adds	r3, #6
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	4413      	add	r3, r2
 8003caa:	60fb      	str	r3, [r7, #12]
        switch (p_ch->DataType) {
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	791b      	ldrb	r3, [r3, #4]
 8003cb0:	2b06      	cmp	r3, #6
 8003cb2:	f200 80df 	bhi.w	8003e74 <ProbeScope_SampleCh+0x1e8>
 8003cb6:	a201      	add	r2, pc, #4	; (adr r2, 8003cbc <ProbeScope_SampleCh+0x30>)
 8003cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cbc:	08003cd9 	.word	0x08003cd9
 8003cc0:	08003d1d 	.word	0x08003d1d
 8003cc4:	08003d61 	.word	0x08003d61
 8003cc8:	08003da5 	.word	0x08003da5
 8003ccc:	08003de9 	.word	0x08003de9
 8003cd0:	08003e29 	.word	0x08003e29
 8003cd4:	08003e69 	.word	0x08003e69
            case PROBE_SCOPE_INT08U:
                 if (p_ch->BitEn == 0) {
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d105      	bne.n	8003cec <ProbeScope_SampleCh+0x60>
                     p_sample->Val08U     = *(CPU_INT08U *)p_ch->DataAddr;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	781a      	ldrb	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	701a      	strb	r2, [r3, #0]
 8003cea:	e016      	b.n	8003d1a <ProbeScope_SampleCh+0x8e>
                 } else {
                     msk.Val08U           =  (CPU_INT08U)1 << p_ch->BitSel;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	7b1b      	ldrb	r3, [r3, #12]
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	4093      	lsls	r3, r2
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	723b      	strb	r3, [r7, #8]
                     if (*(CPU_INT08U *)p_ch->DataAddr & msk.Val08U) {
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	781a      	ldrb	r2, [r3, #0]
 8003d00:	7a3b      	ldrb	r3, [r7, #8]
 8003d02:	4013      	ands	r3, r2
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d003      	beq.n	8003d12 <ProbeScope_SampleCh+0x86>
                         p_sample->Val08U = 1;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	701a      	strb	r2, [r3, #0]
 8003d10:	e003      	b.n	8003d1a <ProbeScope_SampleCh+0x8e>
                     } else {
                         p_sample->Val08U = 0;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	701a      	strb	r2, [r3, #0]
                     }
                 }
                 break;
 8003d18:	e0ac      	b.n	8003e74 <ProbeScope_SampleCh+0x1e8>
 8003d1a:	e0ab      	b.n	8003e74 <ProbeScope_SampleCh+0x1e8>
                                  
            case PROBE_SCOPE_INT08S:
                 if (p_ch->BitEn == 0) {
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d105      	bne.n	8003d30 <ProbeScope_SampleCh+0xa4>
                     p_sample->Val08S     = *(CPU_INT08S *)p_ch->DataAddr;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	781a      	ldrb	r2, [r3, #0]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	701a      	strb	r2, [r3, #0]
 8003d2e:	e016      	b.n	8003d5e <ProbeScope_SampleCh+0xd2>
                 } else {
                     msk.Val08S           =  (CPU_INT08S)1 << p_ch->BitSel;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	7b1b      	ldrb	r3, [r3, #12]
 8003d34:	461a      	mov	r2, r3
 8003d36:	2301      	movs	r3, #1
 8003d38:	4093      	lsls	r3, r2
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	723b      	strb	r3, [r7, #8]
                     if (*(CPU_INT08S *)p_ch->DataAddr & msk.Val08S) {
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	781a      	ldrb	r2, [r3, #0]
 8003d44:	7a3b      	ldrb	r3, [r7, #8]
 8003d46:	4013      	ands	r3, r2
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d003      	beq.n	8003d56 <ProbeScope_SampleCh+0xca>
                         p_sample->Val08S = 1;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2201      	movs	r2, #1
 8003d52:	701a      	strb	r2, [r3, #0]
 8003d54:	e003      	b.n	8003d5e <ProbeScope_SampleCh+0xd2>
                     } else {
                         p_sample->Val08S = 0;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	701a      	strb	r2, [r3, #0]
                     }
                 }
                 break;
 8003d5c:	e08a      	b.n	8003e74 <ProbeScope_SampleCh+0x1e8>
 8003d5e:	e089      	b.n	8003e74 <ProbeScope_SampleCh+0x1e8>
                                  
#if PROBE_SCOPE_16_BIT_EN > 0                                   
            case PROBE_SCOPE_INT16U:
                 if (p_ch->BitEn == 0) {
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d105      	bne.n	8003d74 <ProbeScope_SampleCh+0xe8>
                     p_sample->Val16U     = *(CPU_INT16U *)p_ch->DataAddr;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	881a      	ldrh	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	801a      	strh	r2, [r3, #0]
 8003d72:	e016      	b.n	8003da2 <ProbeScope_SampleCh+0x116>
                 } else {
                     msk.Val16U           =  (CPU_INT16U)1 << p_ch->BitSel;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	7b1b      	ldrb	r3, [r3, #12]
 8003d78:	461a      	mov	r2, r3
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	4093      	lsls	r3, r2
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	813b      	strh	r3, [r7, #8]
                     if (*(CPU_INT16U *)p_ch->DataAddr & msk.Val16U) {
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	881a      	ldrh	r2, [r3, #0]
 8003d88:	893b      	ldrh	r3, [r7, #8]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d003      	beq.n	8003d9a <ProbeScope_SampleCh+0x10e>
                         p_sample->Val16U = 1;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2201      	movs	r2, #1
 8003d96:	801a      	strh	r2, [r3, #0]
 8003d98:	e003      	b.n	8003da2 <ProbeScope_SampleCh+0x116>
                     } else {
                         p_sample->Val16U = 0;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	801a      	strh	r2, [r3, #0]
                     }
                 }
                 break;
 8003da0:	e068      	b.n	8003e74 <ProbeScope_SampleCh+0x1e8>
 8003da2:	e067      	b.n	8003e74 <ProbeScope_SampleCh+0x1e8>
                                  
            case PROBE_SCOPE_INT16S:
                 if (p_ch->BitEn == 0) {
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d105      	bne.n	8003db8 <ProbeScope_SampleCh+0x12c>
                     p_sample->Val16S     = *(CPU_INT16S *)p_ch->DataAddr;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	881a      	ldrh	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	801a      	strh	r2, [r3, #0]
 8003db6:	e016      	b.n	8003de6 <ProbeScope_SampleCh+0x15a>
                 } else {
                     msk.Val16S           =  (CPU_INT16S)1 << p_ch->BitSel;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	7b1b      	ldrb	r3, [r3, #12]
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	4093      	lsls	r3, r2
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	813b      	strh	r3, [r7, #8]
                     if (*(CPU_INT16S *)p_ch->DataAddr & msk.Val16S) {
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	881a      	ldrh	r2, [r3, #0]
 8003dcc:	893b      	ldrh	r3, [r7, #8]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <ProbeScope_SampleCh+0x152>
                         p_sample->Val16S = 1;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	801a      	strh	r2, [r3, #0]
 8003ddc:	e003      	b.n	8003de6 <ProbeScope_SampleCh+0x15a>
                     } else {
                         p_sample->Val16S = 0;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	801a      	strh	r2, [r3, #0]
                     }
                 }
                 break;
 8003de4:	e046      	b.n	8003e74 <ProbeScope_SampleCh+0x1e8>
 8003de6:	e045      	b.n	8003e74 <ProbeScope_SampleCh+0x1e8>
#endif

#if PROBE_SCOPE_32_BIT_EN > 0                                   
            case PROBE_SCOPE_INT32U:
                 if (p_ch->BitEn == 0) {
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d105      	bne.n	8003dfc <ProbeScope_SampleCh+0x170>
                     p_sample->Val32U     = *(CPU_INT32U *)p_ch->DataAddr;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	601a      	str	r2, [r3, #0]
 8003dfa:	e014      	b.n	8003e26 <ProbeScope_SampleCh+0x19a>
                 } else {
                     msk.Val32U           =  (CPU_INT32U)1 << p_ch->BitSel;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	7b1b      	ldrb	r3, [r3, #12]
 8003e00:	461a      	mov	r2, r3
 8003e02:	2301      	movs	r3, #1
 8003e04:	4093      	lsls	r3, r2
 8003e06:	60bb      	str	r3, [r7, #8]
                     if (*(CPU_INT32U *)p_ch->DataAddr & msk.Val32U) {
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	4013      	ands	r3, r2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d003      	beq.n	8003e1e <ProbeScope_SampleCh+0x192>
                         p_sample->Val32U = 1;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	e003      	b.n	8003e26 <ProbeScope_SampleCh+0x19a>
                     } else {
                         p_sample->Val32U = 0;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	601a      	str	r2, [r3, #0]
                     }
                 }
                 break;
 8003e24:	e026      	b.n	8003e74 <ProbeScope_SampleCh+0x1e8>
 8003e26:	e025      	b.n	8003e74 <ProbeScope_SampleCh+0x1e8>
                                  
            case PROBE_SCOPE_INT32S:
                 if (p_ch->BitEn == 0) {
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d105      	bne.n	8003e3c <ProbeScope_SampleCh+0x1b0>
                     p_sample->Val32S     = *(CPU_INT32S *)p_ch->DataAddr;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	e014      	b.n	8003e66 <ProbeScope_SampleCh+0x1da>
                 } else {
                     msk.Val32S           =  (CPU_INT32S)1 << p_ch->BitSel;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	7b1b      	ldrb	r3, [r3, #12]
 8003e40:	461a      	mov	r2, r3
 8003e42:	2301      	movs	r3, #1
 8003e44:	4093      	lsls	r3, r2
 8003e46:	60bb      	str	r3, [r7, #8]
                     if (*(CPU_INT32S *)p_ch->DataAddr & msk.Val32S) {
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	4013      	ands	r3, r2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <ProbeScope_SampleCh+0x1d2>
                         p_sample->Val32S = 1;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	601a      	str	r2, [r3, #0]
 8003e5c:	e003      	b.n	8003e66 <ProbeScope_SampleCh+0x1da>
                     } else {
                         p_sample->Val32S = 0;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	601a      	str	r2, [r3, #0]
                     }
                 }
                 break;
 8003e64:	e006      	b.n	8003e74 <ProbeScope_SampleCh+0x1e8>
 8003e66:	e005      	b.n	8003e74 <ProbeScope_SampleCh+0x1e8>
                                  
            case PROBE_SCOPE_FP32:
                 p_sample->ValFP32  = *(CPU_FP32   *)p_ch->DataAddr;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	601a      	str	r2, [r3, #0]
                 break;
 8003e72:	bf00      	nop
#endif
        }                          
    }
}
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	200080a0 	.word	0x200080a0

08003e84 <ProbeScope_SamplePosNext>:
* Returns    : none
************************************************************************************************************************
*/

static  void  ProbeScope_SamplePosNext (void)
{
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
    ProbeScope_SampleIxPrev = ProbeScope_SampleIxCur;              // Update the position of the previous sample
 8003e88:	4b0a      	ldr	r3, [pc, #40]	; (8003eb4 <ProbeScope_SamplePosNext+0x30>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a0a      	ldr	r2, [pc, #40]	; (8003eb8 <ProbeScope_SamplePosNext+0x34>)
 8003e8e:	6013      	str	r3, [r2, #0]
    ProbeScope_SampleIxCur++;                                      // Position to where next sample will be placed
 8003e90:	4b08      	ldr	r3, [pc, #32]	; (8003eb4 <ProbeScope_SamplePosNext+0x30>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	3301      	adds	r3, #1
 8003e96:	4a07      	ldr	r2, [pc, #28]	; (8003eb4 <ProbeScope_SamplePosNext+0x30>)
 8003e98:	6013      	str	r3, [r2, #0]
    if (ProbeScope_SampleIxCur >= PROBE_SCOPE_MAX_SAMPLES) {       // See if we need to wrap around
 8003e9a:	4b06      	ldr	r3, [pc, #24]	; (8003eb4 <ProbeScope_SamplePosNext+0x30>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ea2:	d302      	bcc.n	8003eaa <ProbeScope_SamplePosNext+0x26>
        ProbeScope_SampleIxCur = 0;                                // yes
 8003ea4:	4b03      	ldr	r3, [pc, #12]	; (8003eb4 <ProbeScope_SamplePosNext+0x30>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	601a      	str	r2, [r3, #0]
    }
}
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	200080a0 	.word	0x200080a0
 8003eb8:	2000809c 	.word	0x2000809c

08003ebc <ProbeScope_IsTrig>:
*              Sets ProbeScope_TrigFlag to 0 when no trigger is detected
************************************************************************************************************************
*/

static  void  ProbeScope_IsTrig (void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
    PROBE_SCOPE_CH          *p_ch;
    PROBE_SCOPE_CH_SAMPLE   *p_sample_prev;
    PROBE_SCOPE_CH_SAMPLE   *p_sample_cur;
    

    switch (ProbeScope_TrigChSel) {
 8003ec2:	4b90      	ldr	r3, [pc, #576]	; (8004104 <ProbeScope_IsTrig+0x248>)
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	2b07      	cmp	r3, #7
 8003eca:	d82b      	bhi.n	8003f24 <ProbeScope_IsTrig+0x68>
 8003ecc:	a201      	add	r2, pc, #4	; (adr r2, 8003ed4 <ProbeScope_IsTrig+0x18>)
 8003ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed2:	bf00      	nop
 8003ed4:	08003ef5 	.word	0x08003ef5
 8003ed8:	08003efb 	.word	0x08003efb
 8003edc:	08003f01 	.word	0x08003f01
 8003ee0:	08003f07 	.word	0x08003f07
 8003ee4:	08003f0d 	.word	0x08003f0d
 8003ee8:	08003f13 	.word	0x08003f13
 8003eec:	08003f19 	.word	0x08003f19
 8003ef0:	08003f1f 	.word	0x08003f1f
        case PROBE_SCOPE_CH1:
             p_ch = &ProbeScope_Ch1;
 8003ef4:	4b84      	ldr	r3, [pc, #528]	; (8004108 <ProbeScope_IsTrig+0x24c>)
 8003ef6:	60fb      	str	r3, [r7, #12]
             break;
 8003ef8:	e01a      	b.n	8003f30 <ProbeScope_IsTrig+0x74>
             
#if PROBE_SCOPE_MAX_CH >= 2
        case PROBE_SCOPE_CH2:
             p_ch = &ProbeScope_Ch2;
 8003efa:	4b84      	ldr	r3, [pc, #528]	; (800410c <ProbeScope_IsTrig+0x250>)
 8003efc:	60fb      	str	r3, [r7, #12]
             break;
 8003efe:	e017      	b.n	8003f30 <ProbeScope_IsTrig+0x74>
#endif
             
#if PROBE_SCOPE_MAX_CH >= 3
        case PROBE_SCOPE_CH3:
             p_ch = &ProbeScope_Ch3;
 8003f00:	4b83      	ldr	r3, [pc, #524]	; (8004110 <ProbeScope_IsTrig+0x254>)
 8003f02:	60fb      	str	r3, [r7, #12]
             break;
 8003f04:	e014      	b.n	8003f30 <ProbeScope_IsTrig+0x74>
#endif             
             
#if PROBE_SCOPE_MAX_CH >= 4
        case PROBE_SCOPE_CH4:
             p_ch = &ProbeScope_Ch4;
 8003f06:	4b83      	ldr	r3, [pc, #524]	; (8004114 <ProbeScope_IsTrig+0x258>)
 8003f08:	60fb      	str	r3, [r7, #12]
             break;
 8003f0a:	e011      	b.n	8003f30 <ProbeScope_IsTrig+0x74>
#endif
             
#if PROBE_SCOPE_MAX_CH >= 5
        case PROBE_SCOPE_CH5:
             p_ch = &ProbeScope_Ch5;
 8003f0c:	4b82      	ldr	r3, [pc, #520]	; (8004118 <ProbeScope_IsTrig+0x25c>)
 8003f0e:	60fb      	str	r3, [r7, #12]
             break;
 8003f10:	e00e      	b.n	8003f30 <ProbeScope_IsTrig+0x74>
#endif
             
#if PROBE_SCOPE_MAX_CH >= 6
        case PROBE_SCOPE_CH6:
             p_ch = &ProbeScope_Ch6;
 8003f12:	4b82      	ldr	r3, [pc, #520]	; (800411c <ProbeScope_IsTrig+0x260>)
 8003f14:	60fb      	str	r3, [r7, #12]
             break;
 8003f16:	e00b      	b.n	8003f30 <ProbeScope_IsTrig+0x74>
#endif             
             
#if PROBE_SCOPE_MAX_CH >= 7
        case PROBE_SCOPE_CH7:
             p_ch = &ProbeScope_Ch7;
 8003f18:	4b81      	ldr	r3, [pc, #516]	; (8004120 <ProbeScope_IsTrig+0x264>)
 8003f1a:	60fb      	str	r3, [r7, #12]
             break;
 8003f1c:	e008      	b.n	8003f30 <ProbeScope_IsTrig+0x74>
#endif
             
#if PROBE_SCOPE_MAX_CH >= 8
        case PROBE_SCOPE_CH8:
             p_ch = &ProbeScope_Ch8;
 8003f1e:	4b81      	ldr	r3, [pc, #516]	; (8004124 <ProbeScope_IsTrig+0x268>)
 8003f20:	60fb      	str	r3, [r7, #12]
             break;
 8003f22:	e005      	b.n	8003f30 <ProbeScope_IsTrig+0x74>
#endif
             
        default:
             p_ch                 = &ProbeScope_Ch1;
 8003f24:	4b78      	ldr	r3, [pc, #480]	; (8004108 <ProbeScope_IsTrig+0x24c>)
 8003f26:	60fb      	str	r3, [r7, #12]
             ProbeScope_TrigChSel = PROBE_SCOPE_CH1;
 8003f28:	4b76      	ldr	r3, [pc, #472]	; (8004104 <ProbeScope_IsTrig+0x248>)
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	701a      	strb	r2, [r3, #0]
             break;
 8003f2e:	bf00      	nop
    }         
    ProbeScope_TrigFlag = 0;
 8003f30:	4b7d      	ldr	r3, [pc, #500]	; (8004128 <ProbeScope_IsTrig+0x26c>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	601a      	str	r2, [r3, #0]
    if (p_ch->En == 1) {
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	f040 8308 	bne.w	8004550 <ProbeScope_IsTrig+0x694>
        p_sample_prev = &p_ch->Samples[ProbeScope_SampleIxPrev];          // Point to previous position in sampling buffer
 8003f40:	4b7a      	ldr	r3, [pc, #488]	; (800412c <ProbeScope_IsTrig+0x270>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	3306      	adds	r3, #6
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	60bb      	str	r3, [r7, #8]
        p_sample_cur  = &p_ch->Samples[ProbeScope_SampleIxCur];           // Point to current  position in sampling buffer
 8003f4e:	4b78      	ldr	r3, [pc, #480]	; (8004130 <ProbeScope_IsTrig+0x274>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	3306      	adds	r3, #6
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	4413      	add	r3, r2
 8003f5a:	607b      	str	r3, [r7, #4]
        if (ProbeScope_TrigSlope == PROBE_SCOPE_TRIG_POS) {
 8003f5c:	4b75      	ldr	r3, [pc, #468]	; (8004134 <ProbeScope_IsTrig+0x278>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	f040 8187 	bne.w	8004274 <ProbeScope_IsTrig+0x3b8>
            switch (p_ch->DataType) {
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	791b      	ldrb	r3, [r3, #4]
 8003f6a:	2b06      	cmp	r3, #6
 8003f6c:	f200 82f0 	bhi.w	8004550 <ProbeScope_IsTrig+0x694>
 8003f70:	a201      	add	r2, pc, #4	; (adr r2, 8003f78 <ProbeScope_IsTrig+0xbc>)
 8003f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f76:	bf00      	nop
 8003f78:	08003f95 	.word	0x08003f95
 8003f7c:	08003ff3 	.word	0x08003ff3
 8003f80:	0800405d 	.word	0x0800405d
 8003f84:	080040bb 	.word	0x080040bb
 8003f88:	0800415f 	.word	0x0800415f
 8003f8c:	080041bd 	.word	0x080041bd
 8003f90:	0800421b 	.word	0x0800421b
                case PROBE_SCOPE_INT08U:
                     if (p_ch->BitEn == 0) {
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d119      	bne.n	8003fd0 <ProbeScope_IsTrig+0x114>
                         if (p_sample_prev->Val08U < p_sample_cur->Val08U) {
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	781a      	ldrb	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d223      	bcs.n	8003ff0 <ProbeScope_IsTrig+0x134>
                             if (p_sample_prev->Val08U <= p_ch->TrigLevel.Val08U) {
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	781a      	ldrb	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	7d1b      	ldrb	r3, [r3, #20]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d81d      	bhi.n	8003ff0 <ProbeScope_IsTrig+0x134>
                                 if (p_sample_cur->Val08U >= p_ch->TrigLevel.Val08U) {
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	781a      	ldrb	r2, [r3, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	7d1b      	ldrb	r3, [r3, #20]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d317      	bcc.n	8003ff0 <ProbeScope_IsTrig+0x134>
                                     ProbeScope_TrigFlag = 1;
 8003fc0:	4b59      	ldr	r3, [pc, #356]	; (8004128 <ProbeScope_IsTrig+0x26c>)
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8003fc6:	4b5a      	ldr	r3, [pc, #360]	; (8004130 <ProbeScope_IsTrig+0x274>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a5b      	ldr	r2, [pc, #364]	; (8004138 <ProbeScope_IsTrig+0x27c>)
 8003fcc:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8003fce:	e150      	b.n	8004272 <ProbeScope_IsTrig+0x3b6>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val08U == 0) {
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10b      	bne.n	8003ff0 <ProbeScope_IsTrig+0x134>
                             if (p_sample_cur->Val08U != 0) { 
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d007      	beq.n	8003ff0 <ProbeScope_IsTrig+0x134>
                                 ProbeScope_TrigFlag = 1;
 8003fe0:	4b51      	ldr	r3, [pc, #324]	; (8004128 <ProbeScope_IsTrig+0x26c>)
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8003fe6:	4b52      	ldr	r3, [pc, #328]	; (8004130 <ProbeScope_IsTrig+0x274>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a53      	ldr	r2, [pc, #332]	; (8004138 <ProbeScope_IsTrig+0x27c>)
 8003fec:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8003fee:	e140      	b.n	8004272 <ProbeScope_IsTrig+0x3b6>
 8003ff0:	e13f      	b.n	8004272 <ProbeScope_IsTrig+0x3b6>
                     
                case PROBE_SCOPE_INT08S:
                     if (p_ch->BitEn == 0) {
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d11f      	bne.n	800403a <ProbeScope_IsTrig+0x17e>
                         if (p_sample_prev->Val08S < p_sample_cur->Val08S) {
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	781a      	ldrb	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	b252      	sxtb	r2, r2
 8004004:	b25b      	sxtb	r3, r3
 8004006:	429a      	cmp	r2, r3
 8004008:	da27      	bge.n	800405a <ProbeScope_IsTrig+0x19e>
                             if (p_sample_prev->Val08S <= p_ch->TrigLevel.Val08S) {
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	781a      	ldrb	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	7d1b      	ldrb	r3, [r3, #20]
 8004012:	b252      	sxtb	r2, r2
 8004014:	b25b      	sxtb	r3, r3
 8004016:	429a      	cmp	r2, r3
 8004018:	dc1f      	bgt.n	800405a <ProbeScope_IsTrig+0x19e>
                                 if (p_sample_cur->Val08S >= p_ch->TrigLevel.Val08S) {
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	781a      	ldrb	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	7d1b      	ldrb	r3, [r3, #20]
 8004022:	b252      	sxtb	r2, r2
 8004024:	b25b      	sxtb	r3, r3
 8004026:	429a      	cmp	r2, r3
 8004028:	db17      	blt.n	800405a <ProbeScope_IsTrig+0x19e>
                                     ProbeScope_TrigFlag = 1;
 800402a:	4b3f      	ldr	r3, [pc, #252]	; (8004128 <ProbeScope_IsTrig+0x26c>)
 800402c:	2201      	movs	r2, #1
 800402e:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8004030:	4b3f      	ldr	r3, [pc, #252]	; (8004130 <ProbeScope_IsTrig+0x274>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a40      	ldr	r2, [pc, #256]	; (8004138 <ProbeScope_IsTrig+0x27c>)
 8004036:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8004038:	e11b      	b.n	8004272 <ProbeScope_IsTrig+0x3b6>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val08S == 0) {
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10b      	bne.n	800405a <ProbeScope_IsTrig+0x19e>
                             if (p_sample_cur->Val08S != 0) { 
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d007      	beq.n	800405a <ProbeScope_IsTrig+0x19e>
                                 ProbeScope_TrigFlag = 1;
 800404a:	4b37      	ldr	r3, [pc, #220]	; (8004128 <ProbeScope_IsTrig+0x26c>)
 800404c:	2201      	movs	r2, #1
 800404e:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8004050:	4b37      	ldr	r3, [pc, #220]	; (8004130 <ProbeScope_IsTrig+0x274>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a38      	ldr	r2, [pc, #224]	; (8004138 <ProbeScope_IsTrig+0x27c>)
 8004056:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8004058:	e10b      	b.n	8004272 <ProbeScope_IsTrig+0x3b6>
 800405a:	e10a      	b.n	8004272 <ProbeScope_IsTrig+0x3b6>

#if PROBE_SCOPE_16_BIT_EN > 0                                    
                case PROBE_SCOPE_INT16U:
                     if (p_ch->BitEn == 0) {
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d119      	bne.n	8004098 <ProbeScope_IsTrig+0x1dc>
                         if (p_sample_prev->Val16U < p_sample_cur->Val16U) {
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	881a      	ldrh	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	881b      	ldrh	r3, [r3, #0]
 800406c:	429a      	cmp	r2, r3
 800406e:	d223      	bcs.n	80040b8 <ProbeScope_IsTrig+0x1fc>
                             if (p_sample_prev->Val16U <= p_ch->TrigLevel.Val16U) {
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	881a      	ldrh	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8a9b      	ldrh	r3, [r3, #20]
 8004078:	429a      	cmp	r2, r3
 800407a:	d81d      	bhi.n	80040b8 <ProbeScope_IsTrig+0x1fc>
                                 if (p_sample_cur->Val16U >= p_ch->TrigLevel.Val16U) {
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	881a      	ldrh	r2, [r3, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8a9b      	ldrh	r3, [r3, #20]
 8004084:	429a      	cmp	r2, r3
 8004086:	d317      	bcc.n	80040b8 <ProbeScope_IsTrig+0x1fc>
                                     ProbeScope_TrigFlag = 1;
 8004088:	4b27      	ldr	r3, [pc, #156]	; (8004128 <ProbeScope_IsTrig+0x26c>)
 800408a:	2201      	movs	r2, #1
 800408c:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 800408e:	4b28      	ldr	r3, [pc, #160]	; (8004130 <ProbeScope_IsTrig+0x274>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a29      	ldr	r2, [pc, #164]	; (8004138 <ProbeScope_IsTrig+0x27c>)
 8004094:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8004096:	e0ec      	b.n	8004272 <ProbeScope_IsTrig+0x3b6>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val16U == 0) {
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	881b      	ldrh	r3, [r3, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10b      	bne.n	80040b8 <ProbeScope_IsTrig+0x1fc>
                             if (p_sample_cur->Val16U != 0) { 
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	881b      	ldrh	r3, [r3, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d007      	beq.n	80040b8 <ProbeScope_IsTrig+0x1fc>
                                 ProbeScope_TrigFlag = 1;
 80040a8:	4b1f      	ldr	r3, [pc, #124]	; (8004128 <ProbeScope_IsTrig+0x26c>)
 80040aa:	2201      	movs	r2, #1
 80040ac:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 80040ae:	4b20      	ldr	r3, [pc, #128]	; (8004130 <ProbeScope_IsTrig+0x274>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a21      	ldr	r2, [pc, #132]	; (8004138 <ProbeScope_IsTrig+0x27c>)
 80040b4:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 80040b6:	e0dc      	b.n	8004272 <ProbeScope_IsTrig+0x3b6>
 80040b8:	e0db      	b.n	8004272 <ProbeScope_IsTrig+0x3b6>
                     
                case PROBE_SCOPE_INT16S:
                     if (p_ch->BitEn == 0) {
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d13c      	bne.n	800413c <ProbeScope_IsTrig+0x280>
                         if (p_sample_prev->Val16S < p_sample_cur->Val16S) {
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	881a      	ldrh	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	881b      	ldrh	r3, [r3, #0]
 80040ca:	b212      	sxth	r2, r2
 80040cc:	b21b      	sxth	r3, r3
 80040ce:	429a      	cmp	r2, r3
 80040d0:	da44      	bge.n	800415c <ProbeScope_IsTrig+0x2a0>
                             if (p_sample_prev->Val16S <= p_ch->TrigLevel.Val16S) {
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	881a      	ldrh	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8a9b      	ldrh	r3, [r3, #20]
 80040da:	b212      	sxth	r2, r2
 80040dc:	b21b      	sxth	r3, r3
 80040de:	429a      	cmp	r2, r3
 80040e0:	dc3c      	bgt.n	800415c <ProbeScope_IsTrig+0x2a0>
                                 if (p_sample_cur->Val16S >= p_ch->TrigLevel.Val16S) {
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	881a      	ldrh	r2, [r3, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8a9b      	ldrh	r3, [r3, #20]
 80040ea:	b212      	sxth	r2, r2
 80040ec:	b21b      	sxth	r3, r3
 80040ee:	429a      	cmp	r2, r3
 80040f0:	db34      	blt.n	800415c <ProbeScope_IsTrig+0x2a0>
                                     ProbeScope_TrigFlag = 1;
 80040f2:	4b0d      	ldr	r3, [pc, #52]	; (8004128 <ProbeScope_IsTrig+0x26c>)
 80040f4:	2201      	movs	r2, #1
 80040f6:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 80040f8:	4b0d      	ldr	r3, [pc, #52]	; (8004130 <ProbeScope_IsTrig+0x274>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a0e      	ldr	r2, [pc, #56]	; (8004138 <ProbeScope_IsTrig+0x27c>)
 80040fe:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8004100:	e0b7      	b.n	8004272 <ProbeScope_IsTrig+0x3b6>
 8004102:	bf00      	nop
 8004104:	20008091 	.word	0x20008091
 8004108:	200002d0 	.word	0x200002d0
 800410c:	20001288 	.word	0x20001288
 8004110:	20002240 	.word	0x20002240
 8004114:	200031f8 	.word	0x200031f8
 8004118:	200041b0 	.word	0x200041b0
 800411c:	20005168 	.word	0x20005168
 8004120:	20006120 	.word	0x20006120
 8004124:	200070d8 	.word	0x200070d8
 8004128:	200080f0 	.word	0x200080f0
 800412c:	2000809c 	.word	0x2000809c
 8004130:	200080a0 	.word	0x200080a0
 8004134:	20008098 	.word	0x20008098
 8004138:	200080f8 	.word	0x200080f8
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val16S == 0) {
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	881b      	ldrh	r3, [r3, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10b      	bne.n	800415c <ProbeScope_IsTrig+0x2a0>
                             if (p_sample_cur->Val16S != 0) { 
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	881b      	ldrh	r3, [r3, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d007      	beq.n	800415c <ProbeScope_IsTrig+0x2a0>
                                 ProbeScope_TrigFlag = 1;
 800414c:	4b86      	ldr	r3, [pc, #536]	; (8004368 <ProbeScope_IsTrig+0x4ac>)
 800414e:	2201      	movs	r2, #1
 8004150:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8004152:	4b86      	ldr	r3, [pc, #536]	; (800436c <ProbeScope_IsTrig+0x4b0>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a86      	ldr	r2, [pc, #536]	; (8004370 <ProbeScope_IsTrig+0x4b4>)
 8004158:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 800415a:	e08a      	b.n	8004272 <ProbeScope_IsTrig+0x3b6>
 800415c:	e089      	b.n	8004272 <ProbeScope_IsTrig+0x3b6>
#endif

#if PROBE_SCOPE_32_BIT_EN > 0                                   
                case PROBE_SCOPE_INT32U:
                     if (p_ch->BitEn == 0) {
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d119      	bne.n	800419a <ProbeScope_IsTrig+0x2de>
                         if (p_sample_prev->Val32U < p_sample_cur->Val32U) {
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	429a      	cmp	r2, r3
 8004170:	d223      	bcs.n	80041ba <ProbeScope_IsTrig+0x2fe>
                             if (p_sample_prev->Val32U <= p_ch->TrigLevel.Val32U) {
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	429a      	cmp	r2, r3
 800417c:	d81d      	bhi.n	80041ba <ProbeScope_IsTrig+0x2fe>
                                 if (p_sample_cur->Val32U >= p_ch->TrigLevel.Val32U) {
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	429a      	cmp	r2, r3
 8004188:	d317      	bcc.n	80041ba <ProbeScope_IsTrig+0x2fe>
                                     ProbeScope_TrigFlag = 1;
 800418a:	4b77      	ldr	r3, [pc, #476]	; (8004368 <ProbeScope_IsTrig+0x4ac>)
 800418c:	2201      	movs	r2, #1
 800418e:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8004190:	4b76      	ldr	r3, [pc, #472]	; (800436c <ProbeScope_IsTrig+0x4b0>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a76      	ldr	r2, [pc, #472]	; (8004370 <ProbeScope_IsTrig+0x4b4>)
 8004196:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8004198:	e06b      	b.n	8004272 <ProbeScope_IsTrig+0x3b6>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val32U == 0) {
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10b      	bne.n	80041ba <ProbeScope_IsTrig+0x2fe>
                             if (p_sample_cur->Val32U != 0) {
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d007      	beq.n	80041ba <ProbeScope_IsTrig+0x2fe>
                                 ProbeScope_TrigFlag = 1;
 80041aa:	4b6f      	ldr	r3, [pc, #444]	; (8004368 <ProbeScope_IsTrig+0x4ac>)
 80041ac:	2201      	movs	r2, #1
 80041ae:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 80041b0:	4b6e      	ldr	r3, [pc, #440]	; (800436c <ProbeScope_IsTrig+0x4b0>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a6e      	ldr	r2, [pc, #440]	; (8004370 <ProbeScope_IsTrig+0x4b4>)
 80041b6:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 80041b8:	e05b      	b.n	8004272 <ProbeScope_IsTrig+0x3b6>
 80041ba:	e05a      	b.n	8004272 <ProbeScope_IsTrig+0x3b6>
                     
                case PROBE_SCOPE_INT32S:
                     if (p_ch->BitEn == 0) {
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d119      	bne.n	80041f8 <ProbeScope_IsTrig+0x33c>
                         if (p_sample_prev->Val32S < p_sample_cur->Val32S) {
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	da23      	bge.n	8004218 <ProbeScope_IsTrig+0x35c>
                             if (p_sample_prev->Val32S <= p_ch->TrigLevel.Val32S) {
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	695b      	ldr	r3, [r3, #20]
 80041d8:	429a      	cmp	r2, r3
 80041da:	dc1d      	bgt.n	8004218 <ProbeScope_IsTrig+0x35c>
                                 if (p_sample_cur->Val32S >= p_ch->TrigLevel.Val32S) {
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	db17      	blt.n	8004218 <ProbeScope_IsTrig+0x35c>
                                     ProbeScope_TrigFlag = 1;
 80041e8:	4b5f      	ldr	r3, [pc, #380]	; (8004368 <ProbeScope_IsTrig+0x4ac>)
 80041ea:	2201      	movs	r2, #1
 80041ec:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 80041ee:	4b5f      	ldr	r3, [pc, #380]	; (800436c <ProbeScope_IsTrig+0x4b0>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a5f      	ldr	r2, [pc, #380]	; (8004370 <ProbeScope_IsTrig+0x4b4>)
 80041f4:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 80041f6:	e03c      	b.n	8004272 <ProbeScope_IsTrig+0x3b6>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val32S == 0) {
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10b      	bne.n	8004218 <ProbeScope_IsTrig+0x35c>
                             if (p_sample_cur->Val32S != 0) {
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d007      	beq.n	8004218 <ProbeScope_IsTrig+0x35c>
                                 ProbeScope_TrigFlag = 1;
 8004208:	4b57      	ldr	r3, [pc, #348]	; (8004368 <ProbeScope_IsTrig+0x4ac>)
 800420a:	2201      	movs	r2, #1
 800420c:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 800420e:	4b57      	ldr	r3, [pc, #348]	; (800436c <ProbeScope_IsTrig+0x4b0>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a57      	ldr	r2, [pc, #348]	; (8004370 <ProbeScope_IsTrig+0x4b4>)
 8004214:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8004216:	e02c      	b.n	8004272 <ProbeScope_IsTrig+0x3b6>
 8004218:	e02b      	b.n	8004272 <ProbeScope_IsTrig+0x3b6>
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 < p_sample_cur->ValFP32) {
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	ed93 7a00 	vldr	s14, [r3]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	edd3 7a00 	vldr	s15, [r3]
 8004226:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800422a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800422e:	d400      	bmi.n	8004232 <ProbeScope_IsTrig+0x376>
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8004230:	e01e      	b.n	8004270 <ProbeScope_IsTrig+0x3b4>
                     }
                     break;
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 < p_sample_cur->ValFP32) {
                         if (p_sample_prev->ValFP32 <= p_ch->TrigLevel.ValFP32) {
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	ed93 7a00 	vldr	s14, [r3]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	edd3 7a05 	vldr	s15, [r3, #20]
 800423e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004246:	d900      	bls.n	800424a <ProbeScope_IsTrig+0x38e>
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8004248:	e012      	b.n	8004270 <ProbeScope_IsTrig+0x3b4>
                     break;
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 < p_sample_cur->ValFP32) {
                         if (p_sample_prev->ValFP32 <= p_ch->TrigLevel.ValFP32) {
                             if (p_sample_cur->ValFP32 >= p_ch->TrigLevel.ValFP32) {
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	ed93 7a00 	vldr	s14, [r3]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	edd3 7a05 	vldr	s15, [r3, #20]
 8004256:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800425a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800425e:	da00      	bge.n	8004262 <ProbeScope_IsTrig+0x3a6>
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8004260:	e006      	b.n	8004270 <ProbeScope_IsTrig+0x3b4>
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 < p_sample_cur->ValFP32) {
                         if (p_sample_prev->ValFP32 <= p_ch->TrigLevel.ValFP32) {
                             if (p_sample_cur->ValFP32 >= p_ch->TrigLevel.ValFP32) {
                                 ProbeScope_TrigFlag = 1;
 8004262:	4b41      	ldr	r3, [pc, #260]	; (8004368 <ProbeScope_IsTrig+0x4ac>)
 8004264:	2201      	movs	r2, #1
 8004266:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8004268:	4b40      	ldr	r3, [pc, #256]	; (800436c <ProbeScope_IsTrig+0x4b0>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a40      	ldr	r2, [pc, #256]	; (8004370 <ProbeScope_IsTrig+0x4b4>)
 800426e:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8004270:	bf00      	nop
 8004272:	e16d      	b.n	8004550 <ProbeScope_IsTrig+0x694>
#endif
            }
        } else {
            switch (p_ch->DataType) {
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	791b      	ldrb	r3, [r3, #4]
 8004278:	2b06      	cmp	r3, #6
 800427a:	f200 8169 	bhi.w	8004550 <ProbeScope_IsTrig+0x694>
 800427e:	a201      	add	r2, pc, #4	; (adr r2, 8004284 <ProbeScope_IsTrig+0x3c8>)
 8004280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004284:	080042a1 	.word	0x080042a1
 8004288:	080042ff 	.word	0x080042ff
 800428c:	08004375 	.word	0x08004375
 8004290:	080043d3 	.word	0x080043d3
 8004294:	0800443d 	.word	0x0800443d
 8004298:	0800449b 	.word	0x0800449b
 800429c:	080044f9 	.word	0x080044f9
                case PROBE_SCOPE_INT08U:
                     if (p_ch->BitEn == 0) {
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d119      	bne.n	80042dc <ProbeScope_IsTrig+0x420>
                         if (p_sample_prev->Val08U > p_sample_cur->Val08U) {
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	781a      	ldrb	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d923      	bls.n	80042fc <ProbeScope_IsTrig+0x440>
                             if (p_sample_prev->Val08U >= p_ch->TrigLevel.Val08U) {
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	781a      	ldrb	r2, [r3, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	7d1b      	ldrb	r3, [r3, #20]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d31d      	bcc.n	80042fc <ProbeScope_IsTrig+0x440>
                                 if (p_sample_cur->Val08U <= p_ch->TrigLevel.Val08U) {
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	781a      	ldrb	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	7d1b      	ldrb	r3, [r3, #20]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d817      	bhi.n	80042fc <ProbeScope_IsTrig+0x440>
                                     ProbeScope_TrigFlag = 1;
 80042cc:	4b26      	ldr	r3, [pc, #152]	; (8004368 <ProbeScope_IsTrig+0x4ac>)
 80042ce:	2201      	movs	r2, #1
 80042d0:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 80042d2:	4b26      	ldr	r3, [pc, #152]	; (800436c <ProbeScope_IsTrig+0x4b0>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a26      	ldr	r2, [pc, #152]	; (8004370 <ProbeScope_IsTrig+0x4b4>)
 80042d8:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 80042da:	e139      	b.n	8004550 <ProbeScope_IsTrig+0x694>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val08U != 0) {
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00b      	beq.n	80042fc <ProbeScope_IsTrig+0x440>
                             if (p_sample_cur->Val08U == 0) {
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d107      	bne.n	80042fc <ProbeScope_IsTrig+0x440>
                                 ProbeScope_TrigFlag = 1;
 80042ec:	4b1e      	ldr	r3, [pc, #120]	; (8004368 <ProbeScope_IsTrig+0x4ac>)
 80042ee:	2201      	movs	r2, #1
 80042f0:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 80042f2:	4b1e      	ldr	r3, [pc, #120]	; (800436c <ProbeScope_IsTrig+0x4b0>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a1e      	ldr	r2, [pc, #120]	; (8004370 <ProbeScope_IsTrig+0x4b4>)
 80042f8:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 80042fa:	e129      	b.n	8004550 <ProbeScope_IsTrig+0x694>
 80042fc:	e128      	b.n	8004550 <ProbeScope_IsTrig+0x694>
                     
                case PROBE_SCOPE_INT08S:
                     if (p_ch->BitEn == 0) {
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d11f      	bne.n	8004346 <ProbeScope_IsTrig+0x48a>
                         if (p_sample_prev->Val08S > p_sample_cur->Val08S) {
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	781a      	ldrb	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	b252      	sxtb	r2, r2
 8004310:	b25b      	sxtb	r3, r3
 8004312:	429a      	cmp	r2, r3
 8004314:	dd27      	ble.n	8004366 <ProbeScope_IsTrig+0x4aa>
                             if (p_sample_prev->Val08S >= p_ch->TrigLevel.Val08S) {
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	781a      	ldrb	r2, [r3, #0]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	7d1b      	ldrb	r3, [r3, #20]
 800431e:	b252      	sxtb	r2, r2
 8004320:	b25b      	sxtb	r3, r3
 8004322:	429a      	cmp	r2, r3
 8004324:	db1f      	blt.n	8004366 <ProbeScope_IsTrig+0x4aa>
                                 if (p_sample_cur->Val08S <= p_ch->TrigLevel.Val08S) {
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	781a      	ldrb	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	7d1b      	ldrb	r3, [r3, #20]
 800432e:	b252      	sxtb	r2, r2
 8004330:	b25b      	sxtb	r3, r3
 8004332:	429a      	cmp	r2, r3
 8004334:	dc17      	bgt.n	8004366 <ProbeScope_IsTrig+0x4aa>
                                     ProbeScope_TrigFlag = 1;
 8004336:	4b0c      	ldr	r3, [pc, #48]	; (8004368 <ProbeScope_IsTrig+0x4ac>)
 8004338:	2201      	movs	r2, #1
 800433a:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 800433c:	4b0b      	ldr	r3, [pc, #44]	; (800436c <ProbeScope_IsTrig+0x4b0>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a0b      	ldr	r2, [pc, #44]	; (8004370 <ProbeScope_IsTrig+0x4b4>)
 8004342:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8004344:	e104      	b.n	8004550 <ProbeScope_IsTrig+0x694>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val08S != 0) {
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00b      	beq.n	8004366 <ProbeScope_IsTrig+0x4aa>
                             if (p_sample_cur->Val08S == 0) {
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d107      	bne.n	8004366 <ProbeScope_IsTrig+0x4aa>
                                 ProbeScope_TrigFlag = 1;
 8004356:	4b04      	ldr	r3, [pc, #16]	; (8004368 <ProbeScope_IsTrig+0x4ac>)
 8004358:	2201      	movs	r2, #1
 800435a:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 800435c:	4b03      	ldr	r3, [pc, #12]	; (800436c <ProbeScope_IsTrig+0x4b0>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a03      	ldr	r2, [pc, #12]	; (8004370 <ProbeScope_IsTrig+0x4b4>)
 8004362:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8004364:	e0f4      	b.n	8004550 <ProbeScope_IsTrig+0x694>
 8004366:	e0f3      	b.n	8004550 <ProbeScope_IsTrig+0x694>
 8004368:	200080f0 	.word	0x200080f0
 800436c:	200080a0 	.word	0x200080a0
 8004370:	200080f8 	.word	0x200080f8
                                    
#if PROBE_SCOPE_16_BIT_EN > 0                                   
                case PROBE_SCOPE_INT16U:
                     if (p_ch->BitEn == 0) {
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d119      	bne.n	80043b0 <ProbeScope_IsTrig+0x4f4>
                         if (p_sample_prev->Val16U > p_sample_cur->Val16U) {
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	881a      	ldrh	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	881b      	ldrh	r3, [r3, #0]
 8004384:	429a      	cmp	r2, r3
 8004386:	d923      	bls.n	80043d0 <ProbeScope_IsTrig+0x514>
                             if (p_sample_prev->Val16U >= p_ch->TrigLevel.Val16U) {
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	881a      	ldrh	r2, [r3, #0]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	8a9b      	ldrh	r3, [r3, #20]
 8004390:	429a      	cmp	r2, r3
 8004392:	d31d      	bcc.n	80043d0 <ProbeScope_IsTrig+0x514>
                                 if (p_sample_cur->Val16U <= p_ch->TrigLevel.Val16U) {
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	881a      	ldrh	r2, [r3, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8a9b      	ldrh	r3, [r3, #20]
 800439c:	429a      	cmp	r2, r3
 800439e:	d817      	bhi.n	80043d0 <ProbeScope_IsTrig+0x514>
                                     ProbeScope_TrigFlag = 1;
 80043a0:	4b6e      	ldr	r3, [pc, #440]	; (800455c <ProbeScope_IsTrig+0x6a0>)
 80043a2:	2201      	movs	r2, #1
 80043a4:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 80043a6:	4b6e      	ldr	r3, [pc, #440]	; (8004560 <ProbeScope_IsTrig+0x6a4>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a6e      	ldr	r2, [pc, #440]	; (8004564 <ProbeScope_IsTrig+0x6a8>)
 80043ac:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 80043ae:	e0cf      	b.n	8004550 <ProbeScope_IsTrig+0x694>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val16U != 0) {
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00b      	beq.n	80043d0 <ProbeScope_IsTrig+0x514>
                             if (p_sample_cur->Val16U == 0) {
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	881b      	ldrh	r3, [r3, #0]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d107      	bne.n	80043d0 <ProbeScope_IsTrig+0x514>
                                 ProbeScope_TrigFlag = 1;
 80043c0:	4b66      	ldr	r3, [pc, #408]	; (800455c <ProbeScope_IsTrig+0x6a0>)
 80043c2:	2201      	movs	r2, #1
 80043c4:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 80043c6:	4b66      	ldr	r3, [pc, #408]	; (8004560 <ProbeScope_IsTrig+0x6a4>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a66      	ldr	r2, [pc, #408]	; (8004564 <ProbeScope_IsTrig+0x6a8>)
 80043cc:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 80043ce:	e0bf      	b.n	8004550 <ProbeScope_IsTrig+0x694>
 80043d0:	e0be      	b.n	8004550 <ProbeScope_IsTrig+0x694>
                     
                case PROBE_SCOPE_INT16S:
                     if (p_ch->BitEn == 0) {
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d11f      	bne.n	800441a <ProbeScope_IsTrig+0x55e>
                         if (p_sample_prev->Val16S > p_sample_cur->Val16S) {
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	881a      	ldrh	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	881b      	ldrh	r3, [r3, #0]
 80043e2:	b212      	sxth	r2, r2
 80043e4:	b21b      	sxth	r3, r3
 80043e6:	429a      	cmp	r2, r3
 80043e8:	dd27      	ble.n	800443a <ProbeScope_IsTrig+0x57e>
                             if (p_sample_prev->Val16S >= p_ch->TrigLevel.Val16S) {
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	881a      	ldrh	r2, [r3, #0]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	8a9b      	ldrh	r3, [r3, #20]
 80043f2:	b212      	sxth	r2, r2
 80043f4:	b21b      	sxth	r3, r3
 80043f6:	429a      	cmp	r2, r3
 80043f8:	db1f      	blt.n	800443a <ProbeScope_IsTrig+0x57e>
                                 if (p_sample_cur->Val16S <= p_ch->TrigLevel.Val16S) {
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	881a      	ldrh	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8a9b      	ldrh	r3, [r3, #20]
 8004402:	b212      	sxth	r2, r2
 8004404:	b21b      	sxth	r3, r3
 8004406:	429a      	cmp	r2, r3
 8004408:	dc17      	bgt.n	800443a <ProbeScope_IsTrig+0x57e>
                                     ProbeScope_TrigFlag = 1;
 800440a:	4b54      	ldr	r3, [pc, #336]	; (800455c <ProbeScope_IsTrig+0x6a0>)
 800440c:	2201      	movs	r2, #1
 800440e:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8004410:	4b53      	ldr	r3, [pc, #332]	; (8004560 <ProbeScope_IsTrig+0x6a4>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a53      	ldr	r2, [pc, #332]	; (8004564 <ProbeScope_IsTrig+0x6a8>)
 8004416:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8004418:	e09a      	b.n	8004550 <ProbeScope_IsTrig+0x694>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val16S != 0) {
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	881b      	ldrh	r3, [r3, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00b      	beq.n	800443a <ProbeScope_IsTrig+0x57e>
                             if (p_sample_cur->Val16S == 0) {
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	881b      	ldrh	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d107      	bne.n	800443a <ProbeScope_IsTrig+0x57e>
                                 ProbeScope_TrigFlag = 1;
 800442a:	4b4c      	ldr	r3, [pc, #304]	; (800455c <ProbeScope_IsTrig+0x6a0>)
 800442c:	2201      	movs	r2, #1
 800442e:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8004430:	4b4b      	ldr	r3, [pc, #300]	; (8004560 <ProbeScope_IsTrig+0x6a4>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a4b      	ldr	r2, [pc, #300]	; (8004564 <ProbeScope_IsTrig+0x6a8>)
 8004436:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8004438:	e08a      	b.n	8004550 <ProbeScope_IsTrig+0x694>
 800443a:	e089      	b.n	8004550 <ProbeScope_IsTrig+0x694>
#endif

#if PROBE_SCOPE_32_BIT_EN > 0                                                                     
                case PROBE_SCOPE_INT32U:
                     if (p_ch->BitEn == 0) {
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d119      	bne.n	8004478 <ProbeScope_IsTrig+0x5bc>
                         if (p_sample_prev->Val32U > p_sample_cur->Val32U) {                  
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	429a      	cmp	r2, r3
 800444e:	d923      	bls.n	8004498 <ProbeScope_IsTrig+0x5dc>
                             if (p_sample_prev->Val32U >= p_ch->TrigLevel.Val32U) {
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	429a      	cmp	r2, r3
 800445a:	d31d      	bcc.n	8004498 <ProbeScope_IsTrig+0x5dc>
                                 if (p_sample_cur->Val32U <= p_ch->TrigLevel.Val32U) {
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	429a      	cmp	r2, r3
 8004466:	d817      	bhi.n	8004498 <ProbeScope_IsTrig+0x5dc>
                                     ProbeScope_TrigFlag = 1;
 8004468:	4b3c      	ldr	r3, [pc, #240]	; (800455c <ProbeScope_IsTrig+0x6a0>)
 800446a:	2201      	movs	r2, #1
 800446c:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 800446e:	4b3c      	ldr	r3, [pc, #240]	; (8004560 <ProbeScope_IsTrig+0x6a4>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a3c      	ldr	r2, [pc, #240]	; (8004564 <ProbeScope_IsTrig+0x6a8>)
 8004474:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8004476:	e06b      	b.n	8004550 <ProbeScope_IsTrig+0x694>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val32U != 0) {
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00b      	beq.n	8004498 <ProbeScope_IsTrig+0x5dc>
                             if (p_sample_cur->Val32U == 0) {
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d107      	bne.n	8004498 <ProbeScope_IsTrig+0x5dc>
                                 ProbeScope_TrigFlag = 1;
 8004488:	4b34      	ldr	r3, [pc, #208]	; (800455c <ProbeScope_IsTrig+0x6a0>)
 800448a:	2201      	movs	r2, #1
 800448c:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 800448e:	4b34      	ldr	r3, [pc, #208]	; (8004560 <ProbeScope_IsTrig+0x6a4>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a34      	ldr	r2, [pc, #208]	; (8004564 <ProbeScope_IsTrig+0x6a8>)
 8004494:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8004496:	e05b      	b.n	8004550 <ProbeScope_IsTrig+0x694>
 8004498:	e05a      	b.n	8004550 <ProbeScope_IsTrig+0x694>
                     
                case PROBE_SCOPE_INT32S:
                     if (p_ch->BitEn == 0) {
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d119      	bne.n	80044d6 <ProbeScope_IsTrig+0x61a>
                         if (p_sample_prev->Val32S > p_sample_cur->Val32S) {
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	dd23      	ble.n	80044f6 <ProbeScope_IsTrig+0x63a>
                             if (p_sample_prev->Val32S >= p_ch->TrigLevel.Val32S) {
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	db1d      	blt.n	80044f6 <ProbeScope_IsTrig+0x63a>
                                 if (p_sample_cur->Val32S <= p_ch->TrigLevel.Val32S) {
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	dc17      	bgt.n	80044f6 <ProbeScope_IsTrig+0x63a>
                                     ProbeScope_TrigFlag = 1;
 80044c6:	4b25      	ldr	r3, [pc, #148]	; (800455c <ProbeScope_IsTrig+0x6a0>)
 80044c8:	2201      	movs	r2, #1
 80044ca:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 80044cc:	4b24      	ldr	r3, [pc, #144]	; (8004560 <ProbeScope_IsTrig+0x6a4>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a24      	ldr	r2, [pc, #144]	; (8004564 <ProbeScope_IsTrig+0x6a8>)
 80044d2:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 80044d4:	e03c      	b.n	8004550 <ProbeScope_IsTrig+0x694>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val32S != 0) {
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00b      	beq.n	80044f6 <ProbeScope_IsTrig+0x63a>
                             if (p_sample_cur->Val32S == 0) {
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d107      	bne.n	80044f6 <ProbeScope_IsTrig+0x63a>
                                 ProbeScope_TrigFlag = 1;
 80044e6:	4b1d      	ldr	r3, [pc, #116]	; (800455c <ProbeScope_IsTrig+0x6a0>)
 80044e8:	2201      	movs	r2, #1
 80044ea:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 80044ec:	4b1c      	ldr	r3, [pc, #112]	; (8004560 <ProbeScope_IsTrig+0x6a4>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a1c      	ldr	r2, [pc, #112]	; (8004564 <ProbeScope_IsTrig+0x6a8>)
 80044f2:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 80044f4:	e02c      	b.n	8004550 <ProbeScope_IsTrig+0x694>
 80044f6:	e02b      	b.n	8004550 <ProbeScope_IsTrig+0x694>
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 > p_sample_cur->ValFP32) {
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	ed93 7a00 	vldr	s14, [r3]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	edd3 7a00 	vldr	s15, [r3]
 8004504:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800450c:	dc00      	bgt.n	8004510 <ProbeScope_IsTrig+0x654>
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 800450e:	e01f      	b.n	8004550 <ProbeScope_IsTrig+0x694>
                     }
                     break;
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 > p_sample_cur->ValFP32) {
                         if (p_sample_prev->ValFP32 >= p_ch->TrigLevel.ValFP32) {
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	ed93 7a00 	vldr	s14, [r3]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	edd3 7a05 	vldr	s15, [r3, #20]
 800451c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004524:	da00      	bge.n	8004528 <ProbeScope_IsTrig+0x66c>
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8004526:	e013      	b.n	8004550 <ProbeScope_IsTrig+0x694>
                     break;
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 > p_sample_cur->ValFP32) {
                         if (p_sample_prev->ValFP32 >= p_ch->TrigLevel.ValFP32) {
                             if (p_sample_cur->ValFP32 <= p_ch->TrigLevel.ValFP32) {
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	ed93 7a00 	vldr	s14, [r3]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	edd3 7a05 	vldr	s15, [r3, #20]
 8004534:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800453c:	d900      	bls.n	8004540 <ProbeScope_IsTrig+0x684>
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 800453e:	e007      	b.n	8004550 <ProbeScope_IsTrig+0x694>
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 > p_sample_cur->ValFP32) {
                         if (p_sample_prev->ValFP32 >= p_ch->TrigLevel.ValFP32) {
                             if (p_sample_cur->ValFP32 <= p_ch->TrigLevel.ValFP32) {
                                 ProbeScope_TrigFlag = 1;
 8004540:	4b06      	ldr	r3, [pc, #24]	; (800455c <ProbeScope_IsTrig+0x6a0>)
 8004542:	2201      	movs	r2, #1
 8004544:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8004546:	4b06      	ldr	r3, [pc, #24]	; (8004560 <ProbeScope_IsTrig+0x6a4>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a06      	ldr	r2, [pc, #24]	; (8004564 <ProbeScope_IsTrig+0x6a8>)
 800454c:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 800454e:	bf00      	nop
#endif                     
            }                          
        }
    }
}
 8004550:	3714      	adds	r7, #20
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	200080f0 	.word	0x200080f0
 8004560:	200080a0 	.word	0x200080a0
 8004564:	200080f8 	.word	0x200080f8

08004568 <fmaxf>:
 8004568:	b508      	push	{r3, lr}
 800456a:	ed2d 8b02 	vpush	{d8}
 800456e:	ee08 0a90 	vmov	s17, r0
 8004572:	ee08 1a10 	vmov	s16, r1
 8004576:	f000 f843 	bl	8004600 <__fpclassifyf>
 800457a:	b920      	cbnz	r0, 8004586 <fmaxf+0x1e>
 800457c:	ee18 0a10 	vmov	r0, s16
 8004580:	ecbd 8b02 	vpop	{d8}
 8004584:	bd08      	pop	{r3, pc}
 8004586:	ee18 0a10 	vmov	r0, s16
 800458a:	f000 f839 	bl	8004600 <__fpclassifyf>
 800458e:	b158      	cbz	r0, 80045a8 <fmaxf+0x40>
 8004590:	eef4 8ac8 	vcmpe.f32	s17, s16
 8004594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004598:	bfd4      	ite	le
 800459a:	ee18 0a10 	vmovle	r0, s16
 800459e:	ee18 0a90 	vmovgt	r0, s17
 80045a2:	ecbd 8b02 	vpop	{d8}
 80045a6:	bd08      	pop	{r3, pc}
 80045a8:	ee18 0a90 	vmov	r0, s17
 80045ac:	ecbd 8b02 	vpop	{d8}
 80045b0:	bd08      	pop	{r3, pc}
 80045b2:	bf00      	nop

080045b4 <fminf>:
 80045b4:	b508      	push	{r3, lr}
 80045b6:	ed2d 8b02 	vpush	{d8}
 80045ba:	ee08 0a90 	vmov	s17, r0
 80045be:	ee08 1a10 	vmov	s16, r1
 80045c2:	f000 f81d 	bl	8004600 <__fpclassifyf>
 80045c6:	b920      	cbnz	r0, 80045d2 <fminf+0x1e>
 80045c8:	ee18 0a10 	vmov	r0, s16
 80045cc:	ecbd 8b02 	vpop	{d8}
 80045d0:	bd08      	pop	{r3, pc}
 80045d2:	ee18 0a10 	vmov	r0, s16
 80045d6:	f000 f813 	bl	8004600 <__fpclassifyf>
 80045da:	b158      	cbz	r0, 80045f4 <fminf+0x40>
 80045dc:	eef4 8ac8 	vcmpe.f32	s17, s16
 80045e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045e4:	bf54      	ite	pl
 80045e6:	ee18 0a10 	vmovpl	r0, s16
 80045ea:	ee18 0a90 	vmovmi	r0, s17
 80045ee:	ecbd 8b02 	vpop	{d8}
 80045f2:	bd08      	pop	{r3, pc}
 80045f4:	ee18 0a90 	vmov	r0, s17
 80045f8:	ecbd 8b02 	vpop	{d8}
 80045fc:	bd08      	pop	{r3, pc}
 80045fe:	bf00      	nop

08004600 <__fpclassifyf>:
 8004600:	f030 4000 	bics.w	r0, r0, #2147483648	; 0x80000000
 8004604:	d101      	bne.n	800460a <__fpclassifyf+0xa>
 8004606:	2002      	movs	r0, #2
 8004608:	4770      	bx	lr
 800460a:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800460e:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8004612:	d201      	bcs.n	8004618 <__fpclassifyf+0x18>
 8004614:	2004      	movs	r0, #4
 8004616:	4770      	bx	lr
 8004618:	4b05      	ldr	r3, [pc, #20]	; (8004630 <__fpclassifyf+0x30>)
 800461a:	1e42      	subs	r2, r0, #1
 800461c:	429a      	cmp	r2, r3
 800461e:	d801      	bhi.n	8004624 <__fpclassifyf+0x24>
 8004620:	2003      	movs	r0, #3
 8004622:	4770      	bx	lr
 8004624:	f1a0 40ff 	sub.w	r0, r0, #2139095040	; 0x7f800000
 8004628:	fab0 f080 	clz	r0, r0
 800462c:	0940      	lsrs	r0, r0, #5
 800462e:	4770      	bx	lr
 8004630:	007ffffe 	.word	0x007ffffe

08004634 <__libc_init_array>:
 8004634:	b570      	push	{r4, r5, r6, lr}
 8004636:	4b0e      	ldr	r3, [pc, #56]	; (8004670 <__libc_init_array+0x3c>)
 8004638:	4c0e      	ldr	r4, [pc, #56]	; (8004674 <__libc_init_array+0x40>)
 800463a:	1ae4      	subs	r4, r4, r3
 800463c:	10a4      	asrs	r4, r4, #2
 800463e:	2500      	movs	r5, #0
 8004640:	461e      	mov	r6, r3
 8004642:	42a5      	cmp	r5, r4
 8004644:	d004      	beq.n	8004650 <__libc_init_array+0x1c>
 8004646:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800464a:	4798      	blx	r3
 800464c:	3501      	adds	r5, #1
 800464e:	e7f8      	b.n	8004642 <__libc_init_array+0xe>
 8004650:	f7fd f9ce 	bl	80019f0 <_init>
 8004654:	4c08      	ldr	r4, [pc, #32]	; (8004678 <__libc_init_array+0x44>)
 8004656:	4b09      	ldr	r3, [pc, #36]	; (800467c <__libc_init_array+0x48>)
 8004658:	1ae4      	subs	r4, r4, r3
 800465a:	10a4      	asrs	r4, r4, #2
 800465c:	2500      	movs	r5, #0
 800465e:	461e      	mov	r6, r3
 8004660:	42a5      	cmp	r5, r4
 8004662:	d004      	beq.n	800466e <__libc_init_array+0x3a>
 8004664:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004668:	4798      	blx	r3
 800466a:	3501      	adds	r5, #1
 800466c:	e7f8      	b.n	8004660 <__libc_init_array+0x2c>
 800466e:	bd70      	pop	{r4, r5, r6, pc}
 8004670:	200001bc 	.word	0x200001bc
 8004674:	200001bc 	.word	0x200001bc
 8004678:	200001bc 	.word	0x200001bc
 800467c:	200001bc 	.word	0x200001bc

08004680 <g_xmc_vadc_group_array>:
 8004680:	40004400 40004800 40004c00 40005000     .D.@.H.@.L.@.P.@

08004690 <PWM_a_compare_config>:
	...

080046a0 <PWM_a_gpio_out_config>:
 80046a0:	00000098 00010000 00000004              ............

080046ac <PWM_c_compare_config>:
	...

080046bc <PWM_c_gpio_out_config>:
 80046bc:	00000098 00010000 00000004              ............

080046c8 <PWM_b_compare_config>:
	...

080046d8 <PWM_b_gpio_out_config>:
 80046d8:	00000098 00010000 00000004              ............

080046e4 <PWM_update_compare_config>:
	...

080046f4 <PWM_update_gpio_out_config>:
 80046f4:	00000098 00010000 00000004              ............

08004700 <LOOP_CYCLE>:
 8004700:	01003f3f                                ??..

08004704 <group_init_handle0>:
	...

08004718 <group_init_handle1>:
	...

0800472c <group_init_handle2>:
	...

08004740 <group_init_handle3>:
	...

08004754 <global_config>:
 8004754:	00000000 00000003 00000000 00000000     ................
	...

0800476c <P_1_0>:
 800476c:	48028100 00000080 00010000 00000000     ...H............
 800477c:	00000000                                ....

08004780 <P_1_1>:
 8004780:	48028100 00000080 00010000 00000000     ...H............
 8004790:	00000001                                ....

08004794 <ENABLE>:
 8004794:	48028500 00000080 00010000 00000000     ...H............
 80047a4:	00000007                                ....

080047a8 <Button_1>:
 80047a8:	48028100 00000008 00000000 00000000     ...H............
 80047b8:	0000000f                                ....

080047bc <P_0_9>:
 80047bc:	48028000 00000080 00010000 00000000     ...H............
 80047cc:	00000009                                ....

080047d0 <EN_1>:
 80047d0:	48028000 00000080 00010000 00000000     ...H............
 80047e0:	00000008                                ....

080047e4 <EN_2>:
 80047e4:	48028000 00000080 00010000 00000000     ...H............
 80047f4:	0000000c                                ....

080047f8 <EN_3>:
 80047f8:	48028000 00000080 00010000 00000000     ...H............
 8004808:	00000002                                ....

0800480c <FAULT_IN>:
 800480c:	48028300 00000008 00000000 00000000     ...H............
 800481c:	00000003                                ....

08004820 <FAULT_RST>:
 8004820:	48028300 00000080 00010000 00000000     ...H............
 8004830:	00000002                                ....

08004834 <sinTable_f32>:
 8004834:	00000000 3c490e92 3cc90ab1 3d16c32b     ......I<...<+..=
 8004844:	3d48fb2e 3d7b2b75 3d96a904 3dafb680     ..H=u+{=...=...=
 8004854:	3dc8bd36 3de1bc2f 3dfab273 3e09cf87     6..=/..=s..=...>
 8004864:	3e164083 3e22abb5 3e2f10a2 3e3b6ecf     .@.>..">../>.n;>
 8004874:	3e47c5c2 3e541501 3e605c13 3e6c9a7f     ..G>..T>.\`>..l>
 8004884:	3e78cfcc 3e827dc0 3e888e93 3e8e9a22     ..x>.}.>...>"..>
 8004894:	3e94a032 3e9aa086 3ea09ae5 3ea68f12     2..>...>...>...>
 80048a4:	3eac7cd4 3eb263ef 3eb8442a 3ebe1d49     .|.>.c.>*D.>I..>
 80048b4:	3ec3ef15 3ec9b953 3ecf7bca 3ed53641     ...>S..>.{.>A6.>
 80048c4:	3edae880 3ee0924f 3ee63375 3eebcbbb     ...>O..>u3.>...>
 80048d4:	3ef15aea 3ef6e0cb 3efc5d27 3f00e7e4     .Z.>...>'].>...?
 80048e4:	3f039c3d 3f064b82 3f08f59b 3f0b9a6b     =..?.K.?...?k..?
 80048f4:	3f0e39da 3f10d3cd 3f13682a 3f15f6d9     .9.?...?*h.?...?
 8004904:	3f187fc0 3f1b02c6 3f1d7fd1 3f1ff6cb     ...?...?...?...?
 8004914:	3f226799 3f24d225 3f273656 3f299415     .g"?%.$?V6'?..)?
 8004924:	3f2beb4a 3f2e3bde 3f3085bb 3f32c8c9     J.+?.;.?..0?..2?
 8004934:	3f3504f3 3f373a23 3f396842 3f3b8f3b     ..5?#:7?Bh9?;.;?
 8004944:	3f3daef9 3f3fc767 3f41d870 3f43e201     ..=?g.??p.A?..C?
 8004954:	3f45e403 3f47de65 3f49d112 3f4bbbf8     ..E?e.G?..I?..K?
 8004964:	3f4d9f02 3f4f7a20 3f514d3d 3f531849     ..M? zO?=MQ?I.S?
 8004974:	3f54db31 3f5695e5 3f584853 3f59f26a     1.T?..V?SHX?j.Y?
 8004984:	3f5b941a 3f5d2d53 3f5ebe05 3f604621     ..[?S-]?..^?!F`?
 8004994:	3f61c597 3f633c5a 3f64aa59 3f660f88     ..a?Z<c?Y.d?..f?
 80049a4:	3f676bd8 3f68bf3c 3f6a09a7 3f6b4b0c     .kg?<.h?..j?.Kk?
 80049b4:	3f6c835e 3f6db293 3f6ed89e 3f6ff573     ^.l?..m?..n?s.o?
 80049c4:	3f710908 3f721352 3f731447 3f740bdd     ..q?R.r?G.s?..t?
 80049d4:	3f74fa0b 3f75dec6 3f76ba07 3f778bc5     ..t?..u?..v?..w?
 80049e4:	3f7853f8 3f791298 3f79c79d 3f7a7302     .Sx?..y?..y?.sz?
 80049f4:	3f7b14be 3f7baccd 3f7c3b28 3f7cbfc9     ..{?..{?(;|?..|?
 8004a04:	3f7d3aac 3f7dabcc 3f7e1323 3f7e70b0     .:}?..}?#.~?.p~?
 8004a14:	3f7ec46d 3f7f0e58 3f7f4e6d 3f7f84ab     m.~?X..?mN.?...?
 8004a24:	3f7fb10f 3f7fd397 3f7fec43 3f7ffb11     ...?...?C..?...?
 8004a34:	3f800000 3f7ffb11 3f7fec43 3f7fd397     ...?...?C..?...?
 8004a44:	3f7fb10f 3f7f84ab 3f7f4e6d 3f7f0e58     ...?...?mN.?X..?
 8004a54:	3f7ec46d 3f7e70b0 3f7e1323 3f7dabcc     m.~?.p~?#.~?..}?
 8004a64:	3f7d3aac 3f7cbfc9 3f7c3b28 3f7baccd     .:}?..|?(;|?..{?
 8004a74:	3f7b14be 3f7a7302 3f79c79d 3f791298     ..{?.sz?..y?..y?
 8004a84:	3f7853f8 3f778bc5 3f76ba07 3f75dec6     .Sx?..w?..v?..u?
 8004a94:	3f74fa0b 3f740bdd 3f731447 3f721352     ..t?..t?G.s?R.r?
 8004aa4:	3f710908 3f6ff573 3f6ed89e 3f6db293     ..q?s.o?..n?..m?
 8004ab4:	3f6c835e 3f6b4b0c 3f6a09a7 3f68bf3c     ^.l?.Kk?..j?<.h?
 8004ac4:	3f676bd8 3f660f88 3f64aa59 3f633c5a     .kg?..f?Y.d?Z<c?
 8004ad4:	3f61c597 3f604621 3f5ebe05 3f5d2d53     ..a?!F`?..^?S-]?
 8004ae4:	3f5b941a 3f59f26a 3f584853 3f5695e5     ..[?j.Y?SHX?..V?
 8004af4:	3f54db31 3f531849 3f514d3d 3f4f7a20     1.T?I.S?=MQ? zO?
 8004b04:	3f4d9f02 3f4bbbf8 3f49d112 3f47de65     ..M?..K?..I?e.G?
 8004b14:	3f45e403 3f43e201 3f41d870 3f3fc767     ..E?..C?p.A?g.??
 8004b24:	3f3daef9 3f3b8f3b 3f396842 3f373a23     ..=?;.;?Bh9?#:7?
 8004b34:	3f3504f3 3f32c8c9 3f3085bb 3f2e3bde     ..5?..2?..0?.;.?
 8004b44:	3f2beb4a 3f299415 3f273656 3f24d225     J.+?..)?V6'?%.$?
 8004b54:	3f226799 3f1ff6cb 3f1d7fd1 3f1b02c6     .g"?...?...?...?
 8004b64:	3f187fc0 3f15f6d9 3f13682a 3f10d3cd     ...?...?*h.?...?
 8004b74:	3f0e39da 3f0b9a6b 3f08f59b 3f064b82     .9.?k..?...?.K.?
 8004b84:	3f039c3d 3f00e7e4 3efc5d27 3ef6e0cb     =..?...?'].>...>
 8004b94:	3ef15aea 3eebcbbb 3ee63375 3ee0924f     .Z.>...>u3.>O..>
 8004ba4:	3edae880 3ed53641 3ecf7bca 3ec9b953     ...>A6.>.{.>S..>
 8004bb4:	3ec3ef15 3ebe1d49 3eb8442a 3eb263ef     ...>I..>*D.>.c.>
 8004bc4:	3eac7cd4 3ea68f12 3ea09ae5 3e9aa086     .|.>...>...>...>
 8004bd4:	3e94a032 3e8e9a22 3e888e93 3e827dc0     2..>"..>...>.}.>
 8004be4:	3e78cfcc 3e6c9a7f 3e605c13 3e541501     ..x>..l>.\`>..T>
 8004bf4:	3e47c5c2 3e3b6ecf 3e2f10a2 3e22abb5     ..G>.n;>../>..">
 8004c04:	3e164083 3e09cf87 3dfab273 3de1bc2f     .@.>...>s..=/..=
 8004c14:	3dc8bd36 3dafb680 3d96a904 3d7b2b75     6..=...=...=u+{=
 8004c24:	3d48fb2e 3d16c32b 3cc90ab1 3c490e92     ..H=+..=...<..I<
 8004c34:	00000000 bc490e92 bcc90ab1 bd16c32b     ......I.....+...
 8004c44:	bd48fb2e bd7b2b75 bd96a904 bdafb680     ..H.u+{.........
 8004c54:	bdc8bd36 bde1bc2f bdfab273 be09cf87     6.../...s.......
 8004c64:	be164083 be22abb5 be2f10a2 be3b6ecf     .@....".../..n;.
 8004c74:	be47c5c2 be541501 be605c13 be6c9a7f     ..G...T..\`...l.
 8004c84:	be78cfcc be827dc0 be888e93 be8e9a22     ..x..}......"...
 8004c94:	be94a032 be9aa086 bea09ae5 bea68f12     2...............
 8004ca4:	beac7cd4 beb263ef beb8442a bebe1d49     .|...c..*D..I...
 8004cb4:	bec3ef15 bec9b953 becf7bca bed53641     ....S....{..A6..
 8004cc4:	bedae880 bee0924f bee63375 beebcbbb     ....O...u3......
 8004cd4:	bef15aea bef6e0cb befc5d27 bf00e7e4     .Z......']......
 8004ce4:	bf039c3d bf064b82 bf08f59b bf0b9a6b     =....K......k...
 8004cf4:	bf0e39da bf10d3cd bf13682a bf15f6d9     .9......*h......
 8004d04:	bf187fc0 bf1b02c6 bf1d7fd1 bf1ff6cb     ................
 8004d14:	bf226799 bf24d225 bf273656 bf299415     .g".%.$.V6'...).
 8004d24:	bf2beb4a bf2e3bde bf3085bb bf32c8c9     J.+..;....0...2.
 8004d34:	bf3504f3 bf373a23 bf396842 bf3b8f3b     ..5.#:7.Bh9.;.;.
 8004d44:	bf3daef9 bf3fc767 bf41d870 bf43e201     ..=.g.?.p.A...C.
 8004d54:	bf45e403 bf47de65 bf49d112 bf4bbbf8     ..E.e.G...I...K.
 8004d64:	bf4d9f02 bf4f7a20 bf514d3d bf531849     ..M. zO.=MQ.I.S.
 8004d74:	bf54db31 bf5695e5 bf584853 bf59f26a     1.T...V.SHX.j.Y.
 8004d84:	bf5b941a bf5d2d53 bf5ebe05 bf604621     ..[.S-]...^.!F`.
 8004d94:	bf61c597 bf633c5a bf64aa59 bf660f88     ..a.Z<c.Y.d...f.
 8004da4:	bf676bd8 bf68bf3c bf6a09a7 bf6b4b0c     .kg.<.h...j..Kk.
 8004db4:	bf6c835e bf6db293 bf6ed89e bf6ff573     ^.l...m...n.s.o.
 8004dc4:	bf710908 bf721352 bf731447 bf740bdd     ..q.R.r.G.s...t.
 8004dd4:	bf74fa0b bf75dec6 bf76ba07 bf778bc5     ..t...u...v...w.
 8004de4:	bf7853f8 bf791298 bf79c79d bf7a7302     .Sx...y...y..sz.
 8004df4:	bf7b14be bf7baccd bf7c3b28 bf7cbfc9     ..{...{.(;|...|.
 8004e04:	bf7d3aac bf7dabcc bf7e1323 bf7e70b0     .:}...}.#.~..p~.
 8004e14:	bf7ec46d bf7f0e58 bf7f4e6d bf7f84ab     m.~.X...mN......
 8004e24:	bf7fb10f bf7fd397 bf7fec43 bf7ffb11     ........C.......
 8004e34:	bf800000 bf7ffb11 bf7fec43 bf7fd397     ........C.......
 8004e44:	bf7fb10f bf7f84ab bf7f4e6d bf7f0e58     ........mN..X...
 8004e54:	bf7ec46d bf7e70b0 bf7e1323 bf7dabcc     m.~..p~.#.~...}.
 8004e64:	bf7d3aac bf7cbfc9 bf7c3b28 bf7baccd     .:}...|.(;|...{.
 8004e74:	bf7b14be bf7a7302 bf79c79d bf791298     ..{..sz...y...y.
 8004e84:	bf7853f8 bf778bc5 bf76ba07 bf75dec6     .Sx...w...v...u.
 8004e94:	bf74fa0b bf740bdd bf731447 bf721352     ..t...t.G.s.R.r.
 8004ea4:	bf710908 bf6ff573 bf6ed89e bf6db293     ..q.s.o...n...m.
 8004eb4:	bf6c835e bf6b4b0c bf6a09a7 bf68bf3c     ^.l..Kk...j.<.h.
 8004ec4:	bf676bd8 bf660f88 bf64aa59 bf633c5a     .kg...f.Y.d.Z<c.
 8004ed4:	bf61c597 bf604621 bf5ebe05 bf5d2d53     ..a.!F`...^.S-].
 8004ee4:	bf5b941a bf59f26a bf584853 bf5695e5     ..[.j.Y.SHX...V.
 8004ef4:	bf54db31 bf531849 bf514d3d bf4f7a20     1.T.I.S.=MQ. zO.
 8004f04:	bf4d9f02 bf4bbbf8 bf49d112 bf47de65     ..M...K...I.e.G.
 8004f14:	bf45e403 bf43e201 bf41d870 bf3fc767     ..E...C.p.A.g.?.
 8004f24:	bf3daef9 bf3b8f3b bf396842 bf373a23     ..=.;.;.Bh9.#:7.
 8004f34:	bf3504f3 bf32c8c9 bf3085bb bf2e3bde     ..5...2...0..;..
 8004f44:	bf2beb4a bf299415 bf273656 bf24d225     J.+...).V6'.%.$.
 8004f54:	bf226799 bf1ff6cb bf1d7fd1 bf1b02c6     .g".............
 8004f64:	bf187fc0 bf15f6d9 bf13682a bf10d3cd     ........*h......
 8004f74:	bf0e39da bf0b9a6b bf08f59b bf064b82     .9..k........K..
 8004f84:	bf039c3d bf00e7e4 befc5d27 bef6e0cb     =.......']......
 8004f94:	bef15aea beebcbbb bee63375 bee0924f     .Z......u3..O...
 8004fa4:	bedae880 bed53641 becf7bca bec9b953     ....A6...{..S...
 8004fb4:	bec3ef15 bebe1d49 beb8442a beb263ef     ....I...*D...c..
 8004fc4:	beac7cd4 bea68f12 bea09ae5 be9aa086     .|..............
 8004fd4:	be94a032 be8e9a22 be888e93 be827dc0     2..."........}..
 8004fe4:	be78cfcc be6c9a7f be605c13 be541501     ..x...l..\`...T.
 8004ff4:	be47c5c2 be3b6ecf be2f10a2 be22abb5     ..G..n;.../...".
 8005004:	be164083 be09cf87 bdfab273 bde1bc2f     .@......s.../...
 8005014:	bdc8bd36 bdafb680 bd96a904 bd7b2b75     6...........u+{.
 8005024:	bd48fb2e bd16c32b bcc90ab1 bc490e92     ..H.+.........I.
 8005034:	80000000 01040250 00010000 00000000     ....P...........
 8005044:	00010000 01010101                       ........

0800504c <group_ptrs>:
 800504c:	40004400 40004800 40004c00 40005000     .D.@.H.@.L.@.P.@

0800505c <ADC_MEASUREMENT_1_V1_1_ch_config>:
 800505c:	002f0000 00000000 00000101              ../.........

08005068 <ADC_MEASUREMENT_1_V1_1_res_config>:
 8005068:	00000000                                ....

0800506c <ADC_MEASUREMENT_1_V1_1_handle>:
 800506c:	0800505c 08005068 00000000              \P..hP......

08005078 <ADC_MEASUREMENT_1_V1_2_ch_config>:
 8005078:	00240000 00000000 0000ff01              ..$.........

08005084 <ADC_MEASUREMENT_1_V1_2_res_config>:
 8005084:	00000000                                ....

08005088 <ADC_MEASUREMENT_1_V1_2_handle>:
 8005088:	08005078 08005084 00000300              xP...P......

08005094 <ADC_MEASUREMENT_1_V1_3_ch_config>:
 8005094:	00250000 00000000 0000ff01              ..%.........

080050a0 <ADC_MEASUREMENT_1_V1_3_res_config>:
 80050a0:	00000000                                ....

080050a4 <ADC_MEASUREMENT_1_V1_3_handle>:
 80050a4:	08005094 080050a0 00000500              .P...P......

080050b0 <ADC_MEASUREMENT_1_V1_4_ch_config>:
 80050b0:	00280000 00000000 0000ff01              ..(.........

080050bc <ADC_MEASUREMENT_1_V1_4_res_config>:
 80050bc:	00000000                                ....

080050c0 <ADC_MEASUREMENT_1_V1_4_handle>:
 80050c0:	080050b0 080050bc 00000700              .P...P......

080050cc <ADC_MEASUREMENT_1_queue_config>:
	...

080050d8 <ADC_MEASUREMENT_1_queue_handle>:
	...
 80050ec:	080050cc 00000001                       .P......

080050f4 <ADC_MEASUREMENT_1_V1_1_queue_entry_0>:
 80050f4:	00000020                                 ...

080050f8 <ADC_MEASUREMENT_1_V1_2_queue_entry_1>:
 80050f8:	00000023                                #...

080050fc <ADC_MEASUREMENT_1_V1_3_queue_entry_2>:
 80050fc:	00000025                                %...

08005100 <ADC_MEASUREMENT_1_V1_4_queue_entry_3>:
 8005100:	00000027                                '...

08005104 <ADC_MEASUREMENT_1>:
 8005104:	20000170 20000160 00000000 080050d8     p.. `.. .....P..
 8005114:	20000180 04040003 00000001              ... ........

08005120 <ADC_MEASUREMENT_2_V2_1_ch_config>:
 8005120:	00200000 00000000 0000ff01              .. .........

0800512c <ADC_MEASUREMENT_2_V2_1_res_config>:
 800512c:	00000000                                ....

08005130 <ADC_MEASUREMENT_2_V2_1_handle>:
 8005130:	08005120 0800512c 00000501               Q..,Q......

0800513c <ADC_MEASUREMENT_2_V2_2_ch_config>:
 800513c:	002f0000 00000000 0000ff01              ../.........

08005148 <ADC_MEASUREMENT_2_V2_2_res_config>:
 8005148:	00000000                                ....

0800514c <ADC_MEASUREMENT_2_V2_2_handle>:
 800514c:	0800513c 08005148 00000701              <Q..HQ......

08005158 <ADC_MEASUREMENT_2_V2_3_ch_config>:
 8005158:	00230000 00000000 0000ff01              ..#.........

08005164 <ADC_MEASUREMENT_2_V2_3_res_config>:
 8005164:	00000000                                ....

08005168 <ADC_MEASUREMENT_2_V2_3_handle>:
 8005168:	08005158 08005164 00000601              XQ..dQ......

08005174 <ADC_MEASUREMENT_2_queue_config>:
	...

08005180 <ADC_MEASUREMENT_2_queue_handle>:
	...
 8005194:	08005174 00000001                       tQ......

0800519c <ADC_MEASUREMENT_2_V2_1_queue_entry_0>:
 800519c:	00000025                                %...

080051a0 <ADC_MEASUREMENT_2_V2_2_queue_entry_1>:
 80051a0:	00000027                                '...

080051a4 <ADC_MEASUREMENT_2_V2_3_queue_entry_2>:
 80051a4:	00000026                                &...

080051a8 <ADC_MEASUREMENT_2>:
 80051a8:	20000190 20000184 00000000 08005180     ... ... .....Q..
 80051b8:	2000019c 03030103 00000001              ... ........
